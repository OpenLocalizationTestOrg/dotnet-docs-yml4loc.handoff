{"nodes":[{"content":"Stores serialized information from <xref href=\"System.Net.EndPoint\"></xref> derived classes.","nodes":[{"pos":[0,92],"content":"Stores serialized information from <ph id=\"ph1\">&lt;xref href=\"System.Net.EndPoint\"&gt;&lt;/xref&gt;</ph> derived classes.","source":"Stores serialized information from <xref href=\"System.Net.EndPoint\"></xref> derived classes."}],"pos":[764,857],"yaml":true},{"content":"The first 2 bytes of the underlying buffer are reserved for the <xref:System.Net.Sockets.AddressFamily> enumerated value. When the <xref:System.Net.SocketAddress> is used to store a serialized <xref:System.Net.IPEndPoint>, the third and fourth bytes are used to store port number information. The next bytes are used to store the IP address. You can access any information within this underlying byte buffer by referring to its index position; the byte buffer uses zero-based indexing. You can also use the <xref:System.Net.SocketAddress.Family%2A> and <xref:System.Net.SocketAddress.Size%2A> properties to get the <xref:System.Net.Sockets.AddressFamily> value and the buffer size, respectively. To view any of this information as a string, use the <xref:System.Net.SocketAddress.ToString%2A> method.","nodes":[{"pos":[0,800],"content":"The first 2 bytes of the underlying buffer are reserved for the <xref:System.Net.Sockets.AddressFamily> enumerated value. When the <xref:System.Net.SocketAddress> is used to store a serialized <xref:System.Net.IPEndPoint>, the third and fourth bytes are used to store port number information. The next bytes are used to store the IP address. You can access any information within this underlying byte buffer by referring to its index position; the byte buffer uses zero-based indexing. You can also use the <xref:System.Net.SocketAddress.Family%2A> and <xref:System.Net.SocketAddress.Size%2A> properties to get the <xref:System.Net.Sockets.AddressFamily> value and the buffer size, respectively. To view any of this information as a string, use the <xref:System.Net.SocketAddress.ToString%2A> method.","nodes":[{"content":"The first 2 bytes of the underlying buffer are reserved for the <xref:System.Net.Sockets.AddressFamily> enumerated value. When the <xref:System.Net.SocketAddress> is used to store a serialized <xref:System.Net.IPEndPoint>, the third and fourth bytes are used to store port number information. The next bytes are used to store the IP address. You can access any information within this underlying byte buffer by referring to its index position; the byte buffer uses zero-based indexing. You can also use the <xref:System.Net.SocketAddress.Family%2A> and <xref:System.Net.SocketAddress.Size%2A> properties to get the <xref:System.Net.Sockets.AddressFamily> value and the buffer size, respectively. To view any of this information as a string, use the <xref:System.Net.SocketAddress.ToString%2A> method.","pos":[0,800],"nodes":[{"content":"The first 2 bytes of the underlying buffer are reserved for the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> enumerated value.","pos":[0,121],"source":"The first 2 bytes of the underlying buffer are reserved for the <xref:System.Net.Sockets.AddressFamily> enumerated value."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress&gt;</ph> is used to store a serialized <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint&gt;</ph>, the third and fourth bytes are used to store port number information.","pos":[122,292],"source":" When the <xref:System.Net.SocketAddress> is used to store a serialized <xref:System.Net.IPEndPoint>, the third and fourth bytes are used to store port number information."},{"content":"The next bytes are used to store the IP address.","pos":[293,341]},{"content":"You can access any information within this underlying byte buffer by referring to its index position; the byte buffer uses zero-based indexing.","pos":[342,485]},{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress.Family%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.SocketAddress.Size%2A&gt;</ph> properties to get the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> value and the buffer size, respectively.","pos":[486,695],"source":" You can also use the <xref:System.Net.SocketAddress.Family%2A> and <xref:System.Net.SocketAddress.Size%2A> properties to get the <xref:System.Net.Sockets.AddressFamily> value and the buffer size, respectively."},{"content":"To view any of this information as a string, use the <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> method.","pos":[696,800],"source":" To view any of this information as a string, use the <xref:System.Net.SocketAddress.ToString%2A> method."}]}]}],"pos":[868,1669],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Net.SocketAddress\"></xref> class for the given address family.","nodes":[{"pos":[0,111],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.SocketAddress\"&gt;&lt;/xref&gt;</ph> class for the given address family.","source":"Creates a new instance of the <xref href=\"System.Net.SocketAddress\"></xref> class for the given address family."}],"pos":[4081,4193],"yaml":true},{"content":"This overload sets the underlying buffer size to 32 bytes.","nodes":[{"pos":[0,58],"content":"This overload sets the underlying buffer size to 32 bytes.","nodes":[{"content":"This overload sets the underlying buffer size to 32 bytes.","pos":[0,58]}]}],"pos":[4204,4263],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value.","nodes":[{"pos":[0,74],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> enumerated value.","source":"An <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value."}],"pos":[4447,4522],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Net.SocketAddress\"></xref> class using the specified address family and buffer size.","nodes":[{"pos":[0,133],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.SocketAddress\"&gt;&lt;/xref&gt;</ph> class using the specified address family and buffer size.","source":"Creates a new instance of the <xref href=\"System.Net.SocketAddress\"></xref> class using the specified address family and buffer size."}],"pos":[6016,6150],"yaml":true},{"content":"Use this overload to create a new instance of the <xref:System.Net.SocketAddress> class with a particular underlying buffer size.","nodes":[{"pos":[0,129],"content":"Use this overload to create a new instance of the <xref:System.Net.SocketAddress> class with a particular underlying buffer size.","nodes":[{"content":"Use this overload to create a new instance of the <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress&gt;</ph> class with a particular underlying buffer size.","pos":[0,129],"source":"Use this overload to create a new instance of the <xref:System.Net.SocketAddress> class with a particular underlying buffer size."}]}],"pos":[6161,6291],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value.","nodes":[{"pos":[0,74],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> enumerated value.","source":"An <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value."}],"pos":[6485,6560],"yaml":true},{"content":"The number of bytes to allocate for the underlying buffer.","nodes":[{"pos":[0,58],"content":"The number of bytes to allocate for the underlying buffer.","nodes":[{"content":"The number of bytes to allocate for the underlying buffer.","pos":[0,58]}]}],"pos":[6619,6678],"yaml":true},{"content":"<code>size</code> is less than 2. These 2 bytes are needed to store <code>family</code>.","nodes":[{"pos":[0,88],"content":"<code>size</code> is less than 2. These 2 bytes are needed to store <code>family</code>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;size&lt;/code&gt;</ph> is less than 2.","pos":[0,33],"source":"<code>size</code> is less than 2."},{"content":"These 2 bytes are needed to store <ph id=\"ph1\">&lt;code&gt;family&lt;/code&gt;</ph>.","pos":[34,88],"source":" These 2 bytes are needed to store <code>family</code>."}]}],"pos":[6850,6939],"yaml":true},{"content":"Determines whether the specified `Object` is equal to the current `Object`.","nodes":[{"pos":[0,75],"content":"Determines whether the specified <ph id=\"ph1\">`Object`</ph> is equal to the current <ph id=\"ph2\">`Object`</ph>.","source":"Determines whether the specified `Object` is equal to the current `Object`."}],"pos":[8209,8285],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> to compare with the current `Object`.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to compare with the current <ph id=\"ph2\">`Object`</ph>.","source":"The <xref href=\"System.Object\"></xref> to compare with the current `Object`."}],"pos":[8437,8514],"yaml":true},{"content":"`true` if the specified `Object` is equal to the current `Object`; otherwise, `false`.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">`Object`</ph> is equal to the current <ph id=\"ph3\">`Object`</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the specified `Object` is equal to the current `Object`; otherwise, `false`."}],"pos":[8572,8661],"yaml":true},{"content":"Gets the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value of the current <xref href=\"System.Net.SocketAddress\"></xref>.","nodes":[{"pos":[0,141],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> enumerated value of the current <ph id=\"ph2\">&lt;xref href=\"System.Net.SocketAddress\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value of the current <xref href=\"System.Net.SocketAddress\"></xref>."}],"pos":[9926,10068],"yaml":true},{"content":"This method gets the <xref:System.Net.Sockets.AddressFamily> enumerated value that represents the addressing scheme of the current <xref:System.Net.SocketAddress>. If you want to view the corresponding string representation of <xref:System.Net.Sockets.AddressFamily>, use the <xref:System.Net.SocketAddress.ToString%2A> method.","nodes":[{"pos":[0,327],"content":"This method gets the <xref:System.Net.Sockets.AddressFamily> enumerated value that represents the addressing scheme of the current <xref:System.Net.SocketAddress>. If you want to view the corresponding string representation of <xref:System.Net.Sockets.AddressFamily>, use the <xref:System.Net.SocketAddress.ToString%2A> method.","nodes":[{"content":"This method gets the <xref:System.Net.Sockets.AddressFamily> enumerated value that represents the addressing scheme of the current <xref:System.Net.SocketAddress>. If you want to view the corresponding string representation of <xref:System.Net.Sockets.AddressFamily>, use the <xref:System.Net.SocketAddress.ToString%2A> method.","pos":[0,327],"nodes":[{"content":"This method gets the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> enumerated value that represents the addressing scheme of the current <ph id=\"ph2\">&lt;xref:System.Net.SocketAddress&gt;</ph>.","pos":[0,163],"source":"This method gets the <xref:System.Net.Sockets.AddressFamily> enumerated value that represents the addressing scheme of the current <xref:System.Net.SocketAddress>."},{"content":"If you want to view the corresponding string representation of <ph id=\"ph1\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> method.","pos":[164,327],"source":" If you want to view the corresponding string representation of <xref:System.Net.Sockets.AddressFamily>, use the <xref:System.Net.SocketAddress.ToString%2A> method."}]}]}],"pos":[10079,10407],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated values.","nodes":[{"pos":[0,83],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> enumerated values.","source":"One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated values."}],"pos":[10562,10646],"yaml":true},{"content":"Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.","nodes":[{"pos":[0,126],"content":"Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.","nodes":[{"content":"Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.","pos":[0,126]}]}],"pos":[11945,12072],"yaml":true},{"content":"A hash code for the current <xref href=\"System.Object\"></xref>.","nodes":[{"pos":[0,63],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the current <xref href=\"System.Object\"></xref>."}],"pos":[12206,12270],"yaml":true},{"content":"Gets or sets the specified index element in the underlying buffer.","nodes":[{"pos":[0,66],"content":"Gets or sets the specified index element in the underlying buffer.","nodes":[{"content":"Gets or sets the specified index element in the underlying buffer.","pos":[0,66]}]}],"pos":[13591,13658],"yaml":true},{"content":"This property gets or sets the specified byte position in the underlying buffer.  \n  \n> [!NOTE]\n>  Be sure to call <xref:System.Net.SocketAddress.Size%2A> before referring to elements in the underlying buffer. Referring to an index that does not exist will cause the <xref:System.Net.SocketAddress> to throw an <xref:System.IndexOutOfRangeException>.","nodes":[{"pos":[0,80],"content":"This property gets or sets the specified byte position in the underlying buffer.","nodes":[{"content":"This property gets or sets the specified byte position in the underlying buffer.","pos":[0,80]}]},{"pos":[88,350],"content":"[!NOTE]\n Be sure to call <xref:System.Net.SocketAddress.Size%2A> before referring to elements in the underlying buffer. Referring to an index that does not exist will cause the <xref:System.Net.SocketAddress> to throw an <xref:System.IndexOutOfRangeException>.","leadings":["","> "],"nodes":[{"content":" Be sure to call <xref:System.Net.SocketAddress.Size%2A> before referring to elements in the underlying buffer. Referring to an index that does not exist will cause the <xref:System.Net.SocketAddress> to throw an <xref:System.IndexOutOfRangeException>.","pos":[8,260],"nodes":[{"content":"Be sure to call <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress.Size%2A&gt;</ph> before referring to elements in the underlying buffer.","pos":[1,111],"source":" Be sure to call <xref:System.Net.SocketAddress.Size%2A> before referring to elements in the underlying buffer."},{"content":"Referring to an index that does not exist will cause the <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress&gt;</ph> to throw an <ph id=\"ph2\">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.","pos":[112,252],"source":" Referring to an index that does not exist will cause the <xref:System.Net.SocketAddress> to throw an <xref:System.IndexOutOfRangeException>."}]}]}],"pos":[13669,14025],"yaml":true,"extradata":"MT"},{"content":"The array index element of the desired information.","nodes":[{"pos":[0,51],"content":"The array index element of the desired information.","nodes":[{"content":"The array index element of the desired information.","pos":[0,51]}]}],"pos":[14168,14220],"yaml":true},{"content":"The value of the specified index element in the underlying buffer.","nodes":[{"pos":[0,66],"content":"The value of the specified index element in the underlying buffer.","nodes":[{"content":"The value of the specified index element in the underlying buffer.","pos":[0,66]}]}],"pos":[14275,14342],"yaml":true},{"content":"The specified index does not exist in the buffer.","nodes":[{"pos":[0,49],"content":"The specified index does not exist in the buffer.","nodes":[{"content":"The specified index does not exist in the buffer.","pos":[0,49]}]}],"pos":[14507,14557],"yaml":true},{"content":"Gets the underlying buffer size of the <xref href=\"System.Net.SocketAddress\"></xref>.","nodes":[{"pos":[0,85],"content":"Gets the underlying buffer size of the <ph id=\"ph1\">&lt;xref href=\"System.Net.SocketAddress\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the underlying buffer size of the <xref href=\"System.Net.SocketAddress\"></xref>."}],"pos":[15748,15834],"yaml":true},{"content":"This property gets the underlying buffer size of the <xref:System.Net.SocketAddress> in bytes.","nodes":[{"pos":[0,94],"content":"This property gets the underlying buffer size of the <xref:System.Net.SocketAddress> in bytes.","nodes":[{"content":"This property gets the underlying buffer size of the <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress&gt;</ph> in bytes.","pos":[0,94],"source":"This property gets the underlying buffer size of the <xref:System.Net.SocketAddress> in bytes."}]}],"pos":[15845,15940],"yaml":true,"extradata":"MT"},{"content":"The underlying buffer size of the <xref href=\"System.Net.SocketAddress\"></xref>.","nodes":[{"pos":[0,80],"content":"The underlying buffer size of the <ph id=\"ph1\">&lt;xref href=\"System.Net.SocketAddress\"&gt;&lt;/xref&gt;</ph>.","source":"The underlying buffer size of the <xref href=\"System.Net.SocketAddress\"></xref>."}],"pos":[16044,16125],"yaml":true},{"content":"Returns information about the socket address.","nodes":[{"pos":[0,45],"content":"Returns information about the socket address.","nodes":[{"content":"Returns information about the socket address.","pos":[0,45]}]}],"pos":[17404,17450],"yaml":true},{"content":"The <xref:System.Net.SocketAddress.ToString%2A> method returns a string that contains the <xref:System.Net.Sockets.AddressFamily> enumerated value, the size of the underlying buffer of the <xref:System.Net.SocketAddress> structure, and the remaining contents of the buffer.","nodes":[{"pos":[0,273],"content":"The <xref:System.Net.SocketAddress.ToString%2A> method returns a string that contains the <xref:System.Net.Sockets.AddressFamily> enumerated value, the size of the underlying buffer of the <xref:System.Net.SocketAddress> structure, and the remaining contents of the buffer.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> method returns a string that contains the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> enumerated value, the size of the underlying buffer of the <ph id=\"ph3\">&lt;xref:System.Net.SocketAddress&gt;</ph> structure, and the remaining contents of the buffer.","pos":[0,273],"source":"The <xref:System.Net.SocketAddress.ToString%2A> method returns a string that contains the <xref:System.Net.Sockets.AddressFamily> enumerated value, the size of the underlying buffer of the <xref:System.Net.SocketAddress> structure, and the remaining contents of the buffer."}]}],"pos":[17461,17735],"yaml":true,"extradata":"MT"},{"content":"A string that contains information about the <xref href=\"System.Net.SocketAddress\"></xref>.","nodes":[{"pos":[0,91],"content":"A string that contains information about the <ph id=\"ph1\">&lt;xref href=\"System.Net.SocketAddress\"&gt;&lt;/xref&gt;</ph>.","source":"A string that contains information about the <xref href=\"System.Net.SocketAddress\"></xref>."}],"pos":[17870,17962],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.SocketAddress\n  commentId: T:System.Net.SocketAddress\n  id: SocketAddress\n  children:\n  - System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)\n  - System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)\n  - System.Net.SocketAddress.Equals(System.Object)\n  - System.Net.SocketAddress.Family\n  - System.Net.SocketAddress.GetHashCode\n  - System.Net.SocketAddress.Item(System.Int32)\n  - System.Net.SocketAddress.Size\n  - System.Net.SocketAddress.ToString\n  langs:\n  - csharp\n  name: SocketAddress\n  nameWithType: SocketAddress\n  fullName: System.Net.SocketAddress\n  type: Class\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Stores serialized information from <xref href=\"System.Net.EndPoint\"></xref> derived classes.\n  remarks: The first 2 bytes of the underlying buffer are reserved for the <xref:System.Net.Sockets.AddressFamily> enumerated value. When the <xref:System.Net.SocketAddress> is used to store a serialized <xref:System.Net.IPEndPoint>, the third and fourth bytes are used to store port number information. The next bytes are used to store the IP address. You can access any information within this underlying byte buffer by referring to its index position; the byte buffer uses zero-based indexing. You can also use the <xref:System.Net.SocketAddress.Family%2A> and <xref:System.Net.SocketAddress.Size%2A> properties to get the <xref:System.Net.Sockets.AddressFamily> value and the buffer size, respectively. To view any of this information as a string, use the <xref:System.Net.SocketAddress.ToString%2A> method.\n  example:\n  - \"The following example demonstrates how to use <xref:System.Net.SocketAddress> to serialize an instance of the <xref:System.Net.EndPoint> class. After serialization, the underlying byte buffer of the <xref:System.Net.SocketAddress> contains all of the <xref:System.Net.IPEndPoint> state information.  \\n  \\n [!code-cpp[Classic SocketAddressExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SocketAddressExample/CPP/source.cpp#1)]\\n [!code-csharp[Classic SocketAddressExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SocketAddressExample/CS/source.cs#1)]\\n [!code-vb[Classic SocketAddressExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SocketAddressExample/VB/source.vb#1)]\"\n  syntax:\n    content: public class SocketAddress\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Net.Sockets.AddressFamily)'\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: SocketAddress(AddressFamily)\n  nameWithType: SocketAddress.SocketAddress(AddressFamily)\n  fullName: SocketAddress.SocketAddress(AddressFamily)\n  type: Constructor\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Creates a new instance of the <xref href=\"System.Net.SocketAddress\"></xref> class for the given address family.\n  remarks: This overload sets the underlying buffer size to 32 bytes.\n  syntax:\n    content: public SocketAddress (System.Net.Sockets.AddressFamily family);\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: An <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value.\n  overload: System.Net.SocketAddress.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)\n  commentId: M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)\n  id: '#ctor(System.Net.Sockets.AddressFamily,System.Int32)'\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: SocketAddress(AddressFamily, Int32)\n  nameWithType: SocketAddress.SocketAddress(AddressFamily, Int32)\n  fullName: SocketAddress.SocketAddress(AddressFamily, Int32)\n  type: Constructor\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Creates a new instance of the <xref href=\"System.Net.SocketAddress\"></xref> class using the specified address family and buffer size.\n  remarks: Use this overload to create a new instance of the <xref:System.Net.SocketAddress> class with a particular underlying buffer size.\n  syntax:\n    content: public SocketAddress (System.Net.Sockets.AddressFamily family, int size);\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: An <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value.\n    - id: size\n      type: System.Int32\n      description: The number of bytes to allocate for the underlying buffer.\n  overload: System.Net.SocketAddress.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>size</code> is less than 2. These 2 bytes are needed to store <code>family</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.Equals(System.Object)\n  commentId: M:System.Net.SocketAddress.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: SocketAddress.Equals(Object)\n  fullName: SocketAddress.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Determines whether the specified `Object` is equal to the current `Object`.\n  syntax:\n    content: public override bool Equals (object comparand);\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to compare with the current `Object`.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified `Object` is equal to the current `Object`; otherwise, `false`.'\n  overload: System.Net.SocketAddress.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.Family\n  commentId: P:System.Net.SocketAddress.Family\n  id: Family\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: Family\n  nameWithType: SocketAddress.Family\n  fullName: SocketAddress.Family\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated value of the current <xref href=\"System.Net.SocketAddress\"></xref>.\n  remarks: This method gets the <xref:System.Net.Sockets.AddressFamily> enumerated value that represents the addressing scheme of the current <xref:System.Net.SocketAddress>. If you want to view the corresponding string representation of <xref:System.Net.Sockets.AddressFamily>, use the <xref:System.Net.SocketAddress.ToString%2A> method.\n  syntax:\n    content: public System.Net.Sockets.AddressFamily Family { get; }\n    return:\n      type: System.Net.Sockets.AddressFamily\n      description: One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> enumerated values.\n  overload: System.Net.SocketAddress.Family*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.GetHashCode\n  commentId: M:System.Net.SocketAddress.GetHashCode\n  id: GetHashCode\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: SocketAddress.GetHashCode()\n  fullName: SocketAddress.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Object\"></xref>.\n  overload: System.Net.SocketAddress.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.Item(System.Int32)\n  commentId: P:System.Net.SocketAddress.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: SocketAddress.Item(Int32)\n  fullName: SocketAddress.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets or sets the specified index element in the underlying buffer.\n  remarks: \"This property gets or sets the specified byte position in the underlying buffer.  \\n  \\n> [!NOTE]\\n>  Be sure to call <xref:System.Net.SocketAddress.Size%2A> before referring to elements in the underlying buffer. Referring to an index that does not exist will cause the <xref:System.Net.SocketAddress> to throw an <xref:System.IndexOutOfRangeException>.\"\n  syntax:\n    content: public byte this[int offset] { get; set; }\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: The array index element of the desired information.\n    return:\n      type: System.Byte\n      description: The value of the specified index element in the underlying buffer.\n  overload: System.Net.SocketAddress.Item*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The specified index does not exist in the buffer.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.Size\n  commentId: P:System.Net.SocketAddress.Size\n  id: Size\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: Size\n  nameWithType: SocketAddress.Size\n  fullName: SocketAddress.Size\n  type: Property\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets the underlying buffer size of the <xref href=\"System.Net.SocketAddress\"></xref>.\n  remarks: This property gets the underlying buffer size of the <xref:System.Net.SocketAddress> in bytes.\n  syntax:\n    content: public int Size { get; }\n    return:\n      type: System.Int32\n      description: The underlying buffer size of the <xref href=\"System.Net.SocketAddress\"></xref>.\n  overload: System.Net.SocketAddress.Size*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.SocketAddress.ToString\n  commentId: M:System.Net.SocketAddress.ToString\n  id: ToString\n  parent: System.Net.SocketAddress\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: SocketAddress.ToString()\n  fullName: SocketAddress.ToString()\n  type: Method\n  assemblies:\n  - System.Net.Primitives\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Returns information about the socket address.\n  remarks: The <xref:System.Net.SocketAddress.ToString%2A> method returns a string that contains the <xref:System.Net.Sockets.AddressFamily> enumerated value, the size of the underlying buffer of the <xref:System.Net.SocketAddress> structure, and the remaining contents of the buffer.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that contains information about the <xref href=\"System.Net.SocketAddress\"></xref>.\n  overload: System.Net.SocketAddress.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: SocketAddress(AddressFamily)\n  nameWithType: SocketAddress.SocketAddress(AddressFamily)\n  fullName: SocketAddress.SocketAddress(AddressFamily)\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  nameWithType: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n- uid: System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: SocketAddress(AddressFamily, Int32)\n  nameWithType: SocketAddress.SocketAddress(AddressFamily, Int32)\n  fullName: SocketAddress.SocketAddress(AddressFamily, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.SocketAddress.Equals(System.Object)\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: SocketAddress.Equals(Object)\n  fullName: SocketAddress.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.SocketAddress.Family\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Family\n  nameWithType: SocketAddress.Family\n  fullName: SocketAddress.Family\n- uid: System.Net.SocketAddress.GetHashCode\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: SocketAddress.GetHashCode()\n  fullName: SocketAddress.GetHashCode()\n- uid: System.Net.SocketAddress.Item(System.Int32)\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: SocketAddress.Item(Int32)\n  fullName: SocketAddress.Item(Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Net.SocketAddress.Size\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Size\n  nameWithType: SocketAddress.Size\n  fullName: SocketAddress.Size\n- uid: System.Net.SocketAddress.ToString\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: ToString()\n  nameWithType: SocketAddress.ToString()\n  fullName: SocketAddress.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.SocketAddress.#ctor*\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: SocketAddress\n  nameWithType: SocketAddress.SocketAddress\n  fullName: SocketAddress.SocketAddress\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n- uid: System.Net.SocketAddress.Equals*\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Equals\n  nameWithType: SocketAddress.Equals\n  fullName: SocketAddress.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n- uid: System.Net.SocketAddress.Family*\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Family\n  nameWithType: SocketAddress.Family\n  fullName: SocketAddress.Family\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n- uid: System.Net.SocketAddress.GetHashCode*\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: GetHashCode\n  nameWithType: SocketAddress.GetHashCode\n  fullName: SocketAddress.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n- uid: System.Net.SocketAddress.Item*\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Item\n  nameWithType: SocketAddress.Item\n  fullName: SocketAddress.Item\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n- uid: System.Net.SocketAddress.Size*\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: Size\n  nameWithType: SocketAddress.Size\n  fullName: SocketAddress.Size\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n- uid: System.Net.SocketAddress.ToString*\n  parent: System.Net.SocketAddress\n  isExternal: false\n  name: ToString\n  nameWithType: SocketAddress.ToString\n  fullName: SocketAddress.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/SocketAddress.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}