{"nodes":[{"content":"Provides client connections for TCP network services.","nodes":[{"pos":[0,53],"content":"Provides client connections for TCP network services.","nodes":[{"content":"Provides client connections for TCP network services.","pos":[0,53]}]}],"pos":[2323,2377],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient> class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.  \n  \n In order for <xref:System.Net.Sockets.TcpClient> to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests. You can connect to this listener in one of the following two ways:  \n  \n-   Create a <xref:System.Net.Sockets.TcpClient> and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.  \n  \n-   Create a <xref:System.Net.Sockets.TcpClient> using the host name and port number of the remote host. This constructor will automatically attempt a connection.  \n  \n> [!NOTE]\n>  If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class.","nodes":[{"pos":[0,165],"content":"The <xref:System.Net.Sockets.TcpClient> class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.","pos":[0,165],"source":"The <xref:System.Net.Sockets.TcpClient> class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode."}]},{"pos":[172,505],"content":"In order for <xref:System.Net.Sockets.TcpClient> to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests. You can connect to this listener in one of the following two ways:","nodes":[{"content":"In order for <xref:System.Net.Sockets.TcpClient> to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests. You can connect to this listener in one of the following two ways:","pos":[0,333],"nodes":[{"content":"In order for <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> to connect and exchange data, a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> created with the TCP <ph id=\"ph4\">&lt;xref:System.Net.Sockets.ProtocolType&gt;</ph> must be listening for incoming connection requests.","pos":[0,266],"source":"In order for <xref:System.Net.Sockets.TcpClient> to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests."},{"content":"You can connect to this listener in one of the following two ways:","pos":[267,333]}]}]},{"pos":[515,651],"content":"Create a <xref:System.Net.Sockets.TcpClient> and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.","nodes":[{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> and call one of the three available <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> methods.","pos":[0,136],"source":"Create a <xref:System.Net.Sockets.TcpClient> and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods."}]},{"pos":[661,819],"content":"Create a <xref:System.Net.Sockets.TcpClient> using the host name and port number of the remote host. This constructor will automatically attempt a connection.","nodes":[{"content":"Create a <xref:System.Net.Sockets.TcpClient> using the host name and port number of the remote host. This constructor will automatically attempt a connection.","pos":[0,158],"nodes":[{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> using the host name and port number of the remote host.","pos":[0,100],"source":"Create a <xref:System.Net.Sockets.TcpClient> using the host name and port number of the remote host."},{"content":"This constructor will automatically attempt a connection.","pos":[101,158]}]}]},{"pos":[827,963],"content":"[!NOTE]\n If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class.","leadings":["","> "],"nodes":[{"content":"If you want to send connectionless datagrams in synchronous blocking mode, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> class.","pos":[9,134],"source":" If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class."}]}],"pos":[2388,3363],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class."}],"pos":[5563,5654],"yaml":true},{"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number. You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.  \n  \n> [!NOTE]\n>  This constructor works only with IPv4 address types.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,287],"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number. You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.","nodes":[{"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number. You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.","pos":[0,287],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> and allows the underlying service provider to assign the most appropriate local IP address and port number.","pos":[0,174],"source":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number."},{"content":"You must first call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method before sending and receiving data.","pos":[175,287],"source":" You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data."}]}]},{"pos":[295,358],"content":"[!NOTE]\n This constructor works only with IPv4 address types.","leadings":["","> "],"nodes":[{"content":"This constructor works only with IPv4 address types.","pos":[9,61]}]},{"pos":[366,591],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[5665,6265],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class and binds it to the specified local endpoint.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> class and binds it to the specified local endpoint.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class and binds it to the specified local endpoint."}],"pos":[8428,8564],"yaml":true},{"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number before connecting and communicating. If you create a <xref:System.Net.Sockets.TcpClient> using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.  \n  \n You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,599],"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number before connecting and communicating. If you create a <xref:System.Net.Sockets.TcpClient> using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.","nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> and binds it to the <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint&gt;</ph> specified by the <ph id=\"ph3\">`localEP`</ph> parameter.","pos":[0,153],"source":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter."},{"content":"Before you call this constructor, you must create an <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the IP address and port number from which you intend to send and receive data.","pos":[154,320],"source":" Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data."},{"content":"You do not need to specify a local IP address and port number before connecting and communicating.","pos":[321,419]},{"content":"If you create a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.","pos":[420,599],"source":" If you create a <xref:System.Net.Sockets.TcpClient> using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number."}]},{"pos":[606,712],"content":"You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.","nodes":[{"content":"You must call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method before sending and receiving data.","pos":[0,106],"source":"You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data."}]},{"pos":[720,945],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[8575,9528],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPEndPoint\"></xref> to which you bind the TCP <xref href=\"System.Net.Sockets.Socket\"></xref>.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPEndPoint\"&gt;&lt;/xref&gt;</ph> to which you bind the TCP <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Net.IPEndPoint\"></xref> to which you bind the TCP <xref href=\"System.Net.Sockets.Socket\"></xref>."}],"pos":[10402,10523],"yaml":true},{"content":"The  <code>localEP</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The  <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localEP</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The  <code>localEP</code> parameter is `null`."}],"pos":[10687,10734],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class with the specified family.","nodes":[{"pos":[0,116],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> class with the specified family.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class with the specified family."}],"pos":[11924,12041],"yaml":true},{"content":"> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[2,227],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[12052,12292],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress.AddressFamily\"></xref> of the IP protocol.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress.AddressFamily\"&gt;&lt;/xref&gt;</ph> of the IP protocol.","source":"The <xref href=\"System.Net.IPAddress.AddressFamily\"></xref> of the IP protocol."}],"pos":[13169,13249],"yaml":true},{"content":"The <code>family</code> parameter is not equal to AddressFamily.InterNetwork  \n  \n -or-  \n  \n The <code>family</code> parameter is not equal to AddressFamily.InterNetworkV6","nodes":[{"pos":[0,76],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">family</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not equal to AddressFamily.InterNetwork","source":"The <code>family</code> parameter is not equal to AddressFamily.InterNetwork"},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">family</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not equal to AddressFamily.InterNetworkV6","source":"The <code>family</code> parameter is not equal to AddressFamily.InterNetworkV6"}],"pos":[13405,13584],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class and connects to the specified port on the specified host.","nodes":[{"pos":[0,147],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> class and connects to the specified port on the specified host.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class and connects to the specified port on the specified host."}],"pos":[14940,15088],"yaml":true},{"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number. The underlying service provider will assign the most appropriate local IP address and port number. <xref:System.Net.Sockets.TcpClient> will block until it either connects or fails. This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.  \n  \n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,439],"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number. The underlying service provider will assign the most appropriate local IP address and port number. <xref:System.Net.Sockets.TcpClient> will block until it either connects or fails. This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.","nodes":[{"content":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number. The underlying service provider will assign the most appropriate local IP address and port number. <xref:System.Net.Sockets.TcpClient> will block until it either connects or fails. This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.","pos":[0,439],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> and makes a synchronous connection attempt to the provided host name and port number.","pos":[0,152],"source":"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number."},{"content":"The underlying service provider will assign the most appropriate local IP address and port number.","pos":[153,251]},{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> will block until it either connects or fails.","pos":[252,333],"source":" <xref:System.Net.Sockets.TcpClient> will block until it either connects or fails."},{"content":"This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.","pos":[334,439]}]}]},{"pos":[446,843],"content":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","nodes":[{"content":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","pos":[0,397],"nodes":[{"content":"If IPv6 is enabled and the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29&gt;</ph> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.","pos":[0,273],"source":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address."},{"content":"This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","pos":[274,397]}]}]},{"pos":[851,1200],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,347],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,339]}]}]},{"pos":[1208,1433],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[15099,16543],"yaml":true,"extradata":"MT"},{"content":"The DNS name of the remote host to which you intend to connect.","nodes":[{"pos":[0,63],"content":"The DNS name of the remote host to which you intend to connect.","nodes":[{"content":"The DNS name of the remote host to which you intend to connect.","pos":[0,63]}]}],"pos":[17417,17481],"yaml":true},{"content":"The port number of the remote host to which you intend to connect.","nodes":[{"pos":[0,66],"content":"The port number of the remote host to which you intend to connect.","nodes":[{"content":"The port number of the remote host to which you intend to connect.","pos":[0,66]}]}],"pos":[17540,17607],"yaml":true},{"content":"The <code>hostname</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostname</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hostname</code> parameter is `null`."}],"pos":[17771,17818],"yaml":true},{"content":"The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,153],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">port</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[17932,18086],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[18200,18245],"yaml":true},{"content":"Gets or set a value that indicates whether a connection has been made.","nodes":[{"pos":[0,70],"content":"Gets or set a value that indicates whether a connection has been made.","nodes":[{"content":"Gets or set a value that indicates whether a connection has been made.","pos":[0,70]}]}],"pos":[19277,19348],"yaml":true},{"content":"Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded. It does not monitor the ongoing connection state of <xref:System.Net.Sockets.TcpClient>. If the remote host closes the connection, <xref:System.Net.Sockets.TcpClient.Active%2A> will not be updated. If you are deriving from <xref:System.Net.Sockets.TcpClient> and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> method.","nodes":[{"pos":[0,617],"content":"Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded. It does not monitor the ongoing connection state of <xref:System.Net.Sockets.TcpClient>. If the remote host closes the connection, <xref:System.Net.Sockets.TcpClient.Active%2A> will not be updated. If you are deriving from <xref:System.Net.Sockets.TcpClient> and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> method.","nodes":[{"content":"Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded. It does not monitor the ongoing connection state of <xref:System.Net.Sockets.TcpClient>. If the remote host closes the connection, <xref:System.Net.Sockets.TcpClient.Active%2A> will not be updated. If you are deriving from <xref:System.Net.Sockets.TcpClient> and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> method.","pos":[0,617],"nodes":[{"content":"Classes deriving from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> can use this property to determine if a connection attempt has succeeded.","pos":[0,131],"source":"Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded."},{"content":"It does not monitor the ongoing connection state of <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.","pos":[132,220],"source":" It does not monitor the ongoing connection state of <xref:System.Net.Sockets.TcpClient>."},{"content":"If the remote host closes the connection, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt;</ph> will not be updated.","pos":[221,329],"source":" If the remote host closes the connection, <xref:System.Net.Sockets.TcpClient.Active%2A> will not be updated."},{"content":"If you are deriving from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> and require closer attention to the connection state, use the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket.Connected%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned by the <ph id=\"ph4\">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph> method.","pos":[330,617],"source":" If you are deriving from <xref:System.Net.Sockets.TcpClient> and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> method."}]}]}],"pos":[19359,19977],"yaml":true,"extradata":"MT"},{"content":"`true` if the connection has been made; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if the connection has been made; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the connection has been made; otherwise, `false`."}],"pos":[20094,20156],"yaml":true},{"content":"Gets the amount of data that has been received from the network and is available to be read.","nodes":[{"pos":[0,92],"content":"Gets the amount of data that has been received from the network and is available to be read.","nodes":[{"content":"Gets the amount of data that has been received from the network and is available to be read.","pos":[0,92]}]}],"pos":[21456,21549],"yaml":true},{"content":"<xref:System.Net.Sockets.TcpClient.Available%2A> is a way to determine whether data is queued for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, <xref:System.Net.Sockets.TcpClient.Available%2A> returns 0.  \n  \n If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.TcpClient.Available%2A> may throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","nodes":[{"pos":[0,391],"content":"<xref:System.Net.Sockets.TcpClient.Available%2A> is a way to determine whether data is queued for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, <xref:System.Net.Sockets.TcpClient.Available%2A> returns 0.","nodes":[{"content":"<xref:System.Net.Sockets.TcpClient.Available%2A> is a way to determine whether data is queued for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, <xref:System.Net.Sockets.TcpClient.Available%2A> returns 0.","pos":[0,391],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Available%2A&gt;</ph> is a way to determine whether data is queued for reading.","pos":[0,106],"source":"<xref:System.Net.Sockets.TcpClient.Available%2A> is a way to determine whether data is queued for reading."},{"content":"If data is available, call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> to get the data.","pos":[107,198],"source":" If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data."},{"content":"The available data is the total amount of data queued in the network buffer for reading.","pos":[199,287]},{"content":"If no data is queued in the network buffer, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Available%2A&gt;</ph> returns 0.","pos":[288,391],"source":" If no data is queued in the network buffer, <xref:System.Net.Sockets.TcpClient.Available%2A> returns 0."}]}]},{"pos":[398,982],"content":"If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.TcpClient.Available%2A> may throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","nodes":[{"content":"If the remote host shuts down or closes the connection, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Available%2A&gt;</ph> may throw a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[0,159],"source":"If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.TcpClient.Available%2A> may throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[160,338],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept> for a detailed description of the error.","pos":[339,584],"source":" After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error."}]}],"pos":[21560,22547],"yaml":true,"extradata":"MT"},{"content":"The number of bytes of data received from the network and available to be read.","nodes":[{"pos":[0,79],"content":"The number of bytes of data received from the network and available to be read.","nodes":[{"content":"The number of bytes of data received from the network and available to be read.","pos":[0,79]}]}],"pos":[23080,23160],"yaml":true},{"content":"An error occurred when attempting to access the socket.","nodes":[{"pos":[0,55],"content":"An error occurred when attempting to access the socket.","nodes":[{"content":"An error occurred when attempting to access the socket.","pos":[0,55]}]}],"pos":[23340,23396],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[23502,23570],"yaml":true},{"content":"Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> and a port number (<xref href=\"System.Int32\"></xref>).","nodes":[{"pos":[0,192],"content":"Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> and a port number (<xref href=\"System.Int32\"></xref>).","nodes":[{"content":"Begins an asynchronous request for a remote host connection.","pos":[0,60]},{"content":"The remote host is specified by an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> and a port number (<ph id=\"ph2\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>).","pos":[61,192],"source":" The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> and a port number (<xref href=\"System.Int32\"></xref>)."}]}],"pos":[25153,25346],"yaml":true},{"content":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"pos":[0,235],"content":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.BeginConnect%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.EndConnect%2A&gt;</ph> method.","pos":[0,169],"source":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[170,235],"source":" Typically, the method is invoked by the `asyncCallback` delegate."}]},{"pos":[242,419],"content":"This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.","nodes":[{"content":"This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.","pos":[0,177],"nodes":[{"content":"This method does not block until the operation completes.","pos":[0,57]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method overloads.","pos":[58,177],"source":" To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads."}]}]},{"pos":[426,645],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}],"pos":[25357,26009],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> of the remote host.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the remote host.","source":"The <xref href=\"System.Net.IPAddress\"></xref> of the remote host."}],"pos":[26659,26725],"yaml":true},{"content":"The port number of the remote host.","nodes":[{"pos":[0,35],"content":"The port number of the remote host.","nodes":[{"content":"The port number of the remote host.","pos":[0,35]}]}],"pos":[26784,26820],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[26898,27021],"yaml":true},{"content":"A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,175],"content":"A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the connect operation.","pos":[0,76]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[77,175],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[27082,27258],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object that references the asynchronous connection.","source":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection."}],"pos":[27321,27417],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[27588,27634],"yaml":true},{"content":"An error occurred when attempting to access the socket.","nodes":[{"pos":[0,55],"content":"An error occurred when attempting to access the socket.","nodes":[{"content":"An error occurred when attempting to access the socket.","pos":[0,55]}]}],"pos":[27748,27804],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[27910,27978],"yaml":true},{"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"pos":[0,87],"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"content":"A caller higher in the call stack does not have permission for the requested operation.","pos":[0,87]}]}],"pos":[28090,28178],"yaml":true},{"content":"The port number is not valid.","nodes":[{"pos":[0,29],"content":"The port number is not valid.","nodes":[{"content":"The port number is not valid.","pos":[0,29]}]}],"pos":[28292,28322],"yaml":true},{"content":"Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> array and a port number (<xref href=\"System.Int32\"></xref>).","nodes":[{"pos":[0,198],"content":"Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> array and a port number (<xref href=\"System.Int32\"></xref>).","nodes":[{"content":"Begins an asynchronous request for a remote host connection.","pos":[0,60]},{"content":"The remote host is specified by an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> array and a port number (<ph id=\"ph2\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>).","pos":[61,198],"source":" The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> array and a port number (<xref href=\"System.Int32\"></xref>)."}]}],"pos":[29733,29932],"yaml":true},{"content":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \n  \n This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.","nodes":[{"pos":[0,235],"content":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.BeginConnect%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.EndConnect%2A&gt;</ph> method.","pos":[0,169],"source":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[170,235],"source":" Typically, the method is invoked by the `asyncCallback` delegate."}]},{"pos":[242,419],"content":"This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.","nodes":[{"content":"This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.","pos":[0,177],"nodes":[{"content":"This method does not block until the operation completes.","pos":[0,57]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method overloads.","pos":[58,177],"source":" To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads."}]}]},{"pos":[426,645],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."},{"pos":[652,826],"content":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.","nodes":[{"content":"This method is typically used immediately after a call to the <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> method, which can return multiple IP addresses for a single host.","pos":[0,174],"source":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host."}]}],"pos":[29943,30778],"yaml":true,"extradata":"MT"},{"content":"At least one <xref href=\"System.Net.IPAddress\"></xref> that designates the remote hosts.","nodes":[{"pos":[0,88],"content":"At least one <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> that designates the remote hosts.","source":"At least one <xref href=\"System.Net.IPAddress\"></xref> that designates the remote hosts."}],"pos":[31436,31525],"yaml":true},{"content":"The port number of the remote hosts.","nodes":[{"pos":[0,36],"content":"The port number of the remote hosts.","nodes":[{"content":"The port number of the remote hosts.","pos":[0,36]}]}],"pos":[31584,31621],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[31699,31822],"yaml":true},{"content":"A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,175],"content":"A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the connect operation.","pos":[0,76]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[77,175],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[31883,32059],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object that references the asynchronous connection.","source":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection."}],"pos":[32122,32218],"yaml":true},{"content":"The <code>addresses</code> parameter is `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">addresses</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>addresses</code> parameter is `null`."}],"pos":[32389,32437],"yaml":true},{"content":"An error occurred when attempting to access the socket.","nodes":[{"pos":[0,55],"content":"An error occurred when attempting to access the socket.","nodes":[{"content":"An error occurred when attempting to access the socket.","pos":[0,55]}]}],"pos":[32551,32607],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[32713,32781],"yaml":true},{"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"pos":[0,87],"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"content":"A caller higher in the call stack does not have permission for the requested operation.","pos":[0,87]}]}],"pos":[32893,32981],"yaml":true},{"content":"The port number is not valid.","nodes":[{"pos":[0,29],"content":"The port number is not valid.","nodes":[{"content":"The port number is not valid.","pos":[0,29]}]}],"pos":[33095,33125],"yaml":true},{"content":"Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<xref href=\"System.String\"></xref>) and a port number (<xref href=\"System.Int32\"></xref>).","nodes":[{"pos":[0,196],"content":"Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<xref href=\"System.String\"></xref>) and a port number (<xref href=\"System.Int32\"></xref>).","nodes":[{"content":"Begins an asynchronous request for a remote host connection.","pos":[0,60]},{"content":"The remote host is specified by a host name (<ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>) and a port number (<ph id=\"ph2\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>).","pos":[61,196],"source":" The remote host is specified by a host name (<xref href=\"System.String\"></xref>) and a port number (<xref href=\"System.Int32\"></xref>)."}]}],"pos":[34494,34691],"yaml":true},{"content":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"pos":[0,235],"content":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.BeginConnect%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.EndConnect%2A&gt;</ph> method.","pos":[0,169],"source":"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`asyncCallback`</ph> delegate.","pos":[170,235],"source":" Typically, the method is invoked by the `asyncCallback` delegate."}]},{"pos":[242,419],"content":"This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.","nodes":[{"content":"This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.","pos":[0,177],"nodes":[{"content":"This method does not block until the operation completes.","pos":[0,57]},{"content":"To block until the operation completes, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method overloads.","pos":[58,177],"source":" To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads."}]}]},{"pos":[426,645],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}],"pos":[34702,35354],"yaml":true,"extradata":"MT"},{"content":"The name of the remote host.","nodes":[{"pos":[0,28],"content":"The name of the remote host.","nodes":[{"content":"The name of the remote host.","pos":[0,28]}]}],"pos":[35977,36006],"yaml":true},{"content":"The port number of the remote host.","nodes":[{"pos":[0,35],"content":"The port number of the remote host.","nodes":[{"content":"The port number of the remote host.","pos":[0,35]}]}],"pos":[36065,36101],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[36179,36302],"yaml":true},{"content":"A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,175],"content":"A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the connect operation.","pos":[0,76]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[77,175],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[36363,36539],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection.","nodes":[{"pos":[0,95],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object that references the asynchronous connection.","source":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection."}],"pos":[36602,36698],"yaml":true},{"content":"The <code>host</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">host</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>host</code> parameter is `null`."}],"pos":[36869,36912],"yaml":true},{"content":"An error occurred when attempting to access the socket.","nodes":[{"pos":[0,55],"content":"An error occurred when attempting to access the socket.","nodes":[{"content":"An error occurred when attempting to access the socket.","pos":[0,55]}]}],"pos":[37026,37082],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[37188,37256],"yaml":true},{"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"pos":[0,87],"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"content":"A caller higher in the call stack does not have permission for the requested operation.","pos":[0,87]}]}],"pos":[37368,37456],"yaml":true},{"content":"The port number is not valid.","nodes":[{"pos":[0,29],"content":"The port number is not valid.","nodes":[{"content":"The port number is not valid.","pos":[0,29]}]}],"pos":[37570,37600],"yaml":true},{"content":"Gets or sets the underlying <xref href=\"System.Net.Sockets.Socket\"></xref>.","nodes":[{"pos":[0,75],"content":"Gets or sets the underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the underlying <xref href=\"System.Net.Sockets.Socket\"></xref>."}],"pos":[38632,38708],"yaml":true},{"content":"<xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.TcpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.TcpClient> provides. You can also use <xref:System.Net.Sockets.TcpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This might be useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.TcpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","nodes":[{"pos":[0,780],"content":"<xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.TcpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.TcpClient> provides. You can also use <xref:System.Net.Sockets.TcpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This might be useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.TcpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","nodes":[{"content":"<xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.TcpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.TcpClient> provides. You can also use <xref:System.Net.Sockets.TcpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This might be useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.TcpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","pos":[0,780],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> creates a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to send and receive data over a network.","pos":[0,119],"source":"<xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network."},{"content":"Classes deriving from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> can use this property to get or set this <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.","pos":[120,252],"source":" Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>."},{"content":"Use the underlying <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned from <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph> if you require access beyond that which <ph id=\"ph3\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> provides.","pos":[253,450],"source":" Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.TcpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.TcpClient> provides."},{"content":"You can also use <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph> to set the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to an existing <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.","pos":[451,617],"source":" You can also use <xref:System.Net.Sockets.TcpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>."},{"content":"This might be useful if you want to take advantage of the simplicity of <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> using a pre-existing <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.","pos":[618,780],"source":" This might be useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.TcpClient> using a pre-existing <xref:System.Net.Sockets.Socket>."}]}]}],"pos":[38719,39500],"yaml":true,"extradata":"MT"},{"content":"The underlying network <xref href=\"System.Net.Sockets.Socket\"></xref>.","nodes":[{"pos":[0,70],"content":"The underlying network <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph>.","source":"The underlying network <xref href=\"System.Net.Sockets.Socket\"></xref>."}],"pos":[40235,40306],"yaml":true},{"content":"Disposes this <xref href=\"System.Net.Sockets.TcpClient\"></xref> instance and requests that the underlying TCP connection be closed.","nodes":[{"pos":[0,131],"content":"Disposes this <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> instance and requests that the underlying TCP connection be closed.","source":"Disposes this <xref href=\"System.Net.Sockets.TcpClient\"></xref> instance and requests that the underlying TCP connection be closed."}],"pos":[41586,41718],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient.Close%2A> method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection. Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the <xref:System.Net.Sockets.TcpClient.Close%2A> method is called when data remains to be sent. There is no notification provided when the underlying connection has completed closing.  \n  \n Calling this method will eventually result in the close of the associated <xref:System.Net.Sockets.Socket> and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,489],"content":"The <xref:System.Net.Sockets.TcpClient.Close%2A> method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection. Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the <xref:System.Net.Sockets.TcpClient.Close%2A> method is called when data remains to be sent. There is no notification provided when the underlying connection has completed closing.","nodes":[{"content":"The <xref:System.Net.Sockets.TcpClient.Close%2A> method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection. Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the <xref:System.Net.Sockets.TcpClient.Close%2A> method is called when data remains to be sent. There is no notification provided when the underlying connection has completed closing.","pos":[0,489],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method marks the instance as disposed and requests that the associated <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> close the TCP connection.","pos":[0,178],"source":"The <xref:System.Net.Sockets.TcpClient.Close%2A> method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection."},{"content":"Based on the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.LingerState%2A&gt;</ph> property, the TCP connection may stay open for some time after the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method is called when data remains to be sent.","pos":[179,401],"source":" Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the <xref:System.Net.Sockets.TcpClient.Close%2A> method is called when data remains to be sent."},{"content":"There is no notification provided when the underlying connection has completed closing.","pos":[402,489]}]}]},{"pos":[496,735],"content":"Calling this method will eventually result in the close of the associated <xref:System.Net.Sockets.Socket> and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.","nodes":[{"content":"Calling this method will eventually result in the close of the associated <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and will also close the associated <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is used to send and receive data if one was created.","pos":[0,239],"source":"Calling this method will eventually result in the close of the associated <xref:System.Net.Sockets.Socket> and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created."}]},{"pos":[743,968],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[41729,42705],"yaml":true,"extradata":"MT"},{"content":"Connects the client to a remote TCP host using the specified remote network endpoint.","nodes":[{"pos":[0,85],"content":"Connects the client to a remote TCP host using the specified remote network endpoint.","nodes":[{"content":"Connects the client to a remote TCP host using the specified remote network endpoint.","pos":[0,85]}]}],"pos":[44388,44474],"yaml":true},{"content":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>. Before you call <xref:System.Net.Sockets.TcpClient.Connect%2A> you must create an instance of the <xref:System.Net.IPEndPoint> class using an IP address and a port number. Use this <xref:System.Net.IPEndPoint> as the `remoteEP` parameter. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)","nodes":[{"pos":[0,700],"content":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>. Before you call <xref:System.Net.Sockets.TcpClient.Connect%2A> you must create an instance of the <xref:System.Net.IPEndPoint> class using an IP address and a port number. Use this <xref:System.Net.IPEndPoint> as the `remoteEP` parameter. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph>.","pos":[0,113],"source":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>."},{"content":"Before you call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> you must create an instance of the <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint&gt;</ph> class using an IP address and a port number.","pos":[114,285],"source":" Before you call <xref:System.Net.Sockets.TcpClient.Connect%2A> you must create an instance of the <xref:System.Net.IPEndPoint> class using an IP address and a port number."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph> as the <ph id=\"ph2\">`remoteEP`</ph> parameter.","pos":[286,352],"source":" Use this <xref:System.Net.IPEndPoint> as the `remoteEP` parameter."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method will block until it either connects or fails.","pos":[353,456],"source":" The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails."},{"content":"After connecting with the remote host, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[457,625],"source":" After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to send and receive data.","pos":[626,700],"source":" Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data."}]},{"pos":[708,1057],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,347],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,339]}]}]},{"pos":[1065,1289],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)","pos":[8,222],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>","pos":[92,214],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)"}]}]}],"pos":[44485,45783],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPEndPoint\"></xref> to which you intend to connect.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPEndPoint\"&gt;&lt;/xref&gt;</ph> to which you intend to connect.","source":"The <xref href=\"System.Net.IPEndPoint\"></xref> to which you intend to connect."}],"pos":[46618,46697],"yaml":true},{"content":"The <code>remoteEp</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">remoteEp</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>remoteEp</code> parameter is `null`."}],"pos":[46863,46910],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[47024,47069],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed."}],"pos":[47175,47240],"yaml":true},{"content":"Connects the client to a remote TCP host using the specified IP address and port number.","nodes":[{"pos":[0,88],"content":"Connects the client to a remote TCP host using the specified IP address and port number.","nodes":[{"content":"Connects the client to a remote TCP host using the specified IP address and port number.","pos":[0,88]}]}],"pos":[48435,48524],"yaml":true},{"content":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,476],"content":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","pos":[0,476],"nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> and port number.","pos":[0,128],"source":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method will block until it either connects or fails.","pos":[129,232],"source":" The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails."},{"content":"After connecting with the remote host, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[233,401],"source":" After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to send and receive data.","pos":[402,476],"source":" Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data."}]}]},{"pos":[484,833],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,347],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,339]}]}]},{"pos":[841,1066],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[48535,49610],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> of the host to which you intend to connect.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the host to which you intend to connect.","source":"The <xref href=\"System.Net.IPAddress\"></xref> of the host to which you intend to connect."}],"pos":[50449,50539],"yaml":true},{"content":"The port number to which you intend to connect.","nodes":[{"pos":[0,47],"content":"The port number to which you intend to connect.","nodes":[{"content":"The port number to which you intend to connect.","pos":[0,47]}]}],"pos":[50598,50646],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[50812,50858],"yaml":true},{"content":"The <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,143],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">port</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[50972,51116],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[51230,51275],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed."}],"pos":[51381,51442],"yaml":true},{"content":"Connects the client to a remote TCP host using the specified IP addresses and port number.","nodes":[{"pos":[0,90],"content":"Connects the client to a remote TCP host using the specified IP addresses and port number.","nodes":[{"content":"Connects the client to a remote TCP host using the specified IP addresses and port number.","pos":[0,90]}]}],"pos":[52649,52740],"yaml":true},{"content":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,731],"content":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","nodes":[{"content":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","pos":[0,731],"nodes":[{"content":"This method is typically used immediately after a call to the <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> method, which can return multiple IP addresses for a single host.","pos":[0,174],"source":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host."},{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method to establish a synchronous remote host connection to the host specified by the array of <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph> elements and the port number.","pos":[175,383],"source":" Call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method will block until it either connects or fails.","pos":[384,487],"source":" The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails."},{"content":"After connecting with the remote host, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[488,656],"source":" After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to send and receive data.","pos":[657,731],"source":" Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data."}]}]},{"pos":[739,1174],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","pos":[8,433],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept> for a detailed description of the error.","pos":[180,425],"source":" After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error."}]}]},{"pos":[1182,1407],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[52751,54167],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> array of the host to which you intend to connect.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> array of the host to which you intend to connect.","source":"The <xref href=\"System.Net.IPAddress\"></xref> array of the host to which you intend to connect."}],"pos":[54760,54856],"yaml":true},{"content":"The port number to which you intend to connect.","nodes":[{"pos":[0,47],"content":"The port number to which you intend to connect.","nodes":[{"content":"The port number to which you intend to connect.","pos":[0,47]}]}],"pos":[54915,54963],"yaml":true},{"content":"The <code>ipAddresses</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">ipAddresses</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>ipAddresses</code> parameter is `null`."}],"pos":[55129,55179],"yaml":true},{"content":"The port number is not valid.","nodes":[{"pos":[0,29],"content":"The port number is not valid.","nodes":[{"content":"The port number is not valid.","pos":[0,29]}]}],"pos":[55293,55323],"yaml":true},{"content":"An error occurred when attempting to access the socket.","nodes":[{"pos":[0,55],"content":"An error occurred when attempting to access the socket.","nodes":[{"content":"An error occurred when attempting to access the socket.","pos":[0,55]}]}],"pos":[55437,55493],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[55599,55667],"yaml":true},{"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"pos":[0,87],"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"content":"A caller higher in the call stack does not have permission for the requested operation.","pos":[0,87]}]}],"pos":[55779,55867],"yaml":true},{"content":"This method is valid for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag.","nodes":[{"pos":[0,199],"content":"This method is valid for sockets that use the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"&gt;&lt;/xref&gt;</ph> flag or the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph> flag.","source":"This method is valid for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag."}],"pos":[55969,56169],"yaml":true},{"content":"Connects the client to the specified port on the specified host.","nodes":[{"pos":[0,64],"content":"Connects the client to the specified port on the specified host.","nodes":[{"content":"Connects the client to the specified port on the specified host.","pos":[0,64]}]}],"pos":[57334,57399],"yaml":true},{"content":"Call this method to establish a synchronous remote host connection to the specified host name and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,458],"content":"Call this method to establish a synchronous remote host connection to the specified host name and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified host name and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","pos":[0,458],"nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified host name and port number.","pos":[0,110]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method will block until it either connects or fails.","pos":[111,214],"source":" The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails."},{"content":"After connecting with the remote host, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[215,383],"source":" After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to send and receive data.","pos":[384,458],"source":" Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data."}]}]},{"pos":[465,862],"content":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","nodes":[{"content":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","pos":[0,397],"nodes":[{"content":"If IPv6 is enabled and the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29&gt;</ph> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.","pos":[0,273],"source":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address."},{"content":"This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","pos":[274,397]}]}]},{"pos":[870,1219],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,347],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,339]}]}]},{"pos":[1227,1452],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[57410,58873],"yaml":true,"extradata":"MT"},{"content":"The DNS name of the remote host to which you intend to connect.","nodes":[{"pos":[0,63],"content":"The DNS name of the remote host to which you intend to connect.","nodes":[{"content":"The DNS name of the remote host to which you intend to connect.","pos":[0,63]}]}],"pos":[59693,59757],"yaml":true},{"content":"The port number of the remote host to which you intend to connect.","nodes":[{"pos":[0,66],"content":"The port number of the remote host to which you intend to connect.","nodes":[{"content":"The port number of the remote host to which you intend to connect.","pos":[0,66]}]}],"pos":[59816,59883],"yaml":true},{"content":"The <code>hostname</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostname</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hostname</code> parameter is `null`."}],"pos":[60049,60096],"yaml":true},{"content":"The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,153],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">port</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[60210,60364],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[60478,60523],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed."}],"pos":[60629,60690],"yaml":true},{"content":"Connects the client to the specified TCP port on the specified host as an asynchronous operation.","nodes":[{"pos":[0,97],"content":"Connects the client to the specified TCP port on the specified host as an asynchronous operation.","nodes":[{"content":"Connects the client to the specified TCP port on the specified host as an asynchronous operation.","pos":[0,97]}]}],"pos":[61885,61983],"yaml":true},{"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \n  \n Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,242],"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.","nodes":[{"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.","pos":[0,242],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned Returns <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the TCP connection has been established.","pos":[31,154],"source":" The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established."},{"content":"This method does not block the calling thread while the connection request is underway.","pos":[155,242]}]}]},{"pos":[249,632],"content":"Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","pos":[0,383],"nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation.","pos":[0,139]},{"content":"After connecting with the remote host, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[140,308],"source":" After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to send and receive data.","pos":[309,383],"source":" Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data."}]}]},{"pos":[639,1041],"content":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","nodes":[{"content":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","pos":[0,402],"nodes":[{"content":"If IPv6 is enabled and the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29&gt;</ph> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.","pos":[0,278],"source":"If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address."},{"content":"This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.","pos":[279,402]}]}]},{"pos":[1049,1398],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,347],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,339]}]}]},{"pos":[1406,1631],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[61994,63638],"yaml":true,"extradata":"MT"},{"content":"The DNS name of the remote host to which you intend to connect.","nodes":[{"pos":[0,63],"content":"The DNS name of the remote host to which you intend to connect.","nodes":[{"content":"The DNS name of the remote host to which you intend to connect.","pos":[0,63]}]}],"pos":[63810,63874],"yaml":true},{"content":"The port number of the remote host to which you intend to connect.","nodes":[{"pos":[0,66],"content":"The port number of the remote host to which you intend to connect.","nodes":[{"content":"The port number of the remote host to which you intend to connect.","pos":[0,66]}]}],"pos":[63933,64000],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[64071,64197],"yaml":true},{"content":"The <code>hostname</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostname</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hostname</code> parameter is `null`."}],"pos":[64368,64415],"yaml":true},{"content":"The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,153],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">port</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[64529,64683],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[64797,64842],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed."}],"pos":[64948,65009],"yaml":true},{"content":"Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.","nodes":[{"pos":[0,117],"content":"Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.","nodes":[{"content":"Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.","pos":[0,117]}]}],"pos":[66418,66536],"yaml":true},{"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \n  \n Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,242],"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.","nodes":[{"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.","pos":[0,242],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned Returns <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the TCP connection has been established.","pos":[31,154],"source":" The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established."},{"content":"This method does not block the calling thread while the connection request is underway.","pos":[155,242]}]}]},{"pos":[249,650],"content":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","pos":[0,401],"nodes":[{"content":"Call this method to establish a synchronous remote host connection to the specified <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> and port number as an asynchronous operation.","pos":[0,157],"source":"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation."},{"content":"After connecting with the remote host, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[158,326],"source":" After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to send and receive data.","pos":[327,401],"source":" Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data."}]}]},{"pos":[658,1007],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,347],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,339]}]}]},{"pos":[1015,1240],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[66547,67798],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> of the host to which you intend to connect.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the host to which you intend to connect.","source":"The <xref href=\"System.Net.IPAddress\"></xref> of the host to which you intend to connect."}],"pos":[67997,68087],"yaml":true},{"content":"The port number to which you intend to connect.","nodes":[{"pos":[0,47],"content":"The port number to which you intend to connect.","nodes":[{"content":"The port number to which you intend to connect.","pos":[0,47]}]}],"pos":[68146,68194],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[68265,68391],"yaml":true},{"content":"The <code>address</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>address</code> parameter is `null`."}],"pos":[68562,68608],"yaml":true},{"content":"The <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,143],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">port</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[68722,68866],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[68980,69025],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"<xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed."}],"pos":[69131,69192],"yaml":true},{"content":"Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.","nodes":[{"pos":[0,119],"content":"Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.","nodes":[{"content":"Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.","pos":[0,119]}]}],"pos":[70613,70733],"yaml":true},{"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \n  \n This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,242],"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.","nodes":[{"content":"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.","pos":[0,242],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned Returns <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after the TCP connection has been established.","pos":[31,154],"source":" The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established."},{"content":"This method does not block the calling thread while the connection request is underway.","pos":[155,242]}]}]},{"pos":[249,859],"content":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","nodes":[{"content":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.","pos":[0,610],"nodes":[{"content":"This method is typically used immediately after a call to the <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> method, which can return multiple IP addresses for a single host.","pos":[0,174],"source":"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host."},{"content":"Call this method to establish a synchronous remote host connection to the host specified by the array of <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> elements and the port number as an asynchronous operation.","pos":[175,366],"source":" Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation."},{"content":"After connecting with the remote host, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[367,535],"source":" After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>."},{"content":"Use this <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to send and receive data.","pos":[536,610],"source":" Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data."}]}]},{"pos":[867,1302],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","pos":[8,433],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept> for a detailed description of the error.","pos":[180,425],"source":" After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error."}]}]},{"pos":[1310,1535],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[70744,72290],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> array of the host to which you intend to connect.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> array of the host to which you intend to connect.","source":"The <xref href=\"System.Net.IPAddress\"></xref> array of the host to which you intend to connect."}],"pos":[72497,72593],"yaml":true},{"content":"The port number to which you intend to connect.","nodes":[{"pos":[0,47],"content":"The port number to which you intend to connect.","nodes":[{"content":"The port number to which you intend to connect.","pos":[0,47]}]}],"pos":[72652,72700],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>","source":"Returns <xref href=\"System.Threading.Tasks.Task\"></xref>"},{"pos":[63,119],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[72771,72897],"yaml":true},{"content":"The <code>ipAddresses</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">ipAddresses</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>ipAddresses</code> parameter is `null`."}],"pos":[73068,73118],"yaml":true},{"content":"The port number is not valid.","nodes":[{"pos":[0,29],"content":"The port number is not valid.","nodes":[{"content":"The port number is not valid.","pos":[0,29]}]}],"pos":[73232,73262],"yaml":true},{"content":"An error occurred when attempting to access the socket.","nodes":[{"pos":[0,55],"content":"An error occurred when attempting to access the socket.","nodes":[{"content":"An error occurred when attempting to access the socket.","pos":[0,55]}]}],"pos":[73376,73432],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[73538,73606],"yaml":true},{"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"pos":[0,87],"content":"A caller higher in the call stack does not have permission for the requested operation.","nodes":[{"content":"A caller higher in the call stack does not have permission for the requested operation.","pos":[0,87]}]}],"pos":[73718,73806],"yaml":true},{"content":"This method is valid for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag.","nodes":[{"pos":[0,199],"content":"This method is valid for sockets that use the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"&gt;&lt;/xref&gt;</ph> flag or the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph> flag.","source":"This method is valid for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag."}],"pos":[73908,74108],"yaml":true},{"content":"Gets a value indicating whether the underlying <xref href=\"System.Net.Sockets.Socket\"></xref> for a <xref href=\"System.Net.Sockets.TcpClient\"></xref> is connected to a remote host.","nodes":[{"pos":[0,180],"content":"Gets a value indicating whether the underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> for a <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> is connected to a remote host.","source":"Gets a value indicating whether the underlying <xref href=\"System.Net.Sockets.Socket\"></xref> for a <xref href=\"System.Net.Sockets.TcpClient\"></xref> is connected to a remote host."}],"pos":[75342,75523],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient.Connected%2A> property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation. When it returns `false`, the <xref:System.Net.Sockets.TcpClient.Client%2A> socket was either never connected, or is no longer connected.  \n  \n Because the <xref:System.Net.Sockets.TcpClient.Connected%2A> property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state. After the message send fails, this property no longer returns `true`. Note that this behavior is by design. You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost. Your code should assume the socket is connected, and gracefully handle failed transmissions.","nodes":[{"pos":[0,314],"content":"The <xref:System.Net.Sockets.TcpClient.Connected%2A> property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation. When it returns `false`, the <xref:System.Net.Sockets.TcpClient.Client%2A> socket was either never connected, or is no longer connected.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connected%2A&gt;</ph> property gets the connection state of the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph> socket as of the last I/O operation.","pos":[0,177],"source":"The <xref:System.Net.Sockets.TcpClient.Connected%2A> property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation."},{"content":"When it returns <ph id=\"ph1\">`false`</ph>, the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph> socket was either never connected, or is no longer connected.","pos":[178,314],"source":" When it returns `false`, the <xref:System.Net.Sockets.TcpClient.Client%2A> socket was either never connected, or is no longer connected."}]},{"pos":[321,894],"content":"Because the <xref:System.Net.Sockets.TcpClient.Connected%2A> property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state. After the message send fails, this property no longer returns `true`. Note that this behavior is by design. You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost. Your code should assume the socket is connected, and gracefully handle failed transmissions.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connected%2A&gt;</ph> property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state.","pos":[0,224],"source":"Because the <xref:System.Net.Sockets.TcpClient.Connected%2A> property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state."},{"content":"After the message send fails, this property no longer returns <ph id=\"ph1\">`true`</ph>.","pos":[225,294],"source":" After the message send fails, this property no longer returns `true`."},{"content":"Note that this behavior is by design.","pos":[295,332]},{"content":"You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost.","pos":[333,480]},{"content":"Your code should assume the socket is connected, and gracefully handle failed transmissions.","pos":[481,573]}]}],"pos":[75534,76433],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Net.Sockets.TcpClient.Client\"></xref> socket was connected to a remote resource as of the most recent operation; otherwise, `false`.","nodes":[{"pos":[0,165],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.TcpClient.Client\"&gt;&lt;/xref&gt;</ph> socket was connected to a remote resource as of the most recent operation; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Net.Sockets.TcpClient.Client\"></xref> socket was connected to a remote resource as of the most recent operation; otherwise, `false`."}],"pos":[76953,77121],"yaml":true},{"content":"Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref>.","nodes":[{"pos":[0,107],"content":"Releases the managed and unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph>.","source":"Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref>."}],"pos":[78416,78524],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,141],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref> and optionally releases the managed resources."}],"pos":[79818,79960],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes this method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes this method with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references. It does this by invoking the `Dispose()` method of each referenced object.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,267],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes this method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes this method with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes this method with the <ph id=\"ph2\">`disposing`</ph> parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[104,181],"source":"`Dispose()` invokes this method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes this method with <ph id=\"ph2\">`disposing`</ph> set to <ph id=\"ph3\">`false`</ph>.","pos":[182,267],"source":" <xref:System.Object.Finalize%2A> invokes this method with `disposing` set to `false`."}]},{"pos":[274,511],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references. It does this by invoking the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> references.","pos":[0,162],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references."},{"content":"It does this by invoking the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[163,237],"source":" It does this by invoking the `Dispose()` method of each referenced object."}]},{"pos":[519,744],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[79971,80723],"yaml":true,"extradata":"MT"},{"content":"Set to `true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,107],"content":"Set to <ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"Set to `true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[80877,80985],"yaml":true},{"content":"Ends a pending asynchronous connection attempt.","nodes":[{"pos":[0,47],"content":"Ends a pending asynchronous connection attempt.","nodes":[{"content":"Ends a pending asynchronous connection attempt.","pos":[0,47]}]}],"pos":[82395,82443],"yaml":true},{"content":"This method blocks until the operation is complete. To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","nodes":[{"pos":[0,153],"content":"This method blocks until the operation is complete. To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.","nodes":[{"content":"This method blocks until the operation is complete. To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.","pos":[0,153],"nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]},{"content":"To perform this operation synchronously, use a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method.","pos":[52,153],"source":" To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method."}]}]},{"pos":[161,596],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.","pos":[8,433],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept> for a detailed description of the error.","pos":[180,425],"source":" After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error."}]}]}],"pos":[82454,83056],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"></xref>.","nodes":[{"pos":[0,137],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object returned by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"></xref>."}],"pos":[83605,83743],"yaml":true},{"content":"The <code>asyncResult</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>asyncResult</code> parameter is `null`."}],"pos":[83912,83962],"yaml":true},{"content":"The <code>asyncResult</code> parameter was not returned by a call to a <xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"></xref> method.","nodes":[{"pos":[0,142],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was not returned by a call to a <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"&gt;&lt;/xref&gt;</ph> method.","source":"The <code>asyncResult</code> parameter was not returned by a call to a <xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"></xref> method."}],"pos":[84056,84199],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\"></xref> method was previously called for the asynchronous connection.","nodes":[{"pos":[0,147],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\"&gt;&lt;/xref&gt;</ph> method was previously called for the asynchronous connection.","source":"The <xref href=\"System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\"></xref> method was previously called for the asynchronous connection."}],"pos":[84309,84457],"yaml":true},{"content":"An error occurred when attempting to access the <xref href=\"System.Net.Sockets.Socket\"></xref>.","nodes":[{"pos":[0,95],"content":"An error occurred when attempting to access the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph>.","source":"An error occurred when attempting to access the <xref href=\"System.Net.Sockets.Socket\"></xref>."}],"pos":[84571,84667],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[84773,84852],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.TcpClient\"></xref> allows only one client to use a port.","nodes":[{"pos":[0,171],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that specifies whether the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> allows only one client to use a port.","source":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.TcpClient\"></xref> allows only one client to use a port."}],"pos":[85962,86134],"yaml":true},{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.  \n  \n This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property","nodes":[{"pos":[0,290],"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.","nodes":[{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.","pos":[0,290],"nodes":[{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.","pos":[0,150]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A&gt;</ph> property to prevent multiple clients from using a specific port.","pos":[151,290],"source":" You can use the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port."}]}]},{"pos":[297,806],"content":"This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property","nodes":[{"content":"This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property","pos":[0,509],"nodes":[{"content":"This property must be set before the underlying socket is bound to a client port.","pos":[0,81]},{"content":"If you call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.BeginConnect%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29&gt;</ph>, the client port is bound as a side effect of the method, and you cannot subsequently set the <ph id=\"ph5\">&lt;xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A&gt;</ph> property","pos":[82,509],"source":" If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property"}]}]}],"pos":[86145,86956],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Net.Sockets.TcpClient\"></xref> allows only one client to use a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions.","nodes":[{"pos":[0,253],"content":"`true` if the <xref href=\"System.Net.Sockets.TcpClient\"></xref> allows only one client to use a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> allows only one client to use a specific port; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,130],"source":"`true` if the <xref href=\"System.Net.Sockets.TcpClient\"></xref> allows only one client to use a specific port; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <ph id=\"ph2\">`false`</ph> for all other versions.","pos":[131,253],"source":" The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions."}]}],"pos":[87577,87833],"yaml":true},{"content":"An error occurred when attempting to access the underlying socket.","nodes":[{"pos":[0,66],"content":"An error occurred when attempting to access the underlying socket.","nodes":[{"content":"An error occurred when attempting to access the underlying socket.","pos":[0,66]}]}],"pos":[88023,88090],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[88196,88275],"yaml":true},{"content":"Frees resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class.","nodes":[{"pos":[0,84],"content":"Frees resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> class.","source":"Frees resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class."}],"pos":[89507,89592],"yaml":true},{"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \n  \n The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the <xref:System.Net.Sockets.TcpClient>. These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data. The finalizer does not release any unmanaged resources.  \n  \n For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).","nodes":[{"pos":[0,380],"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.","pos":[0,380],"nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;</ph>.","pos":[0,80],"source":"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>."},{"content":"Application code should not call this method; an object's <ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id=\"ph2\">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;</ph> method.","pos":[81,380],"source":" Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method."}]}]},{"pos":[387,809],"content":"The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the <xref:System.Net.Sockets.TcpClient>. These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data. The finalizer does not release any unmanaged resources.","nodes":[{"content":"The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the <xref:System.Net.Sockets.TcpClient>. These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data. The finalizer does not release any unmanaged resources.","pos":[0,422],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> class finalizer closes the TCP connection and releases all managed resources associated with the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.","pos":[0,173],"source":"The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the <xref:System.Net.Sockets.TcpClient>."},{"content":"These resources include the underlying <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> used for connecting with the remote host, and the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> used to send and receive data.","pos":[174,366],"source":" These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data."},{"content":"The finalizer does not release any unmanaged resources.","pos":[367,422]}]}]},{"pos":[816,1139],"content":"For more information, see <bpt id=\"p1\">[</bpt>Finalize Methods and Destructors<ept id=\"p1\">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id=\"p2\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p2\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, and <bpt id=\"p3\">[</bpt>Overriding the Finalize Method<ept id=\"p3\">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.","source":"For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."}],"pos":[89603,90749],"yaml":true,"extradata":"MT"},{"content":"Returns the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> used to send and receive data.","nodes":[{"pos":[0,96],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;&lt;/xref&gt;</ph> used to send and receive data.","source":"Returns the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> used to send and receive data."}],"pos":[92112,92209],"yaml":true},{"content":"<xref:System.Net.Sockets.TcpClient.GetStream%2A> returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data. The <xref:System.Net.Sockets.NetworkStream> class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.  \n  \n You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>. After you have obtained the <xref:System.Net.Sockets.NetworkStream>, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host. Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host. Both of these methods block until the specified operation is performed. You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property. A `true` value means that data has arrived from the remote host and is available for reading. In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately. If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.  \n  \n> [!NOTE]\n>  You must close the <xref:System.Net.Sockets.NetworkStream> when you are through sending and receiving data. Closing <xref:System.Net.Sockets.TcpClient> does not release the <xref:System.Net.Sockets.NetworkStream>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,342],"content":"<xref:System.Net.Sockets.TcpClient.GetStream%2A> returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data. The <xref:System.Net.Sockets.NetworkStream> class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.","nodes":[{"content":"<xref:System.Net.Sockets.TcpClient.GetStream%2A> returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data. The <xref:System.Net.Sockets.NetworkStream> class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.","pos":[0,342],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that you can use to send and receive data.","pos":[0,141],"source":"<xref:System.Net.Sockets.TcpClient.GetStream%2A> returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class inherits from the <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> class, which provides a rich collection of methods and properties used to facilitate network communications.","pos":[142,342],"source":" The <xref:System.Net.Sockets.NetworkStream> class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications."}]}]},{"pos":[349,1353],"content":"You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>. After you have obtained the <xref:System.Net.Sockets.NetworkStream>, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host. Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host. Both of these methods block until the specified operation is performed. You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property. A `true` value means that data has arrived from the remote host and is available for reading. In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately. If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.","nodes":[{"content":"You must call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Connect%2A&gt;</ph> method first, or the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A&gt;</ph> method will throw an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,196],"source":"You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>."},{"content":"After you have obtained the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, call the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method to send data to the remote host.","pos":[197,363],"source":" After you have obtained the <xref:System.Net.Sockets.NetworkStream>, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host."},{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method to receive data arriving from the remote host.","pos":[364,474],"source":" Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host."},{"content":"Both of these methods block until the specified operation is performed.","pos":[475,546]},{"content":"You can avoid blocking on a read operation by checking the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> property.","pos":[547,672],"source":" You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property."},{"content":"A <ph id=\"ph1\">`true`</ph> value means that data has arrived from the remote host and is available for reading.","pos":[673,766],"source":" A `true` value means that data has arrived from the remote host and is available for reading."},{"content":"In this case, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> is guaranteed to complete immediately.","pos":[767,867],"source":" In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately."},{"content":"If the remote host has shutdown its connection, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> will immediately return with zero bytes.","pos":[868,1004],"source":" If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes."}]},{"pos":[1361,1585],"content":"[!NOTE]\n You must close the <xref:System.Net.Sockets.NetworkStream> when you are through sending and receiving data. Closing <xref:System.Net.Sockets.TcpClient> does not release the <xref:System.Net.Sockets.NetworkStream>.","leadings":["","> "],"nodes":[{"content":" You must close the <xref:System.Net.Sockets.NetworkStream> when you are through sending and receiving data. Closing <xref:System.Net.Sockets.TcpClient> does not release the <xref:System.Net.Sockets.NetworkStream>.","pos":[8,222],"nodes":[{"content":"You must close the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> when you are through sending and receiving data.","pos":[1,108],"source":" You must close the <xref:System.Net.Sockets.NetworkStream> when you are through sending and receiving data."},{"content":"Closing <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> does not release the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[109,214],"source":" Closing <xref:System.Net.Sockets.TcpClient> does not release the <xref:System.Net.Sockets.NetworkStream>."}]}]},{"pos":[1593,1942],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,347],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,339]}]}]},{"pos":[1950,2175],"content":"[!NOTE]\n This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,223],"nodes":[{"content":"This member outputs trace information when you enable network tracing in your application.","pos":[1,91]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[92,215],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[92220,94409],"yaml":true,"extradata":"MT"},{"content":"The underlying <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.","nodes":[{"pos":[0,69],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.NetworkStream\"&gt;&lt;/xref&gt;</ph>.","source":"The underlying <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."}],"pos":[95512,95582],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.TcpClient\"></xref> is not connected to a remote host.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> is not connected to a remote host.","source":"The <xref href=\"System.Net.Sockets.TcpClient\"></xref> is not connected to a remote host."}],"pos":[95758,95847],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.TcpClient\"></xref> has been closed.","nodes":[{"pos":[0,70],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.TcpClient\"></xref> has been closed."}],"pos":[95953,96024],"yaml":true},{"content":"Gets or sets information about the linger state of the associated socket.","nodes":[{"pos":[0,73],"content":"Gets or sets information about the linger state of the associated socket.","nodes":[{"content":"Gets or sets information about the linger state of the associated socket.","pos":[0,73]}]}],"pos":[97270,97344],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves. This property when set modifies the conditions under which the connection can be reset by Winsock. Connection resets can still occur based on the IP protocol behavior.  \n  \n This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent. When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer. This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.  \n  \n To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property to this instance.  \n  \n The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property.  \n  \n|LingerState.Enabled|LingerState.LingerTime|Behavior|  \n|-------------------------|----------------------------|--------------|  \n|`false` (disabled), the default value|The time-out is not applicable, (default).|Attempts to send pending data until the default IP protocol time-out expires.|  \n|`true` (enabled)|A nonzero time-out|Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.|  \n|`true` (enabled)|A zero timeout.|Discards any pending data and Winsock resets the connection.|  \n  \n The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is not set.  \n  \n When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.","nodes":[{"pos":[0,305],"content":"The <xref:System.Net.Sockets.TcpClient.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves. This property when set modifies the conditions under which the connection can be reset by Winsock. Connection resets can still occur based on the IP protocol behavior.","nodes":[{"content":"The <xref:System.Net.Sockets.TcpClient.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves. This property when set modifies the conditions under which the connection can be reset by Winsock. Connection resets can still occur based on the IP protocol behavior.","pos":[0,305],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.LingerState%2A&gt;</ph> property changes the way <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> method behaves.","pos":[0,137],"source":"The <xref:System.Net.Sockets.TcpClient.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves."},{"content":"This property when set modifies the conditions under which the connection can be reset by Winsock.","pos":[138,236]},{"content":"Connection resets can still occur based on the IP protocol behavior.","pos":[237,305]}]}]},{"pos":[312,770],"content":"This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent. When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer. This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.","nodes":[{"content":"This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent. When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer. This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.","pos":[0,458],"nodes":[{"content":"This property controls the length of time that the TCP connection will remain open after a call to <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> when data remains to be sent.","pos":[0,173],"source":"This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent."},{"content":"When you call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method, data is placed in the outgoing network buffer.","pos":[174,295],"source":" When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer."},{"content":"This property can be used to ensure that this data is sent to the remote host before the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method drops the connection.","pos":[296,458],"source":" This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection."}]}]},{"pos":[777,975],"content":"To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property to this instance.","nodes":[{"content":"To enable lingering, create a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.LingerOption&gt;</ph> instance containing the desired values, and set the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.LingerState%2A&gt;</ph> property to this instance.","pos":[0,198],"source":"To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property to this instance."}]},{"pos":[982,1318],"content":"The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property.","nodes":[{"content":"The following table describes the behavior of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method for the possible values of the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.LingerOption.Enabled%2A&gt;</ph> property and the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.LingerOption.LingerTime%2A&gt;</ph> property stored in the <ph id=\"ph4\">&lt;xref:System.Net.Sockets.TcpClient.LingerState%2A&gt;</ph> property.","pos":[0,336],"source":"The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property."}]},{"pos":[1325,1344],"content":"LingerState.Enabled","nodes":[{"content":"LingerState.Enabled","pos":[0,19]}]},{"pos":[1345,1367],"content":"LingerState.LingerTime","nodes":[{"content":"LingerState.LingerTime","pos":[0,22]}]},{"pos":[1368,1376],"content":"Behavior","nodes":[{"content":"Behavior","pos":[0,8]}]},{"pos":[1455,1492],"content":"<ph id=\"ph1\">`false`</ph> (disabled), the default value","source":"`false` (disabled), the default value"},{"pos":[1493,1535],"content":"The time-out is not applicable, (default).","nodes":[{"content":"The time-out is not applicable, (default).","pos":[0,42]}]},{"pos":[1536,1613],"content":"Attempts to send pending data until the default IP protocol time-out expires.","nodes":[{"content":"Attempts to send pending data until the default IP protocol time-out expires.","pos":[0,77]}]},{"pos":[1618,1634],"content":"<ph id=\"ph1\">`true`</ph> (enabled)","source":"`true` (enabled)"},{"pos":[1635,1653],"content":"A nonzero time-out","nodes":[{"content":"A nonzero time-out","pos":[0,18]}]},{"pos":[1654,1783],"content":"Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.","nodes":[{"content":"Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.","pos":[0,129]}]},{"pos":[1788,1804],"content":"<ph id=\"ph1\">`true`</ph> (enabled)","source":"`true` (enabled)"},{"pos":[1805,1820],"content":"A zero timeout.","nodes":[{"content":"A zero timeout.","pos":[0,15]}]},{"pos":[1821,1881],"content":"Discards any pending data and Winsock resets the connection.","nodes":[{"content":"Discards any pending data and Winsock resets the connection.","pos":[0,60]}]},{"pos":[1889,2231],"content":"The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is not set.","nodes":[{"content":"The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is not set.","pos":[0,342],"nodes":[{"content":"The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.","pos":[0,116]},{"content":"In most cases, the time-out computed by the stack is more relevant than one defined by an application.","pos":[117,219]},{"content":"This is the default behavior for a socket when the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.LingerState%2A&gt;</ph> property is not set.","pos":[220,342],"source":" This is the default behavior for a socket when the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is not set."}]}]},{"pos":[2238,2500],"content":"When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.LingerOption.LingerTime%2A&gt;</ph> property stored in the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient.LingerState%2A&gt;</ph> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.","pos":[0,262],"source":"When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override."}]}],"pos":[97355,99874],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.Sockets.LingerOption\"></xref>. By default, lingering is disabled.","nodes":[{"pos":[0,90],"content":"A <xref href=\"System.Net.Sockets.LingerOption\"></xref>. By default, lingering is disabled.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.LingerOption\"&gt;&lt;/xref&gt;</ph>.","pos":[0,55],"source":"A <xref href=\"System.Net.Sockets.LingerOption\"></xref>."},{"content":"By default, lingering is disabled.","pos":[56,90]}]}],"pos":[100684,100775],"yaml":true},{"content":"Gets or sets a value that disables a delay when send or receive buffers are not full.","nodes":[{"pos":[0,85],"content":"Gets or sets a value that disables a delay when send or receive buffers are not full.","nodes":[{"content":"Gets or sets a value that disables a delay when send or receive buffers are not full.","pos":[0,85]}]}],"pos":[102068,102154],"yaml":true},{"content":"When <xref:System.Net.Sockets.TcpClient.NoDelay%2A> is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data. Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient. However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send. Your decision should weigh the relative importance of network efficiency versus application requirements.","nodes":[{"pos":[0,543],"content":"When <xref:System.Net.Sockets.TcpClient.NoDelay%2A> is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data. Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient. However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send. Your decision should weigh the relative importance of network efficiency versus application requirements.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.NoDelay%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> does not send a packet over the network until it has collected a significant amount of outgoing data.","pos":[0,203],"source":"When <xref:System.Net.Sockets.TcpClient.NoDelay%2A> is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data."},{"content":"Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient.","pos":[204,301]},{"content":"However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send.","pos":[302,437]},{"content":"Your decision should weigh the relative importance of network efficiency versus application requirements.","pos":[438,543]}]}],"pos":[102165,102709],"yaml":true,"extradata":"MT"},{"content":"`true` if the delay is disabled, otherwise `false`. The default value is `false`.","nodes":[{"pos":[0,81],"content":"`true` if the delay is disabled, otherwise `false`. The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the delay is disabled, otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,51],"source":"`true` if the delay is disabled, otherwise `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[52,81],"source":" The default value is `false`."}]}],"pos":[103577,103661],"yaml":true},{"content":"Gets or sets the size of the receive buffer.","nodes":[{"pos":[0,44],"content":"Gets or sets the size of the receive buffer.","nodes":[{"content":"Gets or sets the size of the receive buffer.","pos":[0,44]}]}],"pos":[105010,105055],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation. This property actually manipulates the network buffer space allocated for receiving incoming data.  \n  \n Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=fullName> method. Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size. If your application will be receiving bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Read%2A> method a very large application buffer.  \n  \n If the network buffer is smaller than the amount of data you request in the <xref:System.Net.Sockets.NetworkStream.Read%2A> method, you will not be able to retrieve the desired amount of data in one read operation. This incurs the overhead of additional calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method.","nodes":[{"pos":[0,280],"content":"The <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation. This property actually manipulates the network buffer space allocated for receiving incoming data.","nodes":[{"content":"The <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation. This property actually manipulates the network buffer space allocated for receiving incoming data.","pos":[0,280],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A&gt;</ph> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation.","pos":[0,181],"source":"The <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation."},{"content":"This property actually manipulates the network buffer space allocated for receiving incoming data.","pos":[182,280]}]}]},{"pos":[287,759],"content":"Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=fullName> method. Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size. If your application will be receiving bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Read%2A> method a very large application buffer.","nodes":[{"content":"Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=fullName> method. Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size. If your application will be receiving bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Read%2A> method a very large application buffer.","pos":[0,472],"nodes":[{"content":"Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,223],"source":"Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=fullName> method."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A&gt;</ph> property to set this size.","pos":[224,315],"source":" Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size."},{"content":"If your application will be receiving bulk data, you should pass the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method a very large application buffer.","pos":[316,472],"source":" If your application will be receiving bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Read%2A> method a very large application buffer."}]}]},{"pos":[766,1088],"content":"If the network buffer is smaller than the amount of data you request in the <xref:System.Net.Sockets.NetworkStream.Read%2A> method, you will not be able to retrieve the desired amount of data in one read operation. This incurs the overhead of additional calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method.","nodes":[{"content":"If the network buffer is smaller than the amount of data you request in the <xref:System.Net.Sockets.NetworkStream.Read%2A> method, you will not be able to retrieve the desired amount of data in one read operation. This incurs the overhead of additional calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method.","pos":[0,322],"nodes":[{"content":"If the network buffer is smaller than the amount of data you request in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method, you will not be able to retrieve the desired amount of data in one read operation.","pos":[0,214],"source":"If the network buffer is smaller than the amount of data you request in the <xref:System.Net.Sockets.NetworkStream.Read%2A> method, you will not be able to retrieve the desired amount of data in one read operation."},{"content":"This incurs the overhead of additional calls to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.","pos":[215,322],"source":" This incurs the overhead of additional calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method."}]}]}],"pos":[105066,106161],"yaml":true,"extradata":"MT"},{"content":"The size of the receive buffer, in bytes. The default value is 8192 bytes.","nodes":[{"pos":[0,74],"content":"The size of the receive buffer, in bytes. The default value is 8192 bytes.","nodes":[{"content":"The size of the receive buffer, in bytes. The default value is 8192 bytes.","pos":[0,74],"nodes":[{"content":"The size of the receive buffer, in bytes.","pos":[0,41]},{"content":"The default value is 8192 bytes.","pos":[42,74]}]}]}],"pos":[106924,106999],"yaml":true},{"content":"An error occurred when setting the buffer size.  \n  \n -or-  \n  \n In .NET Compact Framework applications, you cannot set this property. For a workaround, see the Platform Note in Remarks.","nodes":[{"pos":[0,47],"content":"An error occurred when setting the buffer size.","nodes":[{"content":"An error occurred when setting the buffer size.","pos":[0,47]}]},{"pos":[54,58],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[65,186],"content":"In .NET Compact Framework applications, you cannot set this property. For a workaround, see the Platform Note in Remarks.","nodes":[{"content":"In .NET Compact Framework applications, you cannot set this property. For a workaround, see the Platform Note in Remarks.","pos":[0,121],"nodes":[{"content":"In .NET Compact Framework applications, you cannot set this property.","pos":[0,69]},{"content":"For a workaround, see the Platform Note in Remarks.","pos":[70,121]}]}]}],"pos":[107187,107380],"yaml":true},{"content":"Gets or sets the amount of time a <xref href=\"System.Net.Sockets.TcpClient\"></xref> will wait to receive data once a read operation is initiated.","nodes":[{"pos":[0,145],"content":"Gets or sets the amount of time a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> will wait to receive data once a read operation is initiated.","source":"Gets or sets the amount of time a <xref href=\"System.Net.Sockets.TcpClient\"></xref> will wait to receive data once a read operation is initiated."}],"pos":[108644,108790],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data. This time is measured in milliseconds. If the time-out expires before <xref:System.Net.Sockets.NetworkStream.Read%2A> successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>. There is no time-out by default.","nodes":[{"pos":[0,455],"content":"The <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data. This time is measured in milliseconds. If the time-out expires before <xref:System.Net.Sockets.NetworkStream.Read%2A> successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>. There is no time-out by default.","nodes":[{"content":"The <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data. This time is measured in milliseconds. If the time-out expires before <xref:System.Net.Sockets.NetworkStream.Read%2A> successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>. There is no time-out by default.","pos":[0,455],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A&gt;</ph> property determines the amount of time that the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method will block until it is able to receive data.","pos":[0,205],"source":"The <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data."},{"content":"This time is measured in milliseconds.","pos":[206,244]},{"content":"If the time-out expires before <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> successfully completes, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> throws a <ph id=\"ph3\">&lt;xref:System.IO.IOException&gt;</ph>.","pos":[245,422],"source":" If the time-out expires before <xref:System.Net.Sockets.NetworkStream.Read%2A> successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>."},{"content":"There is no time-out by default.","pos":[423,455]}]}]}],"pos":[108801,109257],"yaml":true,"extradata":"MT"},{"content":"The time-out value of the connection in milliseconds. The default value is 0.","nodes":[{"pos":[0,77],"content":"The time-out value of the connection in milliseconds. The default value is 0.","nodes":[{"content":"The time-out value of the connection in milliseconds. The default value is 0.","pos":[0,77],"nodes":[{"content":"The time-out value of the connection in milliseconds.","pos":[0,53]},{"content":"The default value is 0.","pos":[54,77]}]}]}],"pos":[110020,110098],"yaml":true},{"content":"Gets or sets the size of the send buffer.","nodes":[{"pos":[0,41],"content":"Gets or sets the size of the send buffer.","nodes":[{"content":"Gets or sets the size of the send buffer.","pos":[0,41]}]}],"pos":[111436,111478],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=fullName> method. This property actually manipulates the network buffer space allocated for send operation.  \n  \n Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation. Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size. If your application will be sending bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Write%2A> method a very large application buffer.  \n  \n If the network buffer is smaller than the amount of data you provide the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, several network send operations will be performed for every call you make to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.","nodes":[{"pos":[0,322],"content":"The <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=fullName> method. This property actually manipulates the network buffer space allocated for send operation.","nodes":[{"content":"The <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=fullName> method. This property actually manipulates the network buffer space allocated for send operation.","pos":[0,322],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.SendBufferSize%2A&gt;</ph> property gets or sets the number of bytes that you are expecting to send in each call to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,232],"source":"The <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=fullName> method."},{"content":"This property actually manipulates the network buffer space allocated for send operation.","pos":[233,322]}]}]},{"pos":[329,722],"content":"Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation. Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size. If your application will be sending bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Write%2A> method a very large application buffer.","nodes":[{"content":"Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation. Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size. If your application will be sending bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Write%2A> method a very large application buffer.","pos":[0,393],"nodes":[{"content":"Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation.","pos":[0,148]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.SendBufferSize%2A&gt;</ph> property to set this size.","pos":[149,237],"source":" Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size."},{"content":"If your application will be sending bulk data, you should pass the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method a very large application buffer.","pos":[238,393],"source":" If your application will be sending bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Write%2A> method a very large application buffer."}]}]},{"pos":[729,1122],"content":"If the network buffer is smaller than the amount of data you provide the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, several network send operations will be performed for every call you make to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.","nodes":[{"content":"If the network buffer is smaller than the amount of data you provide the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, several network send operations will be performed for every call you make to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.","pos":[0,393],"nodes":[{"content":"If the network buffer is smaller than the amount of data you provide the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method, several network send operations will be performed for every call you make to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.","pos":[0,267],"source":"If the network buffer is smaller than the amount of data you provide the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, several network send operations will be performed for every call you make to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method."},{"content":"You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.","pos":[268,393]}]}]}],"pos":[111489,112618],"yaml":true,"extradata":"MT"},{"content":"The size of the send buffer, in bytes. The default value is 8192 bytes.","nodes":[{"pos":[0,71],"content":"The size of the send buffer, in bytes. The default value is 8192 bytes.","nodes":[{"content":"The size of the send buffer, in bytes. The default value is 8192 bytes.","pos":[0,71],"nodes":[{"content":"The size of the send buffer, in bytes.","pos":[0,38]},{"content":"The default value is 8192 bytes.","pos":[39,71]}]}]}],"pos":[113375,113447],"yaml":true},{"content":"Gets or sets the amount of time a <xref href=\"System.Net.Sockets.TcpClient\"></xref> will wait for a send operation to complete successfully.","nodes":[{"pos":[0,140],"content":"Gets or sets the amount of time a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.TcpClient\"&gt;&lt;/xref&gt;</ph> will wait for a send operation to complete successfully.","source":"Gets or sets the amount of time a <xref href=\"System.Net.Sockets.TcpClient\"></xref> will wait for a send operation to complete successfully."}],"pos":[114767,114908],"yaml":true},{"content":"The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully. This time is measured in milliseconds.  \n  \n After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host. The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned. If the time-out expires before the <xref:System.Net.Sockets.Socket.Send%2A> method successfully completes, <xref:System.Net.Sockets.TcpClient> will throw a <xref:System.Net.Sockets.SocketException>. There is no time-out by default.","nodes":[{"pos":[0,241],"content":"The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully. This time is measured in milliseconds.","nodes":[{"content":"The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully. This time is measured in milliseconds.","pos":[0,241],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.SendTimeout%2A&gt;</ph> property determines the amount of time that the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> method will block until it is able to return successfully.","pos":[0,202],"source":"The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully."},{"content":"This time is measured in milliseconds.","pos":[203,241]}]}]},{"pos":[248,847],"content":"After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host. The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned. If the time-out expires before the <xref:System.Net.Sockets.Socket.Send%2A> method successfully completes, <xref:System.Net.Sockets.TcpClient> will throw a <xref:System.Net.Sockets.SocketException>. There is no time-out by default.","nodes":[{"content":"After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host. The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned. If the time-out expires before the <xref:System.Net.Sockets.Socket.Send%2A> method successfully completes, <xref:System.Net.Sockets.TcpClient> will throw a <xref:System.Net.Sockets.SocketException>. There is no time-out by default.","pos":[0,599],"nodes":[{"content":"After you call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method, the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returns the number of bytes actually sent to the host.","pos":[0,178],"source":"After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient.SendTimeout%2A&gt;</ph> property determines the amount of time a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> will wait before receiving the number of bytes returned.","pos":[179,367],"source":" The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned."},{"content":"If the time-out expires before the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> method successfully completes, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> will throw a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[368,566],"source":" If the time-out expires before the <xref:System.Net.Sockets.Socket.Send%2A> method successfully completes, <xref:System.Net.Sockets.TcpClient> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"There is no time-out by default.","pos":[567,599]}]}]}],"pos":[114919,115771],"yaml":true,"extradata":"MT"},{"content":"The send time-out value, in milliseconds. The default is 0.","nodes":[{"pos":[0,59],"content":"The send time-out value, in milliseconds. The default is 0.","nodes":[{"content":"The send time-out value, in milliseconds. The default is 0.","pos":[0,59],"nodes":[{"content":"The send time-out value, in milliseconds.","pos":[0,41]},{"content":"The default is 0.","pos":[42,59]}]}]}],"pos":[116571,116631],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Sockets.TcpClient\n  commentId: T:System.Net.Sockets.TcpClient\n  id: TcpClient\n  children:\n  - System.Net.Sockets.TcpClient.#ctor\n  - System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)\n  - System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)\n  - System.Net.Sockets.TcpClient.Active\n  - System.Net.Sockets.TcpClient.Available\n  - System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.TcpClient.Client\n  - System.Net.Sockets.TcpClient.Close\n  - System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)\n  - System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)\n  - System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  - System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)\n  - System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)\n  - System.Net.Sockets.TcpClient.Connected\n  - System.Net.Sockets.TcpClient.Dispose\n  - System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  - System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\n  - System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  - System.Net.Sockets.TcpClient.Finalize\n  - System.Net.Sockets.TcpClient.GetStream\n  - System.Net.Sockets.TcpClient.LingerState\n  - System.Net.Sockets.TcpClient.NoDelay\n  - System.Net.Sockets.TcpClient.ReceiveBufferSize\n  - System.Net.Sockets.TcpClient.ReceiveTimeout\n  - System.Net.Sockets.TcpClient.SendBufferSize\n  - System.Net.Sockets.TcpClient.SendTimeout\n  - System.Net.Sockets.TcpClient.System#IDisposable#Dispose\n  langs:\n  - csharp\n  name: TcpClient\n  nameWithType: TcpClient\n  fullName: System.Net.Sockets.TcpClient\n  type: Class\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Provides client connections for TCP network services.\n  remarks: \"The <xref:System.Net.Sockets.TcpClient> class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.  \\n  \\n In order for <xref:System.Net.Sockets.TcpClient> to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests. You can connect to this listener in one of the following two ways:  \\n  \\n-   Create a <xref:System.Net.Sockets.TcpClient> and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.  \\n  \\n-   Create a <xref:System.Net.Sockets.TcpClient> using the host name and port number of the remote host. This constructor will automatically attempt a connection.  \\n  \\n> [!NOTE]\\n>  If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class.\"\n  example:\n  - \"The following code example establishes a <xref:System.Net.Sockets.TcpClient> connection.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CPP/tcpclient.cpp#1)]\\n [!code-csharp[System.Net.Sockets.TcpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CS/tcpclient.cs#1)]\\n [!code-vb[System.Net.Sockets.TcpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/VB/tcpclient.vb#1)]\"\n  syntax:\n    content: 'public class TcpClient : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.#ctor\n  commentId: M:System.Net.Sockets.TcpClient.#ctor\n  id: '#ctor'\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: TcpClient()\n  nameWithType: TcpClient.TcpClient()\n  fullName: TcpClient.TcpClient()\n  type: Constructor\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class.\n  remarks: \"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number. You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.  \\n  \\n> [!NOTE]\\n>  This constructor works only with IPv4 address types.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example demonstrates how to use the default constructor to create a new <xref:System.Net.Sockets.TcpClient>.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]\"\n  syntax:\n    content: public TcpClient ();\n    parameters: []\n  overload: System.Net.Sockets.TcpClient.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)\n  id: '#ctor(System.Net.IPEndPoint)'\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: TcpClient(IPEndPoint)\n  nameWithType: TcpClient.TcpClient(IPEndPoint)\n  fullName: TcpClient.TcpClient(IPEndPoint)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class and binds it to the specified local endpoint.\n  remarks: \"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number before connecting and communicating. If you create a <xref:System.Net.Sockets.TcpClient> using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.  \\n  \\n You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a local endpoint.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]\"\n  syntax:\n    content: public TcpClient (System.Net.IPEndPoint localEP);\n    parameters:\n    - id: localEP\n      type: System.Net.IPEndPoint\n      description: The <xref href=\"System.Net.IPEndPoint\"></xref> to which you bind the TCP <xref href=\"System.Net.Sockets.Socket\"></xref>.\n  overload: System.Net.Sockets.TcpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The  <code>localEP</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: TcpClient(AddressFamily)\n  nameWithType: TcpClient.TcpClient(AddressFamily)\n  fullName: TcpClient.TcpClient(AddressFamily)\n  type: Constructor\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class with the specified family.\n  remarks: >-\n    > [!NOTE]\n\n    >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\n  example:\n  - \"The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]\"\n  syntax:\n    content: public TcpClient (System.Net.Sockets.AddressFamily family);\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: The <xref href=\"System.Net.IPAddress.AddressFamily\"></xref> of the IP protocol.\n  overload: System.Net.Sockets.TcpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>family</code> parameter is not equal to AddressFamily.InterNetwork  \\n  \\n -or-  \\n  \\n The <code>family</code> parameter is not equal to AddressFamily.InterNetworkV6\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: TcpClient(String, Int32)\n  nameWithType: TcpClient.TcpClient(String, Int32)\n  fullName: TcpClient.TcpClient(String, Int32)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class and connects to the specified port on the specified host.\n  remarks: \"This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number. The underlying service provider will assign the most appropriate local IP address and port number. <xref:System.Net.Sockets.TcpClient> will block until it either connects or fails. This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.  \\n  \\n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a host name and port number.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]\"\n  syntax:\n    content: public TcpClient (string hostname, int port);\n    parameters:\n    - id: hostname\n      type: System.String\n      description: The DNS name of the remote host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The port number of the remote host to which you intend to connect.\n  overload: System.Net.Sockets.TcpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hostname</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Active\n  commentId: P:System.Net.Sockets.TcpClient.Active\n  id: Active\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Active\n  nameWithType: TcpClient.Active\n  fullName: TcpClient.Active\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or set a value that indicates whether a connection has been made.\n  remarks: Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded. It does not monitor the ongoing connection state of <xref:System.Net.Sockets.TcpClient>. If the remote host closes the connection, <xref:System.Net.Sockets.TcpClient.Active%2A> will not be updated. If you are deriving from <xref:System.Net.Sockets.TcpClient> and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> method.\n  syntax:\n    content: protected bool Active { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the connection has been made; otherwise, `false`.'\n  overload: System.Net.Sockets.TcpClient.Active*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Available\n  commentId: P:System.Net.Sockets.TcpClient.Available\n  id: Available\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Available\n  nameWithType: TcpClient.Available\n  fullName: TcpClient.Available\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets the amount of data that has been received from the network and is available to be read.\n  remarks: \"<xref:System.Net.Sockets.TcpClient.Available%2A> is a way to determine whether data is queued for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, <xref:System.Net.Sockets.TcpClient.Available%2A> returns 0.  \\n  \\n If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.TcpClient.Available%2A> may throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.TcpClient.Available%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#1)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#1)]\"\n  syntax:\n    content: public int Available { get; }\n    return:\n      type: System.Int32\n      description: The number of bytes of data received from the network and available to be read.\n  overload: System.Net.Sockets.TcpClient.Available*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: BeginConnect(IPAddress, Int32, AsyncCallback, Object)\n  nameWithType: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)\n  fullName: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> and a port number (<xref href=\"System.Int32\"></xref>).\n  remarks: \"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#4)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#4)]\"\n  syntax:\n    content: public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> of the remote host.\n    - id: port\n      type: System.Int32\n      description: The port number of the remote host.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection.\n  overload: System.Net.Sockets.TcpClient.BeginConnect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller higher in the call stack does not have permission for the requested operation.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The port number is not valid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)\n  id: BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: BeginConnect(IPAddress[], Int32, AsyncCallback, Object)\n  nameWithType: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)\n  fullName: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href=\"System.Net.IPAddress\"></xref> array and a port number (<xref href=\"System.Int32\"></xref>).\n  remarks: \"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#5)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#5)]\"\n  syntax:\n    content: public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: addresses\n      type: System.Net.IPAddress[]\n      description: At least one <xref href=\"System.Net.IPAddress\"></xref> that designates the remote hosts.\n    - id: port\n      type: System.Int32\n      description: The port number of the remote hosts.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection.\n  overload: System.Net.Sockets.TcpClient.BeginConnect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>addresses</code> parameter is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller higher in the call stack does not have permission for the requested operation.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The port number is not valid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: BeginConnect(String, Int32, AsyncCallback, Object)\n  nameWithType: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)\n  fullName: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<xref href=\"System.String\"></xref>) and a port number (<xref href=\"System.Int32\"></xref>).\n  remarks: \"The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \\n  \\n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#6)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#6)]\"\n  syntax:\n    content: public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: host\n      type: System.String\n      description: The name of the remote host.\n    - id: port\n      type: System.Int32\n      description: The port number of the remote host.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous connection.\n  overload: System.Net.Sockets.TcpClient.BeginConnect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>host</code> parameter is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller higher in the call stack does not have permission for the requested operation.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The port number is not valid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Client\n  commentId: P:System.Net.Sockets.TcpClient.Client\n  id: Client\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Client\n  nameWithType: TcpClient.Client\n  fullName: TcpClient.Client\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets the underlying <xref href=\"System.Net.Sockets.Socket\"></xref>.\n  remarks: <xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.TcpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.TcpClient> provides. You can also use <xref:System.Net.Sockets.TcpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This might be useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.TcpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpClient.Client%2A> property. In this example, the receive buffer size of the underlying <xref:System.Net.Sockets.Socket> is changed.  \\n  \\n [!code-csharp[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/CS/source.cs#1)]\\n [!code-vb[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Net.Sockets.Socket Client { get; set; }\n    return:\n      type: System.Net.Sockets.Socket\n      description: The underlying network <xref href=\"System.Net.Sockets.Socket\"></xref>.\n  overload: System.Net.Sockets.TcpClient.Client*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Close\n  commentId: M:System.Net.Sockets.TcpClient.Close\n  id: Close\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: TcpClient.Close()\n  fullName: TcpClient.Close()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Disposes this <xref href=\"System.Net.Sockets.TcpClient\"></xref> instance and requests that the underlying TCP connection be closed.\n  remarks: \"The <xref:System.Net.Sockets.TcpClient.Close%2A> method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection. Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the <xref:System.Net.Sockets.TcpClient.Close%2A> method is called when data remains to be sent. There is no notification provided when the underlying connection has completed closing.  \\n  \\n Calling this method will eventually result in the close of the associated <xref:System.Net.Sockets.Socket> and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example demonstrates closing a <xref:System.Net.Sockets.TcpClient> by calling the <xref:System.Net.Sockets.TcpClient.Close%2A> method.  \\n  \\n [!code-cpp[NCLTCPClientSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLTcpClientSync/CPP/tcpclient.cpp#1)]\\n [!code-csharp[NCLTCPClientSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#1)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Net.Sockets.TcpClient.Close*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)\n  id: Connect(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Connect(IPEndPoint)\n  nameWithType: TcpClient.Connect(IPEndPoint)\n  fullName: TcpClient.Connect(IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Connects the client to a remote TCP host using the specified remote network endpoint.\n  remarks: \"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>. Before you call <xref:System.Net.Sockets.TcpClient.Connect%2A> you must create an instance of the <xref:System.Net.IPEndPoint> class using an IP address and a port number. Use this <xref:System.Net.IPEndPoint> as the `remoteEP` parameter. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)\"\n  example:\n  - \"The following code example uses an <xref:System.Net.IPEndPoint> to connect with a remote host.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]\"\n  syntax:\n    content: public void Connect (System.Net.IPEndPoint remoteEP);\n    parameters:\n    - id: remoteEP\n      type: System.Net.IPEndPoint\n      description: The <xref href=\"System.Net.IPEndPoint\"></xref> to which you intend to connect.\n  overload: System.Net.Sockets.TcpClient.Connect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>remoteEp</code> parameter is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)\n  id: Connect(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Connect(IPAddress, Int32)\n  nameWithType: TcpClient.Connect(IPAddress, Int32)\n  fullName: TcpClient.Connect(IPAddress, Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Connects the client to a remote TCP host using the specified IP address and port number.\n  remarks: \"Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uses an IP Address and port number to connect with a remote host.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]\"\n  syntax:\n    content: public void Connect (System.Net.IPAddress address, int port);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> of the host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The port number to which you intend to connect.\n  overload: System.Net.Sockets.TcpClient.Connect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)\n  id: Connect(System.Net.IPAddress[],System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Connect(IPAddress[], Int32)\n  nameWithType: TcpClient.Connect(IPAddress[], Int32)\n  fullName: TcpClient.Connect(IPAddress[], Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Connects the client to a remote TCP host using the specified IP addresses and port number.\n  remarks: \"This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uses an IP Address and port number to connect with a remote host.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#8)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#8)]\"\n  syntax:\n    content: public void Connect (System.Net.IPAddress[] ipAddresses, int port);\n    parameters:\n    - id: ipAddresses\n      type: System.Net.IPAddress[]\n      description: The <xref href=\"System.Net.IPAddress\"></xref> array of the host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The port number to which you intend to connect.\n  overload: System.Net.Sockets.TcpClient.Connect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>ipAddresses</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The port number is not valid.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller higher in the call stack does not have permission for the requested operation.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is valid for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  id: Connect(System.String,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Connect(String, Int32)\n  nameWithType: TcpClient.Connect(String, Int32)\n  fullName: TcpClient.Connect(String, Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Connects the client to the specified port on the specified host.\n  remarks: \"Call this method to establish a synchronous remote host connection to the specified host name and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \\n  \\n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uses the host name and port number to connect with a remote host.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]\"\n  syntax:\n    content: public void Connect (string hostname, int port);\n    parameters:\n    - id: hostname\n      type: System.String\n      description: The DNS name of the remote host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The port number of the remote host to which you intend to connect.\n  overload: System.Net.Sockets.TcpClient.Connect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hostname</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)\n  id: ConnectAsync(System.String,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: ConnectAsync(String, Int32)\n  nameWithType: TcpClient.ConnectAsync(String, Int32)\n  fullName: TcpClient.ConnectAsync(String, Int32)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Connects the client to the specified TCP port on the specified host as an asynchronous operation.\n  remarks: \"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \\n  \\n Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \\n  \\n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task ConnectAsync (string host, int port);\n    parameters:\n    - id: host\n      type: System.String\n      description: The DNS name of the remote host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The port number of the remote host to which you intend to connect.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Sockets.TcpClient.ConnectAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hostname</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>port</code> parameter is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)\n  id: ConnectAsync(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: ConnectAsync(IPAddress, Int32)\n  nameWithType: TcpClient.ConnectAsync(IPAddress, Int32)\n  fullName: TcpClient.ConnectAsync(IPAddress, Int32)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.\n  remarks: \"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \\n  \\n Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress address, int port);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> of the host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The port number to which you intend to connect.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Sockets.TcpClient.ConnectAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>address</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.TcpClient\"></xref> is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)\n  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)\n  id: ConnectAsync(System.Net.IPAddress[],System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: ConnectAsync(IPAddress[], Int32)\n  nameWithType: TcpClient.ConnectAsync(IPAddress[], Int32)\n  fullName: TcpClient.ConnectAsync(IPAddress[], Int32)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.\n  remarks: \"This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \\n  \\n This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress[] addresses, int port);\n    parameters:\n    - id: addresses\n      type: System.Net.IPAddress[]\n      description: The <xref href=\"System.Net.IPAddress\"></xref> array of the host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The port number to which you intend to connect.\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task\\\"></xref>  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Sockets.TcpClient.ConnectAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>ipAddresses</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The port number is not valid.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A caller higher in the call stack does not have permission for the requested operation.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is valid for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Connected\n  commentId: P:System.Net.Sockets.TcpClient.Connected\n  id: Connected\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Connected\n  nameWithType: TcpClient.Connected\n  fullName: TcpClient.Connected\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets a value indicating whether the underlying <xref href=\"System.Net.Sockets.Socket\"></xref> for a <xref href=\"System.Net.Sockets.TcpClient\"></xref> is connected to a remote host.\n  remarks: \"The <xref:System.Net.Sockets.TcpClient.Connected%2A> property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation. When it returns `false`, the <xref:System.Net.Sockets.TcpClient.Client%2A> socket was either never connected, or is no longer connected.  \\n  \\n Because the <xref:System.Net.Sockets.TcpClient.Connected%2A> property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state. After the message send fails, this property no longer returns `true`. Note that this behavior is by design. You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost. Your code should assume the socket is connected, and gracefully handle failed transmissions.\"\n  example:\n  - \"The following code example connects to a remote endpoint and then verifies the connection.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#2)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#2)]\"\n  syntax:\n    content: public bool Connected { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Net.Sockets.TcpClient.Client\"></xref> socket was connected to a remote resource as of the most recent operation; otherwise, `false`.'\n  overload: System.Net.Sockets.TcpClient.Connected*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Dispose\n  commentId: M:System.Net.Sockets.TcpClient.Dispose\n  id: Dispose\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: TcpClient.Dispose()\n  fullName: TcpClient.Dispose()\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Net.Sockets.TcpClient.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  commentId: M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: TcpClient.Dispose(Boolean)\n  fullName: TcpClient.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes this method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes this method with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references. It does this by invoking the `Dispose()` method of each referenced object.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Set to `true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.\n  overload: System.Net.Sockets.TcpClient.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\n  commentId: M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\n  id: EndConnect(System.IAsyncResult)\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: EndConnect(IAsyncResult)\n  nameWithType: TcpClient.EndConnect(IAsyncResult)\n  fullName: TcpClient.EndConnect(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Ends a pending asynchronous connection attempt.\n  remarks: \"This method blocks until the operation is complete. To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.\"\n  example:\n  - \"The following code example ends the asynchronous connection attempt.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#7)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#7)]\"\n  syntax:\n    content: public void EndConnect (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"></xref>.\n  overload: System.Net.Sockets.TcpClient.EndConnect*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>asyncResult</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>asyncResult</code> parameter was not returned by a call to a <xref href=\"System.Net.Sockets.TcpClient.BeginConnect*\"></xref> method.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\"></xref> method was previously called for the asynchronous connection.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the <xref href=\"System.Net.Sockets.Socket\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  commentId: P:System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  id: ExclusiveAddressUse\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: ExclusiveAddressUse\n  nameWithType: TcpClient.ExclusiveAddressUse\n  fullName: TcpClient.ExclusiveAddressUse\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.TcpClient\"></xref> allows only one client to use a port.\n  remarks: \"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.  \\n  \\n This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.TcpClient> and gets and sets the value of the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#3)]\\n [!code-csharp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#3)]\"\n  syntax:\n    content: public bool ExclusiveAddressUse { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Net.Sockets.TcpClient\"></xref> allows only one client to use a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions.'\n  overload: System.Net.Sockets.TcpClient.ExclusiveAddressUse*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.Finalize\n  commentId: M:System.Net.Sockets.TcpClient.Finalize\n  id: Finalize\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: TcpClient.Finalize()\n  fullName: TcpClient.Finalize()\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Frees resources used by the <xref href=\"System.Net.Sockets.TcpClient\"></xref> class.\n  remarks: \"This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \\n  \\n The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the <xref:System.Net.Sockets.TcpClient>. These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data. The finalizer does not release any unmanaged resources.  \\n  \\n For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).\"\n  syntax:\n    content: ~TcpClient ();\n    parameters: []\n  overload: System.Net.Sockets.TcpClient.Finalize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.GetStream\n  commentId: M:System.Net.Sockets.TcpClient.GetStream\n  id: GetStream\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: GetStream()\n  nameWithType: TcpClient.GetStream()\n  fullName: TcpClient.GetStream()\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Returns the <xref href=\"System.Net.Sockets.NetworkStream\"></xref> used to send and receive data.\n  remarks: \"<xref:System.Net.Sockets.TcpClient.GetStream%2A> returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data. The <xref:System.Net.Sockets.NetworkStream> class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.  \\n  \\n You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>. After you have obtained the <xref:System.Net.Sockets.NetworkStream>, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host. Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host. Both of these methods block until the specified operation is performed. You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property. A `true` value means that data has arrived from the remote host and is available for reading. In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately. If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.  \\n  \\n> [!NOTE]\\n>  You must close the <xref:System.Net.Sockets.NetworkStream> when you are through sending and receiving data. Closing <xref:System.Net.Sockets.TcpClient> does not release the <xref:System.Net.Sockets.NetworkStream>.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.TcpClient.GetStream%2A> to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. After obtaining the <xref:System.Net.Sockets.NetworkStream>, it sends and receives using its <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#14)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#14)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#14)]\"\n  syntax:\n    content: public System.Net.Sockets.NetworkStream GetStream ();\n    parameters: []\n    return:\n      type: System.Net.Sockets.NetworkStream\n      description: The underlying <xref href=\"System.Net.Sockets.NetworkStream\"></xref>.\n  overload: System.Net.Sockets.TcpClient.GetStream*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.TcpClient\"></xref> is not connected to a remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.TcpClient\"></xref> has been closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.LingerState\n  commentId: P:System.Net.Sockets.TcpClient.LingerState\n  id: LingerState\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: LingerState\n  nameWithType: TcpClient.LingerState\n  fullName: TcpClient.LingerState\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets information about the linger state of the associated socket.\n  remarks: \"The <xref:System.Net.Sockets.TcpClient.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves. This property when set modifies the conditions under which the connection can be reset by Winsock. Connection resets can still occur based on the IP protocol behavior.  \\n  \\n This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent. When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer. This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.  \\n  \\n To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property to this instance.  \\n  \\n The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property.  \\n  \\n|LingerState.Enabled|LingerState.LingerTime|Behavior|  \\n|-------------------------|----------------------------|--------------|  \\n|`false` (disabled), the default value|The time-out is not applicable, (default).|Attempts to send pending data until the default IP protocol time-out expires.|  \\n|`true` (enabled)|A nonzero time-out|Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.|  \\n|`true` (enabled)|A zero timeout.|Discards any pending data and Winsock resets the connection.|  \\n  \\n The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is not set.  \\n  \\n When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.\"\n  example:\n  - \"The following code example sets and gets the sockets linger time.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#12)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#12)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#12)]\"\n  syntax:\n    content: public System.Net.Sockets.LingerOption LingerState { get; set; }\n    return:\n      type: System.Net.Sockets.LingerOption\n      description: A <xref href=\"System.Net.Sockets.LingerOption\"></xref>. By default, lingering is disabled.\n  overload: System.Net.Sockets.TcpClient.LingerState*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.NoDelay\n  commentId: P:System.Net.Sockets.TcpClient.NoDelay\n  id: NoDelay\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: NoDelay\n  nameWithType: TcpClient.NoDelay\n  fullName: TcpClient.NoDelay\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a value that disables a delay when send or receive buffers are not full.\n  remarks: When <xref:System.Net.Sockets.TcpClient.NoDelay%2A> is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data. Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient. However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send. Your decision should weigh the relative importance of network efficiency versus application requirements.\n  example:\n  - \"The following code example disables the delay. It then checks the value of <xref:System.Net.Sockets.TcpClient.NoDelay%2A> to verify that the property was successfully set.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]\"\n  syntax:\n    content: public bool NoDelay { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the delay is disabled, otherwise `false`. The default value is `false`.'\n  overload: System.Net.Sockets.TcpClient.NoDelay*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.ReceiveBufferSize\n  commentId: P:System.Net.Sockets.TcpClient.ReceiveBufferSize\n  id: ReceiveBufferSize\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: ReceiveBufferSize\n  nameWithType: TcpClient.ReceiveBufferSize\n  fullName: TcpClient.ReceiveBufferSize\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets the size of the receive buffer.\n  remarks: \"The <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation. This property actually manipulates the network buffer space allocated for receiving incoming data.  \\n  \\n Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=fullName> method. Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size. If your application will be receiving bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Read%2A> method a very large application buffer.  \\n  \\n If the network buffer is smaller than the amount of data you request in the <xref:System.Net.Sockets.NetworkStream.Read%2A> method, you will not be able to retrieve the desired amount of data in one read operation. This incurs the overhead of additional calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method.\"\n  example:\n  - \"The following code example sets and gets the receive buffer size.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]\"\n  syntax:\n    content: public int ReceiveBufferSize { get; set; }\n    return:\n      type: System.Int32\n      description: The size of the receive buffer, in bytes. The default value is 8192 bytes.\n  overload: System.Net.Sockets.TcpClient.ReceiveBufferSize*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"An error occurred when setting the buffer size.  \\n  \\n -or-  \\n  \\n In .NET Compact Framework applications, you cannot set this property. For a workaround, see the Platform Note in Remarks.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.ReceiveTimeout\n  commentId: P:System.Net.Sockets.TcpClient.ReceiveTimeout\n  id: ReceiveTimeout\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: ReceiveTimeout\n  nameWithType: TcpClient.ReceiveTimeout\n  fullName: TcpClient.ReceiveTimeout\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets the amount of time a <xref href=\"System.Net.Sockets.TcpClient\"></xref> will wait to receive data once a read operation is initiated.\n  remarks: The <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data. This time is measured in milliseconds. If the time-out expires before <xref:System.Net.Sockets.NetworkStream.Read%2A> successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>. There is no time-out by default.\n  example:\n  - \"The following code example sets and gets the receive time out.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]\"\n  syntax:\n    content: public int ReceiveTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: The time-out value of the connection in milliseconds. The default value is 0.\n  overload: System.Net.Sockets.TcpClient.ReceiveTimeout*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.SendBufferSize\n  commentId: P:System.Net.Sockets.TcpClient.SendBufferSize\n  id: SendBufferSize\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: SendBufferSize\n  nameWithType: TcpClient.SendBufferSize\n  fullName: TcpClient.SendBufferSize\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets the size of the send buffer.\n  remarks: \"The <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=fullName> method. This property actually manipulates the network buffer space allocated for send operation.  \\n  \\n Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation. Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size. If your application will be sending bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Write%2A> method a very large application buffer.  \\n  \\n If the network buffer is smaller than the amount of data you provide the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, several network send operations will be performed for every call you make to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.\"\n  example:\n  - \"The following code example sets and gets the send buffer size.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]\"\n  syntax:\n    content: public int SendBufferSize { get; set; }\n    return:\n      type: System.Int32\n      description: The size of the send buffer, in bytes. The default value is 8192 bytes.\n  overload: System.Net.Sockets.TcpClient.SendBufferSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.SendTimeout\n  commentId: P:System.Net.Sockets.TcpClient.SendTimeout\n  id: SendTimeout\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: SendTimeout\n  nameWithType: TcpClient.SendTimeout\n  fullName: TcpClient.SendTimeout\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets the amount of time a <xref href=\"System.Net.Sockets.TcpClient\"></xref> will wait for a send operation to complete successfully.\n  remarks: \"The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully. This time is measured in milliseconds.  \\n  \\n After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host. The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned. If the time-out expires before the <xref:System.Net.Sockets.Socket.Send%2A> method successfully completes, <xref:System.Net.Sockets.TcpClient> will throw a <xref:System.Net.Sockets.SocketException>. There is no time-out by default.\"\n  example:\n  - \"The following code example sets and gets the <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> value.  \\n  \\n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]\\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]\\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]\"\n  syntax:\n    content: public int SendTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: The send time-out value, in milliseconds. The default is 0.\n  overload: System.Net.Sockets.TcpClient.SendTimeout*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.TcpClient.System#IDisposable#Dispose\n  commentId: M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: System.Net.Sockets.TcpClient\n  langs:\n  - csharp\n  name: IDisposable.Dispose()\n  nameWithType: TcpClient.IDisposable.Dispose()\n  fullName: TcpClient.IDisposable.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  syntax:\n    content: void IDisposable.Dispose ();\n    parameters: []\n  overload: System.Net.Sockets.TcpClient.System#IDisposable#Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Net.Sockets.SocketException\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketException\n  nameWithType: SocketException\n  fullName: System.Net.Sockets.SocketException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Net.Sockets.TcpClient.#ctor\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: TcpClient()\n  nameWithType: TcpClient.TcpClient()\n  fullName: TcpClient.TcpClient()\n- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: TcpClient(IPEndPoint)\n  nameWithType: TcpClient.TcpClient(IPEndPoint)\n  fullName: TcpClient.TcpClient(IPEndPoint)\n- uid: System.Net.IPEndPoint\n  parent: System.Net\n  isExternal: false\n  name: IPEndPoint\n  nameWithType: IPEndPoint\n  fullName: System.Net.IPEndPoint\n- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: TcpClient(AddressFamily)\n  nameWithType: TcpClient.TcpClient(AddressFamily)\n  fullName: TcpClient.TcpClient(AddressFamily)\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  nameWithType: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n- uid: System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: TcpClient(String, Int32)\n  nameWithType: TcpClient.TcpClient(String, Int32)\n  fullName: TcpClient.TcpClient(String, Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Sockets.TcpClient.Active\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Active\n  nameWithType: TcpClient.Active\n  fullName: TcpClient.Active\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Sockets.TcpClient.Available\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Available\n  nameWithType: TcpClient.Available\n  fullName: TcpClient.Available\n- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: BeginConnect(IPAddress, Int32, AsyncCallback, Object)\n  nameWithType: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)\n  fullName: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: BeginConnect(IPAddress[], Int32, AsyncCallback, Object)\n  nameWithType: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)\n  fullName: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)\n- uid: System.Net.IPAddress[]\n  parent: System.Net\n  isExternal: false\n  name: IPAddress[]\n  nameWithType: IPAddress[]\n  fullName: System.Net.IPAddress[]\n  spec.csharp:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    nameWithType: IPAddress\n    fullName: System.Net.IPAddress\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: BeginConnect(String, Int32, AsyncCallback, Object)\n  nameWithType: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)\n  fullName: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)\n- uid: System.Net.Sockets.TcpClient.Client\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Client\n  nameWithType: TcpClient.Client\n  fullName: TcpClient.Client\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: false\n  name: Socket\n  nameWithType: Socket\n  fullName: System.Net.Sockets.Socket\n- uid: System.Net.Sockets.TcpClient.Close\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Close()\n  nameWithType: TcpClient.Close()\n  fullName: TcpClient.Close()\n- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Connect(IPEndPoint)\n  nameWithType: TcpClient.Connect(IPEndPoint)\n  fullName: TcpClient.Connect(IPEndPoint)\n- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Connect(IPAddress, Int32)\n  nameWithType: TcpClient.Connect(IPAddress, Int32)\n  fullName: TcpClient.Connect(IPAddress, Int32)\n- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Connect(IPAddress[], Int32)\n  nameWithType: TcpClient.Connect(IPAddress[], Int32)\n  fullName: TcpClient.Connect(IPAddress[], Int32)\n- uid: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Connect(String, Int32)\n  nameWithType: TcpClient.Connect(String, Int32)\n  fullName: TcpClient.Connect(String, Int32)\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ConnectAsync(String, Int32)\n  nameWithType: TcpClient.ConnectAsync(String, Int32)\n  fullName: TcpClient.ConnectAsync(String, Int32)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ConnectAsync(IPAddress, Int32)\n  nameWithType: TcpClient.ConnectAsync(IPAddress, Int32)\n  fullName: TcpClient.ConnectAsync(IPAddress, Int32)\n- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ConnectAsync(IPAddress[], Int32)\n  nameWithType: TcpClient.ConnectAsync(IPAddress[], Int32)\n  fullName: TcpClient.ConnectAsync(IPAddress[], Int32)\n- uid: System.Net.Sockets.TcpClient.Connected\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Connected\n  nameWithType: TcpClient.Connected\n  fullName: TcpClient.Connected\n- uid: System.Net.Sockets.TcpClient.Dispose\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Dispose()\n  nameWithType: TcpClient.Dispose()\n  fullName: TcpClient.Dispose()\n- uid: System.Net.Sockets.TcpClient.Dispose(System.Boolean)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: TcpClient.Dispose(Boolean)\n  fullName: TcpClient.Dispose(Boolean)\n- uid: System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: EndConnect(IAsyncResult)\n  nameWithType: TcpClient.EndConnect(IAsyncResult)\n  fullName: TcpClient.EndConnect(IAsyncResult)\n- uid: System.Net.Sockets.TcpClient.ExclusiveAddressUse\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: TcpClient.ExclusiveAddressUse\n  fullName: TcpClient.ExclusiveAddressUse\n- uid: System.Net.Sockets.TcpClient.Finalize\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Finalize()\n  nameWithType: TcpClient.Finalize()\n  fullName: TcpClient.Finalize()\n- uid: System.Net.Sockets.TcpClient.GetStream\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: GetStream()\n  nameWithType: TcpClient.GetStream()\n  fullName: TcpClient.GetStream()\n- uid: System.Net.Sockets.NetworkStream\n  parent: System.Net.Sockets\n  isExternal: false\n  name: NetworkStream\n  nameWithType: NetworkStream\n  fullName: System.Net.Sockets.NetworkStream\n- uid: System.Net.Sockets.TcpClient.LingerState\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: LingerState\n  nameWithType: TcpClient.LingerState\n  fullName: TcpClient.LingerState\n- uid: System.Net.Sockets.LingerOption\n  parent: System.Net.Sockets\n  isExternal: false\n  name: LingerOption\n  nameWithType: LingerOption\n  fullName: System.Net.Sockets.LingerOption\n- uid: System.Net.Sockets.TcpClient.NoDelay\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: NoDelay\n  nameWithType: TcpClient.NoDelay\n  fullName: TcpClient.NoDelay\n- uid: System.Net.Sockets.TcpClient.ReceiveBufferSize\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ReceiveBufferSize\n  nameWithType: TcpClient.ReceiveBufferSize\n  fullName: TcpClient.ReceiveBufferSize\n- uid: System.Net.Sockets.TcpClient.ReceiveTimeout\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ReceiveTimeout\n  nameWithType: TcpClient.ReceiveTimeout\n  fullName: TcpClient.ReceiveTimeout\n- uid: System.Net.Sockets.TcpClient.SendBufferSize\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: SendBufferSize\n  nameWithType: TcpClient.SendBufferSize\n  fullName: TcpClient.SendBufferSize\n- uid: System.Net.Sockets.TcpClient.SendTimeout\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: SendTimeout\n  nameWithType: TcpClient.SendTimeout\n  fullName: TcpClient.SendTimeout\n- uid: System.Net.Sockets.TcpClient.System#IDisposable#Dispose\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: IDisposable.Dispose()\n  nameWithType: TcpClient.IDisposable.Dispose()\n  fullName: TcpClient.IDisposable.Dispose()\n- uid: System.Net.Sockets.TcpClient.#ctor*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: TcpClient\n  nameWithType: TcpClient.TcpClient\n  fullName: TcpClient.TcpClient\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Active*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Active\n  nameWithType: TcpClient.Active\n  fullName: TcpClient.Active\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Available*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Available\n  nameWithType: TcpClient.Available\n  fullName: TcpClient.Available\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.BeginConnect*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: BeginConnect\n  nameWithType: TcpClient.BeginConnect\n  fullName: TcpClient.BeginConnect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Client*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Client\n  nameWithType: TcpClient.Client\n  fullName: TcpClient.Client\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Close*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Close\n  nameWithType: TcpClient.Close\n  fullName: TcpClient.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Connect*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Connect\n  nameWithType: TcpClient.Connect\n  fullName: TcpClient.Connect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.ConnectAsync*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ConnectAsync\n  nameWithType: TcpClient.ConnectAsync\n  fullName: TcpClient.ConnectAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Connected*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Connected\n  nameWithType: TcpClient.Connected\n  fullName: TcpClient.Connected\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Dispose*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Dispose\n  nameWithType: TcpClient.Dispose\n  fullName: TcpClient.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.EndConnect*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: EndConnect\n  nameWithType: TcpClient.EndConnect\n  fullName: TcpClient.EndConnect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.ExclusiveAddressUse*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: TcpClient.ExclusiveAddressUse\n  fullName: TcpClient.ExclusiveAddressUse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.Finalize*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: Finalize\n  nameWithType: TcpClient.Finalize\n  fullName: TcpClient.Finalize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.GetStream*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: GetStream\n  nameWithType: TcpClient.GetStream\n  fullName: TcpClient.GetStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.LingerState*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: LingerState\n  nameWithType: TcpClient.LingerState\n  fullName: TcpClient.LingerState\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.NoDelay*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: NoDelay\n  nameWithType: TcpClient.NoDelay\n  fullName: TcpClient.NoDelay\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.ReceiveBufferSize*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ReceiveBufferSize\n  nameWithType: TcpClient.ReceiveBufferSize\n  fullName: TcpClient.ReceiveBufferSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.ReceiveTimeout*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: ReceiveTimeout\n  nameWithType: TcpClient.ReceiveTimeout\n  fullName: TcpClient.ReceiveTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.SendBufferSize*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: SendBufferSize\n  nameWithType: TcpClient.SendBufferSize\n  fullName: TcpClient.SendBufferSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.SendTimeout*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: SendTimeout\n  nameWithType: TcpClient.SendTimeout\n  fullName: TcpClient.SendTimeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Net.Sockets.TcpClient.System#IDisposable#Dispose*\n  parent: System.Net.Sockets.TcpClient\n  isExternal: false\n  name: System.IDisposable.Dispose\n  nameWithType: TcpClient.System.IDisposable.Dispose\n  fullName: TcpClient.System.IDisposable.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}