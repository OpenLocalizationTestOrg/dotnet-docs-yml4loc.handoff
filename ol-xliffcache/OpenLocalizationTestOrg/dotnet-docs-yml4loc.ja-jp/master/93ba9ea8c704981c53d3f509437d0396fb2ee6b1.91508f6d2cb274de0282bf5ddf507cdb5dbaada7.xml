{"nodes":[{"content":"Provides a way to choose a <xref href=\"System.Windows.DataTemplate\"></xref> based on the data object and the data-bound element.","nodes":[{"pos":[0,128],"content":"Provides a way to choose a <ph id=\"ph1\">&lt;xref href=\"System.Windows.DataTemplate\"&gt;&lt;/xref&gt;</ph> based on the data object and the data-bound element.","source":"Provides a way to choose a <xref href=\"System.Windows.DataTemplate\"></xref> based on the data object and the data-bound element."}],"pos":[598,727],"yaml":true},{"content":"Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](~/docs/framework/wpf/data/data-templating-overview.md).  \n  \n To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","nodes":[{"pos":[0,847],"content":"Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](~/docs/framework/wpf/data/data-templating-overview.md).","nodes":[{"content":"Typically, you create a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataTemplateSelector&gt;</ph> when you have more than one <ph id=\"ph2\">&lt;xref:System.Windows.DataTemplate&gt;</ph> for the same type of objects and you want to supply your own logic to choose a <ph id=\"ph3\">&lt;xref:System.Windows.DataTemplate&gt;</ph> to apply based on the properties of each data object.","pos":[0,306],"source":"Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object."},{"content":"Note that if you have objects of different types you can set the <ph id=\"ph1\">&lt;xref:System.Windows.DataTemplate.DataType%2A&gt;</ph> property on the <ph id=\"ph2\">&lt;xref:System.Windows.DataTemplate&gt;</ph>.","pos":[307,470],"source":" Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>."},{"content":"If you do that then there is no need to create a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataTemplateSelector&gt;</ph>.","pos":[471,572],"source":" If you do that then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>."},{"content":"Furthermore, if you have objects of the same type but with different properties, you can also consider using a <ph id=\"ph1\">&lt;xref:System.Windows.DataTrigger&gt;</ph> or a data converter.","pos":[573,738],"source":" Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Templating Overview<ept id=\"p1\">](~/docs/framework/wpf/data/data-templating-overview.md)</ept>.","pos":[739,847],"source":" For more information, see [Data Templating Overview](~/docs/framework/wpf/data/data-templating-overview.md)."}]},{"pos":[854,1183],"content":"To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","nodes":[{"content":"To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","pos":[0,329],"nodes":[{"content":"To create a template selector, create a class that inherits from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataTemplateSelector&gt;</ph> and override the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A&gt;</ph> method.","pos":[0,211],"source":"To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method."},{"content":"Once your class is defined you can assign an instance of the class to the template selector property of your element.","pos":[212,329]}]}]}],"pos":[738,1926],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Controls.DataTemplateSelector\"></xref> class.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.DataTemplateSelector\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Controls.DataTemplateSelector\"></xref> class."}],"pos":[5853,5960],"yaml":true},{"content":"When overridden in a derived class, returns a <xref href=\"System.Windows.DataTemplate\"></xref> based on custom logic.","nodes":[{"pos":[0,117],"content":"When overridden in a derived class, returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.DataTemplate\"&gt;&lt;/xref&gt;</ph> based on custom logic.","source":"When overridden in a derived class, returns a <xref href=\"System.Windows.DataTemplate\"></xref> based on custom logic."}],"pos":[7337,7455],"yaml":true},{"content":"Typically, you use a template selector when you have more than one data template defined for the same type of objects. For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students. You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","nodes":[{"pos":[0,581],"content":"Typically, you use a template selector when you have more than one data template defined for the same type of objects. For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students. You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","nodes":[{"content":"Typically, you use a template selector when you have more than one data template defined for the same type of objects. For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students. You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.","pos":[0,581],"nodes":[{"content":"Typically, you use a template selector when you have more than one data template defined for the same type of objects.","pos":[0,118]},{"content":"For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students.","pos":[119,259]},{"content":"You can do this by creating a class that inherits from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.DataTemplateSelector&gt;</ph> and overriding the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A&gt;</ph> method.","pos":[260,463],"source":" You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method."},{"content":"Once your class is defined you can assign an instance of the class to the template selector property of your element.","pos":[464,581]}]}]}],"pos":[7466,8048],"yaml":true,"extradata":"MT"},{"content":"The data object for which to select the template.","nodes":[{"pos":[0,49],"content":"The data object for which to select the template.","nodes":[{"content":"The data object for which to select the template.","pos":[0,49]}]}],"pos":[10804,10854],"yaml":true},{"content":"The data-bound object.","nodes":[{"pos":[0,22],"content":"The data-bound object.","nodes":[{"content":"The data-bound object.","pos":[0,22]}]}],"pos":[10937,10960],"yaml":true},{"content":"Returns a <xref href=\"System.Windows.DataTemplate\"></xref> or `null`. The default value is `null`.","nodes":[{"pos":[0,98],"content":"Returns a <xref href=\"System.Windows.DataTemplate\"></xref> or `null`. The default value is `null`.","nodes":[{"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.DataTemplate\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">`null`</ph>.","pos":[0,69],"source":"Returns a <xref href=\"System.Windows.DataTemplate\"></xref> or `null`."},{"content":"The default value is <ph id=\"ph1\">`null`</ph>.","pos":[70,98],"source":" The default value is `null`."}]}],"pos":[11031,11130],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Controls.DataTemplateSelector\n  commentId: T:System.Windows.Controls.DataTemplateSelector\n  id: DataTemplateSelector\n  children:\n  - System.Windows.Controls.DataTemplateSelector.#ctor\n  - System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)\n  langs:\n  - csharp\n  name: DataTemplateSelector\n  nameWithType: DataTemplateSelector\n  fullName: System.Windows.Controls.DataTemplateSelector\n  type: Class\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Provides a way to choose a <xref href=\"System.Windows.DataTemplate\"></xref> based on the data object and the data-bound element.\n  remarks: \"Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](~/docs/framework/wpf/data/data-templating-overview.md).  \\n  \\n To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.\"\n  example:\n  - \"In this example, the binding source is a list of `Task` objects. One of the properties of a `Task` object is `Priority`. There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.  \\n  \\n To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property. The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.  \\n  \\n [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]\\n [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  \\n  \\n We can then declare the `TaskListDataTemplateSelector` as a resource:  \\n  \\n [!code-xml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  \\n[!code-xml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  \\n[!code-xml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  \\n  \\n To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>. The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection. The call passes the data object as the item parameter. The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.  \\n  \\n [!code-xml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  \\n  \\n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).\"\n  syntax:\n    content: public class DataTemplateSelector\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/DataTemplateSelector.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Controls.DataTemplateSelector.#ctor\n  commentId: M:System.Windows.Controls.DataTemplateSelector.#ctor\n  id: '#ctor'\n  parent: System.Windows.Controls.DataTemplateSelector\n  langs:\n  - csharp\n  name: DataTemplateSelector()\n  nameWithType: DataTemplateSelector.DataTemplateSelector()\n  fullName: DataTemplateSelector.DataTemplateSelector()\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Controls.DataTemplateSelector\"></xref> class.\n  syntax:\n    content: public DataTemplateSelector ();\n    parameters: []\n  overload: System.Windows.Controls.DataTemplateSelector.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/DataTemplateSelector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)\n  commentId: M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)\n  id: SelectTemplate(System.Object,System.Windows.DependencyObject)\n  parent: System.Windows.Controls.DataTemplateSelector\n  langs:\n  - csharp\n  name: SelectTemplate(Object, DependencyObject)\n  nameWithType: DataTemplateSelector.SelectTemplate(Object, DependencyObject)\n  fullName: DataTemplateSelector.SelectTemplate(Object, DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: When overridden in a derived class, returns a <xref href=\"System.Windows.DataTemplate\"></xref> based on custom logic.\n  remarks: Typically, you use a template selector when you have more than one data template defined for the same type of objects. For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students. You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.\n  example:\n  - \"In this example, the binding source is a list of `Task` objects. One of the properties of a `Task` object is `Priority`. There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.  \\n  \\n To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property. The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.  \\n  \\n [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]\\n [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  \\n  \\n We can then declare the `TaskListDataTemplateSelector` as a resource:  \\n  \\n [!code-xml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  \\n[!code-xml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  \\n[!code-xml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  \\n  \\n To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>. The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection. The call passes the data object as the item parameter. The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.  \\n  \\n [!code-xml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  \\n  \\n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).\"\n  syntax:\n    content: public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);\n    parameters:\n    - id: item\n      type: System.Object\n      description: The data object for which to select the template.\n    - id: container\n      type: System.Windows.DependencyObject\n      description: The data-bound object.\n    return:\n      type: System.Windows.DataTemplate\n      description: Returns a <xref href=\"System.Windows.DataTemplate\"></xref> or `null`. The default value is `null`.\n  overload: System.Windows.Controls.DataTemplateSelector.SelectTemplate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/DataTemplateSelector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Controls.DataTemplateSelector.#ctor\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: DataTemplateSelector()\n  nameWithType: DataTemplateSelector.DataTemplateSelector()\n  fullName: DataTemplateSelector.DataTemplateSelector()\n- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: SelectTemplate(Object, DependencyObject)\n  nameWithType: DataTemplateSelector.SelectTemplate(Object, DependencyObject)\n  fullName: DataTemplateSelector.SelectTemplate(Object, DependencyObject)\n- uid: System.Windows.DataTemplate\n  parent: System.Windows\n  isExternal: false\n  name: DataTemplate\n  nameWithType: DataTemplate\n  fullName: System.Windows.DataTemplate\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.Controls.DataTemplateSelector.#ctor*\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: DataTemplateSelector\n  nameWithType: DataTemplateSelector.DataTemplateSelector\n  fullName: DataTemplateSelector.DataTemplateSelector\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/DataTemplateSelector.xml\n- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate*\n  parent: System.Windows.Controls.DataTemplateSelector\n  isExternal: false\n  name: SelectTemplate\n  nameWithType: DataTemplateSelector.SelectTemplate\n  fullName: DataTemplateSelector.SelectTemplate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/DataTemplateSelector.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}