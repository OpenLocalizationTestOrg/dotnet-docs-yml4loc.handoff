{"nodes":[{"content":"Exposes the <xref href=\"System.Collections.IEnumerable.GetEnumerator\"></xref> method, which supports a simple iteration over a collection by a .NET Framework data provider.","nodes":[{"pos":[0,172],"content":"Exposes the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable.GetEnumerator\"&gt;&lt;/xref&gt;</ph> method, which supports a simple iteration over a collection by a .NET Framework data provider.","source":"Exposes the <xref href=\"System.Collections.IEnumerable.GetEnumerator\"></xref> method, which supports a simple iteration over a collection by a .NET Framework data provider."}],"pos":[838,1011],"yaml":true},{"content":"The <xref:System.Data.Common.DbEnumerator> class is implemented by a .NET Framework data provider to provide data binding support.  \n  \n By design, the <xref:System.Data.Common.DbEnumerator> object is intended for use with only one resultset. For example, if you execute a batch statement containing two SQL SELECT statements that return different schemas, the second statement might not retun the entire schema. To avoid this situation, obtain a <xref:System.Data.Common.DbEnumerator> for each resultset, and then call the `NextResult` method of a .NET Framework data provider DataReader object.","nodes":[{"pos":[0,130],"content":"The <xref:System.Data.Common.DbEnumerator> class is implemented by a .NET Framework data provider to provide data binding support.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> class is implemented by a .NET Framework data provider to provide data binding support.","pos":[0,130],"source":"The <xref:System.Data.Common.DbEnumerator> class is implemented by a .NET Framework data provider to provide data binding support."}]},{"pos":[137,596],"content":"By design, the <xref:System.Data.Common.DbEnumerator> object is intended for use with only one resultset. For example, if you execute a batch statement containing two SQL SELECT statements that return different schemas, the second statement might not retun the entire schema. To avoid this situation, obtain a <xref:System.Data.Common.DbEnumerator> for each resultset, and then call the `NextResult` method of a .NET Framework data provider DataReader object.","nodes":[{"content":"By design, the <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> object is intended for use with only one resultset.","pos":[0,105],"source":"By design, the <xref:System.Data.Common.DbEnumerator> object is intended for use with only one resultset."},{"content":"For example, if you execute a batch statement containing two SQL SELECT statements that return different schemas, the second statement might not retun the entire schema.","pos":[106,275]},{"content":"To avoid this situation, obtain a <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator&gt;</ph> for each resultset, and then call the <ph id=\"ph2\">`NextResult`</ph> method of a .NET Framework data provider DataReader object.","pos":[276,459],"source":" To avoid this situation, obtain a <xref:System.Data.Common.DbEnumerator> for each resultset, and then call the `NextResult` method of a .NET Framework data provider DataReader object."}]}],"pos":[1022,1623],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class with the give n data reader.","nodes":[{"pos":[0,121],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.Common.DbEnumerator\"&gt;&lt;/xref&gt;</ph> class with the give n data reader.","source":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class with the give n data reader."}],"pos":[3424,3546],"yaml":true},{"content":"The DataReader through which to iterate.","nodes":[{"pos":[0,40],"content":"The DataReader through which to iterate.","nodes":[{"content":"The DataReader through which to iterate.","pos":[0,40]}]}],"pos":[3727,3768],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified `DataReader`.","nodes":[{"pos":[0,126],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.Common.DbEnumerator\"&gt;&lt;/xref&gt;</ph> class using the specified <ph id=\"ph2\">`DataReader`</ph>.","source":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified `DataReader`."}],"pos":[4952,5079],"yaml":true},{"content":"The `DataReader` through which to iterate.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">`DataReader`</ph> through which to iterate.","source":"The `DataReader` through which to iterate."}],"pos":[5244,5287],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified reader and indicates whether to automatically close the reader after iterating through its data.","nodes":[{"pos":[0,209],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.Common.DbEnumerator\"&gt;&lt;/xref&gt;</ph> class using the specified reader and indicates whether to automatically close the reader after iterating through its data.","source":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified reader and indicates whether to automatically close the reader after iterating through its data."}],"pos":[6704,6914],"yaml":true},{"content":"The DataReader through which to iterate.","nodes":[{"pos":[0,40],"content":"The DataReader through which to iterate.","nodes":[{"content":"The DataReader through which to iterate.","pos":[0,40]}]}],"pos":[7113,7154],"yaml":true},{"content":"`true` to automatically close the DataReader after iterating through its data; otherwise, `false`.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">`true`</ph> to automatically close the DataReader after iterating through its data; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to automatically close the DataReader after iterating through its data; otherwise, `false`."}],"pos":[7222,7323],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified `DataReader`, and indicates whether to automatically close the `DataReader` after iterating through its data.","nodes":[{"pos":[0,222],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.Common.DbEnumerator\"&gt;&lt;/xref&gt;</ph> class using the specified <ph id=\"ph2\">`DataReader`</ph>, and indicates whether to automatically close the <ph id=\"ph3\">`DataReader`</ph> after iterating through its data.","source":"Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified `DataReader`, and indicates whether to automatically close the `DataReader` after iterating through its data."}],"pos":[8579,8802],"yaml":true},{"content":"The `DataReader` through which to iterate.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">`DataReader`</ph> through which to iterate.","source":"The `DataReader` through which to iterate."}],"pos":[8985,9028],"yaml":true},{"content":"`true` to automatically close the `DataReader` after iterating through its data; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to automatically close the <ph id=\"ph2\">`DataReader`</ph> after iterating through its data; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to automatically close the `DataReader` after iterating through its data; otherwise, `false`."}],"pos":[9096,9199],"yaml":true},{"content":"Gets the current element in the collection.","nodes":[{"pos":[0,43],"content":"Gets the current element in the collection.","nodes":[{"content":"Gets the current element in the collection.","pos":[0,43]}]}],"pos":[10453,10497],"yaml":true},{"content":"After an enumerator is created or after a <xref:System.Data.Common.DbEnumerator.Reset%2A>, <xref:System.Data.Common.DbEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Data.Common.DbEnumerator.Current%2A>; otherwise, <xref:System.Data.Common.DbEnumerator.Current%2A> is undefined. <xref:System.Data.Common.DbEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> returned false, which indicates the end of the collection. <xref:System.Data.Common.DbEnumerator.Current%2A> does not move the position of the enumerator and consecutive calls to <xref:System.Data.Common.DbEnumerator.Current%2A> return the same object until either <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> generates an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Data.Common.DbEnumerator.MoveNext%2A> and <xref:System.Data.Common.DbEnumerator.Current%2A>, <xref:System.Data.Common.DbEnumerator.Current%2A> returns the element to which it is set, even if the enumerator is already invalidated.","nodes":[{"pos":[0,1561],"content":"After an enumerator is created or after a <xref:System.Data.Common.DbEnumerator.Reset%2A>, <xref:System.Data.Common.DbEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Data.Common.DbEnumerator.Current%2A>; otherwise, <xref:System.Data.Common.DbEnumerator.Current%2A> is undefined. <xref:System.Data.Common.DbEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> returned false, which indicates the end of the collection. <xref:System.Data.Common.DbEnumerator.Current%2A> does not move the position of the enumerator and consecutive calls to <xref:System.Data.Common.DbEnumerator.Current%2A> return the same object until either <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> generates an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Data.Common.DbEnumerator.MoveNext%2A> and <xref:System.Data.Common.DbEnumerator.Current%2A>, <xref:System.Data.Common.DbEnumerator.Current%2A> returns the element to which it is set, even if the enumerator is already invalidated.","nodes":[{"content":"After an enumerator is created or after a <xref:System.Data.Common.DbEnumerator.Reset%2A>, <xref:System.Data.Common.DbEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Data.Common.DbEnumerator.Current%2A>; otherwise, <xref:System.Data.Common.DbEnumerator.Current%2A> is undefined. <xref:System.Data.Common.DbEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> returned false, which indicates the end of the collection. <xref:System.Data.Common.DbEnumerator.Current%2A> does not move the position of the enumerator and consecutive calls to <xref:System.Data.Common.DbEnumerator.Current%2A> return the same object until either <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> generates an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Data.Common.DbEnumerator.MoveNext%2A> and <xref:System.Data.Common.DbEnumerator.Current%2A>, <xref:System.Data.Common.DbEnumerator.Current%2A> returns the element to which it is set, even if the enumerator is already invalidated.","pos":[0,1561],"nodes":[{"content":"After an enumerator is created or after a <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph3\">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph>; otherwise, <ph id=\"ph4\">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> is undefined.","pos":[0,375],"source":"After an enumerator is created or after a <xref:System.Data.Common.DbEnumerator.Reset%2A>, <xref:System.Data.Common.DbEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Data.Common.DbEnumerator.Current%2A>; otherwise, <xref:System.Data.Common.DbEnumerator.Current%2A> is undefined."},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> also throws an exception if the last call to <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> returned false, which indicates the end of the collection.","pos":[376,580],"source":" <xref:System.Data.Common.DbEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> returned false, which indicates the end of the collection."},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> does not move the position of the enumerator and consecutive calls to <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> return the same object until either <ph id=\"ph3\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> is called.","pos":[581,899],"source":" <xref:System.Data.Common.DbEnumerator.Current%2A> does not move the position of the enumerator and consecutive calls to <xref:System.Data.Common.DbEnumerator.Current%2A> return the same object until either <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> is called."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[900,972]},{"content":"If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> generates an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[973,1280],"source":" If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> generates an <xref:System.InvalidOperationException>."},{"content":"If the collection is modified between <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Data.Common.DbEnumerator.Current%2A&gt;</ph> returns the element to which it is set, even if the enumerator is already invalidated.","pos":[1281,1561],"source":" If the collection is modified between <xref:System.Data.Common.DbEnumerator.MoveNext%2A> and <xref:System.Data.Common.DbEnumerator.Current%2A>, <xref:System.Data.Common.DbEnumerator.Current%2A> returns the element to which it is set, even if the enumerator is already invalidated."}]}]}],"pos":[10508,12070],"yaml":true,"extradata":"MT"},{"content":"The current element in the collection.","nodes":[{"pos":[0,38],"content":"The current element in the collection.","nodes":[{"content":"The current element in the collection.","pos":[0,38]}]}],"pos":[12181,12220],"yaml":true},{"content":"The enumerator is positioned before the first element of the collection or after the last element.","nodes":[{"pos":[0,98],"content":"The enumerator is positioned before the first element of the collection or after the last element.","nodes":[{"content":"The enumerator is positioned before the first element of the collection or after the last element.","pos":[0,98]}]}],"pos":[12397,12496],"yaml":true},{"content":"Advances the enumerator to the next element of the collection.","nodes":[{"pos":[0,62],"content":"Advances the enumerator to the next element of the collection.","nodes":[{"content":"Advances the enumerator to the next element of the collection.","pos":[0,62]}]}],"pos":[13692,13755],"yaml":true},{"content":"After an enumerator is created or after a call to <xref:System.Data.Common.DbEnumerator.Reset%2A>, an enumerator is positioned before the first element of the collection, and the first call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> moves the enumerator over the first element of the collection. After the end of the collection is passed, subsequent calls to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> return false until <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","nodes":[{"pos":[0,876],"content":"After an enumerator is created or after a call to <xref:System.Data.Common.DbEnumerator.Reset%2A>, an enumerator is positioned before the first element of the collection, and the first call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> moves the enumerator over the first element of the collection. After the end of the collection is passed, subsequent calls to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> return false until <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"After an enumerator is created or after a call to <xref:System.Data.Common.DbEnumerator.Reset%2A>, an enumerator is positioned before the first element of the collection, and the first call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> moves the enumerator over the first element of the collection. After the end of the collection is passed, subsequent calls to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> return false until <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","pos":[0,876],"nodes":[{"content":"After an enumerator is created or after a call to <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph>, an enumerator is positioned before the first element of the collection, and the first call to <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> moves the enumerator over the first element of the collection.","pos":[0,306],"source":"After an enumerator is created or after a call to <xref:System.Data.Common.DbEnumerator.Reset%2A>, an enumerator is positioned before the first element of the collection, and the first call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> moves the enumerator over the first element of the collection."},{"content":"After the end of the collection is passed, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> return false until <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> is called.","pos":[307,498],"source":" After the end of the collection is passed, subsequent calls to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> return false until <xref:System.Data.Common.DbEnumerator.Reset%2A> is called."},{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[499,571]},{"content":"If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[572,876],"source":" If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."}]}]}],"pos":[13766,14643],"yaml":true,"extradata":"MT"},{"content":"`true` if the enumerator was successfully advanced to the next element; `false` if the enumerator has passed the end of the collection.","nodes":[{"pos":[0,135],"content":"<ph id=\"ph1\">`true`</ph> if the enumerator was successfully advanced to the next element; <ph id=\"ph2\">`false`</ph> if the enumerator has passed the end of the collection.","source":"`true` if the enumerator was successfully advanced to the next element; `false` if the enumerator has passed the end of the collection."}],"pos":[14768,14906],"yaml":true},{"content":"The collection was modified after the enumerator was created.","nodes":[{"pos":[0,61],"content":"The collection was modified after the enumerator was created.","nodes":[{"content":"The collection was modified after the enumerator was created.","pos":[0,61]}]}],"pos":[15084,15146],"yaml":true},{"content":"Sets the enumerator to its initial position, which is before the first element in the collection.","nodes":[{"pos":[0,97],"content":"Sets the enumerator to its initial position, which is before the first element in the collection.","nodes":[{"content":"Sets the enumerator to its initial position, which is before the first element in the collection.","pos":[0,97]}]}],"pos":[16324,16422],"yaml":true},{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","nodes":[{"pos":[0,377],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","pos":[0,377],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id=\"ph1\">&lt;xref:System.Data.Common.DbEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.Common.DbEnumerator.Reset%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[73,377],"source":" If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."}]}]}],"pos":[16433,16811],"yaml":true,"extradata":"MT"},{"content":"The collection was modified after the enumerator was created.","nodes":[{"pos":[0,61],"content":"The collection was modified after the enumerator was created.","nodes":[{"content":"The collection was modified after the enumerator was created.","pos":[0,61]}]}],"pos":[17050,17112],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Common.DbEnumerator\n  commentId: T:System.Data.Common.DbEnumerator\n  id: DbEnumerator\n  children:\n  - System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)\n  - System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)\n  - System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)\n  - System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)\n  - System.Data.Common.DbEnumerator.Current\n  - System.Data.Common.DbEnumerator.MoveNext\n  - System.Data.Common.DbEnumerator.Reset\n  langs:\n  - csharp\n  name: DbEnumerator\n  nameWithType: DbEnumerator\n  fullName: System.Data.Common.DbEnumerator\n  type: Class\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data.Common\n  summary: Exposes the <xref href=\"System.Collections.IEnumerable.GetEnumerator\"></xref> method, which supports a simple iteration over a collection by a .NET Framework data provider.\n  remarks: \"The <xref:System.Data.Common.DbEnumerator> class is implemented by a .NET Framework data provider to provide data binding support.  \\n  \\n By design, the <xref:System.Data.Common.DbEnumerator> object is intended for use with only one resultset. For example, if you execute a batch statement containing two SQL SELECT statements that return different schemas, the second statement might not retun the entire schema. To avoid this situation, obtain a <xref:System.Data.Common.DbEnumerator> for each resultset, and then call the `NextResult` method of a .NET Framework data provider DataReader object.\"\n  syntax:\n    content: 'public class DbEnumerator : System.Collections.IEnumerator'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerator\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)\n  commentId: M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)\n  id: '#ctor(System.Data.Common.DbDataReader)'\n  parent: System.Data.Common.DbEnumerator\n  langs:\n  - csharp\n  name: DbEnumerator(DbDataReader)\n  nameWithType: DbEnumerator.DbEnumerator(DbDataReader)\n  fullName: DbEnumerator.DbEnumerator(DbDataReader)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class with the give n data reader.\n  syntax:\n    content: public DbEnumerator (System.Data.Common.DbDataReader reader);\n    parameters:\n    - id: reader\n      type: System.Data.Common.DbDataReader\n      description: The DataReader through which to iterate.\n  overload: System.Data.Common.DbEnumerator.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)\n  commentId: M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)\n  id: '#ctor(System.Data.IDataReader)'\n  parent: System.Data.Common.DbEnumerator\n  langs:\n  - csharp\n  name: DbEnumerator(IDataReader)\n  nameWithType: DbEnumerator.DbEnumerator(IDataReader)\n  fullName: DbEnumerator.DbEnumerator(IDataReader)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified `DataReader`.\n  syntax:\n    content: public DbEnumerator (System.Data.IDataReader reader);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: The `DataReader` through which to iterate.\n  overload: System.Data.Common.DbEnumerator.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)\n  commentId: M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)\n  id: '#ctor(System.Data.Common.DbDataReader,System.Boolean)'\n  parent: System.Data.Common.DbEnumerator\n  langs:\n  - csharp\n  name: DbEnumerator(DbDataReader, Boolean)\n  nameWithType: DbEnumerator.DbEnumerator(DbDataReader, Boolean)\n  fullName: DbEnumerator.DbEnumerator(DbDataReader, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Data\n  - netstandard\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified reader and indicates whether to automatically close the reader after iterating through its data.\n  syntax:\n    content: public DbEnumerator (System.Data.Common.DbDataReader reader, bool closeReader);\n    parameters:\n    - id: reader\n      type: System.Data.Common.DbDataReader\n      description: The DataReader through which to iterate.\n    - id: closeReader\n      type: System.Boolean\n      description: '`true` to automatically close the DataReader after iterating through its data; otherwise, `false`.'\n  overload: System.Data.Common.DbEnumerator.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)\n  commentId: M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)\n  id: '#ctor(System.Data.IDataReader,System.Boolean)'\n  parent: System.Data.Common.DbEnumerator\n  langs:\n  - csharp\n  name: DbEnumerator(IDataReader, Boolean)\n  nameWithType: DbEnumerator.DbEnumerator(IDataReader, Boolean)\n  fullName: DbEnumerator.DbEnumerator(IDataReader, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data.Common\n  summary: Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\"></xref> class using the specified `DataReader`, and indicates whether to automatically close the `DataReader` after iterating through its data.\n  syntax:\n    content: public DbEnumerator (System.Data.IDataReader reader, bool closeReader);\n    parameters:\n    - id: reader\n      type: System.Data.IDataReader\n      description: The `DataReader` through which to iterate.\n    - id: closeReader\n      type: System.Boolean\n      description: '`true` to automatically close the `DataReader` after iterating through its data; otherwise, `false`.'\n  overload: System.Data.Common.DbEnumerator.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Common.DbEnumerator.Current\n  commentId: P:System.Data.Common.DbEnumerator.Current\n  id: Current\n  parent: System.Data.Common.DbEnumerator\n  langs:\n  - csharp\n  name: Current\n  nameWithType: DbEnumerator.Current\n  fullName: DbEnumerator.Current\n  type: Property\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data.Common\n  summary: Gets the current element in the collection.\n  remarks: After an enumerator is created or after a <xref:System.Data.Common.DbEnumerator.Reset%2A>, <xref:System.Data.Common.DbEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Data.Common.DbEnumerator.Current%2A>; otherwise, <xref:System.Data.Common.DbEnumerator.Current%2A> is undefined. <xref:System.Data.Common.DbEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> returned false, which indicates the end of the collection. <xref:System.Data.Common.DbEnumerator.Current%2A> does not move the position of the enumerator and consecutive calls to <xref:System.Data.Common.DbEnumerator.Current%2A> return the same object until either <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> generates an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Data.Common.DbEnumerator.MoveNext%2A> and <xref:System.Data.Common.DbEnumerator.Current%2A>, <xref:System.Data.Common.DbEnumerator.Current%2A> returns the element to which it is set, even if the enumerator is already invalidated.\n  syntax:\n    content: public object Current { get; }\n    return:\n      type: System.Object\n      description: The current element in the collection.\n  overload: System.Data.Common.DbEnumerator.Current*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The enumerator is positioned before the first element of the collection or after the last element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Common.DbEnumerator.MoveNext\n  commentId: M:System.Data.Common.DbEnumerator.MoveNext\n  id: MoveNext\n  parent: System.Data.Common.DbEnumerator\n  langs:\n  - csharp\n  name: MoveNext()\n  nameWithType: DbEnumerator.MoveNext()\n  fullName: DbEnumerator.MoveNext()\n  type: Method\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data.Common\n  summary: Advances the enumerator to the next element of the collection.\n  remarks: After an enumerator is created or after a call to <xref:System.Data.Common.DbEnumerator.Reset%2A>, an enumerator is positioned before the first element of the collection, and the first call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> moves the enumerator over the first element of the collection. After the end of the collection is passed, subsequent calls to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> return false until <xref:System.Data.Common.DbEnumerator.Reset%2A> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.\n  syntax:\n    content: public bool MoveNext ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the enumerator was successfully advanced to the next element; `false` if the enumerator has passed the end of the collection.'\n  overload: System.Data.Common.DbEnumerator.MoveNext*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified after the enumerator was created.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Common.DbEnumerator.Reset\n  commentId: M:System.Data.Common.DbEnumerator.Reset\n  id: Reset\n  parent: System.Data.Common.DbEnumerator\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: DbEnumerator.Reset()\n  fullName: DbEnumerator.Reset()\n  type: Method\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data.Common\n  summary: Sets the enumerator to its initial position, which is before the first element in the collection.\n  remarks: An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Data.Common.DbEnumerator.MoveNext%2A> or <xref:System.Data.Common.DbEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Data.Common.DbEnumerator.Reset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The collection was modified after the enumerator was created.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: DbEnumerator(DbDataReader)\n  nameWithType: DbEnumerator.DbEnumerator(DbDataReader)\n  fullName: DbEnumerator.DbEnumerator(DbDataReader)\n- uid: System.Data.Common.DbDataReader\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataReader\n  nameWithType: DbDataReader\n  fullName: System.Data.Common.DbDataReader\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: DbEnumerator(IDataReader)\n  nameWithType: DbEnumerator.DbEnumerator(IDataReader)\n  fullName: DbEnumerator.DbEnumerator(IDataReader)\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  nameWithType: IDataReader\n  fullName: System.Data.IDataReader\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: DbEnumerator(DbDataReader, Boolean)\n  nameWithType: DbEnumerator.DbEnumerator(DbDataReader, Boolean)\n  fullName: DbEnumerator.DbEnumerator(DbDataReader, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: DbEnumerator(IDataReader, Boolean)\n  nameWithType: DbEnumerator.DbEnumerator(IDataReader, Boolean)\n  fullName: DbEnumerator.DbEnumerator(IDataReader, Boolean)\n- uid: System.Data.Common.DbEnumerator.Current\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: DbEnumerator.Current\n  fullName: DbEnumerator.Current\n- uid: System.Data.Common.DbEnumerator.MoveNext\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: MoveNext()\n  nameWithType: DbEnumerator.MoveNext()\n  fullName: DbEnumerator.MoveNext()\n- uid: System.Data.Common.DbEnumerator.Reset\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: Reset()\n  nameWithType: DbEnumerator.Reset()\n  fullName: DbEnumerator.Reset()\n- uid: System.Data.Common.DbEnumerator.#ctor*\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: DbEnumerator\n  nameWithType: DbEnumerator.DbEnumerator\n  fullName: DbEnumerator.DbEnumerator\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n- uid: System.Data.Common.DbEnumerator.Current*\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: DbEnumerator.Current\n  fullName: DbEnumerator.Current\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n- uid: System.Data.Common.DbEnumerator.MoveNext*\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: MoveNext\n  nameWithType: DbEnumerator.MoveNext\n  fullName: DbEnumerator.MoveNext\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n- uid: System.Data.Common.DbEnumerator.Reset*\n  parent: System.Data.Common.DbEnumerator\n  isExternal: false\n  name: Reset\n  nameWithType: DbEnumerator.Reset\n  fullName: DbEnumerator.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Common/DbEnumerator.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n"}