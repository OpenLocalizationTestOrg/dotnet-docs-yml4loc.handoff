{"nodes":[{"content":"Encapsulates a recycle limit monitor singleton.","nodes":[{"pos":[0,47],"content":"Encapsulates a recycle limit monitor singleton.","nodes":[{"content":"Encapsulates a recycle limit monitor singleton.","pos":[0,47]}]}],"pos":[1116,1164],"yaml":true},{"content":"Releases all resources used by the recycle limit monitor.","nodes":[{"pos":[0,57],"content":"Releases all resources used by the recycle limit monitor.","nodes":[{"content":"Releases all resources used by the recycle limit monitor.","pos":[0,57]}]}],"pos":[2677,2735],"yaml":true},{"content":"Creates a recycle limit monitor singleton if it doesn't already exist.","nodes":[{"pos":[0,70],"content":"Creates a recycle limit monitor singleton if it doesn't already exist.","nodes":[{"content":"Creates a recycle limit monitor singleton if it doesn't already exist.","pos":[0,70]}]}],"pos":[3807,3878],"yaml":true},{"content":"Obtains a lifetime service object to control the lifetime policy for this instance.","nodes":[{"pos":[0,83],"content":"Obtains a lifetime service object to control the lifetime policy for this instance.","nodes":[{"content":"Obtains a lifetime service object to control the lifetime policy for this instance.","pos":[0,83]}]}],"pos":[5041,5125],"yaml":true},{"content":"Returns null.","nodes":[{"pos":[0,13],"content":"Returns null.","nodes":[{"content":"Returns null.","pos":[0,13]}]}],"pos":[5277,5291],"yaml":true},{"content":"Registers a recycle limit monitor proxy and starts a timer.","nodes":[{"pos":[0,59],"content":"Registers a recycle limit monitor proxy and starts a timer.","nodes":[{"content":"Registers a recycle limit monitor proxy and starts a timer.","pos":[0,59]}]}],"pos":[6606,6666],"yaml":true},{"content":"The recycle limit monitor proxy.","nodes":[{"pos":[0,32],"content":"The recycle limit monitor proxy.","nodes":[{"content":"The recycle limit monitor proxy.","pos":[0,32]}]}],"pos":[6895,6928],"yaml":true},{"content":"The application ID.","nodes":[{"pos":[0,19],"content":"The application ID.","nodes":[{"content":"The application ID.","pos":[0,19]}]}],"pos":[6997,7017],"yaml":true},{"content":"Removes a recycle limit monitor proxy.","nodes":[{"pos":[0,38],"content":"Removes a recycle limit monitor proxy.","nodes":[{"content":"Removes a recycle limit monitor proxy.","pos":[0,38]}]}],"pos":[8268,8307],"yaml":true},{"content":"The recycle limit monitor proxy.","nodes":[{"pos":[0,32],"content":"The recycle limit monitor proxy.","nodes":[{"content":"The recycle limit monitor proxy.","pos":[0,32]}]}],"pos":[8515,8548],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  commentId: T:System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  id: RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  children:\n  - System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose\n  - System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated\n  - System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService\n  - System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(System.Web.Hosting.RecycleLimitMonitor,System.String)\n  - System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(System.Web.Hosting.RecycleLimitMonitor)\n  langs:\n  - csharp\n  name: RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  fullName: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Encapsulates a recycle limit monitor singleton.\n  syntax:\n    content: 'public class RecycleLimitMonitor.RecycleLimitMonitorSingleton : MarshalByRefObject'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose\n  commentId: M:System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose\n  id: Dispose\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose()\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Releases all resources used by the recycle limit monitor.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated\n  commentId: M:System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated\n  id: EnsureCreated\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  langs:\n  - csharp\n  name: EnsureCreated()\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated()\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Creates a recycle limit monitor singleton if it doesn't already exist.\n  syntax:\n    content: public static void EnsureCreated ();\n    parameters: []\n  overload: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated*\n  exceptions: []\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService\n  commentId: M:System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService\n  id: InitializeLifetimeService\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  langs:\n  - csharp\n  name: InitializeLifetimeService()\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService()\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Obtains a lifetime service object to control the lifetime policy for this instance.\n  syntax:\n    content: public override object InitializeLifetimeService ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Returns null.\n  overload: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService*\n  exceptions: []\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(System.Web.Hosting.RecycleLimitMonitor,System.String)\n  commentId: M:System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(System.Web.Hosting.RecycleLimitMonitor,System.String)\n  id: RegisterProxyAndStart(System.Web.Hosting.RecycleLimitMonitor,System.String)\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  langs:\n  - csharp\n  name: RegisterProxyAndStart(RecycleLimitMonitor, String)\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(RecycleLimitMonitor, String)\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(RecycleLimitMonitor, String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Registers a recycle limit monitor proxy and starts a timer.\n  syntax:\n    content: public void RegisterProxyAndStart (System.Web.Hosting.RecycleLimitMonitor proxy, string applicationID);\n    parameters:\n    - id: proxy\n      type: System.Web.Hosting.RecycleLimitMonitor\n      description: The recycle limit monitor proxy.\n    - id: applicationID\n      type: System.String\n      description: The application ID.\n  overload: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart*\n  exceptions: []\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(System.Web.Hosting.RecycleLimitMonitor)\n  commentId: M:System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(System.Web.Hosting.RecycleLimitMonitor)\n  id: UnregisterProxyAndStop(System.Web.Hosting.RecycleLimitMonitor)\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  langs:\n  - csharp\n  name: UnregisterProxyAndStop(RecycleLimitMonitor)\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(RecycleLimitMonitor)\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(RecycleLimitMonitor)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Removes a recycle limit monitor proxy.\n  syntax:\n    content: public void UnregisterProxyAndStop (System.Web.Hosting.RecycleLimitMonitor proxy);\n    parameters:\n    - id: proxy\n      type: System.Web.Hosting.RecycleLimitMonitor\n      description: The recycle limit monitor proxy.\n  overload: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop*\n  exceptions: []\n  version:\n  - netframework-4.7\n  monikers:\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: Dispose()\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose()\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose()\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: EnsureCreated()\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated()\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated()\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService()\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(System.Web.Hosting.RecycleLimitMonitor,System.String)\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: RegisterProxyAndStart(RecycleLimitMonitor, String)\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(RecycleLimitMonitor, String)\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart(RecycleLimitMonitor, String)\n- uid: System.Web.Hosting.RecycleLimitMonitor\n  parent: System.Web.Hosting\n  isExternal: false\n  name: RecycleLimitMonitor\n  nameWithType: RecycleLimitMonitor\n  fullName: System.Web.Hosting.RecycleLimitMonitor\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(System.Web.Hosting.RecycleLimitMonitor)\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: UnregisterProxyAndStop(RecycleLimitMonitor)\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(RecycleLimitMonitor)\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop(RecycleLimitMonitor)\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose*\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: Dispose\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.Dispose\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated*\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: EnsureCreated\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.EnsureCreated\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService*\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: InitializeLifetimeService\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.InitializeLifetimeService\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart*\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: RegisterProxyAndStart\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.RegisterProxyAndStart\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n- uid: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop*\n  parent: System.Web.Hosting.RecycleLimitMonitor.RecycleLimitMonitorSingleton\n  isExternal: false\n  name: UnregisterProxyAndStop\n  nameWithType: RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop\n  fullName: RecycleLimitMonitor.RecycleLimitMonitorSingleton.UnregisterProxyAndStop\n  monikers:\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/RecycleLimitMonitor+RecycleLimitMonitorSingleton.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n"}