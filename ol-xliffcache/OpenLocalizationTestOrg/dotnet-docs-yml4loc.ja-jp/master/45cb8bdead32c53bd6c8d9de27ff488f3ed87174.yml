### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter
  commentId: T:System.Security.Cryptography.AsymmetricSignatureDeformatter
  id: AsymmetricSignatureDeformatter
  children:
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])
  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  langs:
  - csharp
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter
  type: Class
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.
  remarks: Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class AsymmetricSignatureDeformatter
  inheritance:
  - System.Object
  derivedClasses:
  - System.Security.Cryptography.DSASignatureDeformatter
  - System.Security.Cryptography.RSAPKCS1SignatureDeformatter
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor
  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: AsymmetricSignatureDeformatter()
  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
  fullName: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of <xref href="System.Security.Cryptography.AsymmetricSignatureDeformatter"></xref>.
  remarks: "You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \n  \n Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."
  syntax:
    content: protected AsymmetricSignatureDeformatter ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)
  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)
  id: SetHashAlgorithm(System.String)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: SetHashAlgorithm(String)
  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
  fullName: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, sets the hash algorithm to use for verifying the signature.
  remarks: You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.
  syntax:
    content: public abstract void SetHashAlgorithm (string strName);
    parameters:
    - id: strName
      type: System.String
      description: The name of the hash algorithm to use for verifying the signature.
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
  fullName: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, sets the public key to use for verifying the signature.
  remarks: You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.
  syntax:
    content: public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: The instance of an implementation of <xref href="System.Security.Cryptography.AsymmetricAlgorithm"></xref> that holds the public key.
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: VerifySignature(Byte[], Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])
  fullName: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, verifies the signature for the specified data.
  remarks: You must specify a public key and a hash algorithm before calling this method.
  syntax:
    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: The data signed with <code>rgbSignature</code>.
    - id: rgbSignature
      type: System.Byte[]
      description: The signature to be verified for <code>rgbHash</code>.
    return:
      type: System.Boolean
      description: '`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.'
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  id: VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  langs:
  - csharp
  name: VerifySignature(HashAlgorithm, Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])
  fullName: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Verifies the signature from the specified hash value.
  remarks: This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.
  syntax:
    content: public virtual bool VerifySignature (System.Security.Cryptography.HashAlgorithm hash, byte[] rgbSignature);
    parameters:
    - id: hash
      type: System.Security.Cryptography.HashAlgorithm
      description: The hash algorithm to use to verify the signature.
    - id: rgbSignature
      type: System.Byte[]
      description: The signature to be verified.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid for the hash; otherwise, `false`.'
  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>hash</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: AsymmetricSignatureDeformatter()
  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
  fullName: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetHashAlgorithm(String)
  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
  fullName: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
  fullName: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: VerifySignature(Byte[], Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])
  fullName: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: VerifySignature(HashAlgorithm, Byte[])
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])
  fullName: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter
  fullName: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetHashAlgorithm
  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm
  fullName: AsymmetricSignatureDeformatter.SetHashAlgorithm
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: SetKey
  nameWithType: AsymmetricSignatureDeformatter.SetKey
  fullName: AsymmetricSignatureDeformatter.SetKey
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*
  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter
  isExternal: false
  name: VerifySignature
  nameWithType: AsymmetricSignatureDeformatter.VerifySignature
  fullName: AsymmetricSignatureDeformatter.VerifySignature
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
