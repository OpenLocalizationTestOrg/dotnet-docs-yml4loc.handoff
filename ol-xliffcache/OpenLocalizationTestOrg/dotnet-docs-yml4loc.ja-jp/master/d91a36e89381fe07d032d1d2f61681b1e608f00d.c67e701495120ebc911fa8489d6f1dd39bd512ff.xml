{"nodes":[{"content":"Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.","nodes":[{"pos":[0,115],"content":"Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.","nodes":[{"content":"Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.","pos":[0,115],"nodes":[{"content":"Provides concurrency management for classes that support asynchronous method calls.","pos":[0,83]},{"content":"This class cannot be inherited.","pos":[84,115]}]}]}],"pos":[623,739],"yaml":true},{"content":"If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues. Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on). The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  \n  \n The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that can be used to track the duration of a particular asynchronous task. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> for a task can be used to alert clients when a task completes. It can also be used to post progress updates and incremental results without terminating the operation.  \n  \n For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).","nodes":[{"pos":[0,770],"content":"If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues. Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on). The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].","nodes":[{"content":"If your class needs to provide asynchronous behavior according to the <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you will encounter a number of concurrency management issues.","pos":[0,272],"source":"If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues."},{"content":"Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, <ph id=\"ph1\">[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]</ph> applications, console applications, and so on).","pos":[273,551],"source":" Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on)."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> provides a convenient way to create a class that runs properly under all application models supported by the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.","pos":[552,770],"source":" The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]."}]},{"pos":[777,1324],"content":"The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that can be used to track the duration of a particular asynchronous task. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> for a task can be used to alert clients when a task completes. It can also be used to post progress updates and incremental results without terminating the operation.","nodes":[{"content":"The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that can be used to track the duration of a particular asynchronous task. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> for a task can be used to alert clients when a task completes. It can also be used to post progress updates and incremental results without terminating the operation.","pos":[0,547],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class has one method, <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph>, which returns an <ph id=\"ph3\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> that can be used to track the duration of a particular asynchronous task.","pos":[0,307],"source":"The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that can be used to track the duration of a particular asynchronous task."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> for a task can be used to alert clients when a task completes.","pos":[308,443],"source":" The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> for a task can be used to alert clients when a task completes."},{"content":"It can also be used to post progress updates and incremental results without terminating the operation.","pos":[444,547]}]}]},{"pos":[1331,1553],"content":"For more information about implementing asynchronous classes, see <bpt id=\"p1\">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.","source":"For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)."}],"pos":[750,2310],"yaml":true,"extradata":"MT"},{"content":"Returns an <xref href=\"System.ComponentModel.AsyncOperation\"></xref> for tracking the duration of a particular asynchronous operation.","nodes":[{"pos":[0,134],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncOperation\"&gt;&lt;/xref&gt;</ph> for tracking the duration of a particular asynchronous operation.","source":"Returns an <xref href=\"System.ComponentModel.AsyncOperation\"></xref> for tracking the duration of a particular asynchronous operation."}],"pos":[5517,5652],"yaml":true},{"content":"The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes. You can also use it to post progress updates and incremental results without terminating the operation. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> will correctly marshal these calls to the appropriate thread or context for the application model.  \n  \n If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called. The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.  \n  \n> [!CAUTION]\n>  Client code must provide a unique value for the `userSuppliedState` parameter. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=fullName> if one is detected.  \n  \n Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation. This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> as a parameter among delegates. In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> objects, adding objects when tasks are started and removing them when tasks are completed or canceled. This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.  \n  \n For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).","nodes":[{"pos":[0,579],"content":"The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes. You can also use it to post progress updates and incremental results without terminating the operation. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> will correctly marshal these calls to the appropriate thread or context for the application model.","nodes":[{"content":"The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes. You can also use it to post progress updates and incremental results without terminating the operation. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> will correctly marshal these calls to the appropriate thread or context for the application model.","pos":[0,579],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> method returns an <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.","pos":[0,303],"source":"The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes."},{"content":"You can also use it to post progress updates and incremental results without terminating the operation.","pos":[304,407]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> will correctly marshal these calls to the appropriate thread or context for the application model.","pos":[408,579],"source":" The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> will correctly marshal these calls to the appropriate thread or context for the application model."}]}]},{"pos":[586,1029],"content":"If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called. The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.","nodes":[{"content":"If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> each time your <bpt id=\"p1\">*</bpt>MethodName<ept id=\"p1\">*</ept><ph id=\"ph2\">`Async`</ph> method is called.","pos":[0,222],"source":"If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called."},{"content":"The client application that makes calls to the method can use the <ph id=\"ph1\">`userSuppliedState`</ph> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.","pos":[223,443],"source":" The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation."}]},{"pos":[1037,1366],"content":"[!CAUTION]\n Client code must provide a unique value for the `userSuppliedState` parameter. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=fullName> if one is detected.","leadings":["","> "],"nodes":[{"content":" Client code must provide a unique value for the `userSuppliedState` parameter. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=fullName> if one is detected.","pos":[11,327],"nodes":[{"content":"Client code must provide a unique value for the <ph id=\"ph1\">`userSuppliedState`</ph> parameter.","pos":[1,79],"source":" Client code must provide a unique value for the `userSuppliedState` parameter."},{"content":"Non-unique task IDs may cause your implementation to report progress and other events incorrectly.","pos":[80,178]},{"content":"Your code should check for a non-unique task ID and throw an <ph id=\"ph1\">&lt;xref:System.ArgumentException?displayProperty=fullName&gt;</ph> if one is detected.","pos":[179,316],"source":" Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=fullName> if one is detected."}]}]},{"pos":[1373,2249],"content":"Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation. This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> as a parameter among delegates. In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> objects, adding objects when tasks are started and removing them when tasks are completed or canceled. This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.","nodes":[{"content":"Your code should track every <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> returned by <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A&gt;</ph> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.","pos":[0,298],"source":"Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation."},{"content":"This tracking can be as simple as passing the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> as a parameter among delegates.","pos":[299,445],"source":" This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> as a parameter among delegates."},{"content":"In more sophisticated designs, your class can maintain a collection of <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperation?displayProperty=fullName&gt;</ph> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.","pos":[446,688],"source":" In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> objects, adding objects when tasks are started and removing them when tasks are completed or canceled."},{"content":"This approach allows you to check for unique <ph id=\"ph1\">`userSuppliedState`</ph> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.","pos":[689,876],"source":" This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations."}]},{"pos":[2256,2478],"content":"For more information about implementing asynchronous classes, see <bpt id=\"p1\">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.","source":"For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)."}],"pos":[5663,8153],"yaml":true,"extradata":"MT"},{"content":"An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.","nodes":[{"pos":[0,113],"content":"An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.","nodes":[{"content":"An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.","pos":[0,113]}]}],"pos":[9148,9262],"yaml":true},{"content":"An <xref href=\"System.ComponentModel.AsyncOperation\"></xref> that you can use to track the duration of an asynchronous method invocation.","nodes":[{"pos":[0,137],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncOperation\"&gt;&lt;/xref&gt;</ph> that you can use to track the duration of an asynchronous method invocation.","source":"An <xref href=\"System.ComponentModel.AsyncOperation\"></xref> that you can use to track the duration of an asynchronous method invocation."}],"pos":[9342,9480],"yaml":true},{"content":"Gets or sets the synchronization context for the asynchronous operation.","nodes":[{"pos":[0,72],"content":"Gets or sets the synchronization context for the asynchronous operation.","nodes":[{"content":"Gets or sets the synchronization context for the asynchronous operation.","pos":[0,72]}]}],"pos":[10927,11000],"yaml":true},{"content":"The default implementation is the free-threaded implementation.  \n  \n A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.","nodes":[{"pos":[0,63],"content":"The default implementation is the free-threaded implementation.","nodes":[{"content":"The default implementation is the free-threaded implementation.","pos":[0,63]}]},{"pos":[70,287],"content":"A thread should set the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A&gt;</ph> property to <ph id=\"ph2\">`null`</ph> to release the free-threaded factory when it is done, or else its factory will never be disposed.","source":"A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed."}],"pos":[11011,11303],"yaml":true,"extradata":"MT"},{"content":"The synchronization context for the asynchronous operation.","nodes":[{"pos":[0,59],"content":"The synchronization context for the asynchronous operation.","nodes":[{"content":"The synchronization context for the asynchronous operation.","pos":[0,59]}]}],"pos":[11500,11560],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.AsyncOperationManager\n  commentId: T:System.ComponentModel.AsyncOperationManager\n  id: AsyncOperationManager\n  children:\n  - System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\n  - System.ComponentModel.AsyncOperationManager.SynchronizationContext\n  langs:\n  - csharp\n  name: AsyncOperationManager\n  nameWithType: AsyncOperationManager\n  fullName: System.ComponentModel.AsyncOperationManager\n  type: Class\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.\n  remarks: \"If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues. Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on). The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  \\n  \\n The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that can be used to track the duration of a particular asynchronous task. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> for a task can be used to alert clients when a task completes. It can also be used to post progress updates and incremental results without terminating the operation.  \\n  \\n For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).\"\n  example:\n  - \"The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager> class to create a class that supports asynchronous operations for any application model. It shows how to implement a class that tests a number to determine whether it is prime. This calculation can be time consuming, so it is done on a separate thread. Progress reports, incremental results, and completion notifications are handled by the <xref:System.ComponentModel.AsyncOperation> class, which ensures that the client's event handlers are called on the proper thread or context.  \\n  \\n For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]\"\n  syntax:\n    content: public static class AsyncOperationManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\n  commentId: M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\n  id: CreateOperation(System.Object)\n  parent: System.ComponentModel.AsyncOperationManager\n  langs:\n  - csharp\n  name: CreateOperation(Object)\n  nameWithType: AsyncOperationManager.CreateOperation(Object)\n  fullName: AsyncOperationManager.CreateOperation(Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Returns an <xref href=\"System.ComponentModel.AsyncOperation\"></xref> for tracking the duration of a particular asynchronous operation.\n  remarks: \"The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes. You can also use it to post progress updates and incremental results without terminating the operation. The <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> will correctly marshal these calls to the appropriate thread or context for the application model.  \\n  \\n If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called. The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.  \\n  \\n> [!CAUTION]\\n>  Client code must provide a unique value for the `userSuppliedState` parameter. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=fullName> if one is detected.  \\n  \\n Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation. This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> as a parameter among delegates. In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> objects, adding objects when tasks are started and removing them when tasks are completed or canceled. This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.  \\n  \\n For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).\"\n  example:\n  - \"The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> for tracking the duration of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]\"\n  syntax:\n    content: public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);\n    parameters:\n    - id: userSuppliedState\n      type: System.Object\n      description: An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.\n    return:\n      type: System.ComponentModel.AsyncOperation\n      description: An <xref href=\"System.ComponentModel.AsyncOperation\"></xref> that you can use to track the duration of an asynchronous method invocation.\n  overload: System.ComponentModel.AsyncOperationManager.CreateOperation*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncOperationManager.SynchronizationContext\n  commentId: P:System.ComponentModel.AsyncOperationManager.SynchronizationContext\n  id: SynchronizationContext\n  parent: System.ComponentModel.AsyncOperationManager\n  langs:\n  - csharp\n  name: SynchronizationContext\n  nameWithType: AsyncOperationManager.SynchronizationContext\n  fullName: AsyncOperationManager.SynchronizationContext\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets or sets the synchronization context for the asynchronous operation.\n  remarks: \"The default implementation is the free-threaded implementation.  \\n  \\n A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.\"\n  syntax:\n    content: public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }\n    return:\n      type: System.Threading.SynchronizationContext\n      description: The synchronization context for the asynchronous operation.\n  overload: System.ComponentModel.AsyncOperationManager.SynchronizationContext*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\n  parent: System.ComponentModel.AsyncOperationManager\n  isExternal: false\n  name: CreateOperation(Object)\n  nameWithType: AsyncOperationManager.CreateOperation(Object)\n  fullName: AsyncOperationManager.CreateOperation(Object)\n- uid: System.ComponentModel.AsyncOperation\n  parent: System.ComponentModel\n  isExternal: false\n  name: AsyncOperation\n  nameWithType: AsyncOperation\n  fullName: System.ComponentModel.AsyncOperation\n- uid: System.ComponentModel.AsyncOperationManager.SynchronizationContext\n  parent: System.ComponentModel.AsyncOperationManager\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: AsyncOperationManager.SynchronizationContext\n  fullName: AsyncOperationManager.SynchronizationContext\n- uid: System.Threading.SynchronizationContext\n  parent: System.Threading\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: SynchronizationContext\n  fullName: System.Threading.SynchronizationContext\n- uid: System.ComponentModel.AsyncOperationManager.CreateOperation*\n  parent: System.ComponentModel.AsyncOperationManager\n  isExternal: false\n  name: CreateOperation\n  nameWithType: AsyncOperationManager.CreateOperation\n  fullName: AsyncOperationManager.CreateOperation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperationManager.xml\n- uid: System.ComponentModel.AsyncOperationManager.SynchronizationContext*\n  parent: System.ComponentModel.AsyncOperationManager\n  isExternal: false\n  name: SynchronizationContext\n  nameWithType: AsyncOperationManager.SynchronizationContext\n  fullName: AsyncOperationManager.SynchronizationContext\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncOperationManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}