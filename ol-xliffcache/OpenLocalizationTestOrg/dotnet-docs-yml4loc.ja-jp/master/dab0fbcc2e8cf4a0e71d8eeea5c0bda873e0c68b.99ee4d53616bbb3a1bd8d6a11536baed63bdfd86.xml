{"nodes":[{"content":"Marshals data of type `VT_VARIANT | VT_BYREF` from managed to unmanaged code. This class cannot be inherited.","nodes":[{"pos":[0,109],"content":"Marshals data of type `VT_VARIANT | VT_BYREF` from managed to unmanaged code. This class cannot be inherited.","nodes":[{"content":"Marshals data of type <ph id=\"ph1\">`VT_VARIANT | VT_BYREF`</ph> from managed to unmanaged code.","pos":[0,77],"source":"Marshals data of type `VT_VARIANT | VT_BYREF` from managed to unmanaged code."},{"content":"This class cannot be inherited.","pos":[78,109]}]}],"pos":[597,707],"yaml":true},{"content":"The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.  \n  \n You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`. In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code. The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.  \n  \n One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call. For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call. Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.  \n  \n Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion. In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>. In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call. Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.","nodes":[{"pos":[0,170],"content":"The purpose of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> is to add one level of indirection when marshaling a managed type to the corresponding <ph id=\"ph2\">`VARIANT`</ph> type.","source":"The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type."},{"pos":[177,636],"content":"You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`. In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code. The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.","nodes":[{"content":"You can use this class to wrap an <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id=\"ph2\">`VT_VARIANT | VT_BYREF`</ph>.","pos":[0,116],"source":"You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`."},{"content":"In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type <ph id=\"ph1\">`VT_VARIANT | VT_BYREF`</ph> to unmanaged code.","pos":[117,258],"source":" In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code."},{"content":"The interop marshaler passed a variant of the managed type (for example, <ph id=\"ph1\">`VT_BSTR | VT_BYREF`</ph> for <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>, or <ph id=\"ph3\">`VT_I4 | VT_BYREF`</ph> for <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>), but not <ph id=\"ph5\">`VT_VARIANT | VT_BYREF`</ph>.","pos":[259,459],"source":" The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`."}]},{"pos":[643,1243],"content":"One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call. For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call. Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.","nodes":[{"content":"One advantage of using <ph id=\"ph1\">`VT_VARIANT | VT_BYREF`</ph> variant types is that the type of data can be changed during a method call.","pos":[0,122],"source":"One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call."},{"content":"For example, you can pass a <ph id=\"ph1\">`VT_VARIANT | VT_BYREF`</ph> variant type that contains a <ph id=\"ph2\">`VT_BSTR`</ph> and get a variant returned that contains a <ph id=\"ph3\">`VT_I4`</ph> after a method call.","pos":[123,285],"source":" For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call."},{"content":"Because the COM interop marshaler has no way of knowing when to pass <ph id=\"ph1\">`VT_BSTR | VT_BYREF`</ph> and when to pass <ph id=\"ph2\">`VT_VARIANT | VT_BYREF`</ph>, which points to a variant that contains a <ph id=\"ph3\">`BSTR`</ph> for parameters declared as <ph id=\"ph4\">`VARIANT *`</ph>, you can instruct the marshaler by using <ph id=\"ph5\">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.","pos":[286,600],"source":" Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>."}]},{"pos":[1250,1903],"content":"Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion. In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>. In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call. Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.","nodes":[{"content":"Note that early binding is not supported; you can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> only when calling <ph id=\"ph2\">&lt;xref:System.Type.InvokeMember%2A&gt;</ph> or with a Dispatch-only interface called in an early bound fashion.","pos":[0,227],"source":"Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion."},{"content":"In C#, you must also use the <ph id=\"ph1\">`ref`</ph> keyword to specify <ph id=\"ph2\">`ByRef`</ph> semantics for any parameter of type <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.","pos":[228,379],"source":" In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>."},{"content":"In Visual Basic, <ph id=\"ph1\">`ByRef`</ph> semantics are added automatically for every implicit late binding call.","pos":[380,476],"source":" In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call."},{"content":"Also note that nesting <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects and arrays of <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects is not supported.","pos":[477,653],"source":" Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported."}]}],"pos":[718,2630],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> class for the specified <xref href=\"System.Object\"></xref> parameter.","nodes":[{"pos":[0,170],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.VariantWrapper\"&gt;&lt;/xref&gt;</ph> class for the specified <ph id=\"ph2\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> parameter.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> class for the specified <xref href=\"System.Object\"></xref> parameter."}],"pos":[5213,5384],"yaml":true},{"content":"The object to marshal.","nodes":[{"pos":[0,22],"content":"The object to marshal.","nodes":[{"content":"The object to marshal.","pos":[0,22]}]}],"pos":[6118,6141],"yaml":true},{"content":"Gets the object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> object.","nodes":[{"pos":[0,105],"content":"Gets the object wrapped by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.VariantWrapper\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> object."}],"pos":[7765,7871],"yaml":true},{"content":"The object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> object.","nodes":[{"pos":[0,100],"content":"The object wrapped by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.VariantWrapper\"&gt;&lt;/xref&gt;</ph> object.","source":"The object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> object."}],"pos":[7988,8089],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.VariantWrapper\n  commentId: T:System.Runtime.InteropServices.VariantWrapper\n  id: VariantWrapper\n  children:\n  - System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)\n  - System.Runtime.InteropServices.VariantWrapper.WrappedObject\n  langs:\n  - csharp\n  name: VariantWrapper\n  nameWithType: VariantWrapper\n  fullName: System.Runtime.InteropServices.VariantWrapper\n  type: Class\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Marshals data of type `VT_VARIANT | VT_BYREF` from managed to unmanaged code. This class cannot be inherited.\n  remarks: \"The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.  \\n  \\n You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`. In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code. The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.  \\n  \\n One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call. For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call. Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.  \\n  \\n Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion. In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>. In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call. Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.  \\n  \\n [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]\\n [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]\"\n  syntax:\n    content: public sealed class VariantWrapper\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/VariantWrapper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)\n  commentId: M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Runtime.InteropServices.VariantWrapper\n  langs:\n  - csharp\n  name: VariantWrapper(Object)\n  nameWithType: VariantWrapper.VariantWrapper(Object)\n  fullName: VariantWrapper.VariantWrapper(Object)\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> class for the specified <xref href=\"System.Object\"></xref> parameter.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.  \\n  \\n [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]\\n [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]\"\n  syntax:\n    content: public VariantWrapper (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to marshal.\n  overload: System.Runtime.InteropServices.VariantWrapper.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/VariantWrapper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.VariantWrapper.WrappedObject\n  commentId: P:System.Runtime.InteropServices.VariantWrapper.WrappedObject\n  id: WrappedObject\n  parent: System.Runtime.InteropServices.VariantWrapper\n  langs:\n  - csharp\n  name: WrappedObject\n  nameWithType: VariantWrapper.WrappedObject\n  fullName: VariantWrapper.WrappedObject\n  type: Property\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Gets the object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> object.\n  syntax:\n    content: public object WrappedObject { get; }\n    return:\n      type: System.Object\n      description: The object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\"></xref> object.\n  overload: System.Runtime.InteropServices.VariantWrapper.WrappedObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/VariantWrapper.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)\n  parent: System.Runtime.InteropServices.VariantWrapper\n  isExternal: false\n  name: VariantWrapper(Object)\n  nameWithType: VariantWrapper.VariantWrapper(Object)\n  fullName: VariantWrapper.VariantWrapper(Object)\n- uid: System.Runtime.InteropServices.VariantWrapper.WrappedObject\n  parent: System.Runtime.InteropServices.VariantWrapper\n  isExternal: false\n  name: WrappedObject\n  nameWithType: VariantWrapper.WrappedObject\n  fullName: VariantWrapper.WrappedObject\n- uid: System.Runtime.InteropServices.VariantWrapper.#ctor*\n  parent: System.Runtime.InteropServices.VariantWrapper\n  isExternal: false\n  name: VariantWrapper\n  nameWithType: VariantWrapper.VariantWrapper\n  fullName: VariantWrapper.VariantWrapper\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/VariantWrapper.xml\n- uid: System.Runtime.InteropServices.VariantWrapper.WrappedObject*\n  parent: System.Runtime.InteropServices.VariantWrapper\n  isExternal: false\n  name: WrappedObject\n  nameWithType: VariantWrapper.WrappedObject\n  fullName: VariantWrapper.WrappedObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/VariantWrapper.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}