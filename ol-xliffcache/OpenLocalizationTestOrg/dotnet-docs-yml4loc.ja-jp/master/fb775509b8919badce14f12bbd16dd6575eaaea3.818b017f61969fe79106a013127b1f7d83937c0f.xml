{"nodes":[{"content":"Defines the identity permission for the URL from which the code originates. This class cannot be inherited.","nodes":[{"pos":[0,107],"content":"Defines the identity permission for the URL from which the code originates. This class cannot be inherited.","nodes":[{"content":"Defines the identity permission for the URL from which the code originates. This class cannot be inherited.","pos":[0,107],"nodes":[{"content":"Defines the identity permission for the URL from which the code originates.","pos":[0,75]},{"content":"This class cannot be inherited.","pos":[76,107]}]}]}],"pos":[1201,1309],"yaml":true},{"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file. For example, http://www.fourthcoffee.com/process/grind.htm is a complete URL.  \n  \n URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/.  \n  \n> [!IMPORTANT]\n>  Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], identity permissions are not used.  \n>   \n>  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.  \n  \n In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.  \n  \n> [!NOTE]\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.","nodes":[{"pos":[0,165],"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file. For example, http://www.fourthcoffee.com/process/grind.htm is a complete URL.","nodes":[{"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file. For example, http://www.fourthcoffee.com/process/grind.htm is a complete URL.","pos":[0,165],"nodes":[{"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file.","pos":[0,87]},{"content":"For example, http://www.fourthcoffee.com/process/grind.htm is a complete URL.","pos":[88,165]}]}]},{"pos":[172,539],"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/.","nodes":[{"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/.","pos":[0,367],"nodes":[{"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*.","pos":[0,119]},{"content":"URLs can also contain a wildcard (\"<ph id=\"ph1\">\\*</ph>\") prefix at the dot delimiter.","pos":[120,188],"source":" URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter."},{"content":"For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://<ph id=\"ph1\">\\*</ph>.fourthcoffee.com/process/grind.htm/ and http://<ph id=\"ph2\">\\*</ph>.com/process/grind.htm/.","pos":[189,367],"source":" For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/."}]}]},{"pos":[547,672],"content":"[!IMPORTANT]\n Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], identity permissions are not used.","leadings":["","> "],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, identity permissions are not used.","pos":[14,123],"source":" Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], identity permissions are not used."}]},{"pos":[683,1365],"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[0,682],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted.","pos":[0,142]},{"content":"That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[143,292]},{"content":"Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[293,427]},{"content":"That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","pos":[428,567]},{"content":"This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[568,682]}]}]},{"pos":[1372,1915],"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[0,543],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted.","pos":[0,143]},{"content":"That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[144,293]},{"content":"Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[294,428]},{"content":"This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[429,543]}]}]},{"pos":[1923,2711],"content":"[!NOTE]\n In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).","leadings":["","> "],"nodes":[{"content":" In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).","pos":[8,786],"nodes":[{"content":"In versions of the .NET Framework before the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you could use the <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName&gt;</ph> method to prevent inadvertent access to system resources by trusted code.","pos":[1,271],"source":" In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code."},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly.","pos":[272,436],"source":" <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly."},{"content":"To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access.","pos":[437,591]},{"content":"For information about running an application in a sandbox, see <bpt id=\"p1\">[</bpt>How to: Run Partially Trusted Code in a Sandbox<ept id=\"p1\">](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)</ept>.","pos":[592,778],"source":" For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)."}]}]},{"pos":[2719,3192],"content":"[!NOTE]\n In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.","pos":[8,471],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph> permission state value.","pos":[1,168],"source":" In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value."},{"content":"Starting with the .NET Framework version 2.0, identity permissions can have any permission state value.","pos":[169,272]},{"content":"This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> interface.","pos":[273,463],"source":" This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."}]}]}],"pos":[1320,4535],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.UrlIdentityPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>.","nodes":[{"pos":[0,195],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.UrlIdentityPermission\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.UrlIdentityPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>."}],"pos":[7415,7611],"yaml":true},{"content":"Creates either a fully restricted (`None`) or `Unrestricted` permission.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.  \n  \n In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","nodes":[{"pos":[0,72],"content":"Creates either a fully restricted (<ph id=\"ph1\">`None`</ph>) or <ph id=\"ph2\">`Unrestricted`</ph> permission.","source":"Creates either a fully restricted (`None`) or `Unrestricted` permission."},{"pos":[80,693],"content":"[!NOTE]\n In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","pos":[8,611],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph> permission state value.","pos":[1,168],"source":" In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value."},{"content":"Starting with the .NET Framework version 2.0, identity permissions can have any permission state value.","pos":[169,272]},{"content":"This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.IUnrestrictedPermission&gt;</ph> interface.","pos":[273,463],"source":" This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface."},{"content":"That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.","pos":[464,603]}]}]},{"pos":[700,1243],"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[0,543],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted.","pos":[0,143]},{"content":"That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria.","pos":[144,293]},{"content":"Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust.","pos":[294,428]},{"content":"This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.","pos":[429,543]}]}]}],"pos":[7622,8873],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.","nodes":[{"pos":[0,83],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."}],"pos":[9870,9954],"yaml":true},{"content":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.","nodes":[{"pos":[0,122],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."}],"pos":[10131,10254],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.UrlIdentityPermission\"></xref> class to represent the URL identity described by <code>site</code>.","nodes":[{"pos":[0,172],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.UrlIdentityPermission\"&gt;&lt;/xref&gt;</ph> class to represent the URL identity described by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">site</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.UrlIdentityPermission\"></xref> class to represent the URL identity described by <code>site</code>."}],"pos":[11531,11704],"yaml":true},{"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.  \n  \n URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/.  \n  \n> [!NOTE]\n>  Starting with the .NET Framework version 2.0, for performance reasons, an invalid URL does not cause an argument exception at the time the new class instance is created.  The argument exception will occur when one of the set operations (Union, Intersect, or IsSubsetOf) is executed.  A demand on the permission causes <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A> to be called by the security infrastructure. The demand will fail because of the argument exception, resulting in a <xref:System.Security.SecurityException> being thrown. In this case, the original <xref:System.ArgumentException> exception will not be seen.","nodes":[{"pos":[0,148],"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.","nodes":[{"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.","pos":[0,148]}]},{"pos":[155,522],"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/.","nodes":[{"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/.","pos":[0,367],"nodes":[{"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*.","pos":[0,119]},{"content":"URLs can also contain a wildcard (\"<ph id=\"ph1\">\\*</ph>\") prefix at the dot delimiter.","pos":[120,188],"source":" URLs can also contain a wildcard (\"\\*\") prefix at the dot delimiter."},{"content":"For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://<ph id=\"ph1\">\\*</ph>.fourthcoffee.com/process/grind.htm/ and http://<ph id=\"ph2\">\\*</ph>.com/process/grind.htm/.","pos":[189,367],"source":" For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\*.fourthcoffee.com/process/grind.htm/ and http://\\*.com/process/grind.htm/."}]}]},{"pos":[530,1187],"content":"[!NOTE]\n Starting with the .NET Framework version 2.0, for performance reasons, an invalid URL does not cause an argument exception at the time the new class instance is created.  The argument exception will occur when one of the set operations (Union, Intersect, or IsSubsetOf) is executed.  A demand on the permission causes <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A> to be called by the security infrastructure. The demand will fail because of the argument exception, resulting in a <xref:System.Security.SecurityException> being thrown. In this case, the original <xref:System.ArgumentException> exception will not be seen.","leadings":["","> "],"nodes":[{"content":" Starting with the .NET Framework version 2.0, for performance reasons, an invalid URL does not cause an argument exception at the time the new class instance is created.  The argument exception will occur when one of the set operations (Union, Intersect, or IsSubsetOf) is executed.  A demand on the permission causes <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A> to be called by the security infrastructure. The demand will fail because of the argument exception, resulting in a <xref:System.Security.SecurityException> being thrown. In this case, the original <xref:System.ArgumentException> exception will not be seen.","pos":[8,655],"nodes":[{"content":"Starting with the .NET Framework version 2.0, for performance reasons, an invalid URL does not cause an argument exception at the time the new class instance is created.","pos":[1,170]},{"content":"The argument exception will occur when one of the set operations (Union, Intersect, or IsSubsetOf) is executed.","pos":[172,283]},{"content":"A demand on the permission causes <ph id=\"ph1\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A&gt;</ph> to be called by the security infrastructure.","pos":[285,434],"source":"  A demand on the permission causes <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A> to be called by the security infrastructure."},{"content":"The demand will fail because of the argument exception, resulting in a <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> being thrown.","pos":[435,560],"source":" The demand will fail because of the argument exception, resulting in a <xref:System.Security.SecurityException> being thrown."},{"content":"In this case, the original <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> exception will not be seen.","pos":[561,647],"source":" In this case, the original <xref:System.ArgumentException> exception will not be seen."}]}]}],"pos":[11715,12915],"yaml":true,"extradata":"MT"},{"content":"A URL or wildcard expression.","nodes":[{"pos":[0,29],"content":"A URL or wildcard expression.","nodes":[{"content":"A URL or wildcard expression.","pos":[0,29]}]}],"pos":[13813,13843],"yaml":true},{"content":"The <code>site</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">site</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>site</code> parameter is `null`."}],"pos":[14028,14071],"yaml":true},{"content":"The length of the <code>site</code> parameter is zero.","nodes":[{"pos":[0,54],"content":"The length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">site</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is zero.","source":"The length of the <code>site</code> parameter is zero."}],"pos":[14161,14216],"yaml":true},{"content":"The URL, directory, or site portion of the <code>site</code> parameter is not valid.","nodes":[{"pos":[0,84],"content":"The URL, directory, or site portion of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">site</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The URL, directory, or site portion of the <code>site</code> parameter is not valid."}],"pos":[14310,14395],"yaml":true},{"content":"Creates and returns an identical copy of the current permission.","nodes":[{"pos":[0,64],"content":"Creates and returns an identical copy of the current permission.","nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]}],"pos":[15548,15613],"yaml":true},{"content":"A copy of a permission represents the same access to resources as the original permission.","nodes":[{"pos":[0,90],"content":"A copy of a permission represents the same access to resources as the original permission.","nodes":[{"content":"A copy of a permission represents the same access to resources as the original permission.","pos":[0,90]}]}],"pos":[15624,15715],"yaml":true,"extradata":"MT"},{"content":"A copy of the current permission.","nodes":[{"pos":[0,33],"content":"A copy of the current permission.","nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]}],"pos":[15881,15915],"yaml":true},{"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"pos":[0,70],"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]}],"pos":[17315,17386],"yaml":true},{"content":"The XML encoding to use to reconstruct the permission.","nodes":[{"pos":[0,54],"content":"The XML encoding to use to reconstruct the permission.","nodes":[{"content":"The XML encoding to use to reconstruct the permission.","pos":[0,54]}]}],"pos":[17570,17625],"yaml":true},{"content":"The <code>esd</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>esd</code> parameter is `null`."}],"pos":[17812,17854],"yaml":true},{"content":"The <code>esd</code> parameter is not a valid permission element.  \n  \n -or-  \n  \n The <code>esd</code> parameter's version number is not valid.","nodes":[{"pos":[0,65],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","source":"The <code>esd</code> parameter is not a valid permission element."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,144],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not valid.","source":"The <code>esd</code> parameter's version number is not valid."}],"pos":[17948,18099],"yaml":true},{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"pos":[0,113],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]}],"pos":[19402,19516],"yaml":true},{"content":"The intersection of two permissions is a permission that describes access to the URLs they both describe in common. Only a demand that passes both original permissions will pass the intersection. For example, the intersection of a permission that represents access to http://www.fourthcoffee.com/process/grind.htm and a permission that represents access to http://www.fourthcoffee.com/* is a permission that represents access to http://www.fourthcoffee.com/process/grind.htm.  \n  \n <xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission object or when one of the permissions uses the wildcard operator (\"*\").","nodes":[{"pos":[0,475],"content":"The intersection of two permissions is a permission that describes access to the URLs they both describe in common. Only a demand that passes both original permissions will pass the intersection. For example, the intersection of a permission that represents access to http://www.fourthcoffee.com/process/grind.htm and a permission that represents access to http://www.fourthcoffee.com/* is a permission that represents access to http://www.fourthcoffee.com/process/grind.htm.","nodes":[{"content":"The intersection of two permissions is a permission that describes access to the URLs they both describe in common. Only a demand that passes both original permissions will pass the intersection. For example, the intersection of a permission that represents access to http://www.fourthcoffee.com/process/grind.htm and a permission that represents access to http://www.fourthcoffee.com/* is a permission that represents access to http://www.fourthcoffee.com/process/grind.htm.","pos":[0,475],"nodes":[{"content":"The intersection of two permissions is a permission that describes access to the URLs they both describe in common.","pos":[0,115]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[116,195]},{"content":"For example, the intersection of a permission that represents access to http://www.fourthcoffee.com/process/grind.htm and a permission that represents access to http://www.fourthcoffee.com/* is a permission that represents access to http://www.fourthcoffee.com/process/grind.htm.","pos":[196,475]}]}]},{"pos":[482,919],"content":"<xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission object or when one of the permissions uses the wildcard operator (\"*\").","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Permissions.UrlIdentityPermission&gt;</ph> supports set operations (<ph id=\"ph2\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.Union%2A&gt;</ph>) only when the current permission is equal to the specified permission object or when one of the permissions uses the wildcard operator (\"*\").","pos":[0,437],"source":"<xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission object or when one of the permissions uses the wildcard operator (\"*\")."}]}],"pos":[19527,20453],"yaml":true,"extradata":"MT"},{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,109],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]}],"pos":[20660,20770],"yaml":true},{"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"pos":[0,165],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <ph id=\"ph1\">`null`</ph> if the intersection is empty.","pos":[106,165],"source":" This new permission is `null` if the intersection is empty."}]}],"pos":[20841,21007],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.  \n  \n -or-  \n  \n The Url property is not a valid URL.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,156],"content":"The Url property is not a valid URL.","nodes":[{"content":"The Url property is not a valid URL.","pos":[0,36]}]}],"pos":[21188,21351],"yaml":true},{"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"pos":[0,82],"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]}],"pos":[22660,22743],"yaml":true},{"content":"The current permission is a subset of the specified permission if the current permission identifies access to a URL that is wholly contained by the specified permission. For example, a permission that represents access to http://www.fourthcoffee.com/process/grind.htm is a subset of a permission that represents access to http://www.fourthcoffee.com/*. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n <xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission or when one of the permissions uses the wildcard operator (\"*\").","nodes":[{"pos":[0,494],"content":"The current permission is a subset of the specified permission if the current permission identifies access to a URL that is wholly contained by the specified permission. For example, a permission that represents access to http://www.fourthcoffee.com/process/grind.htm is a subset of a permission that represents access to http://www.fourthcoffee.com/*. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","nodes":[{"content":"The current permission is a subset of the specified permission if the current permission identifies access to a URL that is wholly contained by the specified permission.","pos":[0,169]},{"content":"For example, a permission that represents access to http://www.fourthcoffee.com/process/grind.htm is a subset of a permission that represents access to http://www.fourthcoffee.com/*.","pos":[170,352]},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[353,494],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]},{"pos":[501,931],"content":"<xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission or when one of the permissions uses the wildcard operator (\"*\").","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Permissions.UrlIdentityPermission&gt;</ph> supports set operations (<ph id=\"ph2\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.Union%2A&gt;</ph>) only when the current permission is equal to the specified permission or when one of the permissions uses the wildcard operator (\"*\").","pos":[0,430],"source":"<xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission or when one of the permissions uses the wildcard operator (\"*\")."}]}],"pos":[22754,23692],"yaml":true,"extradata":"MT"},{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"pos":[0,130],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]}],"pos":[23877,24008],"yaml":true},{"content":"`true` if the current permission is a subset of the specified permission; otherwise, `false`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if the current permission is a subset of the specified permission; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current permission is a subset of the specified permission; otherwise, `false`."}],"pos":[24066,24162],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.  \n  \n -or-  \n  \n The Url property is not a valid URL.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,156],"content":"The Url property is not a valid URL.","nodes":[{"content":"The Url property is not a valid URL.","pos":[0,36]}]}],"pos":[24344,24507],"yaml":true},{"content":"Creates an XML encoding of the permission and its current state.","nodes":[{"pos":[0,64],"content":"Creates an XML encoding of the permission and its current state.","nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]}],"pos":[25666,25731],"yaml":true},{"content":"An XML encoding of the permission, including any state information.","nodes":[{"pos":[0,67],"content":"An XML encoding of the permission, including any state information.","nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]}],"pos":[25906,25974],"yaml":true},{"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"pos":[0,94],"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]}],"pos":[27339,27434],"yaml":true},{"content":"The result of a call to the <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A> method is a permission that represents access to the URL as represented by the current permission, as well as access to the URL as represented by the specified permission.  \n  \n The <xref:System.Security.Permissions.UrlIdentityPermission> class supports set operations <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission, or when one of the permissions uses the wildcard operator (\"*\") and one is a subset of the other.","nodes":[{"pos":[0,265],"content":"The result of a call to the <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A> method is a permission that represents access to the URL as represented by the current permission, as well as access to the URL as represented by the specified permission.","nodes":[{"content":"The result of a call to the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.Union%2A&gt;</ph> method is a permission that represents access to the URL as represented by the current permission, as well as access to the URL as represented by the specified permission.","pos":[0,265],"source":"The result of a call to the <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A> method is a permission that represents access to the URL as represented by the current permission, as well as access to the URL as represented by the specified permission."}]},{"pos":[272,745],"content":"The <xref:System.Security.Permissions.UrlIdentityPermission> class supports set operations <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission, or when one of the permissions uses the wildcard operator (\"*\") and one is a subset of the other.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.UrlIdentityPermission&gt;</ph> class supports set operations <ph id=\"ph2\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Security.Permissions.UrlIdentityPermission.Union%2A&gt;</ph>) only when the current permission is equal to the specified permission, or when one of the permissions uses the wildcard operator (\"*\") and one is a subset of the other.","pos":[0,473],"source":"The <xref:System.Security.Permissions.UrlIdentityPermission> class supports set operations <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission, or when one of the permissions uses the wildcard operator (\"*\") and one is a subset of the other."}]}],"pos":[27445,28197],"yaml":true,"extradata":"MT"},{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,107],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]}],"pos":[28400,28508],"yaml":true},{"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"pos":[0,98],"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]}],"pos":[28579,28678],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.  \n  \n -or-  \n  \n The <xref href=\"System.Security.Permissions.UrlIdentityPermission.Url\"></xref> property is not a valid URL.  \n  \n -or-  \n  \n The two permissions are not equal and one is not a subset of the other.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,227],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.UrlIdentityPermission.Url\"&gt;&lt;/xref&gt;</ph> property is not a valid URL.","source":"The <xref href=\"System.Security.Permissions.UrlIdentityPermission.Url\"></xref> property is not a valid URL."},{"pos":[234,238],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[245,316],"content":"The two permissions are not equal and one is not a subset of the other.","nodes":[{"content":"The two permissions are not equal and one is not a subset of the other.","pos":[0,71]}]}],"pos":[28855,29184],"yaml":true},{"content":"Gets or sets a URL representing the identity of Internet code.","nodes":[{"pos":[0,62],"content":"Gets or sets a URL representing the identity of Internet code.","nodes":[{"content":"Gets or sets a URL representing the identity of Internet code.","pos":[0,62]}]}],"pos":[30327,30390],"yaml":true},{"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.  \n  \n URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*.","nodes":[{"pos":[0,148],"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.","nodes":[{"content":"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.","pos":[0,148]}]},{"pos":[155,274],"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*.","nodes":[{"content":"URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*.","pos":[0,119]}]}],"pos":[30401,30680],"yaml":true,"extradata":"MT"},{"content":"A URL representing the identity of Internet code.","nodes":[{"pos":[0,49],"content":"A URL representing the identity of Internet code.","nodes":[{"content":"A URL representing the identity of Internet code.","pos":[0,49]}]}],"pos":[30792,30842],"yaml":true},{"content":"The URL cannot be retrieved because it has an ambiguous identity.","nodes":[{"pos":[0,65],"content":"The URL cannot be retrieved because it has an ambiguous identity.","nodes":[{"content":"The URL cannot be retrieved because it has an ambiguous identity.","pos":[0,65]}]}],"pos":[31025,31091],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.UrlIdentityPermission\n  commentId: T:System.Security.Permissions.UrlIdentityPermission\n  id: UrlIdentityPermission\n  children:\n  - System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)\n  - System.Security.Permissions.UrlIdentityPermission.Copy\n  - System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.UrlIdentityPermission.ToXml\n  - System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)\n  - System.Security.Permissions.UrlIdentityPermission.Url\n  langs:\n  - csharp\n  name: UrlIdentityPermission\n  nameWithType: UrlIdentityPermission\n  fullName: System.Security.Permissions.UrlIdentityPermission\n  type: Class\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Defines the identity permission for the URL from which the code originates. This class cannot be inherited.\n  remarks: \"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file. For example, http://www.fourthcoffee.com/process/grind.htm is a complete URL.  \\n  \\n URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\\\"\\\\*\\\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\\\*.fourthcoffee.com/process/grind.htm/ and http://\\\\*.com/process/grind.htm/.  \\n  \\n> [!IMPORTANT]\\n>  Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], identity permissions are not used.  \\n>   \\n>  In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.  \\n  \\n> [!NOTE]\\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class UrlIdentityPermission : System.Security.CodeAccessPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: UrlIdentityPermission(PermissionState)\n  nameWithType: UrlIdentityPermission.UrlIdentityPermission(PermissionState)\n  fullName: UrlIdentityPermission.UrlIdentityPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.UrlIdentityPermission\"></xref> class with the specified <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  remarks: \"Creates either a fully restricted (`None`) or `Unrestricted` permission.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, identity permissions cannot have an <xref:System.Security.Permissions.PermissionState.Unrestricted> permission state value. Starting with the .NET Framework version 2.0, identity permissions can have any permission state value. This means that in 2.0 and later versions, identity permissions have the same behavior as permissions that implement the <xref:System.Security.Permissions.IUnrestrictedPermission> interface. That is, a demand for an identity always succeeds, regardless of the identity of the assembly, if the assembly has been granted full trust.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, demands on the identity permissions are effective, even when the calling assembly is fully trusted. That is, although the calling assembly has full trust, a demand for an identity permission fails if the assembly does not meet the demanded criteria. Starting with the .NET Framework version 2.0, demands for identity permissions are ineffective if the calling assembly has full trust. This assures consistency for all permissions, eliminating the treatment of identity permissions as a special case.\"\n  example:\n  - \"The following example shows the use of the <xref:System.Security.Permissions.UrlIdentityPermission.%23ctor%28System.Security.Permissions.PermissionState%29?displayProperty=fullName> constructor.  \\n  \\n [!code-cpp[System.Security.Permissions.UrlIdentityPermission#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CPP/urlidentity.cpp#7)]\\n [!code-csharp[System.Security.Permissions.UrlIdentityPermission#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CS/urlidentity.cs#7)]\\n [!code-vb[System.Security.Permissions.UrlIdentityPermission#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/VB/urlidentity.vb#7)]\"\n  syntax:\n    content: public UrlIdentityPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Security.Permissions.UrlIdentityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: UrlIdentityPermission(String)\n  nameWithType: UrlIdentityPermission.UrlIdentityPermission(String)\n  fullName: UrlIdentityPermission.UrlIdentityPermission(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.UrlIdentityPermission\"></xref> class to represent the URL identity described by <code>site</code>.\n  remarks: \"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.  \\n  \\n URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*. URLs can also contain a wildcard (\\\"\\\\*\\\") prefix at the dot delimiter. For example, the URL name string http://www.fourthcoffee.com/process/grind.htm/ is a subset of http://\\\\*.fourthcoffee.com/process/grind.htm/ and http://\\\\*.com/process/grind.htm/.  \\n  \\n> [!NOTE]\\n>  Starting with the .NET Framework version 2.0, for performance reasons, an invalid URL does not cause an argument exception at the time the new class instance is created.  The argument exception will occur when one of the set operations (Union, Intersect, or IsSubsetOf) is executed.  A demand on the permission causes <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A> to be called by the security infrastructure. The demand will fail because of the argument exception, resulting in a <xref:System.Security.SecurityException> being thrown. In this case, the original <xref:System.ArgumentException> exception will not be seen.\"\n  example:\n  - \"The following example shows the use of the <xref:System.Security.Permissions.UrlIdentityPermission.%23ctor%28System.String%29?displayProperty=fullName> constructor.  \\n  \\n [!code-cpp[System.Security.Permissions.UrlIdentityPermission#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CPP/urlidentity.cpp#8)]\\n [!code-csharp[System.Security.Permissions.UrlIdentityPermission#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CS/urlidentity.cs#8)]\\n [!code-vb[System.Security.Permissions.UrlIdentityPermission#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/VB/urlidentity.vb#8)]\"\n  syntax:\n    content: public UrlIdentityPermission (string site);\n    parameters:\n    - id: site\n      type: System.String\n      description: A URL or wildcard expression.\n  overload: System.Security.Permissions.UrlIdentityPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>site</code> parameter is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: The length of the <code>site</code> parameter is zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The URL, directory, or site portion of the <code>site</code> parameter is not valid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.Copy\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: UrlIdentityPermission.Copy()\n  fullName: UrlIdentityPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of a permission represents the same access to resources as the original permission.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.UrlIdentityPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: UrlIdentityPermission.FromXml(SecurityElement)\n  fullName: UrlIdentityPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the permission.\n  overload: System.Security.Permissions.UrlIdentityPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>esd</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>esd</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>esd</code> parameter's version number is not valid.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: UrlIdentityPermission.Intersect(IPermission)\n  fullName: UrlIdentityPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: \"The intersection of two permissions is a permission that describes access to the URLs they both describe in common. Only a demand that passes both original permissions will pass the intersection. For example, the intersection of a permission that represents access to http://www.fourthcoffee.com/process/grind.htm and a permission that represents access to http://www.fourthcoffee.com/* is a permission that represents access to http://www.fourthcoffee.com/process/grind.htm.  \\n  \\n <xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission object or when one of the permissions uses the wildcard operator (\\\"*\\\").\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.\n  overload: System.Security.Permissions.UrlIdentityPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.  \\n  \\n -or-  \\n  \\n The Url property is not a valid URL.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: UrlIdentityPermission.IsSubsetOf(IPermission)\n  fullName: UrlIdentityPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: \"The current permission is a subset of the specified permission if the current permission identifies access to a URL that is wholly contained by the specified permission. For example, a permission that represents access to http://www.fourthcoffee.com/process/grind.htm is a subset of a permission that represents access to http://www.fourthcoffee.com/*. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \\n  \\n <xref:System.Security.Permissions.UrlIdentityPermission> supports set operations (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission or when one of the permissions uses the wildcard operator (\\\"*\\\").\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'\n  overload: System.Security.Permissions.UrlIdentityPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.  \\n  \\n -or-  \\n  \\n The Url property is not a valid URL.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.ToXml\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: UrlIdentityPermission.ToXml()\n  fullName: UrlIdentityPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.UrlIdentityPermission.ToXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: UrlIdentityPermission.Union(IPermission)\n  fullName: UrlIdentityPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: \"The result of a call to the <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A> method is a permission that represents access to the URL as represented by the current permission, as well as access to the URL as represented by the specified permission.  \\n  \\n The <xref:System.Security.Permissions.UrlIdentityPermission> class supports set operations <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, and <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) only when the current permission is equal to the specified permission, or when one of the permissions uses the wildcard operator (\\\"*\\\") and one is a subset of the other.\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.UrlIdentityPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Security.Permissions.UrlIdentityPermission.Url\\\"></xref> property is not a valid URL.  \\n  \\n -or-  \\n  \\n The two permissions are not equal and one is not a subset of the other.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.UrlIdentityPermission.Url\n  commentId: P:System.Security.Permissions.UrlIdentityPermission.Url\n  id: Url\n  parent: System.Security.Permissions.UrlIdentityPermission\n  langs:\n  - csharp\n  name: Url\n  nameWithType: UrlIdentityPermission.Url\n  fullName: UrlIdentityPermission.Url\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets a URL representing the identity of Internet code.\n  remarks: \"The complete URL is considered, including the protocol (HTTP, HTTPS, FTP) and the file, for example: http://www.fourthcoffee.com/process/grind.htm/.  \\n  \\n URLs can be matched exactly or by a wildcard in the final position, for example: http://www.fourthcoffee.com/process/*.\"\n  syntax:\n    content: public string Url { get; set; }\n    return:\n      type: System.String\n      description: A URL representing the identity of Internet code.\n  overload: System.Security.Permissions.UrlIdentityPermission.Url*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The URL cannot be retrieved because it has an ambiguous identity.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.CodeAccessPermission\n  parent: System.Security\n  isExternal: false\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission\n  fullName: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: UrlIdentityPermission(PermissionState)\n  nameWithType: UrlIdentityPermission.UrlIdentityPermission(PermissionState)\n  fullName: UrlIdentityPermission.UrlIdentityPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: UrlIdentityPermission(String)\n  nameWithType: UrlIdentityPermission.UrlIdentityPermission(String)\n  fullName: UrlIdentityPermission.UrlIdentityPermission(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.UrlIdentityPermission.Copy\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: UrlIdentityPermission.Copy()\n  fullName: UrlIdentityPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: UrlIdentityPermission.FromXml(SecurityElement)\n  fullName: UrlIdentityPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: UrlIdentityPermission.Intersect(IPermission)\n  fullName: UrlIdentityPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: UrlIdentityPermission.IsSubsetOf(IPermission)\n  fullName: UrlIdentityPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.UrlIdentityPermission.ToXml\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: UrlIdentityPermission.ToXml()\n  fullName: UrlIdentityPermission.ToXml()\n- uid: System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: UrlIdentityPermission.Union(IPermission)\n  fullName: UrlIdentityPermission.Union(IPermission)\n- uid: System.Security.Permissions.UrlIdentityPermission.Url\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Url\n  nameWithType: UrlIdentityPermission.Url\n  fullName: UrlIdentityPermission.Url\n- uid: System.Security.Permissions.UrlIdentityPermission.#ctor*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: UrlIdentityPermission\n  nameWithType: UrlIdentityPermission.UrlIdentityPermission\n  fullName: UrlIdentityPermission.UrlIdentityPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.Permissions.UrlIdentityPermission.Copy*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Copy\n  nameWithType: UrlIdentityPermission.Copy\n  fullName: UrlIdentityPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.Permissions.UrlIdentityPermission.FromXml*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: UrlIdentityPermission.FromXml\n  fullName: UrlIdentityPermission.FromXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.Permissions.UrlIdentityPermission.Intersect*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: UrlIdentityPermission.Intersect\n  fullName: UrlIdentityPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.Permissions.UrlIdentityPermission.IsSubsetOf*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: UrlIdentityPermission.IsSubsetOf\n  fullName: UrlIdentityPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.Permissions.UrlIdentityPermission.ToXml*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: UrlIdentityPermission.ToXml\n  fullName: UrlIdentityPermission.ToXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.Permissions.UrlIdentityPermission.Union*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Union\n  nameWithType: UrlIdentityPermission.Union\n  fullName: UrlIdentityPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.Permissions.UrlIdentityPermission.Url*\n  parent: System.Security.Permissions.UrlIdentityPermission\n  isExternal: false\n  name: Url\n  nameWithType: UrlIdentityPermission.Url\n  fullName: UrlIdentityPermission.Url\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/UrlIdentityPermission.xml\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: CodeAccessPermission.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: CodeAccessPermission.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n"}