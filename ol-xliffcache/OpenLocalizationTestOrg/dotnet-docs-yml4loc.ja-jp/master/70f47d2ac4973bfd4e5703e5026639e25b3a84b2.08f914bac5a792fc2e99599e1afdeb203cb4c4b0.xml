{"nodes":[{"content":"Represents a single touch input produced by a finger on a touchscreen.","nodes":[{"pos":[0,70],"content":"Represents a single touch input produced by a finger on a touchscreen.","nodes":[{"content":"Represents a single touch input produced by a finger on a touchscreen.","pos":[0,70]}]}],"pos":[2149,2220],"yaml":true},{"content":"You typically access a <xref:System.Windows.Input.TouchDevice> by using the <xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName> property. A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.  \n  \n> [!NOTE]\n>  This class contains an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the derived class does not have full-trust permission. For more information about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","nodes":[{"pos":[0,374],"content":"You typically access a <xref:System.Windows.Input.TouchDevice> by using the <xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName> property. A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.","nodes":[{"content":"You typically access a <xref:System.Windows.Input.TouchDevice> by using the <xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName> property. A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.","pos":[0,374],"nodes":[{"content":"You typically access a <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> by using the <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,168],"source":"You typically access a <xref:System.Windows.Input.TouchDevice> by using the <xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName> property."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> represents a single touch on a screen.","pos":[169,249],"source":" A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen."},{"content":"If multiple touches are present, use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> property to distinguish between them.","pos":[250,374],"source":" If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them."}]}]},{"pos":[382,795],"content":"[!NOTE]\n This class contains an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the derived class does not have full-trust permission. For more information about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","leadings":["","> "],"nodes":[{"content":" This class contains an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the derived class does not have full-trust permission. For more information about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","pos":[8,411],"nodes":[{"content":"This class contains an inheritance demand at the class level that applies to all members.","pos":[1,90]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the derived class does not have full-trust permission.","pos":[91,203],"source":" A <xref:System.Security.SecurityException> is thrown when the derived class does not have full-trust permission."},{"content":"For more information about security demands, see <bpt id=\"p1\">[</bpt>Link Demands<ept id=\"p1\">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id=\"p2\">[</bpt>Inheritance Demands<ept id=\"p2\">](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.","pos":[204,403],"source":" For more information about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."}]}]}],"pos":[2231,3032],"yaml":true,"extradata":"MT"},{"content":"Called from constructors in derived classes to initialize the <xref href=\"System.Windows.Input.TouchDevice\"></xref> class.","nodes":[{"pos":[0,122],"content":"Called from constructors in derived classes to initialize the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> class.","source":"Called from constructors in derived classes to initialize the <xref href=\"System.Windows.Input.TouchDevice\"></xref> class."}],"pos":[6416,6539],"yaml":true},{"content":"A unique identifier for the touch device.","nodes":[{"pos":[0,41],"content":"A unique identifier for the touch device.","nodes":[{"content":"A unique identifier for the touch device.","pos":[0,41]}]}],"pos":[6730,6772],"yaml":true},{"content":"Adds the <xref href=\"System.Windows.Input.TouchDevice\"></xref> to the input messaging system.","nodes":[{"pos":[0,93],"content":"Adds the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> to the input messaging system.","source":"Adds the <xref href=\"System.Windows.Input.TouchDevice\"></xref> to the input messaging system."}],"pos":[7784,7878],"yaml":true},{"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to activate the current device.","nodes":[{"pos":[0,121],"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to activate the current device.","nodes":[{"content":"Classes that inherit from <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> should call this method to activate the current device.","pos":[0,121],"source":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to activate the current device."}]}],"pos":[7889,8011],"yaml":true,"extradata":"MT"},{"content":"The device is already activated.","nodes":[{"pos":[0,32],"content":"The device is already activated.","nodes":[{"content":"The device is already activated.","pos":[0,32]}]}],"pos":[8260,8293],"yaml":true},{"content":"Occurs when the <xref href=\"System.Windows.Input.TouchDevice\"></xref> is added to the input messaging system.","nodes":[{"pos":[0,109],"content":"Occurs when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> is added to the input messaging system.","source":"Occurs when the <xref href=\"System.Windows.Input.TouchDevice\"></xref> is added to the input messaging system."}],"pos":[9191,9301],"yaml":true},{"content":"Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device.","nodes":[{"pos":[0,104],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;&lt;/xref&gt;</ph> that is reporting input for this device.","source":"Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device."}],"pos":[10363,10468],"yaml":true},{"content":"The source that is reporting input for this device.","nodes":[{"pos":[0,51],"content":"The source that is reporting input for this device.","nodes":[{"content":"The source that is reporting input for this device.","pos":[0,51]}]}],"pos":[10703,10755],"yaml":true},{"content":"Captures a touch to the specified element by using the <xref href=\"System.Windows.Input.CaptureMode.Element\"></xref> capture mode.","nodes":[{"pos":[0,130],"content":"Captures a touch to the specified element by using the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CaptureMode.Element\"&gt;&lt;/xref&gt;</ph> capture mode.","source":"Captures a touch to the specified element by using the <xref href=\"System.Windows.Input.CaptureMode.Element\"></xref> capture mode."}],"pos":[11917,12048],"yaml":true},{"content":"A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element.","nodes":[{"pos":[0,120],"content":"A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> cannot be captured to an element if it is already captured to another element.","pos":[0,120],"source":"A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element."}]}],"pos":[12059,12180],"yaml":true,"extradata":"MT"},{"content":"The element that captures the touch input.","nodes":[{"pos":[0,42],"content":"The element that captures the touch input.","nodes":[{"content":"The element that captures the touch input.","pos":[0,42]}]}],"pos":[13075,13118],"yaml":true},{"content":"`true` if the element was able to capture the touch; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the element was able to capture the touch; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the element was able to capture the touch; otherwise, `false`."}],"pos":[13176,13251],"yaml":true},{"content":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref>, <xref href=\"System.Windows.UIElement3D\"></xref>, or <xref href=\"System.Windows.ContentElement\"></xref>.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Windows.UIElement3D\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph>.","source":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref>, <xref href=\"System.Windows.UIElement3D\"></xref>, or <xref href=\"System.Windows.ContentElement\"></xref>."}],"pos":[13413,13594],"yaml":true},{"content":"Captures a touch to the specified element by using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>.","nodes":[{"pos":[0,119],"content":"Captures a touch to the specified element by using the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CaptureMode\"&gt;&lt;/xref&gt;</ph>.","source":"Captures a touch to the specified element by using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>."}],"pos":[14754,14874],"yaml":true},{"content":"A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element.","nodes":[{"pos":[0,120],"content":"A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> cannot be captured to an element if it is already captured to another element.","pos":[0,120],"source":"A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element."}]}],"pos":[14885,15006],"yaml":true,"extradata":"MT"},{"content":"The element that captures the touch.","nodes":[{"pos":[0,36],"content":"The element that captures the touch.","nodes":[{"content":"The element that captures the touch.","pos":[0,36]}]}],"pos":[15229,15266],"yaml":true},{"content":"The capture policy to use.","nodes":[{"pos":[0,26],"content":"The capture policy to use.","nodes":[{"content":"The capture policy to use.","pos":[0,26]}]}],"pos":[15352,15379],"yaml":true},{"content":"`true` if the element was able to capture the touch; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the element was able to capture the touch; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the element was able to capture the touch; otherwise, `false`."}],"pos":[15437,15512],"yaml":true},{"content":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref>, <xref href=\"System.Windows.UIElement3D\"></xref>, or <xref href=\"System.Windows.ContentElement\"></xref>.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Windows.UIElement3D\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph>.","source":"<code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref>, <xref href=\"System.Windows.UIElement3D\"></xref>, or <xref href=\"System.Windows.ContentElement\"></xref>."}],"pos":[15674,15855],"yaml":true},{"content":"Gets the element that captured the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,89],"content":"Gets the element that captured the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the element that captured the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[16728,16818],"yaml":true},{"content":"The element that captured the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,84],"content":"The element that captured the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"The element that captured the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[17773,17858],"yaml":true},{"content":"Gets the capture policy of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,85],"content":"Gets the capture policy of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the capture policy of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[18843,18929],"yaml":true},{"content":"The capture policy of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,80],"content":"The capture policy of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"The capture policy of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[19089,19170],"yaml":true},{"content":"Removes the <xref href=\"System.Windows.Input.TouchDevice\"></xref> from the input messaging system.","nodes":[{"pos":[0,98],"content":"Removes the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> from the input messaging system.","source":"Removes the <xref href=\"System.Windows.Input.TouchDevice\"></xref> from the input messaging system."}],"pos":[20156,20255],"yaml":true},{"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to deactivate the current device.  \n  \n A <xref:System.Windows.UIElement.TouchLeave> event is raised without the corresponding <xref:System.Windows.UIElement.TouchUp> event.","nodes":[{"pos":[0,123],"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to deactivate the current device.","nodes":[{"content":"Classes that inherit from <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> should call this method to deactivate the current device.","pos":[0,123],"source":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to deactivate the current device."}]},{"pos":[130,263],"content":"A <xref:System.Windows.UIElement.TouchLeave> event is raised without the corresponding <xref:System.Windows.UIElement.TouchUp> event.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchLeave&gt;</ph> event is raised without the corresponding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph> event.","pos":[0,133],"source":"A <xref:System.Windows.UIElement.TouchLeave> event is raised without the corresponding <xref:System.Windows.UIElement.TouchUp> event."}]}],"pos":[20266,20534],"yaml":true,"extradata":"MT"},{"content":"The device is not activated.","nodes":[{"pos":[0,28],"content":"The device is not activated.","nodes":[{"content":"The device is not activated.","pos":[0,28]}]}],"pos":[20787,20816],"yaml":true},{"content":"Occurs when the <xref href=\"System.Windows.Input.TouchDevice\"></xref> is removed from the input messaging system.","nodes":[{"pos":[0,113],"content":"Occurs when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> is removed from the input messaging system.","source":"Occurs when the <xref href=\"System.Windows.Input.TouchDevice\"></xref> is removed from the input messaging system."}],"pos":[21726,21840],"yaml":true},{"content":"Gets the element that the touch contact point is directly over.","nodes":[{"pos":[0,63],"content":"Gets the element that the touch contact point is directly over.","nodes":[{"content":"Gets the element that the touch contact point is directly over.","pos":[0,63]}]}],"pos":[22904,22968],"yaml":true},{"content":"The element that the touch contact point is directly over.","nodes":[{"pos":[0,58],"content":"The element that the touch contact point is directly over.","nodes":[{"content":"The element that the touch contact point is directly over.","pos":[0,58]}]}],"pos":[23121,23180],"yaml":true},{"content":"When overridden in a derived class, returns all touch points that are collected between the most recent and previous touch events.","nodes":[{"pos":[0,130],"content":"When overridden in a derived class, returns all touch points that are collected between the most recent and previous touch events.","nodes":[{"content":"When overridden in a derived class, returns all touch points that are collected between the most recent and previous touch events.","pos":[0,130]}]}],"pos":[24392,24523],"yaml":true},{"content":"The element that defines the coordinate space.","nodes":[{"pos":[0,46],"content":"The element that defines the coordinate space.","nodes":[{"content":"The element that defines the coordinate space.","pos":[0,46]}]}],"pos":[24771,24818],"yaml":true},{"content":"All touch points that were collected between the most recent and previous touch events.","nodes":[{"pos":[0,87],"content":"All touch points that were collected between the most recent and previous touch events.","nodes":[{"content":"All touch points that were collected between the most recent and previous touch events.","pos":[0,87]}]}],"pos":[24903,24991],"yaml":true},{"content":"Returns the current position of the touch device relative to the specified element.","nodes":[{"pos":[0,83],"content":"Returns the current position of the touch device relative to the specified element.","nodes":[{"content":"Returns the current position of the touch device relative to the specified element.","pos":[0,83]}]}],"pos":[26139,26223],"yaml":true},{"content":"The element that defines the coordinate space.","nodes":[{"pos":[0,46],"content":"The element that defines the coordinate space.","nodes":[{"content":"The element that defines the coordinate space.","pos":[0,46]}]}],"pos":[26448,26495],"yaml":true},{"content":"The current position of the touch device relative to the specified element.","nodes":[{"pos":[0,75],"content":"The current position of the touch device relative to the specified element.","nodes":[{"content":"The current position of the touch device relative to the specified element.","pos":[0,75]}]}],"pos":[26570,26646],"yaml":true},{"content":"Gets the unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>, as provided by the operating system.","nodes":[{"pos":[0,125],"content":"Gets the unique identifier of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>, as provided by the operating system.","source":"Gets the unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>, as provided by the operating system."}],"pos":[27560,27686],"yaml":true},{"content":"A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.","nodes":[{"pos":[0,205],"content":"A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.","nodes":[{"content":"A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.","pos":[0,205],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> represents a single touch on a screen.","pos":[0,80],"source":"A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen."},{"content":"If multiple touches are present, use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> property to distinguish between them.","pos":[81,205],"source":" If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them."}]}]}],"pos":[27697,27903],"yaml":true,"extradata":"MT"},{"content":"The unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,83],"content":"The unique identifier of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"The unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[28865,28949],"yaml":true},{"content":"Gets a value that indicates whether the device is active.","nodes":[{"pos":[0,57],"content":"Gets a value that indicates whether the device is active.","nodes":[{"content":"Gets a value that indicates whether the device is active.","pos":[0,57]}]}],"pos":[29910,29968],"yaml":true},{"content":"`true` if the device is active; otherwise, `false`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`true`</ph> if the device is active; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the device is active; otherwise, `false`."}],"pos":[30079,30133],"yaml":true},{"content":"Called when a touch is captured to an element.","nodes":[{"pos":[0,46],"content":"Called when a touch is captured to an element.","nodes":[{"content":"Called when a touch is captured to an element.","pos":[0,46]}]}],"pos":[31377,31424],"yaml":true},{"content":"The <xref:System.Windows.Input.TouchDevice.OnCapture%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when the touch input is captured.","nodes":[{"pos":[0,209],"content":"The <xref:System.Windows.Input.TouchDevice.OnCapture%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when the touch input is captured.","nodes":[{"content":"The <xref:System.Windows.Input.TouchDevice.OnCapture%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when the touch input is captured.","pos":[0,209],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice.OnCapture%2A&gt;</ph> method has no default implementation.","pos":[0,94],"source":"The <xref:System.Windows.Input.TouchDevice.OnCapture%2A> method has no default implementation."},{"content":"It can be overridden in a derived class to perform any actions that are required when the touch input is captured.","pos":[95,209]}]}]}],"pos":[31435,31645],"yaml":true,"extradata":"MT"},{"content":"The element that captures the touch input.","nodes":[{"pos":[0,42],"content":"The element that captures the touch input.","nodes":[{"content":"The element that captures the touch input.","pos":[0,42]}]}],"pos":[31881,31924],"yaml":true},{"content":"The capture policy.","nodes":[{"pos":[0,19],"content":"The capture policy.","nodes":[{"content":"The capture policy.","pos":[0,19]}]}],"pos":[32010,32030],"yaml":true},{"content":"Called when a manipulation has ended.","nodes":[{"pos":[0,37],"content":"Called when a manipulation has ended.","nodes":[{"content":"Called when a manipulation has ended.","pos":[0,37]}]}],"pos":[33137,33175],"yaml":true},{"content":"`true` to cancel the action; otherwise, `false`.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">`true`</ph> to cancel the action; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to cancel the action; otherwise, `false`."}],"pos":[33386,33437],"yaml":true},{"content":"Called when a manipulation is started.","nodes":[{"pos":[0,38],"content":"Called when a manipulation is started.","nodes":[{"content":"Called when a manipulation is started.","pos":[0,38]}]}],"pos":[34563,34602],"yaml":true},{"content":"The <xref:System.Windows.Input.TouchDevice.OnManipulationStarted%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when touch manipulation is started.","nodes":[{"pos":[0,223],"content":"The <xref:System.Windows.Input.TouchDevice.OnManipulationStarted%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when touch manipulation is started.","nodes":[{"content":"The <xref:System.Windows.Input.TouchDevice.OnManipulationStarted%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when touch manipulation is started.","pos":[0,223],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice.OnManipulationStarted%2A&gt;</ph> method has no default implementation.","pos":[0,106],"source":"The <xref:System.Windows.Input.TouchDevice.OnManipulationStarted%2A> method has no default implementation."},{"content":"It can be overridden in a derived class to perform any actions that are required when touch manipulation is started.","pos":[107,223]}]}]}],"pos":[34613,34837],"yaml":true,"extradata":"MT"},{"content":"Reports that a touch is pressed on an element.","nodes":[{"pos":[0,46],"content":"Reports that a touch is pressed on an element.","nodes":[{"content":"Reports that a touch is pressed on an element.","pos":[0,46]}]}],"pos":[35924,35971],"yaml":true},{"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchDown> event. A <xref:System.Windows.UIElement.TouchEnter> event is raised before the <xref:System.Windows.UIElement.TouchDown> event.","nodes":[{"pos":[0,272],"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchDown> event. A <xref:System.Windows.UIElement.TouchEnter> event is raised before the <xref:System.Windows.UIElement.TouchDown> event.","nodes":[{"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchDown> event. A <xref:System.Windows.UIElement.TouchEnter> event is raised before the <xref:System.Windows.UIElement.TouchDown> event.","pos":[0,272],"nodes":[{"content":"Classes that inherit from <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> should call this method to raise the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> event.","pos":[0,151],"source":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchDown> event."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchEnter&gt;</ph> event is raised before the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> event.","pos":[152,272],"source":" A <xref:System.Windows.UIElement.TouchEnter> event is raised before the <xref:System.Windows.UIElement.TouchDown> event."}]}]}],"pos":[35982,36255],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> event was handled; otherwise, `false`.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement.TouchDown\"&gt;&lt;/xref&gt;</ph> event was handled; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> event was handled; otherwise, `false`."}],"pos":[36385,36496],"yaml":true},{"content":"Reports that a touch is moving across an element.","nodes":[{"pos":[0,49],"content":"Reports that a touch is moving across an element.","nodes":[{"content":"Reports that a touch is moving across an element.","pos":[0,49]}]}],"pos":[37481,37531],"yaml":true},{"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchMove> event.","nodes":[{"pos":[0,151],"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchMove> event.","nodes":[{"content":"Classes that inherit from <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> should call this method to raise the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph> event.","pos":[0,151],"source":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchMove> event."}]}],"pos":[37542,37694],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> event was handled; otherwise, `false`.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement.TouchMove\"&gt;&lt;/xref&gt;</ph> event was handled; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> event was handled; otherwise, `false`."}],"pos":[37824,37935],"yaml":true},{"content":"Reports that a touch was lifted from an element.","nodes":[{"pos":[0,48],"content":"Reports that a touch was lifted from an element.","nodes":[{"content":"Reports that a touch was lifted from an element.","pos":[0,48]}]}],"pos":[38908,38957],"yaml":true},{"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchUp> event. A <xref:System.Windows.UIElement.TouchLeave> event is raised after the <xref:System.Windows.UIElement.TouchUp> event.","nodes":[{"pos":[0,267],"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchUp> event. A <xref:System.Windows.UIElement.TouchLeave> event is raised after the <xref:System.Windows.UIElement.TouchUp> event.","nodes":[{"content":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchUp> event. A <xref:System.Windows.UIElement.TouchLeave> event is raised after the <xref:System.Windows.UIElement.TouchUp> event.","pos":[0,267],"nodes":[{"content":"Classes that inherit from <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> should call this method to raise the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph> event.","pos":[0,149],"source":"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchUp> event."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchLeave&gt;</ph> event is raised after the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph> event.","pos":[150,267],"source":" A <xref:System.Windows.UIElement.TouchLeave> event is raised after the <xref:System.Windows.UIElement.TouchUp> event."}]}]}],"pos":[38968,39236],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> event was handled; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement.TouchUp\"&gt;&lt;/xref&gt;</ph> event was handled; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> event was handled; otherwise, `false`."}],"pos":[39364,39473],"yaml":true},{"content":"Sets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device.","nodes":[{"pos":[0,104],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PresentationSource\"&gt;&lt;/xref&gt;</ph> that is reporting input for this device.","source":"Sets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device."}],"pos":[40623,40728],"yaml":true},{"content":"The source that reports input for this device.","nodes":[{"pos":[0,46],"content":"The source that reports input for this device.","nodes":[{"content":"The source that reports input for this device.","pos":[0,46]}]}],"pos":[40987,41034],"yaml":true},{"content":"Forces the <xref href=\"System.Windows.Input.TouchDevice\"></xref> to synchronize the user interface with underlying touch points.","nodes":[{"pos":[0,128],"content":"Forces the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> to synchronize the user interface with underlying touch points.","source":"Forces the <xref href=\"System.Windows.Input.TouchDevice\"></xref> to synchronize the user interface with underlying touch points."}],"pos":[42074,42203],"yaml":true},{"content":"Synchronizing the user interface with the underlying touch positions might cause <xref:System.Windows.UIElement.TouchMove> events to be raised.","nodes":[{"pos":[0,143],"content":"Synchronizing the user interface with the underlying touch positions might cause <xref:System.Windows.UIElement.TouchMove> events to be raised.","nodes":[{"content":"Synchronizing the user interface with the underlying touch positions might cause <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph> events to be raised.","pos":[0,143],"source":"Synchronizing the user interface with the underlying touch positions might cause <xref:System.Windows.UIElement.TouchMove> events to be raised."}]}],"pos":[42214,42358],"yaml":true,"extradata":"MT"},{"content":"Gets the element that receives input from the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,100],"content":"Gets the element that receives input from the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the element that receives input from the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[43503,43604],"yaml":true},{"content":"The element that receives input from the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,95],"content":"The element that receives input from the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"The element that receives input from the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[43767,43863],"yaml":true},{"content":"Occurs when a touch message is sent.","nodes":[{"pos":[0,36],"content":"Occurs when a touch message is sent.","nodes":[{"content":"Occurs when a touch message is sent.","pos":[0,36]}]}],"pos":[44797,44834],"yaml":true},{"content":"Returns the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object.","nodes":[{"pos":[0,90],"content":"Returns the position of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object."}],"pos":[46176,46267],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","nodes":[{"pos":[0,203],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","pos":[0,203],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Windows.Input.IManipulator&gt;</ph> interface.","pos":[60,203],"source":" It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface."}]}]}],"pos":[46278,46482],"yaml":true,"extradata":"MT"},{"content":"The element to use as the frame of reference for calculating the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref>.","nodes":[{"pos":[0,136],"content":"The element to use as the frame of reference for calculating the position of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;&lt;/xref&gt;</ph>.","source":"The element to use as the frame of reference for calculating the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref>."}],"pos":[46691,46828],"yaml":true},{"content":"The position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object.","nodes":[{"pos":[0,82],"content":"The position of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.IManipulator\"&gt;&lt;/xref&gt;</ph> object.","source":"The position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object."}],"pos":[46892,46975],"yaml":true},{"content":"Gets the unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref> as provided by the operating system.","nodes":[{"pos":[0,124],"content":"Gets the unique identifier of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> as provided by the operating system.","source":"Gets the unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref> as provided by the operating system."}],"pos":[48098,48223],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","nodes":[{"pos":[0,203],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","pos":[0,203],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Windows.Input.IManipulator&gt;</ph> interface.","pos":[60,203],"source":" It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface."}]}]}],"pos":[48234,48438],"yaml":true,"extradata":"MT"},{"content":"The unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.","nodes":[{"pos":[0,83],"content":"The unique identifier of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph>.","source":"The unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>."}],"pos":[48567,48651],"yaml":true},{"content":"Occurs when a manipulation has ended.","nodes":[{"pos":[0,37],"content":"Occurs when a manipulation has ended.","nodes":[{"content":"Occurs when a manipulation has ended.","pos":[0,37]}]}],"pos":[49878,49916],"yaml":true},{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","nodes":[{"pos":[0,203],"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","nodes":[{"content":"This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.","pos":[0,203],"nodes":[{"content":"This member is an explicit interface member implementation.","pos":[0,59]},{"content":"It can be used only when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> instance is cast to an <ph id=\"ph2\">&lt;xref:System.Windows.Input.IManipulator&gt;</ph> interface.","pos":[60,203],"source":" It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface."}]}]}],"pos":[49927,50131],"yaml":true,"extradata":"MT"},{"content":"`true` to cancel the action; otherwise, `false`.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">`true`</ph> to cancel the action; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to cancel the action; otherwise, `false`."}],"pos":[50335,50386],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.TouchDevice\n  commentId: T:System.Windows.Input.TouchDevice\n  id: TouchDevice\n  children:\n  - System.Windows.Input.TouchDevice.#ctor(System.Int32)\n  - System.Windows.Input.TouchDevice.Activate\n  - System.Windows.Input.TouchDevice.Activated\n  - System.Windows.Input.TouchDevice.ActiveSource\n  - System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)\n  - System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  - System.Windows.Input.TouchDevice.Captured\n  - System.Windows.Input.TouchDevice.CaptureMode\n  - System.Windows.Input.TouchDevice.Deactivate\n  - System.Windows.Input.TouchDevice.Deactivated\n  - System.Windows.Input.TouchDevice.DirectlyOver\n  - System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)\n  - System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)\n  - System.Windows.Input.TouchDevice.Id\n  - System.Windows.Input.TouchDevice.IsActive\n  - System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  - System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)\n  - System.Windows.Input.TouchDevice.OnManipulationStarted\n  - System.Windows.Input.TouchDevice.ReportDown\n  - System.Windows.Input.TouchDevice.ReportMove\n  - System.Windows.Input.TouchDevice.ReportUp\n  - System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)\n  - System.Windows.Input.TouchDevice.Synchronize\n  - System.Windows.Input.TouchDevice.Target\n  - System.Windows.Input.TouchDevice.Updated\n  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)\n  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id\n  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)\n  langs:\n  - csharp\n  name: TouchDevice\n  nameWithType: TouchDevice\n  fullName: System.Windows.Input.TouchDevice\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Represents a single touch input produced by a finger on a touchscreen.\n  remarks: \"You typically access a <xref:System.Windows.Input.TouchDevice> by using the <xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName> property. A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.  \\n  \\n> [!NOTE]\\n>  This class contains an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when the derived class does not have full-trust permission. For more information about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).\"\n  example:\n  - \"The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers on a touchscreen. Each touch is represented by a <xref:System.Windows.Input.TouchDevice> in the <xref:System.Windows.Input.TouchEventArgs>. The pattern is created by drawing a line between the touch points that are provided by the touches. This example requires a Windows Touch–compatible screen.  \\n  \\n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a grid, and attaches the event handlers for the touch events.  \\n  \\n [!code-xml[TouchEventsSample#000](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml#000)]  \\n  \\n The following code handles the touch events. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n [!code-csharp[TouchEventsSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#100)]\\n [!code-vb[TouchEventsSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#100)]\"\n  syntax:\n    content: 'public abstract class TouchDevice : System.Windows.Input.InputDevice, System.Windows.Input.IManipulator'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.Input.InputDevice\n  implements:\n  - System.Windows.Input.IManipulator\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.#ctor(System.Int32)\n  commentId: M:System.Windows.Input.TouchDevice.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: TouchDevice(Int32)\n  nameWithType: TouchDevice.TouchDevice(Int32)\n  fullName: TouchDevice.TouchDevice(Int32)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Called from constructors in derived classes to initialize the <xref href=\"System.Windows.Input.TouchDevice\"></xref> class.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      protected TouchDevice (int deviceId);\n    parameters:\n    - id: deviceId\n      type: System.Int32\n      description: A unique identifier for the touch device.\n  overload: System.Windows.Input.TouchDevice.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.TouchDevice.Activate\n  commentId: M:System.Windows.Input.TouchDevice.Activate\n  id: Activate\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Activate()\n  nameWithType: TouchDevice.Activate()\n  fullName: TouchDevice.Activate()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Adds the <xref href=\"System.Windows.Input.TouchDevice\"></xref> to the input messaging system.\n  remarks: Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to activate the current device.\n  syntax:\n    content: protected void Activate ();\n    parameters: []\n  overload: System.Windows.Input.TouchDevice.Activate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The device is already activated.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.Activated\n  commentId: E:System.Windows.Input.TouchDevice.Activated\n  id: Activated\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Activated\n  nameWithType: TouchDevice.Activated\n  fullName: TouchDevice.Activated\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the <xref href=\"System.Windows.Input.TouchDevice\"></xref> is added to the input messaging system.\n  syntax:\n    content: public event EventHandler Activated;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.ActiveSource\n  commentId: P:System.Windows.Input.TouchDevice.ActiveSource\n  id: ActiveSource\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: ActiveSource\n  nameWithType: TouchDevice.ActiveSource\n  fullName: TouchDevice.ActiveSource\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public override sealed System.Windows.PresentationSource ActiveSource { get; }\n    return:\n      type: System.Windows.PresentationSource\n      description: The source that is reporting input for this device.\n  overload: System.Windows.Input.TouchDevice.ActiveSource*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)\n  id: Capture(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Capture(IInputElement)\n  nameWithType: TouchDevice.Capture(IInputElement)\n  fullName: TouchDevice.Capture(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Captures a touch to the specified element by using the <xref href=\"System.Windows.Input.CaptureMode.Element\"></xref> capture mode.\n  remarks: A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element.\n  example:\n  - \"The following example handles the <xref:System.Windows.UIElement.TouchDown> events that occur on a <xref:System.Windows.Controls.Canvas>. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>.  \\n  \\n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \\n  \\n [!code-csharp[TouchEventsSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#110)]\\n [!code-vb[TouchEventsSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#110)]\"\n  syntax:\n    content: public bool Capture (System.Windows.IInputElement element);\n    parameters:\n    - id: element\n      type: System.Windows.IInputElement\n      description: The element that captures the touch input.\n    return:\n      type: System.Boolean\n      description: '`true` if the element was able to capture the touch; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.Capture*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref>, <xref href=\"System.Windows.UIElement3D\"></xref>, or <xref href=\"System.Windows.ContentElement\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  commentId: M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  id: Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Capture(IInputElement, CaptureMode)\n  nameWithType: TouchDevice.Capture(IInputElement, CaptureMode)\n  fullName: TouchDevice.Capture(IInputElement, CaptureMode)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Captures a touch to the specified element by using the specified <xref href=\"System.Windows.Input.CaptureMode\"></xref>.\n  remarks: A <xref:System.Windows.Input.TouchDevice> cannot be captured to an element if it is already captured to another element.\n  syntax:\n    content: public bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);\n    parameters:\n    - id: element\n      type: System.Windows.IInputElement\n      description: The element that captures the touch.\n    - id: captureMode\n      type: System.Windows.Input.CaptureMode\n      description: The capture policy to use.\n    return:\n      type: System.Boolean\n      description: '`true` if the element was able to capture the touch; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.Capture*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>element</code> is not a <xref href=\"System.Windows.UIElement\"></xref>, <xref href=\"System.Windows.UIElement3D\"></xref>, or <xref href=\"System.Windows.ContentElement\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.TouchDevice.Captured\n  commentId: P:System.Windows.Input.TouchDevice.Captured\n  id: Captured\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Captured\n  nameWithType: TouchDevice.Captured\n  fullName: TouchDevice.Captured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the element that captured the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example handles the <xref:System.Windows.UIElement.TouchUp> events that occur on a <xref:System.Windows.Controls.Canvas>. It checks the <xref:System.Windows.Input.TouchDevice.Captured%2A> property to verify that the device that raised the event is captured to the <xref:System.Windows.Controls.Canvas>. If it is, the <xref:System.Windows.Input.TouchDevice> is released.  \\n  \\n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \\n  \\n [!code-csharp[TouchEventsSample#130](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#130)]\\n [!code-vb[TouchEventsSample#130](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#130)]\"\n  syntax:\n    content: public System.Windows.IInputElement Captured { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element that captured the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  overload: System.Windows.Input.TouchDevice.Captured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.CaptureMode\n  commentId: P:System.Windows.Input.TouchDevice.CaptureMode\n  id: CaptureMode\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: CaptureMode\n  nameWithType: TouchDevice.CaptureMode\n  fullName: TouchDevice.CaptureMode\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the capture policy of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  syntax:\n    content: public System.Windows.Input.CaptureMode CaptureMode { get; }\n    return:\n      type: System.Windows.Input.CaptureMode\n      description: The capture policy of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  overload: System.Windows.Input.TouchDevice.CaptureMode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.Deactivate\n  commentId: M:System.Windows.Input.TouchDevice.Deactivate\n  id: Deactivate\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Deactivate()\n  nameWithType: TouchDevice.Deactivate()\n  fullName: TouchDevice.Deactivate()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Removes the <xref href=\"System.Windows.Input.TouchDevice\"></xref> from the input messaging system.\n  remarks: \"Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to deactivate the current device.  \\n  \\n A <xref:System.Windows.UIElement.TouchLeave> event is raised without the corresponding <xref:System.Windows.UIElement.TouchUp> event.\"\n  syntax:\n    content: protected void Deactivate ();\n    parameters: []\n  overload: System.Windows.Input.TouchDevice.Deactivate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The device is not activated.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.Deactivated\n  commentId: E:System.Windows.Input.TouchDevice.Deactivated\n  id: Deactivated\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Deactivated\n  nameWithType: TouchDevice.Deactivated\n  fullName: TouchDevice.Deactivated\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the <xref href=\"System.Windows.Input.TouchDevice\"></xref> is removed from the input messaging system.\n  syntax:\n    content: public event EventHandler Deactivated;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.DirectlyOver\n  commentId: P:System.Windows.Input.TouchDevice.DirectlyOver\n  id: DirectlyOver\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: DirectlyOver\n  nameWithType: TouchDevice.DirectlyOver\n  fullName: TouchDevice.DirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the element that the touch contact point is directly over.\n  syntax:\n    content: public System.Windows.IInputElement DirectlyOver { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element that the touch contact point is directly over.\n  overload: System.Windows.Input.TouchDevice.DirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)\n  id: GetIntermediateTouchPoints(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: GetIntermediateTouchPoints(IInputElement)\n  nameWithType: TouchDevice.GetIntermediateTouchPoints(IInputElement)\n  fullName: TouchDevice.GetIntermediateTouchPoints(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: When overridden in a derived class, returns all touch points that are collected between the most recent and previous touch events.\n  syntax:\n    content: public abstract System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The element that defines the coordinate space.\n    return:\n      type: System.Windows.Input.TouchPointCollection\n      description: All touch points that were collected between the most recent and previous touch events.\n  overload: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)\n  id: GetTouchPoint(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: GetTouchPoint(IInputElement)\n  nameWithType: TouchDevice.GetTouchPoint(IInputElement)\n  fullName: TouchDevice.GetTouchPoint(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns the current position of the touch device relative to the specified element.\n  syntax:\n    content: public abstract System.Windows.Input.TouchPoint GetTouchPoint (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The element that defines the coordinate space.\n    return:\n      type: System.Windows.Input.TouchPoint\n      description: The current position of the touch device relative to the specified element.\n  overload: System.Windows.Input.TouchDevice.GetTouchPoint*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.TouchDevice.Id\n  commentId: P:System.Windows.Input.TouchDevice.Id\n  id: Id\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Id\n  nameWithType: TouchDevice.Id\n  fullName: TouchDevice.Id\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>, as provided by the operating system.\n  remarks: A <xref:System.Windows.Input.TouchDevice> represents a single touch on a screen. If multiple touches are present, use the <xref:System.Windows.Input.TouchDevice.Id%2A> property to distinguish between them.\n  example:\n  - \"The following example handles the <xref:System.Windows.UIElement.TouchMove> events that occur on a <xref:System.Windows.Controls.Canvas>. When a touch moves on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \\n  \\n This example is part of a larger example available in the <xref:System.Windows.Input.TouchDevice> class overview.  \\n  \\n [!code-csharp[TouchEventsSample#120](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#120)]\\n [!code-vb[TouchEventsSample#120](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#120)]\"\n  syntax:\n    content: public int Id { get; }\n    return:\n      type: System.Int32\n      description: The unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  overload: System.Windows.Input.TouchDevice.Id*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.IsActive\n  commentId: P:System.Windows.Input.TouchDevice.IsActive\n  id: IsActive\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: IsActive\n  nameWithType: TouchDevice.IsActive\n  fullName: TouchDevice.IsActive\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the device is active.\n  syntax:\n    content: public bool IsActive { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the device is active; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.IsActive*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  commentId: M:System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  id: OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: OnCapture(IInputElement, CaptureMode)\n  nameWithType: TouchDevice.OnCapture(IInputElement, CaptureMode)\n  fullName: TouchDevice.OnCapture(IInputElement, CaptureMode)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Called when a touch is captured to an element.\n  remarks: The <xref:System.Windows.Input.TouchDevice.OnCapture%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when the touch input is captured.\n  syntax:\n    content: protected virtual void OnCapture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);\n    parameters:\n    - id: element\n      type: System.Windows.IInputElement\n      description: The element that captures the touch input.\n    - id: captureMode\n      type: System.Windows.Input.CaptureMode\n      description: The capture policy.\n  overload: System.Windows.Input.TouchDevice.OnCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)\n  commentId: M:System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)\n  id: OnManipulationEnded(System.Boolean)\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: OnManipulationEnded(Boolean)\n  nameWithType: TouchDevice.OnManipulationEnded(Boolean)\n  fullName: TouchDevice.OnManipulationEnded(Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Called when a manipulation has ended.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      protected virtual void OnManipulationEnded (bool cancel);\n    parameters:\n    - id: cancel\n      type: System.Boolean\n      description: '`true` to cancel the action; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.OnManipulationEnded*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.OnManipulationStarted\n  commentId: M:System.Windows.Input.TouchDevice.OnManipulationStarted\n  id: OnManipulationStarted\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: OnManipulationStarted()\n  nameWithType: TouchDevice.OnManipulationStarted()\n  fullName: TouchDevice.OnManipulationStarted()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Called when a manipulation is started.\n  remarks: The <xref:System.Windows.Input.TouchDevice.OnManipulationStarted%2A> method has no default implementation. It can be overridden in a derived class to perform any actions that are required when touch manipulation is started.\n  syntax:\n    content: protected virtual void OnManipulationStarted ();\n    parameters: []\n  overload: System.Windows.Input.TouchDevice.OnManipulationStarted*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.ReportDown\n  commentId: M:System.Windows.Input.TouchDevice.ReportDown\n  id: ReportDown\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: ReportDown()\n  nameWithType: TouchDevice.ReportDown()\n  fullName: TouchDevice.ReportDown()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Reports that a touch is pressed on an element.\n  remarks: Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchDown> event. A <xref:System.Windows.UIElement.TouchEnter> event is raised before the <xref:System.Windows.UIElement.TouchDown> event.\n  syntax:\n    content: protected bool ReportDown ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> event was handled; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.ReportDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.ReportMove\n  commentId: M:System.Windows.Input.TouchDevice.ReportMove\n  id: ReportMove\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: ReportMove()\n  nameWithType: TouchDevice.ReportMove()\n  fullName: TouchDevice.ReportMove()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Reports that a touch is moving across an element.\n  remarks: Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchMove> event.\n  syntax:\n    content: protected bool ReportMove ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> event was handled; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.ReportMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.ReportUp\n  commentId: M:System.Windows.Input.TouchDevice.ReportUp\n  id: ReportUp\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: ReportUp()\n  nameWithType: TouchDevice.ReportUp()\n  fullName: TouchDevice.ReportUp()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Reports that a touch was lifted from an element.\n  remarks: Classes that inherit from <xref:System.Windows.Input.TouchDevice> should call this method to raise the <xref:System.Windows.UIElement.TouchUp> event. A <xref:System.Windows.UIElement.TouchLeave> event is raised after the <xref:System.Windows.UIElement.TouchUp> event.\n  syntax:\n    content: protected bool ReportUp ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> event was handled; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.ReportUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)\n  commentId: M:System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)\n  id: SetActiveSource(System.Windows.PresentationSource)\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: SetActiveSource(PresentationSource)\n  nameWithType: TouchDevice.SetActiveSource(PresentationSource)\n  fullName: TouchDevice.SetActiveSource(PresentationSource)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Sets the <xref href=\"System.Windows.PresentationSource\"></xref> that is reporting input for this device.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      protected void SetActiveSource (System.Windows.PresentationSource activeSource);\n    parameters:\n    - id: activeSource\n      type: System.Windows.PresentationSource\n      description: The source that reports input for this device.\n  overload: System.Windows.Input.TouchDevice.SetActiveSource*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.TouchDevice.Synchronize\n  commentId: M:System.Windows.Input.TouchDevice.Synchronize\n  id: Synchronize\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Synchronize()\n  nameWithType: TouchDevice.Synchronize()\n  fullName: TouchDevice.Synchronize()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Forces the <xref href=\"System.Windows.Input.TouchDevice\"></xref> to synchronize the user interface with underlying touch points.\n  remarks: Synchronizing the user interface with the underlying touch positions might cause <xref:System.Windows.UIElement.TouchMove> events to be raised.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void Synchronize ();\n    parameters: []\n  overload: System.Windows.Input.TouchDevice.Synchronize*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.Target\n  commentId: P:System.Windows.Input.TouchDevice.Target\n  id: Target\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Target\n  nameWithType: TouchDevice.Target\n  fullName: TouchDevice.Target\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the element that receives input from the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  syntax:\n    content: public override sealed System.Windows.IInputElement Target { get; }\n    return:\n      type: System.Windows.IInputElement\n      description: The element that receives input from the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  overload: System.Windows.Input.TouchDevice.Target*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.TouchDevice.Updated\n  commentId: E:System.Windows.Input.TouchDevice.Updated\n  id: Updated\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: Updated\n  nameWithType: TouchDevice.Updated\n  fullName: TouchDevice.Updated\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when a touch message is sent.\n  syntax:\n    content: public event EventHandler Updated;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)\n  commentId: M:System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)\n  id: System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)\n  isEii: true\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: IManipulator.GetPosition(IInputElement)\n  nameWithType: TouchDevice.IManipulator.GetPosition(IInputElement)\n  fullName: TouchDevice.IManipulator.GetPosition(IInputElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.\n  syntax:\n    content: System.Windows.Point IManipulator.GetPosition (System.Windows.IInputElement relativeTo);\n    parameters:\n    - id: relativeTo\n      type: System.Windows.IInputElement\n      description: The element to use as the frame of reference for calculating the position of the <xref href=\"System.Windows.Input.IManipulator\"></xref>.\n    return:\n      type: System.Windows.Point\n      description: The position of the <xref href=\"System.Windows.Input.IManipulator\"></xref> object.\n  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id\n  commentId: P:System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id\n  id: System#Windows#Input#IManipulator#Id\n  isEii: true\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: IManipulator.Id\n  nameWithType: TouchDevice.IManipulator.Id\n  fullName: TouchDevice.IManipulator.Id\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref> as provided by the operating system.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.\n  syntax:\n    content: int System.Windows.Input.IManipulator.Id { get; }\n    return:\n      type: System.Int32\n      description: The unique identifier of the <xref href=\"System.Windows.Input.TouchDevice\"></xref>.\n  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.author: jimwalk\n  manager: martinek\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)\n  commentId: M:System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)\n  id: System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)\n  isEii: true\n  parent: System.Windows.Input.TouchDevice\n  langs:\n  - csharp\n  name: IManipulator.ManipulationEnded(Boolean)\n  nameWithType: TouchDevice.IManipulator.ManipulationEnded(Boolean)\n  fullName: TouchDevice.IManipulator.ManipulationEnded(Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when a manipulation has ended.\n  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Windows.Input.TouchDevice> instance is cast to an <xref:System.Windows.Input.IManipulator> interface.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      void IManipulator.ManipulationEnded (bool cancel);\n    parameters:\n    - id: cancel\n      type: System.Boolean\n      description: '`true` to cancel the action; otherwise, `false`.'\n  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.InputDevice\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputDevice\n  nameWithType: InputDevice\n  fullName: System.Windows.Input.InputDevice\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Windows.Input.TouchDevice.#ctor(System.Int32)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: TouchDevice(Int32)\n  nameWithType: TouchDevice.TouchDevice(Int32)\n  fullName: TouchDevice.TouchDevice(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.TouchDevice.Activate\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Activate()\n  nameWithType: TouchDevice.Activate()\n  fullName: TouchDevice.Activate()\n- uid: System.Windows.Input.TouchDevice.Activated\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Activated\n  nameWithType: TouchDevice.Activated\n  fullName: TouchDevice.Activated\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Input.TouchDevice.ActiveSource\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ActiveSource\n  nameWithType: TouchDevice.ActiveSource\n  fullName: TouchDevice.ActiveSource\n- uid: System.Windows.PresentationSource\n  parent: System.Windows\n  isExternal: false\n  name: PresentationSource\n  nameWithType: PresentationSource\n  fullName: System.Windows.PresentationSource\n- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Capture(IInputElement)\n  nameWithType: TouchDevice.Capture(IInputElement)\n  fullName: TouchDevice.Capture(IInputElement)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Capture(IInputElement, CaptureMode)\n  nameWithType: TouchDevice.Capture(IInputElement, CaptureMode)\n  fullName: TouchDevice.Capture(IInputElement, CaptureMode)\n- uid: System.Windows.Input.CaptureMode\n  parent: System.Windows.Input\n  isExternal: false\n  name: CaptureMode\n  nameWithType: CaptureMode\n  fullName: System.Windows.Input.CaptureMode\n- uid: System.Windows.Input.TouchDevice.Captured\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Captured\n  nameWithType: TouchDevice.Captured\n  fullName: TouchDevice.Captured\n- uid: System.Windows.Input.TouchDevice.CaptureMode\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: CaptureMode\n  nameWithType: TouchDevice.CaptureMode\n  fullName: TouchDevice.CaptureMode\n- uid: System.Windows.Input.TouchDevice.Deactivate\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Deactivate()\n  nameWithType: TouchDevice.Deactivate()\n  fullName: TouchDevice.Deactivate()\n- uid: System.Windows.Input.TouchDevice.Deactivated\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Deactivated\n  nameWithType: TouchDevice.Deactivated\n  fullName: TouchDevice.Deactivated\n- uid: System.Windows.Input.TouchDevice.DirectlyOver\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: DirectlyOver\n  nameWithType: TouchDevice.DirectlyOver\n  fullName: TouchDevice.DirectlyOver\n- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: GetIntermediateTouchPoints(IInputElement)\n  nameWithType: TouchDevice.GetIntermediateTouchPoints(IInputElement)\n  fullName: TouchDevice.GetIntermediateTouchPoints(IInputElement)\n- uid: System.Windows.Input.TouchPointCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchPointCollection\n  nameWithType: TouchPointCollection\n  fullName: System.Windows.Input.TouchPointCollection\n- uid: System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: GetTouchPoint(IInputElement)\n  nameWithType: TouchDevice.GetTouchPoint(IInputElement)\n  fullName: TouchDevice.GetTouchPoint(IInputElement)\n- uid: System.Windows.Input.TouchPoint\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchPoint\n  nameWithType: TouchPoint\n  fullName: System.Windows.Input.TouchPoint\n- uid: System.Windows.Input.TouchDevice.Id\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Id\n  nameWithType: TouchDevice.Id\n  fullName: TouchDevice.Id\n- uid: System.Windows.Input.TouchDevice.IsActive\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: IsActive\n  nameWithType: TouchDevice.IsActive\n  fullName: TouchDevice.IsActive\n- uid: System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: OnCapture(IInputElement, CaptureMode)\n  nameWithType: TouchDevice.OnCapture(IInputElement, CaptureMode)\n  fullName: TouchDevice.OnCapture(IInputElement, CaptureMode)\n- uid: System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: OnManipulationEnded(Boolean)\n  nameWithType: TouchDevice.OnManipulationEnded(Boolean)\n  fullName: TouchDevice.OnManipulationEnded(Boolean)\n- uid: System.Windows.Input.TouchDevice.OnManipulationStarted\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: OnManipulationStarted()\n  nameWithType: TouchDevice.OnManipulationStarted()\n  fullName: TouchDevice.OnManipulationStarted()\n- uid: System.Windows.Input.TouchDevice.ReportDown\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ReportDown()\n  nameWithType: TouchDevice.ReportDown()\n  fullName: TouchDevice.ReportDown()\n- uid: System.Windows.Input.TouchDevice.ReportMove\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ReportMove()\n  nameWithType: TouchDevice.ReportMove()\n  fullName: TouchDevice.ReportMove()\n- uid: System.Windows.Input.TouchDevice.ReportUp\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ReportUp()\n  nameWithType: TouchDevice.ReportUp()\n  fullName: TouchDevice.ReportUp()\n- uid: System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: SetActiveSource(PresentationSource)\n  nameWithType: TouchDevice.SetActiveSource(PresentationSource)\n  fullName: TouchDevice.SetActiveSource(PresentationSource)\n- uid: System.Windows.Input.TouchDevice.Synchronize\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Synchronize()\n  nameWithType: TouchDevice.Synchronize()\n  fullName: TouchDevice.Synchronize()\n- uid: System.Windows.Input.TouchDevice.Target\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Target\n  nameWithType: TouchDevice.Target\n  fullName: TouchDevice.Target\n- uid: System.Windows.Input.TouchDevice.Updated\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Updated\n  nameWithType: TouchDevice.Updated\n  fullName: TouchDevice.Updated\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: IManipulator.GetPosition(IInputElement)\n  nameWithType: TouchDevice.IManipulator.GetPosition(IInputElement)\n  fullName: TouchDevice.IManipulator.GetPosition(IInputElement)\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: IManipulator.Id\n  nameWithType: TouchDevice.IManipulator.Id\n  fullName: TouchDevice.IManipulator.Id\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: IManipulator.ManipulationEnded(Boolean)\n  nameWithType: TouchDevice.IManipulator.ManipulationEnded(Boolean)\n  fullName: TouchDevice.IManipulator.ManipulationEnded(Boolean)\n- uid: System.Windows.Input.TouchDevice.#ctor*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: TouchDevice\n  nameWithType: TouchDevice.TouchDevice\n  fullName: TouchDevice.TouchDevice\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.Activate*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Activate\n  nameWithType: TouchDevice.Activate\n  fullName: TouchDevice.Activate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.ActiveSource*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ActiveSource\n  nameWithType: TouchDevice.ActiveSource\n  fullName: TouchDevice.ActiveSource\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.Capture*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Capture\n  nameWithType: TouchDevice.Capture\n  fullName: TouchDevice.Capture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.Captured*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Captured\n  nameWithType: TouchDevice.Captured\n  fullName: TouchDevice.Captured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.CaptureMode*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: CaptureMode\n  nameWithType: TouchDevice.CaptureMode\n  fullName: TouchDevice.CaptureMode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.Deactivate*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Deactivate\n  nameWithType: TouchDevice.Deactivate\n  fullName: TouchDevice.Deactivate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.DirectlyOver*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: DirectlyOver\n  nameWithType: TouchDevice.DirectlyOver\n  fullName: TouchDevice.DirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: GetIntermediateTouchPoints\n  nameWithType: TouchDevice.GetIntermediateTouchPoints\n  fullName: TouchDevice.GetIntermediateTouchPoints\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.GetTouchPoint*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: GetTouchPoint\n  nameWithType: TouchDevice.GetTouchPoint\n  fullName: TouchDevice.GetTouchPoint\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.Id*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Id\n  nameWithType: TouchDevice.Id\n  fullName: TouchDevice.Id\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.IsActive*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: IsActive\n  nameWithType: TouchDevice.IsActive\n  fullName: TouchDevice.IsActive\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.OnCapture*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: OnCapture\n  nameWithType: TouchDevice.OnCapture\n  fullName: TouchDevice.OnCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.OnManipulationEnded*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: OnManipulationEnded\n  nameWithType: TouchDevice.OnManipulationEnded\n  fullName: TouchDevice.OnManipulationEnded\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.OnManipulationStarted*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: OnManipulationStarted\n  nameWithType: TouchDevice.OnManipulationStarted\n  fullName: TouchDevice.OnManipulationStarted\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.ReportDown*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ReportDown\n  nameWithType: TouchDevice.ReportDown\n  fullName: TouchDevice.ReportDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.ReportMove*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ReportMove\n  nameWithType: TouchDevice.ReportMove\n  fullName: TouchDevice.ReportMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.ReportUp*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: ReportUp\n  nameWithType: TouchDevice.ReportUp\n  fullName: TouchDevice.ReportUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.SetActiveSource*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: SetActiveSource\n  nameWithType: TouchDevice.SetActiveSource\n  fullName: TouchDevice.SetActiveSource\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.Synchronize*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Synchronize\n  nameWithType: TouchDevice.Synchronize\n  fullName: TouchDevice.Synchronize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.Target*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: Target\n  nameWithType: TouchDevice.Target\n  fullName: TouchDevice.Target\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: System.Windows.Input.IManipulator.GetPosition\n  nameWithType: TouchDevice.System.Windows.Input.IManipulator.GetPosition\n  fullName: TouchDevice.System.Windows.Input.IManipulator.GetPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: System.Windows.Input.IManipulator.Id\n  nameWithType: TouchDevice.System.Windows.Input.IManipulator.Id\n  fullName: TouchDevice.System.Windows.Input.IManipulator.Id\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded*\n  parent: System.Windows.Input.TouchDevice\n  isExternal: false\n  name: System.Windows.Input.IManipulator.ManipulationEnded\n  nameWithType: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded\n  fullName: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/TouchDevice.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.Input.IManipulator\n  parent: System.Windows.Input\n  isExternal: false\n  name: IManipulator\n  nameWithType: IManipulator\n  fullName: System.Windows.Input.IManipulator\n"}