{"nodes":[{"content":"Provides extension methods for retrieving <xref href=\"System.Security.Cryptography.ECDsa\"></xref> implementations for the     public and private keys of a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.","nodes":[{"pos":[0,251],"content":"Provides extension methods for retrieving <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;&lt;/xref&gt;</ph> implementations for the     public and private keys of a <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> certificate.","source":"Provides extension methods for retrieving <xref href=\"System.Security.Cryptography.ECDsa\"></xref> implementations for the     public and private keys of a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate."}],"pos":[1126,1378],"yaml":true},{"content":"Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> private key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.","nodes":[{"pos":[0,182],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;&lt;/xref&gt;</ph> private key from the <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> certificate.","source":"Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> private key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate."}],"pos":[5328,5511],"yaml":true},{"content":"The certificate.","nodes":[{"pos":[0,16],"content":"The certificate.","nodes":[{"content":"The certificate.","pos":[0,16]}]}],"pos":[5817,5834],"yaml":true},{"content":"The private key, or `null` if the certificate does not have an ECDsa private key.","nodes":[{"pos":[0,81],"content":"The private key, or <ph id=\"ph1\">`null`</ph> if the certificate does not have an ECDsa private key.","source":"The private key, or `null` if the certificate does not have an ECDsa private key."}],"pos":[5912,5994],"yaml":true},{"content":"<code>certificate</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;certificate&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>certificate</code> is `null`."}],"pos":[6215,6251],"yaml":true},{"content":"Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> public key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.","nodes":[{"pos":[0,181],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;&lt;/xref&gt;</ph> public key from the <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> certificate.","source":"Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> public key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate."}],"pos":[7887,8069],"yaml":true},{"content":"The certificate.","nodes":[{"pos":[0,16],"content":"The certificate.","nodes":[{"content":"The certificate.","pos":[0,16]}]}],"pos":[8374,8391],"yaml":true},{"content":"The public key, or `null` if the certificate does not have an ECDsa public key.","nodes":[{"pos":[0,79],"content":"The public key, or <ph id=\"ph1\">`null`</ph> if the certificate does not have an ECDsa public key.","source":"The public key, or `null` if the certificate does not have an ECDsa public key."}],"pos":[8469,8549],"yaml":true},{"content":"<code>certificate</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;certificate&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>certificate</code> is `null`."}],"pos":[8769,8805],"yaml":true},{"content":"The handle is invalid.","nodes":[{"pos":[0,22],"content":"The handle is invalid.","nodes":[{"content":"The handle is invalid.","pos":[0,22]}]}],"pos":[8953,8976],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  commentId: T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  id: ECDsaCertificateExtensions\n  children:\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  langs:\n  - csharp\n  name: ECDsaCertificateExtensions\n  nameWithType: ECDsaCertificateExtensions\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Provides extension methods for retrieving <xref href=\"System.Security.Cryptography.ECDsa\"></xref> implementations for the     public and private keys of a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.\n  syntax:\n    content: public static class ECDsaCertificateExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/ECDsaCertificateExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)\n  id: CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  name: CopyWithPrivateKey(X509Certificate2, ECDsa)\n  nameWithType: ECDsaCertificateExtensions.CopyWithPrivateKey(X509Certificate2, ECDsa)\n  fullName: ECDsaCertificateExtensions.CopyWithPrivateKey(X509Certificate2, ECDsa)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: public static System.Security.Cryptography.X509Certificates.X509Certificate2 CopyWithPrivateKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Security.Cryptography.ECDsa privateKey);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: ''\n    - id: privateKey\n      type: System.Security.Cryptography.ECDsa\n      description: ''\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: ''\n  overload: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/ECDsaCertificateExtensions.xml\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  id: GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  name: GetECDsaPrivateKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  fullName: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> private key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa GetECDsaPrivateKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The certificate.\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: The private key, or `null` if the certificate does not have an ECDsa private key.\n  overload: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>certificate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/ECDsaCertificateExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  id: GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  name: GetECDsaPublicKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  fullName: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: Gets the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> public key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> certificate.\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa GetECDsaPublicKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The certificate.\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: The public key, or `null` if the certificate does not have an ECDsa public key.\n  overload: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>certificate</code> is `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The handle is invalid.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/ECDsaCertificateExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.ECDsa)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: CopyWithPrivateKey(X509Certificate2, ECDsa)\n  nameWithType: ECDsaCertificateExtensions.CopyWithPrivateKey(X509Certificate2, ECDsa)\n  fullName: ECDsaCertificateExtensions.CopyWithPrivateKey(X509Certificate2, ECDsa)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPrivateKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  fullName: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPublicKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  fullName: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.CopyWithPrivateKey*\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: CopyWithPrivateKey\n  nameWithType: ECDsaCertificateExtensions.CopyWithPrivateKey\n  fullName: ECDsaCertificateExtensions.CopyWithPrivateKey\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/ECDsaCertificateExtensions.xml\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey*\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPrivateKey\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey\n  fullName: ECDsaCertificateExtensions.GetECDsaPrivateKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/ECDsaCertificateExtensions.xml\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey*\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPublicKey\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey\n  fullName: ECDsaCertificateExtensions.GetECDsaPublicKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/ECDsaCertificateExtensions.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}