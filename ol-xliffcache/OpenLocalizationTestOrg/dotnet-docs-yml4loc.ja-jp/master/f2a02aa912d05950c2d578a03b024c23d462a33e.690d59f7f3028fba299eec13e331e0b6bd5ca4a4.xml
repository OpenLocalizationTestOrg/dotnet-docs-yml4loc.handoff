{"nodes":[{"content":"Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"pos":[0,105],"content":"Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"content":"Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,105]}]}],"pos":[2487,2593],"yaml":true},{"content":"This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.","nodes":[{"pos":[0,106],"content":"This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.","nodes":[{"content":"This class serves as the abstract base class for <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> derivations.","pos":[0,106],"source":"This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations."}]}],"pos":[2604,2711],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> class.","nodes":[{"pos":[0,96],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsa\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> class."}],"pos":[5071,5168],"yaml":true},{"content":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class. The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. You may provide your own custom implementation.","nodes":[{"pos":[0,319],"content":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class. The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. You may provide your own custom implementation.","nodes":[{"content":"This constructor is called by classes that derive from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> class.","pos":[0,107],"source":"This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> class is the only implementation currently supported by the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.","pos":[108,271],"source":" The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]."},{"content":"You may provide your own custom implementation.","pos":[272,319]}]}],"pos":[5179,5499],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"pos":[0,111],"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,111]}]}],"pos":[6921,7033],"yaml":true},{"content":"A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class.","nodes":[{"pos":[0,120],"content":"A new instance of the default implementation (<ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;&lt;/xref&gt;</ph>) of this class.","source":"A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class."}],"pos":[7213,7334],"yaml":true},{"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.","nodes":[{"pos":[0,163],"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.","nodes":[{"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.","pos":[0,163]}]}],"pos":[8790,8954],"yaml":true},{"content":"The curve to use for key generation.","nodes":[{"pos":[0,36],"content":"The curve to use for key generation.","nodes":[{"content":"The curve to use for key generation.","pos":[0,36]}]}],"pos":[9179,9216],"yaml":true},{"content":"A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class.","nodes":[{"pos":[0,120],"content":"A new instance of the default implementation (<ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;&lt;/xref&gt;</ph>) of this class.","source":"A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class."}],"pos":[9294,9415],"yaml":true},{"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.","nodes":[{"pos":[0,153],"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.","nodes":[{"content":"Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.","pos":[0,153]}]}],"pos":[10595,10749],"yaml":true},{"content":"The parameters representing the key to use.","nodes":[{"pos":[0,43],"content":"The parameters representing the key to use.","nodes":[{"content":"The parameters representing the key to use.","pos":[0,43]}]}],"pos":[10994,11038],"yaml":true},{"content":"A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class.","nodes":[{"pos":[0,120],"content":"A new instance of the default implementation (<ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECDsaCng\"&gt;&lt;/xref&gt;</ph>) of this class.","source":"A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class."}],"pos":[11116,11237],"yaml":true},{"content":"Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"pos":[0,113],"content":"Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","nodes":[{"content":"Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).","pos":[0,113]}]}],"pos":[12315,12429],"yaml":true},{"content":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.  \n  \n If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created.","nodes":[{"pos":[0,268],"content":"If you develop your own implementation of an <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> object, you can use the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ECDsa.Create%28System.String%29&gt;</ph> method overload to create a custom <ph id=\"ph3\">`algorithm`</ph> string that specifies your implementation.","source":"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation."},{"pos":[275,460],"content":"If you specify a custom value for the <ph id=\"ph1\">`algorithm`</ph> parameter, the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> object will use it to determine whether an ECDSA object can be created.","source":"If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created."}],"pos":[12440,12905],"yaml":true,"extradata":"MT"},{"content":"The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:  \n  \n \\- \"ECDsa\"  \n  \n \\- \"ECDsaCng\"  \n  \n \\- \"System.Security.Cryptography.ECDsaCng\"  \n  \n You can also provide the name of a custom ECDSA implementation.","nodes":[{"pos":[0,211],"content":"The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:","nodes":[{"content":"The name of an ECDSA implementation.","pos":[0,36]},{"content":"The following strings all refer to the same implementation, which is the only implementation currently supported in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>:","pos":[37,211],"source":" The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:"}]},{"pos":[218,228],"content":"\\- \"ECDsa\"","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> \"ECDsa\"","pos":[0,10],"source":"\\- \"ECDsa\""}]},{"pos":[235,248],"content":"\\- \"ECDsaCng\"","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> \"ECDsaCng\"","pos":[0,13],"source":"\\- \"ECDsaCng\""}]},{"pos":[255,297],"content":"\\- \"System.Security.Cryptography.ECDsaCng\"","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> \"System.Security.Cryptography.ECDsaCng\"","pos":[0,42],"source":"\\- \"System.Security.Cryptography.ECDsaCng\""}]},{"pos":[304,367],"content":"You can also provide the name of a custom ECDSA implementation.","nodes":[{"content":"You can also provide the name of a custom ECDSA implementation.","pos":[0,63]}]}],"pos":[13085,13472],"yaml":true},{"content":"A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns `null`.","nodes":[{"pos":[0,162],"content":"A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns `null`.","nodes":[{"content":"A new instance of the specified implementation of this class.","pos":[0,61]},{"content":"If the specified algorithm name does not map to an ECDSA implementation, this method returns <ph id=\"ph1\">`null`</ph>.","pos":[62,162],"source":" If the specified algorithm name does not map to an ECDSA implementation, this method returns `null`."}]}],"pos":[13550,13713],"yaml":true},{"content":"The <code>algorithm</code> parameter is `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algorithm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>algorithm</code> parameter is `null`."}],"pos":[13884,13932],"yaml":true},{"content":"When overridden in a derived class, exports the explicit parameters for an elliptic curve.","nodes":[{"pos":[0,90],"content":"When overridden in a derived class, exports the explicit parameters for an elliptic curve.","nodes":[{"content":"When overridden in a derived class, exports the explicit parameters for an elliptic curve.","pos":[0,90]}]}],"pos":[15254,15345],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[15580,15640],"yaml":true},{"content":"The parameters representing the point on the curve for this key, using the explicit curve format.","nodes":[{"pos":[0,97],"content":"The parameters representing the point on the curve for this key, using the explicit curve format.","nodes":[{"content":"The parameters representing the point on the curve for this key, using the explicit curve format.","pos":[0,97]}]}],"pos":[15725,15823],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[16012,16055],"yaml":true},{"content":"When overridden in a derived class, exports the named or explicit parameters for an elliptic curve. If the curve has a name, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters, otherwise it         contains explicit parameters.","nodes":[{"pos":[0,287],"content":"When overridden in a derived class, exports the named or explicit parameters for an elliptic curve. If the curve has a name, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters, otherwise it         contains explicit parameters.","nodes":[{"content":"When overridden in a derived class, exports the named or explicit parameters for an elliptic curve.","pos":[0,99]},{"content":"If the curve has a name, the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ECParameters.Curve\"&gt;&lt;/xref&gt;</ph> field contains named curve parameters, otherwise it         contains explicit parameters.","pos":[100,287],"source":" If the curve has a name, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters, otherwise it         contains explicit parameters."}]}],"pos":[17127,17415],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[17642,17702],"yaml":true},{"content":"The parameters representing the point on the curve for this key.","nodes":[{"pos":[0,64],"content":"The parameters representing the point on the curve for this key.","nodes":[{"content":"The parameters representing the point on the curve for this key.","pos":[0,64]}]}],"pos":[17787,17852],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[18033,18076],"yaml":true},{"content":"When overridden in a derived class, generates a new public/private key pair for the specified curve.","nodes":[{"pos":[0,100],"content":"When overridden in a derived class, generates a new public/private key pair for the specified curve.","nodes":[{"content":"When overridden in a derived class, generates a new public/private key pair for the specified curve.","pos":[0,100]}]}],"pos":[20064,20165],"yaml":true},{"content":"The curve to use.","nodes":[{"pos":[0,17],"content":"The curve to use.","nodes":[{"content":"The curve to use.","pos":[0,17]}]}],"pos":[20366,20384],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[20560,20603],"yaml":true},{"content":"When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.","nodes":[{"pos":[0,132],"content":"When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.","nodes":[{"content":"When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.","pos":[0,132]}]}],"pos":[21828,21961],"yaml":true},{"content":"The binary stream to hash.","nodes":[{"pos":[0,26],"content":"The binary stream to hash.","nodes":[{"content":"The binary stream to hash.","pos":[0,26]}]}],"pos":[22184,22211],"yaml":true},{"content":"The algorithm to use to hash the data.","nodes":[{"pos":[0,38],"content":"The algorithm to use to hash the data.","nodes":[{"content":"The algorithm to use to hash the data.","pos":[0,38]}]}],"pos":[22313,22352],"yaml":true},{"content":"The hashed data.","nodes":[{"pos":[0,16],"content":"The hashed data.","nodes":[{"content":"The hashed data.","pos":[0,16]}]}],"pos":[22409,22426],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[22603,22646],"yaml":true},{"content":"When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.","nodes":[{"pos":[0,142],"content":"When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.","nodes":[{"content":"When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.","pos":[0,142]}]}],"pos":[24152,24295],"yaml":true},{"content":"The data to be hashed.","nodes":[{"pos":[0,22],"content":"The data to be hashed.","nodes":[{"content":"The data to be hashed.","pos":[0,22]}]}],"pos":[24528,24551],"yaml":true},{"content":"The index of the first byte in <code>data</code> to be hashed.","nodes":[{"pos":[0,62],"content":"The index of the first byte in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> to be hashed.","source":"The index of the first byte in <code>data</code> to be hashed."}],"pos":[24612,24675],"yaml":true},{"content":"The number of bytes to hash.","nodes":[{"pos":[0,28],"content":"The number of bytes to hash.","nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]}],"pos":[24735,24764],"yaml":true},{"content":"The algorithm to use to hash the data.","nodes":[{"pos":[0,38],"content":"The algorithm to use to hash the data.","nodes":[{"content":"The algorithm to use to hash the data.","pos":[0,38]}]}],"pos":[24866,24905],"yaml":true},{"content":"The hashed data.","nodes":[{"pos":[0,16],"content":"The hashed data.","nodes":[{"content":"The hashed data.","pos":[0,16]}]}],"pos":[24962,24979],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[25156,25199],"yaml":true},{"content":"When overridden in a derived class, imports the specified parameters.","nodes":[{"pos":[0,69],"content":"When overridden in a derived class, imports the specified parameters.","nodes":[{"content":"When overridden in a derived class, imports the specified parameters.","pos":[0,69]}]}],"pos":[26537,26607],"yaml":true},{"content":"The curve parameters.","nodes":[{"pos":[0,21],"content":"The curve parameters.","nodes":[{"content":"The curve parameters.","pos":[0,21]}]}],"pos":[26833,26855],"yaml":true},{"content":"A derived class must override this method.","nodes":[{"pos":[0,42],"content":"A derived class must override this method.","nodes":[{"content":"A derived class must override this method.","pos":[0,42]}]}],"pos":[27036,27079],"yaml":true},{"content":"Gets the name of the key exchange algorithm.","nodes":[{"pos":[0,44],"content":"Gets the name of the key exchange algorithm.","nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]}],"pos":[28102,28147],"yaml":true},{"content":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \n  \n The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`.","nodes":[{"pos":[0,103],"content":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.","nodes":[{"content":"This property is inherited from the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> base class.","pos":[0,103],"source":"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."}]},{"pos":[110,281],"content":"The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns <ph id=\"ph1\">`null`</ph>.","source":"The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`."}],"pos":[28158,28444],"yaml":true,"extradata":"MT"},{"content":"Always `null`.","nodes":[{"pos":[0,14],"content":"Always <ph id=\"ph1\">`null`</ph>.","source":"Always `null`."}],"pos":[28577,28592],"yaml":true},{"content":"Gets the name of the signature algorithm.","nodes":[{"pos":[0,41],"content":"Gets the name of the signature algorithm.","nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]}],"pos":[29891,29933],"yaml":true},{"content":"The string \"ECDsa\".","nodes":[{"pos":[0,19],"content":"The string \"ECDsa\".","nodes":[{"content":"The string \"ECDsa\".","pos":[0,19]}]}],"pos":[30064,30084],"yaml":true},{"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"pos":[0,122],"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.","pos":[0,122]}]}],"pos":[31586,31709],"yaml":true},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[31916,31962],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[32064,32116],"yaml":true},{"content":"The ECDSA signature for the specified data.","nodes":[{"pos":[0,43],"content":"The ECDSA signature for the specified data.","nodes":[{"content":"The ECDSA signature for the specified data.","pos":[0,43]}]}],"pos":[32173,32217],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[32390,32419],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[32513,32668],"yaml":true},{"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","nodes":[{"pos":[0,118],"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.","pos":[0,118]}]}],"pos":[34063,34182],"yaml":true},{"content":"The input stream for which to compute the hash.","nodes":[{"pos":[0,47],"content":"The input stream for which to compute the hash.","nodes":[{"content":"The input stream for which to compute the hash.","pos":[0,47]}]}],"pos":[34402,34450],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[34552,34604],"yaml":true},{"content":"The ECDSA signature for the specified data.","nodes":[{"pos":[0,43],"content":"The ECDSA signature for the specified data.","nodes":[{"content":"The ECDSA signature for the specified data.","pos":[0,43]}]}],"pos":[34661,34705],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[34878,34907],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[35001,35156],"yaml":true},{"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"pos":[0,135],"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.","pos":[0,135]}]}],"pos":[36662,36798],"yaml":true},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[37028,37074],"yaml":true},{"content":"The offset into the array at which to begin using data.","nodes":[{"pos":[0,55],"content":"The offset into the array at which to begin using data.","nodes":[{"content":"The offset into the array at which to begin using data.","pos":[0,55]}]}],"pos":[37135,37191],"yaml":true},{"content":"The number of bytes in the array to use as data.","nodes":[{"pos":[0,48],"content":"The number of bytes in the array to use as data.","nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]}],"pos":[37251,37300],"yaml":true},{"content":"The hash algorithm to use to create the hash value.","nodes":[{"pos":[0,51],"content":"The hash algorithm to use to create the hash value.","nodes":[{"content":"The hash algorithm to use to create the hash value.","pos":[0,51]}]}],"pos":[37402,37454],"yaml":true},{"content":"The ECDSA signature for the specified data.","nodes":[{"pos":[0,43],"content":"The ECDSA signature for the specified data.","nodes":[{"content":"The ECDSA signature for the specified data.","pos":[0,43]}]}],"pos":[37511,37555],"yaml":true},{"content":"<code>data</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."}],"pos":[37728,37757],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[37851,38006],"yaml":true},{"content":"<code>offset</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","source":"<code>offset</code> is less than zero."},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,93],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,228],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","source":"<code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}],"pos":[38120,38359],"yaml":true},{"content":"Generates a digital signature for the specified hash value.","nodes":[{"pos":[0,59],"content":"Generates a digital signature for the specified hash value.","nodes":[{"content":"Generates a digital signature for the specified hash value.","pos":[0,59]}]}],"pos":[39547,39607],"yaml":true},{"content":"The hash value of the data that is being signed.","nodes":[{"pos":[0,48],"content":"The hash value of the data that is being signed.","nodes":[{"content":"The hash value of the data that is being signed.","pos":[0,48]}]}],"pos":[39753,39802],"yaml":true},{"content":"A digital signature that consists of the given hash value encrypted with the private key.","nodes":[{"pos":[0,89],"content":"A digital signature that consists of the given hash value encrypted with the private key.","nodes":[{"content":"A digital signature that consists of the given hash value encrypted with the private key.","pos":[0,89]}]}],"pos":[39859,39949],"yaml":true},{"content":"The <code>hash</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hash</code> parameter is `null`."}],"pos":[40122,40165],"yaml":true},{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"pos":[0,173],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.","pos":[0,173]}]}],"pos":[42766,42940],"yaml":true},{"content":"The signed data.","nodes":[{"pos":[0,16],"content":"The signed data.","nodes":[{"content":"The signed data.","pos":[0,16]}]}],"pos":[43157,43174],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[43239,43274],"yaml":true},{"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,61],"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]}],"pos":[43376,43438],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[43496,43552],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,79],"content":"<ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>signature</code> is `null`."}],"pos":[43727,43813],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[43907,44062],"yaml":true},{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"pos":[0,175],"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.","pos":[0,175]}]}],"pos":[45535,45711],"yaml":true},{"content":"The signed data.","nodes":[{"pos":[0,16],"content":"The signed data.","nodes":[{"content":"The signed data.","pos":[0,16]}]}],"pos":[45941,45958],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[46023,46058],"yaml":true},{"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,61],"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]}],"pos":[46160,46222],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[46280,46336],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,79],"content":"<ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>signature</code> is `null`."}],"pos":[46511,46597],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[46691,46846],"yaml":true},{"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"pos":[0,192],"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","nodes":[{"content":"Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.","pos":[0,192]}]}],"pos":[48430,48623],"yaml":true},{"content":"The signed data.","nodes":[{"pos":[0,16],"content":"The signed data.","nodes":[{"content":"The signed data.","pos":[0,16]}]}],"pos":[48871,48888],"yaml":true},{"content":"The starting index at which to compute the hash.","nodes":[{"pos":[0,48],"content":"The starting index at which to compute the hash.","nodes":[{"content":"The starting index at which to compute the hash.","pos":[0,48]}]}],"pos":[48949,48998],"yaml":true},{"content":"The number of bytes to hash.","nodes":[{"pos":[0,28],"content":"The number of bytes to hash.","nodes":[{"content":"The number of bytes to hash.","pos":[0,28]}]}],"pos":[49058,49087],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[49152,49187],"yaml":true},{"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,61],"content":"The hash algorithm used to create the hash value of the data.","nodes":[{"content":"The hash algorithm used to create the hash value of the data.","pos":[0,61]}]}],"pos":[49289,49351],"yaml":true},{"content":"`true` if the signature is valid; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid; otherwise, `false`."}],"pos":[49409,49465],"yaml":true},{"content":"<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>data</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,79],"content":"<ph id=\"ph1\">&lt;code&gt;signature&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>signature</code> is `null`."}],"pos":[49640,49726],"yaml":true},{"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,154],"content":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;hashAlgorithm&lt;/code&gt;</ph>.<ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"&gt;&lt;/xref&gt;</ph>","pos":[0,99],"source":"<code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref>"},{"content":"is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[100,154],"source":" is `null` or <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[49820,49975],"yaml":true},{"content":"<code>offset</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than zero.","source":"<code>offset</code> is less than zero."},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,93],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,228],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id=\"ph3\">&lt;code&gt;data&lt;/code&gt;</ph>.","source":"<code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."}],"pos":[50089,50328],"yaml":true},{"content":"Verifies a digital signature against the specified hash value.","nodes":[{"pos":[0,62],"content":"Verifies a digital signature against the specified hash value.","nodes":[{"content":"Verifies a digital signature against the specified hash value.","pos":[0,62]}]}],"pos":[51594,51657],"yaml":true},{"content":"The signature is first decrypted by using the public key, and then compared to the hash value for verification.","nodes":[{"pos":[0,111],"content":"The signature is first decrypted by using the public key, and then compared to the hash value for verification.","nodes":[{"content":"The signature is first decrypted by using the public key, and then compared to the hash value for verification.","pos":[0,111]}]}],"pos":[51668,51780],"yaml":true,"extradata":"MT"},{"content":"The hash value of a block of data.","nodes":[{"pos":[0,34],"content":"The hash value of a block of data.","nodes":[{"content":"The hash value of a block of data.","pos":[0,34]}]}],"pos":[51944,51979],"yaml":true},{"content":"The digital signature to be verified.","nodes":[{"pos":[0,37],"content":"The digital signature to be verified.","nodes":[{"content":"The digital signature to be verified.","pos":[0,37]}]}],"pos":[52044,52082],"yaml":true},{"content":"`true` if the hash value equals the decrypted signature; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the hash value equals the decrypted signature; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the hash value equals the decrypted signature; otherwise, `false`."}],"pos":[52140,52219],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDsa\n  commentId: T:System.Security.Cryptography.ECDsa\n  id: ECDsa\n  children:\n  - System.Security.Cryptography.ECDsa.#ctor\n  - System.Security.Cryptography.ECDsa.Create\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsa.Create(System.String)\n  - System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsa.FromXmlString(System.String)\n  - System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  remarks: This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.\n  syntax:\n    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.ECDsaCng\n  - System.Security.Cryptography.ECDsaOpenSsl\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.#ctor\n  commentId: M:System.Security.Cryptography.ECDsa.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ECDsa()\n  nameWithType: ECDsa.ECDsa()\n  fullName: ECDsa.ECDsa()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsa\"></xref> class.\n  remarks: This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class. The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. You may provide your own custom implementation.\n  syntax:\n    content: protected ECDsa ();\n    parameters: []\n  overload: System.Security.Cryptography.ECDsa.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.Create\n  commentId: M:System.Security.Cryptography.ECDsa.Create\n  id: Create\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: ECDsa.Create()\n  fullName: ECDsa.Create()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class.\n  overload: System.Security.Cryptography.ECDsa.Create*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  id: Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create(ECCurve)\n  nameWithType: ECDsa.Create(ECCurve)\n  fullName: ECDsa.Create(ECCurve)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: The curve to use for key generation.\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class.\n  overload: System.Security.Cryptography.ECDsa.Create*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  id: Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create(ECParameters)\n  nameWithType: ECDsa.Create(ECParameters)\n  fullName: ECDsa.Create(ECParameters)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n      description: The parameters representing the key to use.\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\"></xref>) of this class.\n  overload: System.Security.Cryptography.ECDsa.Create*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.Create(System.String)\n  commentId: M:System.Security.Cryptography.ECDsa.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: ECDsa.Create(String)\n  fullName: ECDsa.Create(String)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).\n  remarks: \"If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.  \\n  \\n If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created.\"\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: \"The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:  \\n  \\n \\\\- \\\"ECDsa\\\"  \\n  \\n \\\\- \\\"ECDsaCng\\\"  \\n  \\n \\\\- \\\"System.Security.Cryptography.ECDsaCng\\\"  \\n  \\n You can also provide the name of a custom ECDSA implementation.\"\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns `null`.\n  overload: System.Security.Cryptography.ECDsa.Create*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>algorithm</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  id: ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDsa.ExportExplicitParameters(Boolean)\n  fullName: ECDsa.ExportExplicitParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, exports the explicit parameters for an elliptic curve.\n  syntax:\n    content: public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: The parameters representing the point on the curve for this key, using the explicit curve format.\n  overload: System.Security.Cryptography.ECDsa.ExportExplicitParameters*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A derived class must override this method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: ECDsa.ExportParameters(Boolean)\n  fullName: ECDsa.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, exports the named or explicit parameters for an elliptic curve. If the curve has a name, the <xref href=\"System.Security.Cryptography.ECParameters.Curve\"></xref> field contains named curve parameters, otherwise it         contains explicit parameters.\n  syntax:\n    content: public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: The parameters representing the point on the curve for this key.\n  overload: System.Security.Cryptography.ECDsa.ExportParameters*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A derived class must override this method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.FromXmlString(System.String)\n  commentId: M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: ECDsa.FromXmlString(String)\n  fullName: ECDsa.FromXmlString(String)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: ''\n  overload: System.Security.Cryptography.ECDsa.FromXmlString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  id: GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDsa.GenerateKey(ECCurve)\n  fullName: ECDsa.GenerateKey(ECCurve)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, generates a new public/private key pair for the specified curve.\n  syntax:\n    content: public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: The curve to use.\n  overload: System.Security.Cryptography.ECDsa.GenerateKey*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A derived class must override this method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Stream, HashAlgorithmName)\n  fullName: ECDsa.HashData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The binary stream to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The algorithm to use to hash the data.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.ECDsa.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.\n  syntax:\n    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The data to be hashed.\n    - id: offset\n      type: System.Int32\n      description: The index of the first byte in <code>data</code> to be hashed.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The algorithm to use to hash the data.\n    return:\n      type: System.Byte[]\n      description: The hashed data.\n  overload: System.Security.Cryptography.ECDsa.HashData*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: A derived class must override this method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  id: ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDsa.ImportParameters(ECParameters)\n  fullName: ECDsa.ImportParameters(ECParameters)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, imports the specified parameters.\n  syntax:\n    content: public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n      description: The curve parameters.\n  overload: System.Security.Cryptography.ECDsa.ImportParameters*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A derived class must override this method.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: ECDsa.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  remarks: \"This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \\n  \\n The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`.\"\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: Always `null`.\n  overload: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: ECDsa.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The string \"ECDsa\".\n  overload: System.Security.Cryptography.ECDsa.SignatureAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)\n  fullName: ECDsa.SignData(Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The ECDSA signature for the specified data.\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Stream, HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)\n  fullName: ECDsa.SignData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The input stream for which to compute the hash.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The ECDSA signature for the specified data.\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    - id: offset\n      type: System.Int32\n      description: The offset into the array at which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm to use to create the hash value.\n    return:\n      type: System.Byte[]\n      description: The ECDSA signature for the specified data.\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>data</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignHash(Byte[])\n  nameWithType: ECDsa.SignHash(Byte[])\n  fullName: ECDsa.SignHash(Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Generates a digital signature for the specified hash value.\n  syntax:\n    content: public abstract byte[] SignHash (byte[] hash);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of the data that is being signed.\n    return:\n      type: System.Byte[]\n      description: A digital signature that consists of the given hash value encrypted with the private key.\n  overload: System.Security.Cryptography.ECDsa.SignHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hash</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: ECDsa.ToXmlString(Boolean)\n  fullName: ECDsa.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.Security.Cryptography.ECDsa.ToXmlString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>signature</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: The signed data.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>signature</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.\n  syntax:\n    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: The signed data.\n    - id: offset\n      type: System.Int32\n      description: The starting index at which to compute the hash.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to hash.\n    - id: signature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: The hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>data</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>signature</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hashAlgorithm</code>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\"></xref> is `null` or <xref href=\"System.String.Empty\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyHash(Byte[], Byte[])\n  nameWithType: ECDsa.VerifyHash(Byte[], Byte[])\n  fullName: ECDsa.VerifyHash(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - System.Core\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Verifies a digital signature against the specified hash value.\n  remarks: The signature is first decrypted by using the public key, and then compared to the hash value for verification.\n  syntax:\n    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: The hash value of a block of data.\n    - id: signature\n      type: System.Byte[]\n      description: The digital signature to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the hash value equals the decrypted signature; otherwise, `false`.'\n  overload: System.Security.Cryptography.ECDsa.VerifyHash*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.ECDsa.#ctor\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ECDsa()\n  nameWithType: ECDsa.ECDsa()\n  fullName: ECDsa.ECDsa()\n- uid: System.Security.Cryptography.ECDsa.Create\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create()\n  nameWithType: ECDsa.Create()\n  fullName: ECDsa.Create()\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(ECCurve)\n  nameWithType: ECDsa.Create(ECCurve)\n  fullName: ECDsa.Create(ECCurve)\n- uid: System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(ECParameters)\n  nameWithType: ECDsa.Create(ECParameters)\n  fullName: ECDsa.Create(ECParameters)\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Security.Cryptography.ECDsa.Create(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(String)\n  nameWithType: ECDsa.Create(String)\n  fullName: ECDsa.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDsa.ExportExplicitParameters(Boolean)\n  fullName: ECDsa.ExportExplicitParameters(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: ECDsa.ExportParameters(Boolean)\n  fullName: ECDsa.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.ECDsa.FromXmlString(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: ECDsa.FromXmlString(String)\n  fullName: ECDsa.FromXmlString(String)\n- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDsa.GenerateKey(ECCurve)\n  fullName: ECDsa.GenerateKey(ECCurve)\n- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Stream, HashAlgorithmName)\n  fullName: ECDsa.HashData(Stream, HashAlgorithmName)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDsa.ImportParameters(ECParameters)\n  fullName: ECDsa.ImportParameters(ECParameters)\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: ECDsa.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: ECDsa.SignatureAlgorithm\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)\n  fullName: ECDsa.SignData(Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Stream, HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)\n  fullName: ECDsa.SignData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignHash(Byte[])\n  nameWithType: ECDsa.SignHash(Byte[])\n  fullName: ECDsa.SignHash(Byte[])\n- uid: System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: ECDsa.ToXmlString(Boolean)\n  fullName: ECDsa.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyHash(Byte[], Byte[])\n  nameWithType: ECDsa.VerifyHash(Byte[], Byte[])\n  fullName: ECDsa.VerifyHash(Byte[], Byte[])\n- uid: System.Security.Cryptography.ECDsa.#ctor*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa.ECDsa\n  fullName: ECDsa.ECDsa\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.Create*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create\n  nameWithType: ECDsa.Create\n  fullName: ECDsa.Create\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ExportExplicitParameters\n  nameWithType: ECDsa.ExportExplicitParameters\n  fullName: ECDsa.ExportExplicitParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.ExportParameters*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ExportParameters\n  nameWithType: ECDsa.ExportParameters\n  fullName: ECDsa.ExportParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.FromXmlString*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: FromXmlString\n  nameWithType: ECDsa.FromXmlString\n  fullName: ECDsa.FromXmlString\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.GenerateKey*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: GenerateKey\n  nameWithType: ECDsa.GenerateKey\n  fullName: ECDsa.GenerateKey\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.HashData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData\n  nameWithType: ECDsa.HashData\n  fullName: ECDsa.HashData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.ImportParameters*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ImportParameters\n  nameWithType: ECDsa.ImportParameters\n  fullName: ECDsa.ImportParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: ECDsa.KeyExchangeAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: ECDsa.SignatureAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.SignData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData\n  nameWithType: ECDsa.SignData\n  fullName: ECDsa.SignData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.SignHash*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignHash\n  nameWithType: ECDsa.SignHash\n  fullName: ECDsa.SignHash\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.ToXmlString*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ToXmlString\n  nameWithType: ECDsa.ToXmlString\n  fullName: ECDsa.ToXmlString\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.VerifyData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData\n  nameWithType: ECDsa.VerifyData\n  fullName: ECDsa.VerifyData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Security.Cryptography.ECDsa.VerifyHash*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyHash\n  nameWithType: ECDsa.VerifyHash\n  fullName: ECDsa.VerifyHash\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n  fullName: AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n  fullName: AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n  fullName: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: AsymmetricAlgorithm.LegalKeySizesValue\n"}