{"nodes":[{"content":"Provides the base class from which the classes that represent expression tree nodes are derived. It also contains `static` (`Shared` in Visual Basic) factory methods to create the various node types. This is an `abstract` class.","nodes":[{"pos":[0,228],"content":"Provides the base class from which the classes that represent expression tree nodes are derived. It also contains `static` (`Shared` in Visual Basic) factory methods to create the various node types. This is an `abstract` class.","nodes":[{"content":"Provides the base class from which the classes that represent expression tree nodes are derived.","pos":[0,96]},{"content":"It also contains <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) factory methods to create the various node types.","pos":[97,199],"source":" It also contains `static` (`Shared` in Visual Basic) factory methods to create the various node types."},{"content":"This is an <ph id=\"ph1\">`abstract`</ph> class.","pos":[200,228],"source":" This is an `abstract` class."}]}],"pos":[42889,43118],"yaml":true},{"content":"Constructs a new instance of <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,85],"content":"Constructs a new instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"Constructs a new instance of <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[46705,46791],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Linq.Expressions.Expression\"></xref> class.","nodes":[{"pos":[0,96],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Linq.Expressions.Expression\"></xref> class."}],"pos":[48603,48700],"yaml":true},{"content":"This constructor is called from constructors in derived classes.","nodes":[{"pos":[0,64],"content":"This constructor is called from constructors in derived classes.","nodes":[{"content":"This constructor is called from constructors in derived classes.","pos":[0,64]}]}],"pos":[48711,48776],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> to set as the node type.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> to set as the node type.","source":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> to set as the node type."}],"pos":[49197,49286],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of this <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,129],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> of this <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of this <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[49344,49474],"yaml":true},{"content":"Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>.","nodes":[{"pos":[0,274],"content":"Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>.","nodes":[{"content":"Dispatches to the specific visit method for this node type.","pos":[0,59]},{"content":"For example, <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> calls the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"&gt;&lt;/xref&gt;</ph>.","pos":[60,274],"source":" For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>."}]}],"pos":[50912,51187],"yaml":true},{"content":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.","nodes":[{"pos":[0,443],"content":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.","nodes":[{"content":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.","pos":[0,443],"nodes":[{"content":"This default implementation for <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.","pos":[0,167],"source":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>."},{"content":"Override this method to call into a more specific method on a derived visitor class of the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.","pos":[168,314],"source":" Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class."},{"content":"However, it should still support unknown visitors by calling <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.","pos":[315,443],"source":" However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>."}]}]}],"pos":[51198,51642],"yaml":true,"extradata":"MT"},{"content":"The visitor to visit this node with.","nodes":[{"pos":[0,36],"content":"The visitor to visit this node with.","nodes":[{"content":"The visitor to visit this node with.","pos":[0,36]}]}],"pos":[51885,51922],"yaml":true},{"content":"The result of visiting this node.","nodes":[{"pos":[0,33],"content":"The result of visiting this node.","nodes":[{"content":"The result of visiting this node.","pos":[0,33]}]}],"pos":[52000,52034],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that does not have overflow checking.","nodes":[{"pos":[0,158],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic addition operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that does not have overflow checking."}],"pos":[53809,53968],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1058],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1068,1164],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1175,1213],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1217,1258],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1268,1470],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1480,1655],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1669,1867],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1881,1953],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1960,1997],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2007,2162],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined addition operator.","pos":[79,155]}]},{"pos":[2172,2357],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","pos":[71,185]}]}],"pos":[53979,56365],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[57070,57225],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[57307,57463],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,410],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Add\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[57547,57958],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[58126,58177],"yaml":true},{"content":"The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,92],"content":"The addition operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[58287,58380],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.","nodes":[{"pos":[0,200],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic addition operation that does not have overflow checking.","pos":[0,158],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that does not have overflow checking."},{"content":"The implementing method can be specified.","pos":[159,200]}]}],"pos":[60206,60407],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,959],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[969,1238],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1248,1344],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1355,1393],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1397,1438],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1448,1650],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1660,1835],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1849,2047],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2061,2133],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2140,2177],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2187,2342],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined addition operator.","pos":[79,155]}]},{"pos":[2352,2537],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","pos":[71,185]}]}],"pos":[60418,62986],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[63287,63442],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[63524,63680],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[63757,63908],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,480],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Add\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[63992,64473],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[64641,64692],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[64786,64949],"yaml":true},{"content":"<code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the addition operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[65059,65186],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking.","nodes":[{"pos":[0,158],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an addition assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking."}],"pos":[66903,67062],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[67870,68026],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[68108,68265],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,416],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[68349,68766],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking.","nodes":[{"pos":[0,158],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an addition assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking."}],"pos":[70703,70862],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[71169,71325],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[71407,71564],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[71641,71792],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,487],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[71876,72364],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking.","nodes":[{"pos":[0,158],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an addition assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking."}],"pos":[74478,74637],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[74997,75153],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[75235,75392],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[75469,75620],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[75713,75880],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,561],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[75964,76526],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking.","nodes":[{"pos":[0,148],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an addition assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking."}],"pos":[78382,78531],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[78808,78964],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[79046,79203],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,423],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[79287,79711],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking.","nodes":[{"pos":[0,148],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an addition assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking."}],"pos":[81697,81846],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[82160,82316],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[82398,82555],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[82632,82783],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,494],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[82867,83362],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking.","nodes":[{"pos":[0,148],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an addition assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking."}],"pos":[85503,85652],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[86019,86175],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[86257,86414],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[86491,86642],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[86735,86902],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,568],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[86986,87555],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that has overflow checking.","nodes":[{"pos":[0,148],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic addition operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that has overflow checking."}],"pos":[89360,89509],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1049],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1059,1155],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1166,1204],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1208,1249],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1259,1461],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1471,1646],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1660,1858],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1872,1944],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1951,1988],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1998,2153],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined addition operator.","pos":[79,155]}]},{"pos":[2163,2348],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","pos":[71,185]}]}],"pos":[89520,91897],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[92168,92323],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[92405,92561],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,417],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[92645,93063],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[93238,93289],"yaml":true},{"content":"The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,92],"content":"The addition operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[93399,93492],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.","nodes":[{"pos":[0,190],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic addition operation that has overflow checking.","pos":[0,148],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that has overflow checking."},{"content":"The implementing method can be specified.","pos":[149,190]}]}],"pos":[95360,95551],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The implementing method for the operation is chosen based on the following rules:","nodes":[{"content":"The implementing method for the operation is chosen based on the following rules:","pos":[0,81]}]},{"pos":[800,968],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[978,1247],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the addition operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1257,1353],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1364,1402],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1406,1447],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1457,1659],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1669,1844],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1858,2056],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2070,2142],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2149,2186],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2196,2351],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined addition operator.","pos":[79,155]}]},{"pos":[2361,2546],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.","pos":[71,185]}]}],"pos":[95562,98139],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[98447,98602],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[98684,98840],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[98917,99068],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,487],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[99152,99640],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[99815,99866],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[99960,100123],"yaml":true},{"content":"<code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the addition operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[100233,100360],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `AND` operation.","nodes":[{"pos":[0,114],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise <ph id=\"ph2\">`AND`</ph> operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `AND` operation."}],"pos":[102063,102178],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1054],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`AND`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1064,1172],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`."},{"pos":[1183,1221],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1225,1266],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1276,1478],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1488,1663],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1677,1875],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1889,1961],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1968,2005],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2015,2175],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined bitwise <ph id=\"ph1\">`AND`</ph> operator.","pos":[79,160],"source":" The type of the node is the result type of the predefined bitwise `AND` operator."}]},{"pos":[2185,2375],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id=\"ph1\">`AND`</ph> operator.","pos":[71,190],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator."}]}],"pos":[102189,104593],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[105337,105492],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[105574,105730],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,410],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.And\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[105814,106225],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[106393,106444],"yaml":true},{"content":"The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,97],"content":"The bitwise <ph id=\"ph1\">`AND`</ph> operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[106554,106652],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `AND` operation. The implementing method can be specified.","nodes":[{"pos":[0,156],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `AND` operation. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise <ph id=\"ph2\">`AND`</ph> operation.","pos":[0,114],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `AND` operation."},{"content":"The implementing method can be specified.","pos":[115,156]}]}],"pos":[108478,108635],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The implementing method for the operation is chosen based on the following rules:","nodes":[{"content":"The implementing method for the operation is chosen based on the following rules:","pos":[0,81]}]},{"pos":[800,968],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[978,1252],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`AND`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1262,1370],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`."},{"pos":[1381,1419],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1423,1464],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1474,1676],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1686,1861],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1875,2073],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2087,2159],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2166,2203],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2213,2373],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined bitwise <ph id=\"ph1\">`AND`</ph> operator.","pos":[79,160],"source":" The type of the node is the result type of the predefined bitwise `AND` operator."}]},{"pos":[2383,2573],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id=\"ph1\">`AND`</ph> operator.","pos":[71,190],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator."}]}],"pos":[108646,111250],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[111551,111707],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[111789,111946],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[112023,112174],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.And\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[112258,112740],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[112908,112959],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[113053,113216],"yaml":true},{"content":"<code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the bitwise <ph id=\"ph3\">`AND`</ph> operator is not defined for <ph id=\"ph4\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph5\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[113326,113458],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.","nodes":[{"pos":[0,240],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional <ph id=\"ph2\">`AND`</ph> operation that evaluates the second operand only if the first operand is resolved to true.","pos":[0,198],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand is resolved to true."},{"content":"The implementing method can be specified.","pos":[199,240]}]}],"pos":[115308,115549],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The implementing method for the operation is chosen based on the following rules:","nodes":[{"content":"The implementing method for the operation is chosen based on the following rules:","pos":[0,81]}]},{"pos":[800,968],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[978,1252],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`AND`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1264,1585],"content":"[!NOTE]\nThe conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.","leadings":["","    >  "],"nodes":[{"content":"The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.","pos":[8,314],"nodes":[{"content":"The conditional <ph id=\"ph1\">`AND`</ph> operator cannot be overloaded in C# or <ph id=\"ph2\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[0,105],"source":"The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"content":"However, the conditional <ph id=\"ph1\">`AND`</ph> operator is evaluated by using the bitwise <ph id=\"ph2\">`AND`</ph> operator.","pos":[106,195],"source":" However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator."},{"content":"Thus, a user-defined overload of the bitwise <ph id=\"ph1\">`AND`</ph> operator can be the implementing method for this node type.","pos":[196,306],"source":" Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type."}]}]},{"pos":[1595,1691],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`."},{"pos":[1702,1740],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1744,1785],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1795,1997],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[2007,2182],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[2196,2395],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2409,2481],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2488,2525],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2535,2590],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are the same Boolean type.","source":"`left`.Type and `right`.Type are the same Boolean type."},{"pos":[2600,2759],"content":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are non-nullable, the node is not lifted.","pos":[0,73],"source":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined conditional <ph id=\"ph1\">`AND`</ph> operator.","pos":[74,159],"source":" The type of the node is the result type of the predefined conditional `AND` operator."}]},{"pos":[2769,2958],"content":"If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are nullable, the node is lifted.","pos":[0,65],"source":"If `left`.Type and `right`.Type are nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id=\"ph1\">`AND`</ph> operator.","pos":[66,189],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator."}]}],"pos":[115560,118554],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[118859,119014],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[119096,119252],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[119329,119480],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,485],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[119564,120050],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[120222,120273],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[120367,120530],"yaml":true},{"content":"<code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the bitwise <ph id=\"ph3\">`AND`</ph> operator is not defined for <ph id=\"ph4\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph5\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."},{"pos":[138,142],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[149,264],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not the same Boolean type.","source":"<code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."}],"pos":[120640,120911],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand evaluates to `true`.","nodes":[{"pos":[0,198],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional <ph id=\"ph2\">`AND`</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id=\"ph3\">`true`</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand evaluates to `true`."}],"pos":[122616,122815],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1054],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`AND`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1066,1387],"content":"[!NOTE]\nThe conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.","leadings":["","    >  "],"nodes":[{"content":"The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.","pos":[8,314],"nodes":[{"content":"The conditional <ph id=\"ph1\">`AND`</ph> operator cannot be overloaded in C# or <ph id=\"ph2\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[0,105],"source":"The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"content":"However, the conditional <ph id=\"ph1\">`AND`</ph> operator is evaluated by using the bitwise <ph id=\"ph2\">`AND`</ph> operator.","pos":[106,195],"source":" However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator."},{"content":"Thus, a user-defined overload of the bitwise <ph id=\"ph1\">`AND`</ph> operator can be the implementing method for this node type.","pos":[196,306],"source":" Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type."}]}]},{"pos":[1397,1493],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`."},{"pos":[1504,1542],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1546,1587],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1597,1799],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1809,1984],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1998,2197],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2211,2283],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2290,2327],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2337,2392],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are the same Boolean type.","source":"`left`.Type and `right`.Type are the same Boolean type."},{"pos":[2402,2561],"content":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are non-nullable, the node is not lifted.","pos":[0,73],"source":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined conditional <ph id=\"ph1\">`AND`</ph> operator.","pos":[74,159],"source":" The type of the node is the result type of the predefined conditional `AND` operator."}]},{"pos":[2571,2760],"content":"If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are nullable, the node is lifted.","pos":[0,65],"source":"If `left`.Type and `right`.Type are nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id=\"ph1\">`AND`</ph> operator.","pos":[66,189],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator."}]}],"pos":[122826,125620],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[126414,126569],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[126651,126807],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,414],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[126891,127306],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[127478,127529],"yaml":true},{"content":"The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.","nodes":[{"pos":[0,97],"content":"The bitwise <ph id=\"ph1\">`AND`</ph> operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,196],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not the same Boolean type.","source":"<code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."}],"pos":[127639,127842],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation.","nodes":[{"pos":[0,123],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise AND assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation."}],"pos":[129581,129705],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[129975,130131],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[130213,130370],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,416],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[130454,130871],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation.","nodes":[{"pos":[0,123],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise AND assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation."}],"pos":[132808,132932],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[133239,133395],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[133477,133634],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[133711,133862],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,487],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[133946,134434],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation.","nodes":[{"pos":[0,123],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise AND assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation."}],"pos":[136548,136672],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[137032,137188],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[137270,137427],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[137504,137655],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[137748,137915],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,561],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[137999,138561],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> to access a multidimensional array.","nodes":[{"pos":[0,107],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph> to access a multidimensional array.","source":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> to access a multidimensional array."}],"pos":[140546,140654],"yaml":true},{"content":"The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.","nodes":[{"pos":[0,272],"content":"The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.","nodes":[{"content":"The expression that represents the array can be obtained by using the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A&gt;</ph> method, or through <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph>.","pos":[0,272],"source":"The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>."}]}],"pos":[140665,140938],"yaml":true,"extradata":"MT"},{"content":"An expression that represents the multidimensional array.","nodes":[{"pos":[0,57],"content":"An expression that represents the multidimensional array.","nodes":[{"content":"An expression that represents the multidimensional array.","pos":[0,57]}]}],"pos":[141747,141805],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> containing expressions used to index the array.","nodes":[{"pos":[0,112],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> containing expressions used to index the array.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> containing expressions used to index the array."}],"pos":[141929,142042],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>."}],"pos":[142125,142199],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> to access an array.","nodes":[{"pos":[0,91],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph> to access an array.","source":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> to access an array."}],"pos":[144039,144131],"yaml":true},{"content":"The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.  \n  \n For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.","nodes":[{"pos":[0,272],"content":"The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.","nodes":[{"content":"The expression that represents the array can be obtained by using the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A&gt;</ph> method, or through <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.NewArrayBounds%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.NewArrayInit%2A&gt;</ph>.","pos":[0,272],"source":"The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>."}]},{"pos":[279,380],"content":"For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.","nodes":[{"content":"For multidimensional arrays, use the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.ArrayAccess%2A&gt;</ph> method.","pos":[0,101],"source":"For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method."}]}],"pos":[144142,144527],"yaml":true,"extradata":"MT"},{"content":"An expression representing the array to index.","nodes":[{"pos":[0,46],"content":"An expression representing the array to index.","nodes":[{"content":"An expression representing the array to index.","pos":[0,46]}]}],"pos":[145274,145321],"yaml":true},{"content":"An array that contains expressions used to index the array.","nodes":[{"pos":[0,59],"content":"An array that contains expressions used to index the array.","nodes":[{"content":"An array that contains expressions used to index the array.","pos":[0,59]}]}],"pos":[145407,145467],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>."}],"pos":[145550,145624],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents applying an array index operator to a multidimensional array.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents applying an array index operator to a multidimensional array.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents applying an array index operator to a multidimensional array."}],"pos":[147458,147612],"yaml":true},{"content":"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.  \n  \n If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the<xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.  \n  \n If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.","nodes":[{"pos":[0,274],"content":"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.","nodes":[{"content":"Each element of <ph id=\"ph1\">`indexes`</ph> must have <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> equal to <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>.","pos":[0,115],"source":"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`array`</ph> must represent an array type whose rank matches the number of elements in <ph id=\"ph3\">`indexes`</ph>.","pos":[116,274],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`."}]},{"pos":[281,751],"content":"If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the<xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.","nodes":[{"content":"If the rank of <ph id=\"ph1\">`array`</ph>.Type is 1, this method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.","pos":[0,104],"source":"If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;</ph> property is set to <ph id=\"ph2\">`array`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;</ph> property is set to the single element of <ph id=\"ph4\">`indexes`</ph>.","pos":[105,308],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the<ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> represents the element type of <ph id=\"ph3\">`array`</ph>.Type.","pos":[309,470],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property of the<xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type."}]},{"pos":[758,1153],"content":"If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.","nodes":[{"content":"If the rank of <ph id=\"ph1\">`array`</ph>.Type is more than one, this method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>.","pos":[0,120],"source":"If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> property is set to the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that describes the public instance method <ph id=\"ph3\">`Get`</ph> on the type represented by the <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph5\">`array`</ph>.","pos":[121,395],"source":" The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`."}]}],"pos":[147623,148783],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> instances - indexes for the array index operation.","nodes":[{"pos":[0,118],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> instances - indexes for the array index operation.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> instances - indexes for the array index operation."}],"pos":[149718,149837],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,186],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection."}],"pos":[149923,150110],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,429],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values."}],"pos":[150198,150628],"yaml":true},{"content":"<code>array</code> or <code>indexes</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;indexes&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>array</code> or <code>indexes</code> is `null`."}],"pos":[150803,150857],"yaml":true},{"content":"<code>array</code>.Type does not represent an array type.  \n  \n -or-  \n  \n The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\"System.Int32\"></xref> type.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph>.Type does not represent an array type.","source":"<code>array</code>.Type does not represent an array type."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,173],"content":"The rank of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type does not match the number of elements in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">indexes</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>."},{"pos":[180,184],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[191,375],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of one or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">indexes</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent the <ph id=\"ph3\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\"System.Int32\"></xref> type."}],"pos":[150951,151341],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents applying an array index operator to an array of rank more than one.","nodes":[{"pos":[0,159],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents applying an array index operator to an array of rank more than one.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents applying an array index operator to an array of rank more than one."}],"pos":[153245,153405],"yaml":true},{"content":"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.  \n  \n If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.  \n  \n If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.","nodes":[{"pos":[0,274],"content":"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.","nodes":[{"content":"Each element of <ph id=\"ph1\">`indexes`</ph> must have <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> equal to <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>.","pos":[0,115],"source":"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`array`</ph> must represent an array type whose rank matches the number of elements in <ph id=\"ph3\">`indexes`</ph>.","pos":[116,274],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`."}]},{"pos":[281,752],"content":"If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.","nodes":[{"content":"If the rank of <ph id=\"ph1\">`array`</ph>.Type is 1, this method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph>.","pos":[0,104],"source":"If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;</ph> property is set to <ph id=\"ph2\">`array`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;</ph> property is set to the single element of <ph id=\"ph4\">`indexes`</ph>.","pos":[105,308],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> represents the element type of <ph id=\"ph3\">`array`</ph>.Type.","pos":[309,471],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type."}]},{"pos":[759,1154],"content":"If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.","nodes":[{"content":"If the rank of <ph id=\"ph1\">`array`</ph>.Type is more than one, this method returns a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>.","pos":[0,120],"source":"If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;</ph> property is set to the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that describes the public instance method <ph id=\"ph3\">`Get`</ph> on the type represented by the <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph5\">`array`</ph>.","pos":[121,395],"source":" The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`."}]}],"pos":[153416,154577],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to.","nodes":[{"pos":[0,161],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to."}],"pos":[155550,155712],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,253],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection."}],"pos":[155836,156090],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,429],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values."}],"pos":[156178,156608],"yaml":true},{"content":"<code>array</code> or <code>indexes</code> is `null`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;indexes&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>array</code> or <code>indexes</code> is `null`."}],"pos":[156783,156837],"yaml":true},{"content":"<code>array</code>.Type does not represent an array type.  \n  \n -or-  \n  \n The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\"System.Int32\"></xref> type.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph>.Type does not represent an array type.","source":"<code>array</code>.Type does not represent an array type."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,173],"content":"The rank of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type does not match the number of elements in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">indexes</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>."},{"pos":[180,184],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[191,375],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of one or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">indexes</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent the <ph id=\"ph3\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\"System.Int32\"></xref> type."}],"pos":[156931,157321],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents applying an array index operator to an array of rank one.","nodes":[{"pos":[0,145],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents applying an array index operator to an array of rank one.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents applying an array index operator to an array of rank one."}],"pos":[159066,159212],"yaml":true},{"content":"`index` must represent an index of type <xref:System.Int32>.  \n  \n The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">`index`</ph> must represent an index of type <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph>.","source":"`index` must represent an index of type <xref:System.Int32>."},{"pos":[67,567],"content":"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is <ph id=\"ph3\">`null`</ph>, and both <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id=\"ph6\">`false`</ph>.","pos":[0,305],"source":"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to the element type of <ph id=\"ph2\">`array`</ph>.Type.","pos":[306,414],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[415,500],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]}],"pos":[159223,159795],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[160068,160223],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[160305,160461],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayIndex\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,417],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ArrayIndex\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayIndex\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[160545,160963],"yaml":true},{"content":"<code>array</code> or <code>index</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;index&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>array</code> or <code>index</code> is `null`."}],"pos":[161138,161190],"yaml":true},{"content":"<code>array</code>.Type does not represent an array type.  \n  \n -or-  \n  \n <code>array</code>.Type represents an array type whose rank is not 1.  \n  \n -or-  \n  \n <code>index</code>.Type does not represent the <xref href=\"System.Int32\"></xref> type.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph>.Type does not represent an array type.","source":"<code>array</code>.Type does not represent an array type."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,144],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph>.Type represents an array type whose rank is not 1.","source":"<code>array</code>.Type represents an array type whose rank is not 1."},{"pos":[151,155],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[162,248],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph>.Type does not represent the <ph id=\"ph2\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> type.","source":"<code>index</code>.Type does not represent the <xref href=\"System.Int32\"></xref> type."}],"pos":[161284,161545],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an expression for obtaining the length of a one-dimensional array.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an expression for obtaining the length of a one-dimensional array.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an expression for obtaining the length of a one-dimensional array."}],"pos":[163155,163309],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.","nodes":[{"pos":[0,103],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`array`</ph> must represent an array type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type."},{"pos":[110,507],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is equal to <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph>.","pos":[0,159],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>, and both <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id=\"ph5\">`false`</ph>.","pos":[160,397],"source":" The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`."}]}],"pos":[163320,163832],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[164063,164221],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayLength\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to <code>array</code>.","nodes":[{"pos":[0,345],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ArrayLength\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayLength\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to <code>array</code>."}],"pos":[164304,164650],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[164826,164856],"yaml":true},{"content":"<code>array</code>.Type does not represent an array type.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph>.Type does not represent an array type.","source":"<code>array</code>.Type does not represent an array type."}],"pos":[164950,165008],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an assignment operation.","nodes":[{"pos":[0,112],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an assignment operation."}],"pos":[166729,166842],"yaml":true},{"content":"The `Assign` expression copies a value for value types, and it copies a reference for reference types.","nodes":[{"pos":[0,102],"content":"The <ph id=\"ph1\">`Assign`</ph> expression copies a value for value types, and it copies a reference for reference types.","source":"The `Assign` expression copies a value for value types, and it copies a reference for reference types."}],"pos":[166853,166956],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[167685,167841],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[167923,168080],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Assign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,413],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Assign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Assign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[168164,168578],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that represents the initialization of a field or property.","nodes":[{"pos":[0,130],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment\"&gt;&lt;/xref&gt;</ph> that represents the initialization of a field or property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that represents the initialization of a field or property."}],"pos":[170341,170472],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.","nodes":[{"pos":[0,255],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`expression`</ph> must be assignable to the type represented by the <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of <ph id=\"ph5\">`member`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`."}],"pos":[170483,170739],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.","nodes":[{"pos":[0,147],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to."}],"pos":[171001,171149],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property equal to.","nodes":[{"pos":[0,161],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property equal to."}],"pos":[171236,171398],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that has <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> properties set to the specified values.","nodes":[{"pos":[0,417],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that has <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> properties set to the specified values."}],"pos":[171482,171900],"yaml":true},{"content":"<code>member</code> or <code>expression</code> is `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>member</code> or <code>expression</code> is `null`."}],"pos":[172069,172127],"yaml":true},{"content":"<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The property represented by <code>member</code> does not have a `set` accessor.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> does not represent a field or property.","source":"<code>member</code> does not represent a field or property."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,156],"content":"The property represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">member</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not have a <ph id=\"ph2\">`set`</ph> accessor.","source":"The property represented by <code>member</code> does not have a `set` accessor."},{"pos":[163,167],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[174,294],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type is not assignable to the type of the field or property that <ph id=\"ph2\">&lt;code&gt;member&lt;/code&gt;</ph> represents.","source":"<code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents."}],"pos":[172221,172526],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that represents the initialization of a member by using a property accessor method.","nodes":[{"pos":[0,155],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment\"&gt;&lt;/xref&gt;</ph> that represents the initialization of a member by using a property accessor method.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that represents the initialization of a member by using a property accessor method."}],"pos":[174217,174373],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.","nodes":[{"pos":[0,239],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`expression`</ph> must be assignable to the type represented by the <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of the property accessed in <ph id=\"ph4\">`propertyAccessor`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`."}],"pos":[174384,174624],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents a property accessor method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method."}],"pos":[174906,175002],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property equal to.","nodes":[{"pos":[0,161],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property equal to."}],"pos":[175089,175251],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property set to <code>expression</code>.","nodes":[{"pos":[0,576],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> that represents the property accessed in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph6\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and the <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph8\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property set to <code>expression</code>."}],"pos":[175335,175912],"yaml":true},{"content":"<code>propertyAccessor</code> or <code>expression</code> is `null`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>propertyAccessor</code> or <code>expression</code> is `null`."}],"pos":[176081,176149],"yaml":true},{"content":"<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The property accessed by <code>propertyAccessor</code> does not have a `set` accessor.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> does not represent a property accessor method.","source":"<code>propertyAccessor</code> does not represent a property accessor method."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,180],"content":"The property accessed by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not have a <ph id=\"ph2\">`set`</ph> accessor.","source":"The property accessed by <code>propertyAccessor</code> does not have a `set` accessor."},{"pos":[187,191],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[198,318],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type is not assignable to the type of the field or property that <ph id=\"ph2\">&lt;code&gt;member&lt;/code&gt;</ph> represents.","source":"<code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents."}],"pos":[176243,176572],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given variables and expressions.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions."}],"pos":[178713,178835],"yaml":true},{"content":"The result type of the block.","nodes":[{"pos":[0,29],"content":"The result type of the block.","nodes":[{"content":"The result type of the block.","pos":[0,29]}]}],"pos":[179188,179218],"yaml":true},{"content":"The variables in the block.","nodes":[{"pos":[0,27],"content":"The variables in the block.","nodes":[{"content":"The variables in the block.","pos":[0,27]}]}],"pos":[179353,179381],"yaml":true},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[179509,179539],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[179622,179696],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains three expressions and has no variables.","nodes":[{"pos":[0,124],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains three expressions and has no variables.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains three expressions and has no variables."}],"pos":[181623,181748],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[181759,181856],"yaml":true,"extradata":"MT"},{"content":"The first expression in the block.","nodes":[{"pos":[0,34],"content":"The first expression in the block.","nodes":[{"content":"The first expression in the block.","pos":[0,34]}]}],"pos":[182161,182196],"yaml":true},{"content":"The second expression in the block.","nodes":[{"pos":[0,35],"content":"The second expression in the block.","nodes":[{"content":"The second expression in the block.","pos":[0,35]}]}],"pos":[182277,182313],"yaml":true},{"content":"The third expression in the block.","nodes":[{"pos":[0,34],"content":"The third expression in the block.","nodes":[{"content":"The third expression in the block.","pos":[0,34]}]}],"pos":[182394,182429],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[182512,182586],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains five expressions and has no variables.","nodes":[{"pos":[0,123],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains five expressions and has no variables.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains five expressions and has no variables."}],"pos":[184795,184919],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[184930,185027],"yaml":true,"extradata":"MT"},{"content":"The first expression in the block.","nodes":[{"pos":[0,34],"content":"The first expression in the block.","nodes":[{"content":"The first expression in the block.","pos":[0,34]}]}],"pos":[185414,185449],"yaml":true},{"content":"The second expression in the block.","nodes":[{"pos":[0,35],"content":"The second expression in the block.","nodes":[{"content":"The second expression in the block.","pos":[0,35]}]}],"pos":[185530,185566],"yaml":true},{"content":"The third expression in the block.","nodes":[{"pos":[0,34],"content":"The third expression in the block.","nodes":[{"content":"The third expression in the block.","pos":[0,34]}]}],"pos":[185647,185682],"yaml":true},{"content":"The fourth expression in the block.","nodes":[{"pos":[0,35],"content":"The fourth expression in the block.","nodes":[{"content":"The fourth expression in the block.","pos":[0,35]}]}],"pos":[185763,185799],"yaml":true},{"content":"The fifth expression in the block.","nodes":[{"pos":[0,34],"content":"The fifth expression in the block.","nodes":[{"content":"The fifth expression in the block.","pos":[0,34]}]}],"pos":[185880,185915],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[185998,186072],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given variables and expressions.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions."}],"pos":[188137,188259],"yaml":true},{"content":"The result type of the block.","nodes":[{"pos":[0,29],"content":"The result type of the block.","nodes":[{"content":"The result type of the block.","pos":[0,29]}]}],"pos":[188574,188604],"yaml":true},{"content":"The variables in the block.","nodes":[{"pos":[0,27],"content":"The variables in the block.","nodes":[{"content":"The variables in the block.","pos":[0,27]}]}],"pos":[188739,188767],"yaml":true},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[188857,188887],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[188970,189044],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions, has no variables and has specific result type.","nodes":[{"pos":[0,154],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given expressions, has no variables and has specific result type.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions, has no variables and has specific result type."}],"pos":[190755,190910],"yaml":true},{"content":"The result type of the block.","nodes":[{"pos":[0,29],"content":"The result type of the block.","nodes":[{"content":"The result type of the block.","pos":[0,29]}]}],"pos":[191130,191160],"yaml":true},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[191250,191280],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[191363,191437],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains four expressions and has no variables.","nodes":[{"pos":[0,123],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains four expressions and has no variables.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains four expressions and has no variables."}],"pos":[193505,193629],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[193640,193737],"yaml":true,"extradata":"MT"},{"content":"The first expression in the block.","nodes":[{"pos":[0,34],"content":"The first expression in the block.","nodes":[{"content":"The first expression in the block.","pos":[0,34]}]}],"pos":[194083,194118],"yaml":true},{"content":"The second expression in the block.","nodes":[{"pos":[0,35],"content":"The second expression in the block.","nodes":[{"content":"The second expression in the block.","pos":[0,35]}]}],"pos":[194199,194235],"yaml":true},{"content":"The third expression in the block.","nodes":[{"pos":[0,34],"content":"The third expression in the block.","nodes":[{"content":"The third expression in the block.","pos":[0,34]}]}],"pos":[194316,194351],"yaml":true},{"content":"The fourth expression in the block.","nodes":[{"pos":[0,35],"content":"The fourth expression in the block.","nodes":[{"content":"The fourth expression in the block.","pos":[0,35]}]}],"pos":[194432,194468],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[194551,194625],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains two expressions and has no variables.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains two expressions and has no variables.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains two expressions and has no variables."}],"pos":[196411,196534],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[196545,196642],"yaml":true,"extradata":"MT"},{"content":"The first expression in the block.","nodes":[{"pos":[0,34],"content":"The first expression in the block.","nodes":[{"content":"The first expression in the block.","pos":[0,34]}]}],"pos":[196906,196941],"yaml":true},{"content":"The second expression in the block.","nodes":[{"pos":[0,35],"content":"The second expression in the block.","nodes":[{"content":"The second expression in the block.","pos":[0,35]}]}],"pos":[197022,197058],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[197141,197215],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given variables and expressions.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions."}],"pos":[199226,199348],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[199359,199456],"yaml":true,"extradata":"MT"},{"content":"The variables in the block.","nodes":[{"pos":[0,27],"content":"The variables in the block.","nodes":[{"content":"The variables in the block.","pos":[0,27]}]}],"pos":[199837,199865],"yaml":true},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[199955,199985],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[200068,200142],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given variables and expressions.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions."}],"pos":[202300,202422],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[202433,202530],"yaml":true,"extradata":"MT"},{"content":"The variables in the block.","nodes":[{"pos":[0,27],"content":"The variables in the block.","nodes":[{"content":"The variables in the block.","pos":[0,27]}]}],"pos":[203431,203459],"yaml":true},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[203587,203617],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[203700,203774],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions and has no variables.","nodes":[{"pos":[0,128],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given expressions and has no variables.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions and has no variables."}],"pos":[205409,205538],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[205549,205646],"yaml":true,"extradata":"MT"},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[206477,206507],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[206590,206664],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions and has no variables.","nodes":[{"pos":[0,128],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given expressions and has no variables.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions and has no variables."}],"pos":[208468,208597],"yaml":true},{"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"pos":[0,96],"content":"When the block expression is executed, it returns the value of the last expression in the block.","nodes":[{"content":"When the block expression is executed, it returns the value of the last expression in the block.","pos":[0,96]}]}],"pos":[208608,208705],"yaml":true,"extradata":"MT"},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[209022,209052],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[209135,209209],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions, has no variables and has specific result type.","nodes":[{"pos":[0,154],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph> that contains the given expressions, has no variables and has specific result type.","source":"Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions, has no variables and has specific result type."}],"pos":[211067,211222],"yaml":true},{"content":"The result type of the block.","nodes":[{"pos":[0,29],"content":"The result type of the block.","nodes":[{"content":"The result type of the block.","pos":[0,29]}]}],"pos":[211480,211510],"yaml":true},{"content":"The expressions in the block.","nodes":[{"pos":[0,29],"content":"The expressions in the block.","nodes":[{"content":"The expressions in the block.","pos":[0,29]}]}],"pos":[211638,211668],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BlockExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>."}],"pos":[211751,211825],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement.","nodes":[{"pos":[0,101],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a break statement.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement."}],"pos":[213454,213556],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[214363,214507],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.","nodes":[{"pos":[0,319],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Break, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and a null value to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping."}],"pos":[214589,214909],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement. The value passed to the label upon jumping can be specified.","nodes":[{"pos":[0,162],"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement. The value passed to the label upon jumping can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a break statement.","pos":[0,101],"source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement."},{"content":"The value passed to the label upon jumping can be specified.","pos":[102,162]}]}],"pos":[216679,216842],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[217112,217256],"yaml":true},{"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"pos":[0,67],"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"content":"The value that will be passed to the associated label upon jumping.","pos":[0,67]}]}],"pos":[217338,217406],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.","nodes":[{"pos":[0,325],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Break, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping."}],"pos":[217488,217814],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement with the specified type.","nodes":[{"pos":[0,125],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a break statement with the specified type.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement with the specified type."}],"pos":[219519,219645],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[219884,220028],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[220086,220213],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>.","nodes":[{"pos":[0,359],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Break, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and the <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>."}],"pos":[220295,220655],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.","nodes":[{"pos":[0,186],"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a break statement with the specified type.","pos":[0,125],"source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement with the specified type."},{"content":"The value passed to the label upon jumping can be specified.","pos":[126,186]}]}],"pos":[222501,222688],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[222969,223113],"yaml":true},{"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"pos":[0,67],"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"content":"The value that will be passed to the associated label upon jumping.","pos":[0,67]}]}],"pos":[223195,223263],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[223321,223448],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.","nodes":[{"pos":[0,425],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Break, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, the <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph7\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping."}],"pos":[223530,223956],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes five arguments.","nodes":[{"pos":[0,144],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a static method that takes five arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes five arguments."}],"pos":[226282,226427],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[226851,227006],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the first argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument."}],"pos":[227087,227183],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the second argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument."}],"pos":[227264,227361],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the third argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument."}],"pos":[227442,227538],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fourth argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the fourth argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fourth argument."}],"pos":[227619,227716],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fifth argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the fifth argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fifth argument."}],"pos":[227797,227893],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[227981,228408],"yaml":true},{"content":"<code>method</code> is null.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is null.","source":"<code>method</code> is null."}],"pos":[228577,228606],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes three arguments.","nodes":[{"pos":[0,138],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a method that takes three arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes three arguments."}],"pos":[230720,230859],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).","nodes":[{"pos":[0,166],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that specifies the instance for an instance call.","pos":[0,108],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call."},{"content":"(pass null for a static (Shared in Visual Basic) method).","pos":[109,166]}]}],"pos":[231254,231421],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the target method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method."}],"pos":[231498,231587],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the first argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument."}],"pos":[231668,231764],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the second argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument."}],"pos":[231845,231942],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the third argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument."}],"pos":[232023,232119],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[232207,232634],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method by calling the appropriate factory method.","nodes":[{"pos":[0,189],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) method by calling the appropriate factory method.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method by calling the appropriate factory method."}],"pos":[234470,234660],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.","nodes":[{"pos":[0,284],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method denoted by <ph id=\"ph3\">`methodName`</ph>.","pos":[0,198],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[199,284],"source":" The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`."}]}],"pos":[234671,234956],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> that specifies the type that contains the specified `static` (`Shared` in Visual Basic) method.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that specifies the type that contains the specified <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) method.","source":"The <xref href=\"System.Type\"></xref> that specifies the type that contains the specified `static` (`Shared` in Visual Basic) method."}],"pos":[235219,235352],"yaml":true},{"content":"The name of the method.","nodes":[{"pos":[0,23],"content":"The name of the method.","nodes":[{"content":"The name of the method.","pos":[0,23]}]}],"pos":[235418,235442],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.","nodes":[{"pos":[0,185],"content":"An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that specify the type parameters of the generic method.","pos":[0,108],"source":"An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method."},{"content":"This argument should be null when methodName specifies a non-generic method.","pos":[109,185]}]}],"pos":[235511,235697],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments to the method.","nodes":[{"pos":[0,119],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects that represent the arguments to the method.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments to the method."}],"pos":[235785,235905],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property set to the <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the specified `static` (`Shared` in Visual Basic) method, and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> property set to the specified arguments.","nodes":[{"pos":[0,575],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the specified <ph id=\"ph6\">`static`</ph> (<ph id=\"ph7\">`Shared`</ph> in Visual Basic) method, and the <ph id=\"ph8\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> property set to the specified arguments.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property set to the <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the specified `static` (`Shared` in Visual Basic) method, and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> property set to the specified arguments."}],"pos":[235993,236569],"yaml":true},{"content":"<code>type</code> or <code>methodName</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;methodName&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>type</code> or <code>methodName</code> is `null`."}],"pos":[236738,236794],"yaml":true},{"content":"No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types.  \n  \n -or-  \n  \n More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types.","nodes":[{"pos":[0,208],"content":"No method whose name is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">methodName</ph><ept id=\"p1\">&lt;/code&gt;</ept>, whose type parameters match <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and whose parameter types match <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arguments</ph><ept id=\"p3\">&lt;/code&gt;</ept> is found in <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">type</ph><ept id=\"p4\">&lt;/code&gt;</ept> or its base types.","source":"No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types."},{"pos":[215,219],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[226,445],"content":"More than one method whose name is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">methodName</ph><ept id=\"p1\">&lt;/code&gt;</ept>, whose type parameters match <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and whose parameter types match <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arguments</ph><ept id=\"p3\">&lt;/code&gt;</ept> is found in <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">type</ph><ept id=\"p4\">&lt;/code&gt;</ept> or its base types.","source":"More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types."}],"pos":[236904,237356],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes three arguments.","nodes":[{"pos":[0,145],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a static method that takes three arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes three arguments."}],"pos":[239307,239453],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[239795,239950],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the first argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument."}],"pos":[240031,240127],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the second argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument."}],"pos":[240208,240305],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the third argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument."}],"pos":[240386,240482],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[240570,240997],"yaml":true},{"content":"<code>method</code> is null.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is null.","source":"<code>method</code> is null."}],"pos":[241166,241195],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method by calling the appropriate factory method.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a method by calling the appropriate factory method.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method by calling the appropriate factory method."}],"pos":[243048,243202],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.","nodes":[{"pos":[0,198],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method denoted by <ph id=\"ph3\">`methodName`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`."}],"pos":[243213,243412],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property value will be searched for a specific method.","nodes":[{"pos":[0,180],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property value will be searched for a specific method.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property value will be searched for a specific method."}],"pos":[243736,243917],"yaml":true},{"content":"The name of the method.","nodes":[{"pos":[0,23],"content":"The name of the method.","nodes":[{"content":"The name of the method.","pos":[0,23]}]}],"pos":[243983,244007],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.","nodes":[{"pos":[0,185],"content":"An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that specify the type parameters of the generic method.","pos":[0,108],"source":"An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method."},{"content":"This argument should be null when methodName specifies a non-generic method.","pos":[109,185]}]}],"pos":[244076,244262],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represents the arguments to the method.","nodes":[{"pos":[0,120],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects that represents the arguments to the method.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represents the arguments to the method."}],"pos":[244350,244471],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to <code>instance</code>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> set to the <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the specified instance method, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> set to the specified arguments.","nodes":[{"pos":[0,640],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> property equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">instance</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> set to the <ph id=\"ph7\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the specified instance method, and <ph id=\"ph8\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified arguments.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to <code>instance</code>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> set to the <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the specified instance method, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> set to the specified arguments."}],"pos":[244559,245200],"yaml":true},{"content":"<code>instance</code> or <code>methodName</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;instance&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;methodName&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>instance</code> or <code>methodName</code> is `null`."}],"pos":[245369,245429],"yaml":true},{"content":"No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types.  \n  \n -or-  \n  \n More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types.","nodes":[{"pos":[0,217],"content":"No method whose name is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">methodName</ph><ept id=\"p1\">&lt;/code&gt;</ept>, whose type parameters match <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and whose parameter types match <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arguments</ph><ept id=\"p3\">&lt;/code&gt;</ept> is found in <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">instance</ph><ept id=\"p4\">&lt;/code&gt;</ept>.Type or its base types.","source":"No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types."},{"pos":[224,228],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[235,463],"content":"More than one method whose name is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">methodName</ph><ept id=\"p1\">&lt;/code&gt;</ept>, whose type parameters match <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and whose parameter types match <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">arguments</ph><ept id=\"p3\">&lt;/code&gt;</ept> is found in <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">instance</ph><ept id=\"p4\">&lt;/code&gt;</ept>.Type or its base types.","source":"More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types."}],"pos":[245539,246009],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes two arguments.","nodes":[{"pos":[0,136],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a method that takes two arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes two arguments."}],"pos":[247982,248119],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).","nodes":[{"pos":[0,166],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that specifies the instance for an instance call.","pos":[0,108],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call."},{"content":"(pass null for a static (Shared in Visual Basic) method).","pos":[109,166]}]}],"pos":[248962,249129],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the target method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method."}],"pos":[249206,249295],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the first argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument."}],"pos":[249376,249472],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the second argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument."}],"pos":[249553,249650],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[249738,250165],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes four arguments.","nodes":[{"pos":[0,144],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a static method that takes four arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes four arguments."}],"pos":[252349,252494],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[252877,253032],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the first argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument."}],"pos":[253113,253209],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the second argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument."}],"pos":[253290,253387],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the third argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument."}],"pos":[253468,253564],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fourth argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the fourth argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fourth argument."}],"pos":[253645,253742],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[253830,254257],"yaml":true},{"content":"<code>method</code> is null.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is null.","source":"<code>method</code> is null."}],"pos":[254426,254455],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes arguments.","nodes":[{"pos":[0,132],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a method that takes arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes arguments."}],"pos":[256299,256432],"yaml":true},{"content":"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \n  \n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \n  \n If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.","nodes":[{"pos":[0,206],"content":"To represent a call to a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method, pass in <ph id=\"ph3\">`null`</ph> for the <ph id=\"ph4\">`instance`</ph> parameter when you call this method, or call <ph id=\"ph5\">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph> instead.","source":"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead."},{"pos":[213,412],"content":"If <ph id=\"ph1\">`method`</ph> represents an instance method, the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph3\">`instance`</ph> must be assignable to the declaring type of the method represented by <ph id=\"ph4\">`method`</ph>.","source":"If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`."},{"pos":[419,697],"content":"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.","nodes":[{"content":"If <ph id=\"ph1\">`arguments`</ph> is not <ph id=\"ph2\">`null`</ph>, it must have the same number of elements as the number of parameters for the method represented by <ph id=\"ph3\">`method`</ph>.","pos":[0,138],"source":"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`."},{"content":"Each element in <ph id=\"ph1\">`arguments`</ph> must not be <ph id=\"ph2\">`null`</ph> and must be assignable to the corresponding parameter of <ph id=\"ph3\">`method`</ph>, possibly after <bpt id=\"p1\">*</bpt>quoting<ept id=\"p1\">*</ept>.","pos":[139,278],"source":" Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*."}]},{"pos":[705,1113],"content":"[!NOTE]\n An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","pos":[8,406],"nodes":[{"content":"An element will be quoted only if the corresponding method parameter is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,123],"source":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[124,223],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`arguments`</ph>.","pos":[224,398],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."}]}]},{"pos":[1120,1387],"content":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty if <ph id=\"ph3\">`arguments`</ph> is <ph id=\"ph4\">`null`</ph>.","pos":[0,181],"source":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`."},{"content":"Otherwise, it contains the same elements as <ph id=\"ph1\">`arguments`</ph>, some of which may be quoted.","pos":[182,267],"source":" Otherwise, it contains the same elements as `arguments`, some of which may be quoted."}]},{"pos":[1394,1592],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method represented by <ph id=\"ph3\">`method`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`."}],"pos":[256443,258049],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).","nodes":[{"pos":[0,178],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that specifies the instance for an instance method call (pass <ph id=\"ph2\">`null`</ph> for a <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method).","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method)."}],"pos":[258369,258548],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[258625,258780],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,186],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection."}],"pos":[258868,259055],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,504],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values."}],"pos":[259143,259648],"yaml":true},{"content":"<code>method</code> is `null`.  \n  \n -or-  \n  \n <code>instance</code> is `null` and <code>method</code> represents an instance method.  \n  \n -or-  \n  \n <code>arguments</code> is not `null` and one or more of its elements is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,134],"content":"<ph id=\"ph1\">&lt;code&gt;instance&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;method&lt;/code&gt;</ph> represents an instance method.","source":"<code>instance</code> is `null` and <code>method</code> represents an instance method."},{"pos":[141,145],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[152,231],"content":"<ph id=\"ph1\">&lt;code&gt;arguments&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and one or more of its elements is <ph id=\"ph3\">`null`</ph>.","source":"<code>arguments</code> is not `null` and one or more of its elements is `null`."}],"pos":[259817,260059],"yaml":true},{"content":"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \n  \n -or-  \n  \n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;instance&lt;/code&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,273],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not equal the number of parameters for the method represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>."},{"pos":[280,284],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[291,444],"content":"One or more of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the corresponding parameter for the method represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>."}],"pos":[260153,260608],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes arguments.","nodes":[{"pos":[0,132],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a method that takes arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes arguments."}],"pos":[262599,262732],"yaml":true},{"content":"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \n  \n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \n  \n If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.","nodes":[{"pos":[0,206],"content":"To represent a call to a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method, pass in <ph id=\"ph3\">`null`</ph> for the <ph id=\"ph4\">`instance`</ph> parameter when you call this method, or call <ph id=\"ph5\">&lt;xref:System.Linq.Expressions.Expression.Call%2A&gt;</ph> instead.","source":"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead."},{"pos":[213,412],"content":"If <ph id=\"ph1\">`method`</ph> represents an instance method, the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph3\">`instance`</ph> must be assignable to the declaring type of the method represented by <ph id=\"ph4\">`method`</ph>.","source":"If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`."},{"pos":[419,697],"content":"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.","nodes":[{"content":"If <ph id=\"ph1\">`arguments`</ph> is not <ph id=\"ph2\">`null`</ph>, it must have the same number of elements as the number of parameters for the method represented by <ph id=\"ph3\">`method`</ph>.","pos":[0,138],"source":"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`."},{"content":"Each element in <ph id=\"ph1\">`arguments`</ph> must not be <ph id=\"ph2\">`null`</ph> and must be assignable to the corresponding parameter of <ph id=\"ph3\">`method`</ph>, possibly after <bpt id=\"p1\">*</bpt>quoting<ept id=\"p1\">*</ept>.","pos":[139,278],"source":" Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*."}]},{"pos":[705,1113],"content":"[!NOTE]\n An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","pos":[8,406],"nodes":[{"content":"An element will be quoted only if the corresponding method parameter is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,123],"source":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[124,223],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`arguments`</ph>.","pos":[224,398],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."}]}]},{"pos":[1120,1387],"content":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty if <ph id=\"ph3\">`arguments`</ph> is <ph id=\"ph4\">`null`</ph>.","pos":[0,181],"source":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`."},{"content":"Otherwise, it contains the same elements as <ph id=\"ph1\">`arguments`</ph>, some of which may be quoted.","pos":[182,267],"source":" Otherwise, it contains the same elements as `arguments`, some of which may be quoted."}]},{"pos":[1394,1592],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method represented by <ph id=\"ph3\">`method`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`."}],"pos":[262743,264349],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to (pass `null` for a `static` (`Shared` in Visual Basic) method).","nodes":[{"pos":[0,224],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> property equal to (pass <ph id=\"ph3\">`null`</ph> for a <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic) method).","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to (pass `null` for a `static` (`Shared` in Visual Basic) method)."}],"pos":[264707,264932],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[265009,265164],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,253],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection."}],"pos":[265290,265544],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,504],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values."}],"pos":[265632,266137],"yaml":true},{"content":"<code>method</code> is `null`.  \n  \n -or-  \n  \n <code>instance</code> is `null` and <code>method</code> represents an instance method.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,134],"content":"<ph id=\"ph1\">&lt;code&gt;instance&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;method&lt;/code&gt;</ph> represents an instance method.","source":"<code>instance</code> is `null` and <code>method</code> represents an instance method."}],"pos":[266306,266447],"yaml":true},{"content":"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \n  \n -or-  \n  \n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;instance&lt;/code&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,273],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not equal the number of parameters for the method represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>."},{"pos":[280,284],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[291,444],"content":"One or more of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the corresponding parameter for the method represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>."}],"pos":[266541,266996],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that has arguments.","nodes":[{"pos":[0,166],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) method that has arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that has arguments."}],"pos":[268677,268844],"yaml":true},{"content":"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.","nodes":[{"pos":[0,278],"content":"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.","nodes":[{"content":"If <ph id=\"ph1\">`arguments`</ph> is not <ph id=\"ph2\">`null`</ph>, it must have the same number of elements as the number of parameters for the method represented by <ph id=\"ph3\">`method`</ph>.","pos":[0,138],"source":"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`."},{"content":"Each element in <ph id=\"ph1\">`arguments`</ph> must not be <ph id=\"ph2\">`null`</ph> and must be assignable to the corresponding parameter of <ph id=\"ph3\">`method`</ph>, possibly after <bpt id=\"p1\">*</bpt>quoting<ept id=\"p1\">*</ept>.","pos":[139,278],"source":" Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*."}]},{"pos":[286,694],"content":"[!NOTE]\n An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","pos":[8,406],"nodes":[{"content":"An element will be quoted only if the corresponding method parameter is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,123],"source":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[124,223],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`arguments`</ph>.","pos":[224,398],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."}]}]},{"pos":[701,968],"content":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty if <ph id=\"ph3\">`arguments`</ph> is <ph id=\"ph4\">`null`</ph>.","pos":[0,181],"source":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`."},{"content":"Otherwise, it contains the same elements as <ph id=\"ph1\">`arguments`</ph>, some of which may be quoted.","pos":[182,267],"source":" Otherwise, it contains the same elements as `arguments`, some of which may be quoted."}]},{"pos":[975,1259],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is equal to the return type of the method represented by <ph id=\"ph3\">`method`</ph>.","pos":[0,198],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[199,284],"source":" The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`."}]}],"pos":[268855,270124],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a `static` (`Shared` in Visual Basic) method to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,215],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents a <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) method to set the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a `static` (`Shared` in Visual Basic) method to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[270391,270607],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,186],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection."}],"pos":[270695,270882],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,429],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values."}],"pos":[270970,271400],"yaml":true},{"content":"<code>method</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."}],"pos":[271569,271600],"yaml":true},{"content":"The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \n  \n -or-  \n  \n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.","nodes":[{"pos":[0,139],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not equal the number of parameters for the method represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>."},{"pos":[146,150],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[157,310],"content":"One or more of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the corresponding parameter for the method represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>."}],"pos":[271694,272011],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that takes one argument.","nodes":[{"pos":[0,171],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) method that takes one argument.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that takes one argument."}],"pos":[273680,273852],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[274630,274785],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the first argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument."}],"pos":[274866,274962],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[275050,275477],"yaml":true},{"content":"<code>method</code> is null.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is null.","source":"<code>method</code> is null."}],"pos":[275646,275675],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static (Shared in Visual Basic) method.","nodes":[{"pos":[0,143],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a static (Shared in Visual Basic) method.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static (Shared in Visual Basic) method."}],"pos":[277525,277669],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the target method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method."}],"pos":[277974,278063],"yaml":true},{"content":"A collection of <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the call arguments.","nodes":[{"pos":[0,107],"content":"A collection of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the call arguments.","source":"A collection of <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the call arguments."}],"pos":[278189,278297],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[278385,278812],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes no arguments.","nodes":[{"pos":[0,135],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a method that takes no arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes no arguments."}],"pos":[280573,280709],"yaml":true},{"content":"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.  \n  \n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.","nodes":[{"pos":[0,139],"content":"To represent a call to a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method, pass in <ph id=\"ph3\">`null`</ph> for the <ph id=\"ph4\">`instance`</ph> parameter when you call this method.","source":"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method."},{"pos":[146,345],"content":"If <ph id=\"ph1\">`method`</ph> represents an instance method, the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph3\">`instance`</ph> must be assignable to the declaring type of the method represented by <ph id=\"ph4\">`method`</ph>.","source":"If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`."},{"pos":[352,638],"content":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> is empty.","pos":[0,156],"source":"The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to the return type of the method represented by <ph id=\"ph2\">`method`</ph>.","pos":[157,286],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`."}]}],"pos":[280720,281365],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).","nodes":[{"pos":[0,178],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that specifies the instance for an instance method call (pass <ph id=\"ph2\">`null`</ph> for a <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method).","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method)."}],"pos":[282097,282276],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[282353,282508],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[282596,283023],"yaml":true},{"content":"<code>method</code> is `null`.  \n  \n -or-  \n  \n <code>instance</code> is `null` and <code>method</code> represents an instance method.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>method</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,134],"content":"<ph id=\"ph1\">&lt;code&gt;instance&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;method&lt;/code&gt;</ph> represents an instance method.","source":"<code>instance</code> is `null` and <code>method</code> represents an instance method."}],"pos":[283192,283333],"yaml":true},{"content":"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;instance&lt;/code&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>."}],"pos":[283427,283544],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes two arguments.","nodes":[{"pos":[0,143],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that represents a call to a static method that takes two arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes two arguments."}],"pos":[285376,285520],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to."}],"pos":[285821,285976],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the first argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument."}],"pos":[286057,286153],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the second argument.","source":"The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument."}],"pos":[286234,286331],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Call\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values."}],"pos":[286419,286846],"yaml":true},{"content":"<code>method</code> is null.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is null.","source":"<code>method</code> is null."}],"pos":[287015,287044],"yaml":true},{"content":"Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.","nodes":[{"pos":[0,131],"content":"Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.","nodes":[{"content":"Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.","pos":[0,131],"nodes":[{"content":"Indicates that the node can be reduced to a simpler node.","pos":[0,57]},{"content":"If this returns true, Reduce() can be called to produce the reduced form.","pos":[58,131]}]}]}],"pos":[288500,288632],"yaml":true},{"content":"True if the node can be reduced, otherwise false.","nodes":[{"pos":[0,49],"content":"True if the node can be reduced, otherwise false.","nodes":[{"content":"True if the node can be reduced, otherwise false.","pos":[0,49]}]}],"pos":[288752,288802],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with a reference to the caught <xref href=\"System.Exception\"></xref> object for use in the handler body.","nodes":[{"pos":[0,201],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> representing a catch statement with a reference to the caught <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object for use in the handler body.","source":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with a reference to the caught <xref href=\"System.Exception\"></xref> object for use in the handler body."}],"pos":[290646,290848],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler.","nodes":[{"pos":[0,167],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> representing a reference to the <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object caught by this handler.","source":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler."}],"pos":[291133,291301],"yaml":true},{"content":"The body of the catch statement.","nodes":[{"pos":[0,32],"content":"The body of the catch statement.","nodes":[{"content":"The body of the catch statement.","pos":[0,32]}]}],"pos":[291382,291415],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.","nodes":[{"pos":[0,68],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>."}],"pos":[291493,291562],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement.","nodes":[{"pos":[0,97],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> representing a catch statement.","source":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement."}],"pos":[293261,293359],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.","nodes":[{"pos":[0,241],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph> to be caught can be specified but no reference to the <ph id=\"ph3\">&lt;xref:System.Exception&gt;</ph> object will be available for use in the <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.CatchBlock&gt;</ph>.","pos":[0,241],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>."}]}],"pos":[293370,293612],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle.","nodes":[{"pos":[0,179],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> this <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> will handle.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle."}],"pos":[293818,293998],"yaml":true},{"content":"The body of the catch statement.","nodes":[{"pos":[0,32],"content":"The body of the catch statement.","nodes":[{"content":"The body of the catch statement.","pos":[0,32]}]}],"pos":[294079,294112],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.","nodes":[{"pos":[0,68],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>."}],"pos":[294190,294259],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with an <xref href=\"System.Exception\"></xref> filter and a reference to the caught <xref href=\"System.Exception\"></xref> object.","nodes":[{"pos":[0,225],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> representing a catch statement with an <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> filter and a reference to the caught <ph id=\"ph3\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with an <xref href=\"System.Exception\"></xref> filter and a reference to the caught <xref href=\"System.Exception\"></xref> object."}],"pos":[296240,296466],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler.","nodes":[{"pos":[0,167],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> representing a reference to the <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object caught by this handler.","source":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler."}],"pos":[296794,296962],"yaml":true},{"content":"The body of the catch statement.","nodes":[{"pos":[0,32],"content":"The body of the catch statement.","nodes":[{"content":"The body of the catch statement.","pos":[0,32]}]}],"pos":[297043,297076],"yaml":true},{"content":"The body of the <xref href=\"System.Exception\"></xref> filter.","nodes":[{"pos":[0,61],"content":"The body of the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> filter.","source":"The body of the <xref href=\"System.Exception\"></xref> filter."}],"pos":[297159,297221],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.","nodes":[{"pos":[0,68],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>."}],"pos":[297299,297368],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with an <xref href=\"System.Exception\"></xref> filter but no reference to the caught <xref href=\"System.Exception\"></xref> object.","nodes":[{"pos":[0,226],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> representing a catch statement with an <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> filter but no reference to the caught <ph id=\"ph3\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with an <xref href=\"System.Exception\"></xref> filter but no reference to the caught <xref href=\"System.Exception\"></xref> object."}],"pos":[299208,299435],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle.","nodes":[{"pos":[0,179],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> this <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> will handle.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle."}],"pos":[299684,299864],"yaml":true},{"content":"The body of the catch statement.","nodes":[{"pos":[0,32],"content":"The body of the catch statement.","nodes":[{"content":"The body of the catch statement.","pos":[0,32]}]}],"pos":[299945,299978],"yaml":true},{"content":"The body of the <xref href=\"System.Exception\"></xref> filter.","nodes":[{"pos":[0,61],"content":"The body of the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> filter.","source":"The body of the <xref href=\"System.Exception\"></xref> filter."}],"pos":[300061,300123],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.","nodes":[{"pos":[0,68],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>."}],"pos":[300201,300270],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> for clearing a sequence point.","nodes":[{"pos":[0,105],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph> for clearing a sequence point.","source":"Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> for clearing a sequence point."}],"pos":[301995,302101],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that represents the source file.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph> that represents the source file.","source":"The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that represents the source file."}],"pos":[302361,302462],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> for clearning a sequence point.","nodes":[{"pos":[0,111],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph> for clearning a sequence point.","source":"An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> for clearning a sequence point."}],"pos":[302549,302661],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a coalescing operation, given a conversion function.","nodes":[{"pos":[0,140],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a coalescing operation, given a conversion function.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a coalescing operation, given a conversion function."}],"pos":[304651,304792],"yaml":true},{"content":"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.  \n  \n The following rules determine the result type:  \n  \n-   If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.  \n  \n-   Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.  \n  \n-   Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.","nodes":[{"pos":[0,304],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is <ph id=\"ph3\">`null`</ph> and both <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id=\"ph6\">`false`</ph>.","source":"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`."},{"pos":[311,495],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is equal to the result type of the coalescing operation.","pos":[0,184],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation."}]},{"pos":[502,548],"content":"The following rules determine the result type:","nodes":[{"content":"The following rules determine the result type:","pos":[0,46]}]},{"pos":[558,745],"content":"If <ph id=\"ph1\">`left`</ph>.Type represents a nullable type and <ph id=\"ph2\">`right`</ph>.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of <ph id=\"ph3\">`left`</ph>.Type.","source":"If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type."},{"pos":[755,855],"content":"Otherwise, if <ph id=\"ph1\">`right`</ph>.Type is implicitly convertible to <ph id=\"ph2\">`left`</ph>.Type, the result type is <ph id=\"ph3\">`left`</ph>.Type.","source":"Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type."},{"pos":[865,997],"content":"Otherwise, if the non-nullable equivalent of <ph id=\"ph1\">`left`</ph>.Type is implicitly convertible to <ph id=\"ph2\">`right`</ph>.Type, the result type is <ph id=\"ph3\">`right`</ph>.Type.","source":"Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type."}],"pos":[304803,305813],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[306135,306291],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[306373,306530],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[306623,306790],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[306874,307364],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[307537,307588],"yaml":true},{"content":"<code>left</code>.Type and <code>right</code>.Type are not convertible to each other.  \n  \n -or-  \n  \n <code>conversion</code> is not `null` and <code>conversion</code>.Type is a delegate type that does not take exactly one argument.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not convertible to each other.","source":"<code>left</code>.Type and <code>right</code>.Type are not convertible to each other."},{"pos":[92,96],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[103,233],"content":"<ph id=\"ph1\">&lt;code&gt;conversion&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;conversion&lt;/code&gt;</ph>.Type is a delegate type that does not take exactly one argument.","source":"<code>conversion</code> is not `null` and <code>conversion</code>.Type is a delegate type that does not take exactly one argument."}],"pos":[307682,307922],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> does not represent a reference type or a nullable value type.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> represents a type that is not assignable to the parameter type of the delegate type <code>conversion</code>.Type.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>right</code> is not equal to the return type of the delegate type <code>conversion</code>.Type.","nodes":[{"pos":[0,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a reference type or a nullable value type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> does not represent a reference type or a nullable value type."},{"pos":[163,167],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[174,382],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents a type that is not assignable to the parameter type of the delegate type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">conversion</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> represents a type that is not assignable to the parameter type of the delegate type <code>conversion</code>.Type."},{"pos":[389,393],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[400,578],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to the return type of the delegate type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">conversion</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>right</code> is not equal to the return type of the delegate type <code>conversion</code>.Type."}],"pos":[308032,308627],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a coalescing operation.","nodes":[{"pos":[0,111],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a coalescing operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a coalescing operation."}],"pos":[310360,310472],"yaml":true},{"content":"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n#### Result Type  \n The following rules determine the result type:  \n  \n-   If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.  \n  \n-   Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.  \n  \n-   Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.","nodes":[{"pos":[0,510],"content":"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> is <ph id=\"ph3\">`null`</ph> and both <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> are set to <ph id=\"ph6\">`false`</ph>.","pos":[0,304],"source":"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to the result type of the coalescing operation.","pos":[305,424],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[425,510],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[521,532],"content":"Result Type","linkify":"Result Type","nodes":[{"content":"Result Type","pos":[0,11]}]},{"pos":[536,582],"content":"The following rules determine the result type:","nodes":[{"content":"The following rules determine the result type:","pos":[0,46]}]},{"pos":[592,779],"content":"If <ph id=\"ph1\">`left`</ph>.Type represents a nullable type and <ph id=\"ph2\">`right`</ph>.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of <ph id=\"ph3\">`left`</ph>.Type.","source":"If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type."},{"pos":[789,889],"content":"Otherwise, if <ph id=\"ph1\">`right`</ph>.Type is implicitly convertible to <ph id=\"ph2\">`left`</ph>.Type, the result type is <ph id=\"ph3\">`left`</ph>.Type.","source":"Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type."},{"pos":[899,1031],"content":"Otherwise, if the non-nullable equivalent of <ph id=\"ph1\">`left`</ph>.Type is implicitly convertible to <ph id=\"ph2\">`right`</ph>.Type, the result type is <ph id=\"ph3\">`right`</ph>.Type.","source":"Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type."}],"pos":[310483,311526],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[311795,311951],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[312033,312190],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[312274,312690],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[312863,312914],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> does not represent a reference type or a nullable value type.","nodes":[{"pos":[0,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a reference type or a nullable value type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> does not represent a reference type or a nullable value type."}],"pos":[313024,313181],"yaml":true},{"content":"<code>left</code>.Type and <code>right</code>.Type are not convertible to each other.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not convertible to each other.","source":"<code>left</code>.Type and <code>right</code>.Type are not convertible to each other."}],"pos":[313275,313361],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional statement.","nodes":[{"pos":[0,117],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional statement.","source":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional statement."}],"pos":[315241,315359],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.","nodes":[{"pos":[0,220],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ConditionalExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph4\">`ifTrue`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`."}],"pos":[315370,315591],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.","nodes":[{"pos":[0,160],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to."}],"pos":[316488,316649],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.","nodes":[{"pos":[0,162],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to."}],"pos":[316732,316895],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to.","nodes":[{"pos":[0,163],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to."}],"pos":[316979,317143],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values.","nodes":[{"pos":[0,511],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values."}],"pos":[317232,317744],"yaml":true},{"content":"<code>test</code> or <code>ifTrue</code> or <code>ifFalse</code> is `null`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;test&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;ifTrue&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;ifFalse&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>test</code> or <code>ifTrue</code> or <code>ifFalse</code> is `null`."}],"pos":[317918,317994],"yaml":true},{"content":"<code>test</code>.Type is not <xref href=\"System.Boolean\"></xref>.  \n  \n -or-  \n  \n <code>ifTrue</code>.Type is not equal to <code>ifFalse</code>.Type.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;test&lt;/code&gt;</ph>.Type is not <ph id=\"ph2\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"<code>test</code>.Type is not <xref href=\"System.Boolean\"></xref>."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,151],"content":"<ph id=\"ph1\">&lt;code&gt;ifTrue&lt;/code&gt;</ph>.Type is not equal to <ph id=\"ph2\">&lt;code&gt;ifFalse&lt;/code&gt;</ph>.Type.","source":"<code>ifTrue</code>.Type is not equal to <code>ifFalse</code>.Type."}],"pos":[318088,318248],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional statement.","nodes":[{"pos":[0,117],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional statement.","source":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional statement."}],"pos":[320160,320278],"yaml":true},{"content":"This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal. Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type. The `type` is allowed to be <xref:System.Void>.","nodes":[{"pos":[0,307],"content":"This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal. Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type. The `type` is allowed to be <xref:System.Void>.","nodes":[{"content":"This method allows explicitly unifying the result type of the conditional expression in cases where the types of <ph id=\"ph1\">`ifTrue`</ph> and <ph id=\"ph2\">`ifFalse`</ph> expressions are not equal.","pos":[0,162],"source":"This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal."},{"content":"Types of both <ph id=\"ph1\">`ifTrue`</ph> and <ph id=\"ph2\">`ifFalse`</ph> must be implicitly reference assignable to the result type.","pos":[163,259],"source":" Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type."},{"content":"The <ph id=\"ph1\">`type`</ph> is allowed to be <ph id=\"ph2\">&lt;xref:System.Void&gt;</ph>.","pos":[260,307],"source":" The `type` is allowed to be <xref:System.Void>."}]}],"pos":[320289,320597],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.","nodes":[{"pos":[0,160],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to."}],"pos":[320928,321089],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.","nodes":[{"pos":[0,162],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to."}],"pos":[321172,321335],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to.","nodes":[{"pos":[0,163],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to."}],"pos":[321419,321583],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,153],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[321641,321795],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values.","nodes":[{"pos":[0,511],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values."}],"pos":[321884,322396],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property set to the specified value.","nodes":[{"pos":[0,193],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression.Value\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property set to the specified value."}],"pos":[323988,324182],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`. If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.  \n  \n To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.","nodes":[{"pos":[0,268],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`. If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> is equal to the type of <ph id=\"ph3\">`value`</ph>.","pos":[0,162],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`."},{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> is equal to <ph id=\"ph4\">&lt;xref:System.Object&gt;</ph>.","pos":[163,268],"source":" If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>."}]},{"pos":[275,456],"content":"To represent <ph id=\"ph1\">`null`</ph>, you can also use the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29&gt;</ph> method, with which you can explicitly specify the type.","source":"To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type."}],"pos":[324193,324654],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property equal to.","nodes":[{"pos":[0,137],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression.Value\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Object\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property equal to."}],"pos":[325287,325425],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property set to the specified value.","nodes":[{"pos":[0,345],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Constant\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression.Value\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property set to the specified value."}],"pos":[325511,325857],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.","nodes":[{"pos":[0,261],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression.Value\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values."}],"pos":[327502,327764],"yaml":true},{"content":"This method can be useful for representing values of nullable types.","nodes":[{"pos":[0,68],"content":"This method can be useful for representing values of nullable types.","nodes":[{"content":"This method can be useful for representing values of nullable types.","pos":[0,68]}]}],"pos":[327775,327844],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property equal to.","nodes":[{"pos":[0,137],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression.Value\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Object\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property equal to."}],"pos":[328535,328673],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[328731,328857],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.","nodes":[{"pos":[0,413],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Constant\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ConstantExpression.Value\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values."}],"pos":[328943,329357],"yaml":true},{"content":"<code>type</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."}],"pos":[329530,329559],"yaml":true},{"content":"<code>value</code> is not `null` and <code>type</code> is not assignable from the dynamic type of <code>value</code>.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;type&lt;/code&gt;</ph> is not assignable from the dynamic type of <ph id=\"ph4\">&lt;code&gt;value&lt;/code&gt;</ph>.","source":"<code>value</code> is not `null` and <code>type</code> is not assignable from the dynamic type of <code>value</code>."}],"pos":[329653,329771],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a continue statement.","nodes":[{"pos":[0,104],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a continue statement.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a continue statement."}],"pos":[331369,331474],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[332222,332366],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.","nodes":[{"pos":[0,322],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Continue, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and a null value to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping."}],"pos":[332448,332771],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a continue statement with the specified type.","nodes":[{"pos":[0,128],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a continue statement with the specified type.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a continue statement with the specified type."}],"pos":[334497,334626],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[334868,335012],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[335070,335197],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.","nodes":[{"pos":[0,422],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Continue, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, the <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and a null value to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping."}],"pos":[335279,335702],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a type conversion operation.","nodes":[{"pos":[0,115],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a type conversion operation.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a type conversion operation."}],"pos":[337416,337532],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted.","nodes":[{"pos":[0,377],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","pos":[169,258],"source":" The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`."},{"content":"If the node is lifted, <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[259,351],"source":" If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[352,377],"source":" Otherwise, it is `false`."}]},{"pos":[388,407],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[411,483],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[493,709],"content":"If either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[719,729],"content":"Otherwise:","nodes":[{"content":"Otherwise:","pos":[0,10]}]},{"pos":[743,897],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`."},{"pos":[911,1102],"content":"If either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id=\"ph3\">`expression`</ph>.Type to <ph id=\"ph4\">`type`</ph>, the implementing method is <ph id=\"ph5\">`null`</ph>.","source":"If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`."},{"pos":[1113,1137],"content":"Lifted versus Non-Lifted","linkify":"Lifted versus Non-Lifted","nodes":[{"content":"Lifted versus Non-Lifted","pos":[0,24]}]},{"pos":[1141,1182],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1192,1370],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id=\"ph2\">`type`</ph>, the node is not lifted.","source":"If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted."},{"pos":[1380,1609],"content":"If one or both of <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.","source":"If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted."},{"pos":[1616,1653],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1663,1741],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> are non-nullable, the node is not lifted.","source":"If both `expression`.Type and `type` are non-nullable, the node is not lifted."},{"pos":[1751,1780],"content":"Otherwise the node is lifted.","nodes":[{"content":"Otherwise the node is lifted.","pos":[0,29]}]}],"pos":[337543,339350],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[340064,340222],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[340280,340406],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.","nodes":[{"pos":[0,408],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Convert\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values."}],"pos":[340489,340898],"yaml":true},{"content":"<code>expression</code> or <code>type</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>type</code> is `null`."}],"pos":[341070,341126],"yaml":true},{"content":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.","nodes":[{"pos":[0,93],"content":"No conversion operator is defined between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>."}],"pos":[341236,341330],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation for which the implementing method is specified.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a conversion operation for which the implementing method is specified.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation for which the implementing method is specified."}],"pos":[343093,343251],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n-   Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted.","nodes":[{"pos":[0,377],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","pos":[169,258],"source":" The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`."},{"content":"If the node is lifted, <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[259,351],"source":" If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[352,377],"source":" Otherwise, it is `false`."}]},{"pos":[388,407],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[411,483],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[493,646],"content":"If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.","nodes":[{"content":"If method is not <ph id=\"ph1\">`null`</ph>, it is the implementing method.","pos":[0,55],"source":"If method is not `null`, it is the implementing method."},{"content":"It must represent a non-void, <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method that takes one argument.","pos":[56,153],"source":" It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument."}]},{"pos":[656,883],"content":"Otherwise, if either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[893,903],"content":"Otherwise:","nodes":[{"content":"Otherwise:","pos":[0,10]}]},{"pos":[917,1071],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`."},{"pos":[1085,1276],"content":"If either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id=\"ph3\">`expression`</ph>.Type to <ph id=\"ph4\">`type`</ph>, the implementing method is <ph id=\"ph5\">`null`</ph>.","source":"If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`."},{"pos":[1287,1311],"content":"Lifted versus Non-Lifted","linkify":"Lifted versus Non-Lifted","nodes":[{"content":"Lifted versus Non-Lifted","pos":[0,24]}]},{"pos":[1315,1356],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1366,1544],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id=\"ph2\">`type`</ph>, the node is not lifted.","source":"If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted."},{"pos":[1554,1787],"content":"If either or both of <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.","source":"If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted."},{"pos":[1794,1831],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1841,1919],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> are non-nullable, the node is not lifted.","source":"If both `expression`.Type and `type` are non-nullable, the node is not lifted."},{"pos":[1929,1958],"content":"Otherwise the node is lifted.","nodes":[{"content":"Otherwise the node is lifted.","pos":[0,29]}]}],"pos":[343262,345249],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[345534,345692],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[345750,345876],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to."}],"pos":[345953,346103],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,478],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Convert\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[346186,346665],"yaml":true},{"content":"<code>expression</code> or <code>type</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>type</code> is `null`."}],"pos":[346837,346893],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly one argument.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument."}],"pos":[346987,347149],"yaml":true},{"content":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>.","nodes":[{"pos":[0,93],"content":"No conversion operator is defined between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,228],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type is not assignable to the argument type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>."},{"pos":[235,239],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[246,350],"content":"The return type of the method represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The return type of the method represented by <code>method</code> is not assignable to <code>type</code>."},{"pos":[357,361],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[368,605],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <ph id=\"ph3\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>."}],"pos":[347259,347879],"yaml":true},{"content":"More than one method that matches the <code>method</code> description was found.","nodes":[{"pos":[0,80],"content":"More than one method that matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> description was found.","source":"More than one method that matches the <code>method</code> description was found."}],"pos":[348007,348088],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a conversion operation that throws an exception if the target type is overflowed.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed."}],"pos":[349748,349917],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted.","nodes":[{"pos":[0,377],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","pos":[169,258],"source":" The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`."},{"content":"If the node is lifted, <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[259,351],"source":" If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[352,377],"source":" Otherwise, it is `false`."}]},{"pos":[388,407],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[411,483],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[493,709],"content":"If either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[719,729],"content":"Otherwise:","nodes":[{"content":"Otherwise:","pos":[0,10]}]},{"pos":[743,897],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`."},{"pos":[911,1102],"content":"If either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id=\"ph3\">`expression`</ph>.Type to <ph id=\"ph4\">`type`</ph>, the implementing method is <ph id=\"ph5\">`null`</ph>.","source":"If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`."},{"pos":[1113,1137],"content":"Lifted versus Non-Lifted","linkify":"Lifted versus Non-Lifted","nodes":[{"content":"Lifted versus Non-Lifted","pos":[0,24]}]},{"pos":[1141,1182],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1192,1370],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id=\"ph2\">`type`</ph>, the node is not lifted.","source":"If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted."},{"pos":[1380,1613],"content":"If either or both of <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.","source":"If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted."},{"pos":[1620,1657],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1667,1745],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> are non-nullable, the node is not lifted.","source":"If both `expression`.Type and `type` are non-nullable, the node is not lifted."},{"pos":[1755,1784],"content":"Otherwise the node is lifted.","nodes":[{"content":"Otherwise the node is lifted.","pos":[0,29]}]}],"pos":[349928,351739],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[351994,352152],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[352210,352336],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values."}],"pos":[352419,352835],"yaml":true},{"content":"<code>expression</code> or <code>type</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>type</code> is `null`."}],"pos":[353014,353070],"yaml":true},{"content":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.","nodes":[{"pos":[0,93],"content":"No conversion operator is defined between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>."}],"pos":[353180,353274],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.","nodes":[{"pos":[0,219],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified."}],"pos":[355057,355277],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n-   Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \n  \n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted.","nodes":[{"pos":[0,377],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","pos":[169,258],"source":" The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`."},{"content":"If the node is lifted, <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[259,351],"source":" If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[352,377],"source":" Otherwise, it is `false`."}]},{"pos":[388,407],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[411,483],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[493,646],"content":"If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.","nodes":[{"content":"If method is not <ph id=\"ph1\">`null`</ph>, it is the implementing method.","pos":[0,55],"source":"If method is not `null`, it is the implementing method."},{"content":"It must represent a non-void, <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) method that takes one argument.","pos":[56,153],"source":" It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument."}]},{"pos":[656,883],"content":"Otherwise, if either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a user-defined type that defines an implicit or explicit conversion operator, the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[893,903],"content":"Otherwise:","nodes":[{"content":"Otherwise:","pos":[0,10]}]},{"pos":[917,1071],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`."},{"pos":[1085,1276],"content":"If either <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> is a reference type and an explicit boxing, unboxing, or reference conversion exists from <ph id=\"ph3\">`expression`</ph>.Type to <ph id=\"ph4\">`type`</ph>, the implementing method is <ph id=\"ph5\">`null`</ph>.","source":"If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`."},{"pos":[1287,1311],"content":"Lifted versus Non-Lifted","linkify":"Lifted versus Non-Lifted","nodes":[{"content":"Lifted versus Non-Lifted","pos":[0,24]}]},{"pos":[1315,1356],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1366,1544],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to <ph id=\"ph2\">`type`</ph>, the node is not lifted.","source":"If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted."},{"pos":[1554,1787],"content":"If either or both of <ph id=\"ph1\">`expression`</ph>.Type or <ph id=\"ph2\">`type`</ph> are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.","source":"If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted."},{"pos":[1794,1831],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1841,1919],"content":"If both <ph id=\"ph1\">`expression`</ph>.Type and <ph id=\"ph2\">`type`</ph> are non-nullable, the node is not lifted.","source":"If both `expression`.Type and `type` are non-nullable, the node is not lifted."},{"pos":[1929,1958],"content":"Otherwise the node is lifted.","nodes":[{"content":"Otherwise the node is lifted.","pos":[0,29]}]}],"pos":[355288,357275],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[357567,357725],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[357783,357909],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to."}],"pos":[357986,358136],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,485],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[358219,358705],"yaml":true},{"content":"<code>expression</code> or <code>type</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>type</code> is `null`."}],"pos":[358884,358940],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly one argument.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument."}],"pos":[359034,359196],"yaml":true},{"content":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  \n  \n -or-  \n  \n The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  \n  \n -or-  \n  \n <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>.","nodes":[{"pos":[0,93],"content":"No conversion operator is defined between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,228],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type is not assignable to the argument type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>."},{"pos":[235,239],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[246,350],"content":"The return type of the method represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The return type of the method represented by <code>method</code> is not assignable to <code>type</code>."},{"pos":[357,361],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[368,605],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <ph id=\"ph3\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>."}],"pos":[359306,359926],"yaml":true},{"content":"More than one method that matches the <code>method</code> description was found.","nodes":[{"pos":[0,80],"content":"More than one method that matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> description was found.","source":"More than one method that matches the <code>method</code> description was found."}],"pos":[360054,360135],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> with the specified span.","nodes":[{"pos":[0,99],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph> with the specified span.","source":"Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> with the specified span."}],"pos":[362021,362121],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that represents the source file.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph> that represents the source file.","source":"The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that represents the source file."}],"pos":[362436,362537],"yaml":true},{"content":"The start line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater than 0.","nodes":[{"pos":[0,112],"content":"The start line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater than 0.","nodes":[{"content":"The start line of this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph>.","pos":[0,88],"source":"The start line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>."},{"content":"Must be greater than 0.","pos":[89,112]}]}],"pos":[362601,362714],"yaml":true},{"content":"The start column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater than 0.","nodes":[{"pos":[0,114],"content":"The start column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater than 0.","nodes":[{"content":"The start column of this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph>.","pos":[0,90],"source":"The start column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>."},{"content":"Must be greater than 0.","pos":[91,114]}]}],"pos":[362780,362895],"yaml":true},{"content":"The end line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater or equal than the start line.","nodes":[{"pos":[0,132],"content":"The end line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater or equal than the start line.","nodes":[{"content":"The end line of this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph>.","pos":[0,86],"source":"The end line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>."},{"content":"Must be greater or equal than the start line.","pos":[87,132]}]}],"pos":[362957,363090],"yaml":true},{"content":"The end column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.","nodes":[{"pos":[0,223],"content":"The end column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.","nodes":[{"content":"The end column of this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph>.","pos":[0,88],"source":"The end column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>."},{"content":"If the end line is the same as the start line, it must be greater or equal than the start column.","pos":[89,186]},{"content":"In any case, must be greater than 0.","pos":[187,223]}]}],"pos":[363154,363378],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>.","nodes":[{"pos":[0,80],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DebugInfoExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>."}],"pos":[363465,363546],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decrementing of the expression by 1.","nodes":[{"pos":[0,127],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the decrementing of the expression by 1.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decrementing of the expression by 1."}],"pos":[365219,365347],"yaml":true},{"content":"This expression is functional and does not change the value of the object passed to it.","nodes":[{"pos":[0,87],"content":"This expression is functional and does not change the value of the object passed to it.","nodes":[{"content":"This expression is functional and does not change the value of the object passed to it.","pos":[0,87]}]}],"pos":[365358,365446],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to decrement.","nodes":[{"pos":[0,72],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to decrement.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to decrement."}],"pos":[366140,366213],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decremented expression.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the decremented expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decremented expression."}],"pos":[366296,366403],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decrementing of the expression by 1.","nodes":[{"pos":[0,127],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the decrementing of the expression by 1.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decrementing of the expression by 1."}],"pos":[368199,368327],"yaml":true},{"content":"This expression is functional and does not change the value of the object passed to it.","nodes":[{"pos":[0,87],"content":"This expression is functional and does not change the value of the object passed to it.","nodes":[{"content":"This expression is functional and does not change the value of the object passed to it.","pos":[0,87]}]}],"pos":[368338,368426],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to decrement.","nodes":[{"pos":[0,72],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to decrement.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to decrement."}],"pos":[368702,368775],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[368852,368945],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decremented expression.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the decremented expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decremented expression."}],"pos":[369028,369135],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to the specified type.","nodes":[{"pos":[0,182],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DefaultExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to the specified type.","source":"Creates a <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to the specified type."}],"pos":[370687,370870],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[371525,371651],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to the specified type.","nodes":[{"pos":[0,333],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DefaultExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Default\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to the specified type.","source":"A <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to the specified type."}],"pos":[371736,372070],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic division operation.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic division operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic division operation."}],"pos":[373864,373986],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1049],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the division operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1059,1155],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1166,1204],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1208,1249],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1259,1461],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1471,1646],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1660,1858],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1872,1944],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1951,1988],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1998,2153],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined division operator.","pos":[79,155]}]},{"pos":[2163,2348],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined division operator.","pos":[71,185]}]}],"pos":[373997,376374],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property to.","nodes":[{"pos":[0,149],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property to."}],"pos":[377122,377272],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property to.","nodes":[{"pos":[0,150],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property to."}],"pos":[377354,377505],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,413],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Divide\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[377589,378003],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[378174,378225],"yaml":true},{"content":"The division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,92],"content":"The division operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The division operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[378335,378428],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic division operation. The implementing method can be specified.","nodes":[{"pos":[0,163],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic division operation. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic division operation.","pos":[0,121],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic division operation."},{"content":"The implementing method can be specified.","pos":[122,163]}]}],"pos":[380272,380436],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,959],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[969,1238],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the division operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1248,1344],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1355,1393],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1397,1438],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1448,1650],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1660,1835],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1849,2047],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2061,2133],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2140,2177],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2187,2342],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined division operator.","pos":[79,155]}]},{"pos":[2352,2537],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined division operator.","pos":[71,185]}]}],"pos":[380447,383015],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[383319,383475],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[383557,383714],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[383791,383942],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,484],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Divide\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[384026,384511],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[384682,384733],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[384827,384990],"yaml":true},{"content":"<code>method</code> is `null` and the division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the division operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the division operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[385100,385227],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a division assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking."}],"pos":[386984,387142],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[387415,387571],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[387653,387810],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,419],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[387894,388314],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a division assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking."}],"pos":[390272,390430],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[390740,390896],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[390978,391135],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[391212,391363],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,490],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[391447,391938],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a division assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking."}],"pos":[394073,394231],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[394594,394750],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[394832,394989],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[395066,395217],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[395310,395477],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,564],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[395561,396126],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[398456,398656],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,171],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.","pos":[0,171],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type."}]}],"pos":[398667,398839],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[399275,399321],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[399385,399428],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[399509,399554],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[399635,399681],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[399762,399807],"yaml":true},{"content":"The fourth argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The fourth argument to the dynamic operation.","nodes":[{"content":"The fourth argument to the dynamic operation.","pos":[0,45]}]}],"pos":[399888,399934],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,403],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[400019,400423],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[402162,402362],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,171],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.","pos":[0,171],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type."}]}],"pos":[402373,402545],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[402899,402945],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[403009,403052],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[403133,403178],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[403259,403305],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,403],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[403390,403794],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[405674,405874],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,171],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.","pos":[0,171],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type."}]}],"pos":[405885,406057],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[406452,406498],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[406562,406605],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[406686,406731],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[406812,406858],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[406939,406984],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,403],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[407069,407473],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[409071,409271],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,171],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.","pos":[0,171],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type."}]}],"pos":[409282,409454],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[409767,409813],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[409877,409920],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[410001,410046],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,403],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[410131,410535],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[412270,412470],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,171],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.","pos":[0,171],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type."}]}],"pos":[412481,412653],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[413011,413057],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[413121,413164],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[413290,413330],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,403],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[413415,413819],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[415429,415629],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,171],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result will be inferred from the types of the arguments and the specified return type.","pos":[0,171],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type."}]}],"pos":[415640,415812],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[416132,416178],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[416242,416285],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[416373,416413],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,403],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[416498,416902],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.ElementInit\"></xref>, given an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> as the second argument.","nodes":[{"pos":[0,163],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph>, given an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> as the second argument.","source":"Creates an <xref href=\"System.Linq.Expressions.ElementInit\"></xref>, given an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> as the second argument."}],"pos":[418563,418727],"yaml":true},{"content":"The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","nodes":[{"pos":[0,389],"content":"The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.","nodes":[{"content":"The <ph id=\"ph1\">`addMethod`</ph> parameter must represent an instance method named \"Add\" (case insensitive).","pos":[0,91],"source":"The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive)."},{"content":"The add method must have the same number of parameters as the number of elements in <ph id=\"ph1\">`arguments`</ph>.","pos":[92,188],"source":" The add method must have the same number of parameters as the number of elements in `arguments`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element in <ph id=\"ph2\">`arguments`</ph> must be assignable to the type of the corresponding parameter of the add method, possibly after <bpt id=\"p1\">*</bpt>quoting<ept id=\"p1\">*</ept>.","pos":[189,389],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*."}]},{"pos":[397,805],"content":"[!NOTE]\n An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","pos":[8,406],"nodes":[{"content":"An element will be quoted only if the corresponding method parameter is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,123],"source":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[124,223],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`arguments`</ph>.","pos":[224,398],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."}]}]}],"pos":[418738,419551],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> property equal to.","nodes":[{"pos":[0,148],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> property equal to."}],"pos":[420590,420739],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> property equal to.","nodes":[{"pos":[0,239],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to set the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ElementInit.Arguments\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> property equal to."}],"pos":[420865,421105],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.ElementInit\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,250],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ElementInit.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.ElementInit\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> properties set to the specified values."}],"pos":[421184,421435],"yaml":true},{"content":"<code>addMethod</code> or <code>arguments</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;arguments&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>addMethod</code> or <code>arguments</code> is `null`."}],"pos":[421611,421671],"yaml":true},{"content":"The method that <code>addMethod</code> represents is not named \"Add\" (case insensitive).  \n  \n -or-  \n  \n The method that <code>addMethod</code> represents is not an instance method.  \n  \n -or-  \n  \n <code>arguments</code> does not contain the same number of elements as the number of parameters for the method that <code>addMethod</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents.","nodes":[{"pos":[0,88],"content":"The method that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">addMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents is not named \"Add\" (case insensitive).","source":"The method that <code>addMethod</code> represents is not named \"Add\" (case insensitive)."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,182],"content":"The method that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">addMethod</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents is not an instance method.","source":"The method that <code>addMethod</code> represents is not an instance method."},{"pos":[189,193],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[200,350],"content":"<ph id=\"ph1\">&lt;code&gt;arguments&lt;/code&gt;</ph> does not contain the same number of elements as the number of parameters for the method that <ph id=\"ph2\">&lt;code&gt;addMethod&lt;/code&gt;</ph> represents.","source":"<code>arguments</code> does not contain the same number of elements as the number of parameters for the method that <code>addMethod</code> represents."},{"pos":[357,361],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[368,606],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of one or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the method that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">addMethod</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents."}],"pos":[421765,422390],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.ElementInit\"></xref>, given an array of values as the second argument.","nodes":[{"pos":[0,117],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph>, given an array of values as the second argument.","source":"Creates an <xref href=\"System.Linq.Expressions.ElementInit\"></xref>, given an array of values as the second argument."}],"pos":[424135,424253],"yaml":true},{"content":"The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","nodes":[{"pos":[0,389],"content":"The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.","nodes":[{"content":"The <ph id=\"ph1\">`addMethod`</ph> parameter must represent an instance method named \"Add\" (case insensitive).","pos":[0,91],"source":"The `addMethod` parameter must represent an instance method named \"Add\" (case insensitive)."},{"content":"The add method must have the same number of parameters as the number of elements in <ph id=\"ph1\">`arguments`</ph>.","pos":[92,188],"source":" The add method must have the same number of parameters as the number of elements in `arguments`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element in <ph id=\"ph2\">`arguments`</ph> must be assignable to the type of the corresponding parameter of the add method, possibly after <bpt id=\"p1\">*</bpt>quoting<ept id=\"p1\">*</ept>.","pos":[189,389],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*."}]},{"pos":[397,805],"content":"[!NOTE]\n An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","pos":[8,406],"nodes":[{"content":"An element will be quoted only if the corresponding method parameter is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,123],"source":" An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[124,223],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`arguments`</ph>.","pos":[224,398],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."}]}]}],"pos":[424264,425077],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> property equal to.","nodes":[{"pos":[0,148],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> property equal to."}],"pos":[426078,426227],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> property equal to.","nodes":[{"pos":[0,172],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit.Arguments\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> property equal to."}],"pos":[426315,426488],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.ElementInit\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,250],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ElementInit.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.ElementInit\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> properties set to the specified values."}],"pos":[426567,426818],"yaml":true},{"content":"<code>addMethod</code> or <code>arguments</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;arguments&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>addMethod</code> or <code>arguments</code> is `null`."}],"pos":[426994,427054],"yaml":true},{"content":"The method that addMethod represents is not named \"Add\" (case insensitive).  \n  \n -or-  \n  \n The method that addMethod represents is not an instance method.  \n  \n -or-  \n  \n arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents.","nodes":[{"pos":[0,75],"content":"The method that addMethod represents is not named \"Add\" (case insensitive).","nodes":[{"content":"The method that addMethod represents is not named \"Add\" (case insensitive).","pos":[0,75]}]},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,156],"content":"The method that addMethod represents is not an instance method.","nodes":[{"content":"The method that addMethod represents is not an instance method.","pos":[0,63]}]},{"pos":[163,167],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[174,298],"content":"arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.","nodes":[{"content":"arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.","pos":[0,124]}]},{"pos":[305,309],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[316,554],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of one or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the method that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">addMethod</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents."}],"pos":[427148,427721],"yaml":true},{"content":"Creates an empty expression that has <xref href=\"System.Void\"></xref> type.","nodes":[{"pos":[0,75],"content":"Creates an empty expression that has <ph id=\"ph1\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph> type.","source":"Creates an empty expression that has <xref href=\"System.Void\"></xref> type."}],"pos":[429157,429233],"yaml":true},{"content":"An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.","nodes":[{"pos":[0,239],"content":"An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.","nodes":[{"content":"An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.","pos":[0,239],"nodes":[{"content":"An empty expression can be used where an expression is expected but no action is desired.","pos":[0,89]},{"content":"For example, you can use an empty expression as the last expression in a block expression.","pos":[90,180]},{"content":"In this case, the block expression's return value is void.","pos":[181,239]}]}]}],"pos":[429244,429484],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <xref href=\"System.Void\"></xref>.","nodes":[{"pos":[0,347],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DefaultExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Default\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <ph id=\"ph5\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <xref href=\"System.Void\"></xref>."}],"pos":[430138,430486],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an equality comparison.","nodes":[{"pos":[0,111],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an equality comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an equality comparison."}],"pos":[432272,432384],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"pos":[0,600],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[264,370],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[371,396],"source":" Otherwise, it is `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id=\"ph2\">`false`</ph>.","pos":[397,494],"source":" The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`."},{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[495,600]}]},{"pos":[611,630],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[634,706],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[716,974],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the equality operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[984,1029],"content":"Otherwise, the implementing method is <ph id=\"ph1\">`null`</ph>.","source":"Otherwise, the implementing method is `null`."},{"pos":[1040,1078],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1082,1123],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1133,1335],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1345,1461],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>:","pos":[0,116],"source":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:"}]},{"pos":[1475,1673],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1687,1755],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[1762,1799],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1809,1934],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[1944,2061],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[71,117],"source":" The type of the node is <xref:System.Boolean>."}]}],"pos":[432395,434483],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[435229,435385],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[435467,435624],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,412],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Equal\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[435708,436121],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[436291,436342],"yaml":true},{"content":"The equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,92],"content":"The equality operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[436452,436545],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an equality comparison. The implementing method can be specified.","nodes":[{"pos":[0,153],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an equality comparison. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an equality comparison.","pos":[0,111],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an equality comparison."},{"content":"The implementing method can be specified.","pos":[112,153]}]}],"pos":[438455,438609],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"pos":[0,618],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id=\"ph4\">`liftToNull`</ph>.","pos":[264,478],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`."},{"content":"Otherwise, they are both <ph id=\"ph1\">`false`</ph>.","pos":[479,512],"source":" Otherwise, they are both `false`."},{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[513,618]}]},{"pos":[629,648],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[652,724],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[734,889],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[899,1168],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the equality operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1178,1223],"content":"Otherwise, the implementing method is <ph id=\"ph1\">`null`</ph>.","source":"Otherwise, the implementing method is `null`."},{"pos":[1234,1272],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1276,1317],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1327,1529],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1539,1745],"content":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>:","source":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:"},{"pos":[1759,1957],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1971,2039],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[2046,2083],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2093,2218],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2228,2432],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>.","pos":[71,204],"source":" The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."}]}],"pos":[438620,441081],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[441401,441557],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[441639,441796],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[441863,442071],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[442148,442299],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,561],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Equal\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[442383,442945],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[443115,443166],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[443260,443423],"yaml":true},{"content":"<code>method</code> is `null` and the equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the equality operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[443533,443660],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.","nodes":[{"pos":[0,214],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise <ph id=\"ph2\">`XOR`</ph> operation, using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">op_ExclusiveOr</ph><ept id=\"p1\">&lt;/code&gt;</ept> for user-defined types.","pos":[0,172],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types."},{"content":"The implementing method can be specified.","pos":[173,214]}]}],"pos":[445512,445727],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the chosen implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,788],"content":"The following rules determine the chosen implementing method for the operation:","nodes":[{"content":"The following rules determine the chosen implementing method for the operation:","pos":[0,79]}]},{"pos":[798,953],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[963,1229],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the <ph id=\"ph4\">`XOR`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1239,1347],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`."},{"pos":[1358,1396],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1400,1441],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1451,1653],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1663,1838],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1852,2050],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2064,2136],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2143,2180],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2190,2342],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined <ph id=\"ph1\">`XOR`</ph> operator.","pos":[79,152],"source":" The type of the node is the result type of the predefined `XOR` operator."}]},{"pos":[2352,2534],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined <ph id=\"ph1\">`XOR`</ph> operator.","pos":[71,182],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator."}]}],"pos":[445738,448303],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[448612,448768],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[448850,449007],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[449084,449235],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[449319,449809],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[449985,450036],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[450130,450293],"yaml":true},{"content":"<code>method</code> is `null` and the `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the <ph id=\"ph3\">`XOR`</ph> operator is not defined for <ph id=\"ph4\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph5\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[450403,450527],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types.","nodes":[{"pos":[0,172],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise <ph id=\"ph2\">`XOR`</ph> operation, using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">op_ExclusiveOr</ph><ept id=\"p1\">&lt;/code&gt;</ept> for user-defined types.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types."}],"pos":[452256,452429],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1046],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the <ph id=\"ph4\">`XOR`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1056,1164],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`."},{"pos":[1175,1213],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1217,1258],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1268,1470],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1480,1655],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1669,1867],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1881,1953],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1960,1997],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2007,2159],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined <ph id=\"ph1\">`XOR`</ph> operator.","pos":[79,152],"source":" The type of the node is the result type of the predefined `XOR` operator."}]},{"pos":[2169,2351],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined <ph id=\"ph1\">`XOR`</ph> operator.","pos":[71,182],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator."}]}],"pos":[452440,454820],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[455552,455708],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[455790,455947],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,418],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[456031,456450],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[456626,456677],"yaml":true},{"content":"The `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">`XOR`</ph> operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[456787,456877],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.","nodes":[{"pos":[0,181],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise XOR assignment operation, using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">op_ExclusiveOr</ph><ept id=\"p1\">&lt;/code&gt;</ept> for user-defined types.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types."}],"pos":[458964,459146],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[459514,459670],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[459752,459909],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[459986,460137],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[460230,460397],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,569],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[460481,461051],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.","nodes":[{"pos":[0,181],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise XOR assignment operation, using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">op_ExclusiveOr</ph><ept id=\"p1\">&lt;/code&gt;</ept> for user-defined types.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types."}],"pos":[463044,463226],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[463541,463697],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[463779,463936],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[464013,464164],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,495],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[464248,464744],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.","nodes":[{"pos":[0,181],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise XOR assignment operation, using <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">op_ExclusiveOr</ph><ept id=\"p1\">&lt;/code&gt;</ept> for user-defined types.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types."}],"pos":[466614,466796],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[467074,467230],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[467312,467469],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,424],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[467553,467978],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field.","nodes":[{"pos":[0,106],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing a field.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field."}],"pos":[469752,469859],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.","nodes":[{"pos":[0,212],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> property of <ph id=\"ph4\">`field`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`."}],"pos":[469870,470083],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. For `static` (`Shared` in Visual Basic), <code>expression</code> must be `null`.","nodes":[{"pos":[0,242],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. For `static` (`Shared` in Visual Basic), <code>expression</code> must be `null`.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> property equal to.","pos":[0,161],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to."},{"content":"For <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic), <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> must be <ph id=\"ph4\">`null`</ph>.","pos":[162,242],"source":" For `static` (`Shared` in Visual Basic), <code>expression</code> must be `null`."}]}],"pos":[470354,470597],"yaml":true},{"content":"The <xref href=\"System.Reflection.FieldInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property equal to.","nodes":[{"pos":[0,151],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.FieldInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property equal to."}],"pos":[470672,470824],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> properties set to the specified values."}],"pos":[470908,471335],"yaml":true},{"content":"<code>field</code> is `null`.  \n  \n -or-  \n  \n The field represented by <code>field</code> is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;field&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>field</code> is `null`."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,172],"content":"The field represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">field</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">`null`</ph>.","source":"The field represented by <code>field</code> is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`."}],"pos":[471505,471684],"yaml":true},{"content":"<code>expression</code>.Type is not assignable to the declaring type of the field represented by <code>field</code>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type is not assignable to the declaring type of the field represented by <ph id=\"ph2\">&lt;code&gt;field&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type is not assignable to the declaring type of the field represented by <code>field</code>."}],"pos":[471778,471895],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field given the name of the field.","nodes":[{"pos":[0,134],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing a field given the name of the field.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field given the name of the field."}],"pos":[473535,473670],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.  \n  \n This method searches `expression`.Type and its base types for a field that has the name `fieldName`. Public fields are given preference over non-public fields. If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.","nodes":[{"pos":[0,292],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> that represents the field denoted by <ph id=\"ph5\">`fieldName`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`."},{"pos":[299,645],"content":"This method searches `expression`.Type and its base types for a field that has the name `fieldName`. Public fields are given preference over non-public fields. If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.","nodes":[{"content":"This method searches <ph id=\"ph1\">`expression`</ph>.Type and its base types for a field that has the name <ph id=\"ph2\">`fieldName`</ph>.","pos":[0,100],"source":"This method searches `expression`.Type and its base types for a field that has the name `fieldName`."},{"content":"Public fields are given preference over non-public fields.","pos":[101,159]},{"content":"If a matching field is found, this method passes <ph id=\"ph1\">`expression`</ph> and the <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> that represents that field to <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph>.","pos":[160,346],"source":" If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>."}]}],"pos":[473681,474331],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a field named <code>fieldName</code>. This can be null for static fields.","nodes":[{"pos":[0,208],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a field named <code>fieldName</code>. This can be null for static fields.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> contains a field named <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">fieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,172],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a field named <code>fieldName</code>."},{"content":"This can be null for static fields.","pos":[173,208]}]}],"pos":[475041,475250],"yaml":true},{"content":"The name of a field to be accessed.","nodes":[{"pos":[0,35],"content":"The name of a field to be accessed.","nodes":[{"content":"The name of a field to be accessed.","pos":[0,35]}]}],"pos":[475315,475351],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.FieldInfo\"></xref> that represents the field denoted by <code>fieldName</code>.","nodes":[{"pos":[0,558],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and the <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph7\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> that represents the field denoted by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph8\">fieldName</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.FieldInfo\"></xref> that represents the field denoted by <code>fieldName</code>."}],"pos":[475435,475994],"yaml":true},{"content":"<code>expression</code> or <code>fieldName</code> is `null`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;fieldName&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>fieldName</code> is `null`."}],"pos":[476164,476225],"yaml":true},{"content":"No field named <code>fieldName</code> is defined in <code>expression</code>.Type or its base types.","nodes":[{"pos":[0,99],"content":"No field named <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type or its base types.","source":"No field named <code>fieldName</code> is defined in <code>expression</code>.Type or its base types."}],"pos":[476319,476419],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field.","nodes":[{"pos":[0,106],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing a field.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field."}],"pos":[478113,478220],"yaml":true},{"content":"The containing object of the field. This can be null for static fields.","nodes":[{"pos":[0,71],"content":"The containing object of the field. This can be null for static fields.","nodes":[{"content":"The containing object of the field. This can be null for static fields.","pos":[0,71],"nodes":[{"content":"The containing object of the field.","pos":[0,35]},{"content":"This can be null for static fields.","pos":[36,71]}]}]}],"pos":[478485,478557],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> that contains the field.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> that contains the field.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> that contains the field."}],"pos":[478615,478705],"yaml":true},{"content":"The field to be accessed.","nodes":[{"pos":[0,25],"content":"The field to be accessed.","nodes":[{"content":"The field to be accessed.","pos":[0,25]}]}],"pos":[478770,478796],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.MemberExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.MemberExpression\"></xref>."}],"pos":[478880,478955],"yaml":true},{"content":"Creates a <xref href=\"System.Type\"></xref> object that represents a generic <code>System.Action</code> delegate type that has specific type arguments.","nodes":[{"pos":[0,150],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a generic <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">System.Action</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate type that has specific type arguments.","source":"Creates a <xref href=\"System.Type\"></xref> object that represents a generic <code>System.Action</code> delegate type that has specific type arguments."}],"pos":[480573,480724],"yaml":true},{"content":"As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.","nodes":[{"pos":[0,233],"content":"As an example, if the elements of <ph id=\"ph1\">`typeArgs`</ph> represent the types <ph id=\"ph2\">`T1…Tn`</ph>, the resulting <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object represents the constructed delegate type <ph id=\"ph4\">`System.Action&lt;T1,…,Tn&gt;`</ph> in C# or <ph id=\"ph5\">`System.Action(Of T1,…,Tn)`</ph> in Visual Basic.","source":"As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic."}],"pos":[480735,480969],"yaml":true,"extradata":"MT"},{"content":"An array of up to sixteen <xref href=\"System.Type\"></xref> objects that specify the type arguments for the `System.Action` delegate type.","nodes":[{"pos":[0,137],"content":"An array of up to sixteen <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that specify the type arguments for the <ph id=\"ph2\">`System.Action`</ph> delegate type.","source":"An array of up to sixteen <xref href=\"System.Type\"></xref> objects that specify the type arguments for the `System.Action` delegate type."}],"pos":[481124,481262],"yaml":true},{"content":"The type of a <code>System.Action</code> delegate that has the specified type arguments.","nodes":[{"pos":[0,88],"content":"The type of a <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">System.Action</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate that has the specified type arguments.","source":"The type of a <code>System.Action</code> delegate that has the specified type arguments."}],"pos":[481317,481406],"yaml":true},{"content":"<code>typeArgs</code> contains more than sixteen elements.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;typeArgs&lt;/code&gt;</ph> contains more than sixteen elements.","source":"<code>typeArgs</code> contains more than sixteen elements."}],"pos":[481576,481635],"yaml":true},{"content":"<code>typeArgs</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;typeArgs&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeArgs</code> is `null`."}],"pos":[481737,481770],"yaml":true},{"content":"Gets a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments.","nodes":[{"pos":[0,203],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> object that represents a generic <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">System.Func</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">System.Action</ph><ept id=\"p2\">&lt;/code&gt;</ept> delegate type that has specific type arguments.","source":"Gets a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments."}],"pos":[483329,483533],"yaml":true},{"content":"The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.  \n  \n As with Func, the last argument is the return type. It can be set to System.Void to produce an Action.","nodes":[{"pos":[0,145],"content":"The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.","nodes":[{"content":"The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.","pos":[0,145],"nodes":[{"content":"The last type argument determines the return type of the delegate.","pos":[0,66]},{"content":"If no Func or Action is large enough, it will generate a custom delegate type.","pos":[67,145]}]}]},{"pos":[152,254],"content":"As with Func, the last argument is the return type. It can be set to System.Void to produce an Action.","nodes":[{"content":"As with Func, the last argument is the return type. It can be set to System.Void to produce an Action.","pos":[0,102],"nodes":[{"content":"As with Func, the last argument is the return type.","pos":[0,51]},{"content":"It can be set to System.Void to produce an Action.","pos":[52,102]}]}]}],"pos":[483544,483803],"yaml":true,"extradata":"MT"},{"content":"The type arguments of the delegate.","nodes":[{"pos":[0,35],"content":"The type arguments of the delegate.","nodes":[{"content":"The type arguments of the delegate.","pos":[0,35]}]}],"pos":[483960,483996],"yaml":true},{"content":"The delegate type.","nodes":[{"pos":[0,18],"content":"The delegate type.","nodes":[{"content":"The delegate type.","pos":[0,18]}]}],"pos":[484051,484070],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.","nodes":[{"pos":[0,250],"content":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> object that represents a generic <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">System.Func</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate type that has specific type arguments.","pos":[0,176],"source":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments."},{"content":"The last type argument specifies the return type of the created delegate.","pos":[177,250]}]}],"pos":[485686,485937],"yaml":true},{"content":"`typeArgs` must contain at least one and at most seventeen elements.  \n  \n As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`typeArgs`</ph> must contain at least one and at most seventeen elements.","source":"`typeArgs` must contain at least one and at most seventeen elements."},{"pos":[75,304],"content":"As an example, if the elements of <ph id=\"ph1\">`typeArgs`</ph> represent the types <ph id=\"ph2\">`T1…Tn`</ph>, the resulting <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object represents the constructed delegate type <ph id=\"ph4\">`System.Func&lt;T1,…,Tn&gt;`</ph> in C# or <ph id=\"ph5\">`System.Func(Of T1,…,Tn)`</ph> in Visual Basic.","source":"As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic."}],"pos":[485948,486257],"yaml":true,"extradata":"MT"},{"content":"An array of one to seventeen <xref href=\"System.Type\"></xref> objects that specify the type arguments for the `System.Func` delegate type.","nodes":[{"pos":[0,138],"content":"An array of one to seventeen <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that specify the type arguments for the <ph id=\"ph2\">`System.Func`</ph> delegate type.","source":"An array of one to seventeen <xref href=\"System.Type\"></xref> objects that specify the type arguments for the `System.Func` delegate type."}],"pos":[486410,486549],"yaml":true},{"content":"The type of a <code>System.Func</code> delegate that has the specified type arguments.","nodes":[{"pos":[0,86],"content":"The type of a <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">System.Func</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate that has the specified type arguments.","source":"The type of a <code>System.Func</code> delegate that has the specified type arguments."}],"pos":[486604,486691],"yaml":true},{"content":"<code>typeArgs</code> contains fewer than one or more than seventeen elements.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;typeArgs&lt;/code&gt;</ph> contains fewer than one or more than seventeen elements.","source":"<code>typeArgs</code> contains fewer than one or more than seventeen elements."}],"pos":[486859,486938],"yaml":true},{"content":"<code>typeArgs</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;typeArgs&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeArgs</code> is `null`."}],"pos":[487040,487073],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement with the specified type. The value passed to the label upon jumping can be specified.","nodes":[{"pos":[0,188],"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement with the specified type. The value passed to the label upon jumping can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a \"go to\" statement with the specified type.","pos":[0,127],"source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement with the specified type."},{"content":"The value passed to the label upon jumping can be specified.","pos":[128,188]}]}],"pos":[488842,489031],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[489311,489455],"yaml":true},{"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"pos":[0,67],"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"content":"The value that will be passed to the associated label upon jumping.","pos":[0,67]}]}],"pos":[489537,489605],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[489663,489790],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.","nodes":[{"pos":[0,424],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Goto, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, the <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph7\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping."}],"pos":[489872,490297],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement with the specified type.","nodes":[{"pos":[0,127],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a \"go to\" statement with the specified type.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement with the specified type."}],"pos":[491973,492101],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[492339,492483],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[492541,492668],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to the specified value, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.","nodes":[{"pos":[0,418],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Goto, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to the specified value, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and a null value to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to the specified value, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping."}],"pos":[492750,493169],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement.","nodes":[{"pos":[0,103],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a \"go to\" statement.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement."}],"pos":[494791,494895],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[495629,495773],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to the specified value, and a null value to be passed to the target label upon jumping.","nodes":[{"pos":[0,318],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Goto, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to the specified value, and a null value to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to the specified value, and a null value to be passed to the target label upon jumping."}],"pos":[495855,496174],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement. The value passed to the label upon jumping can be specified.","nodes":[{"pos":[0,164],"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement. The value passed to the label upon jumping can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a \"go to\" statement.","pos":[0,103],"source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement."},{"content":"The value passed to the label upon jumping can be specified.","pos":[104,164]}]}],"pos":[497937,498102],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[498371,498515],"yaml":true},{"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"pos":[0,67],"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"content":"The value that will be passed to the associated label upon jumping.","pos":[0,67]}]}],"pos":[498597,498665],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.","nodes":[{"pos":[0,324],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Goto, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping."}],"pos":[498747,499072],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than\" numeric comparison.","nodes":[{"pos":[0,124],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \"greater than\" numeric comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than\" numeric comparison."}],"pos":[500893,501018],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"pos":[0,580],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[264,370],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[371,396],"source":" Otherwise, it is `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id=\"ph2\">`false`</ph>.","pos":[397,494],"source":" The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[495,580],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[587,692],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[703,722],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[726,798],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[808,1072],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"greater than\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1082,1178],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1189,1227],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1231,1272],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1282,1484],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1494,1610],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>:","pos":[0,116],"source":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:"}]},{"pos":[1624,1822],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1836,1904],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[1911,1948],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1958,2083],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2093,2210],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[71,117],"source":" The type of the node is <xref:System.Boolean>."}]}],"pos":[501029,503270],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[503991,504147],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[504229,504386],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,418],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[504470,504889],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[505065,505116],"yaml":true},{"content":"The \"greater than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,98],"content":"The \"greater than\" operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The \"greater than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[505226,505325],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than\" numeric comparison. The implementing method can be specified.","nodes":[{"pos":[0,166],"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than\" numeric comparison. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \"greater than\" numeric comparison.","pos":[0,124],"source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than\" numeric comparison."},{"content":"The implementing method can be specified.","pos":[125,166]}]}],"pos":[507271,507438],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation :  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"pos":[0,598],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id=\"ph4\">`liftToNull`</ph>.","pos":[264,478],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`."},{"content":"Otherwise, they are both <ph id=\"ph1\">`false`</ph>.","pos":[479,512],"source":" Otherwise, they are both `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[513,598],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[605,710],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[721,740],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[744,817],"content":"The following rules determine the implementing method for the operation :","nodes":[{"content":"The following rules determine the implementing method for the operation :","pos":[0,73]}]},{"pos":[827,982],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[992,1267],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"greater than\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1277,1373],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1384,1422],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1426,1467],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1477,1679],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1689,1895],"content":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>:","source":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:"},{"pos":[1909,2107],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2121,2189],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[2196,2233],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2243,2368],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2378,2582],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>.","pos":[71,204],"source":" The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."}]}],"pos":[507449,510064],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[510390,510546],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[510628,510785],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[510852,511060],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[511137,511288],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,567],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[511372,511940],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[512116,512167],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[512261,512424],"yaml":true},{"content":"<code>method</code> is `null` and the \"greater than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the \"greater than\" operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the \"greater than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[512534,512667],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than or equal\" numeric comparison.","nodes":[{"pos":[0,133],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \"greater than or equal\" numeric comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than or equal\" numeric comparison."}],"pos":[514460,514594],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"pos":[0,580],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[264,370],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[371,396],"source":" Otherwise, it is `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id=\"ph2\">`false`</ph>.","pos":[397,494],"source":" The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[495,580],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[587,692],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[703,722],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[726,798],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[808,1081],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"greater than or equal\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1091,1187],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1198,1236],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1240,1281],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1291,1493],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1503,1619],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>:","pos":[0,116],"source":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:"}]},{"pos":[1633,1831],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1845,1913],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[1920,1957],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1967,2092],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2102,2219],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[71,117],"source":" The type of the node is <xref:System.Boolean>."}]}],"pos":[514605,516855],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[517583,517739],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[517821,517978],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,425],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[518062,518488],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[518671,518722],"yaml":true},{"content":"The \"greater than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,107],"content":"The \"greater than or equal\" operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The \"greater than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[518832,518940],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than or equal\" numeric comparison.","nodes":[{"pos":[0,133],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \"greater than or equal\" numeric comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than or equal\" numeric comparison."}],"pos":[520906,521040],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"pos":[0,598],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id=\"ph4\">`liftToNull`</ph>.","pos":[264,478],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`."},{"content":"Otherwise, they are both <ph id=\"ph1\">`false`</ph>.","pos":[479,512],"source":" Otherwise, they are both `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[513,598],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[605,710],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[721,740],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[744,816],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[826,981],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[991,1275],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"greater than or equal\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1285,1381],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1392,1430],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1434,1475],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1485,1687],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1697,1903],"content":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>:","source":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:"},{"pos":[1917,2115],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2129,2197],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[2204,2241],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2251,2376],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2386,2590],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>.","pos":[71,204],"source":" The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."}]}],"pos":[521051,523674],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[524007,524163],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[524245,524402],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[524469,524677],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[524754,524905],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,574],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[524989,525564],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[525747,525798],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[525892,526055],"yaml":true},{"content":"<code>method</code> is `null` and the \"greater than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the \"greater than or equal\" operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the \"greater than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[526165,526307],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional block with an `if` statement.","nodes":[{"pos":[0,136],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional block with an <ph id=\"ph2\">`if`</ph> statement.","source":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional block with an `if` statement."}],"pos":[528028,528165],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.","nodes":[{"pos":[0,160],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to."}],"pos":[528910,529071],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.","nodes":[{"pos":[0,162],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to."}],"pos":[529154,529317],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, properties set to the specified values. The <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property is set to default expression and the type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>.","nodes":[{"pos":[0,707],"content":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, properties set to the specified values. The <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property is set to default expression and the type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph>, properties set to the specified values.","pos":[0,432],"source":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, properties set to the specified values."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"&gt;&lt;/xref&gt;</ph> property is set to default expression and the type of the resulting <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> returned by this method is <ph id=\"ph3\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","pos":[433,707],"source":" The <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property is set to default expression and the type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>."}]}],"pos":[529406,530114],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional block with `if` and `else` statements.","nodes":[{"pos":[0,145],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional block with <ph id=\"ph2\">`if`</ph> and <ph id=\"ph3\">`else`</ph> statements.","source":"Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional block with `if` and `else` statements."}],"pos":[532072,532218],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.","nodes":[{"pos":[0,160],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to."}],"pos":[533011,533172],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.","nodes":[{"pos":[0,162],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to."}],"pos":[533255,533418],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to.","nodes":[{"pos":[0,163],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to."}],"pos":[533502,533666],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values. The type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>.","nodes":[{"pos":[0,665],"content":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values. The type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","pos":[0,511],"source":"A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values."},{"content":"The type of the resulting <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ConditionalExpression\"&gt;&lt;/xref&gt;</ph> returned by this method is <ph id=\"ph2\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>.","pos":[512,665],"source":" The type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>."}]}],"pos":[533755,534421],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incrementing of the expression by 1.","nodes":[{"pos":[0,127],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the incrementing of the expression by 1.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incrementing of the expression by 1."}],"pos":[536218,536346],"yaml":true},{"content":"This expression is functional and does not change the value of the object that is passed to it.","nodes":[{"pos":[0,95],"content":"This expression is functional and does not change the value of the object that is passed to it.","nodes":[{"content":"This expression is functional and does not change the value of the object that is passed to it.","pos":[0,95]}]}],"pos":[536357,536453],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to increment.","nodes":[{"pos":[0,72],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to increment.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to increment."}],"pos":[536729,536802],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[536879,536972],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incremented expression.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the incremented expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incremented expression."}],"pos":[537055,537162],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incrementing of the expression value by 1.","nodes":[{"pos":[0,133],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the incrementing of the expression value by 1.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incrementing of the expression value by 1."}],"pos":[538835,538969],"yaml":true},{"content":"This expression is functional and does not change the value of the object that is passed to it.","nodes":[{"pos":[0,95],"content":"This expression is functional and does not change the value of the object that is passed to it.","nodes":[{"content":"This expression is functional and does not change the value of the object that is passed to it.","pos":[0,95]}]}],"pos":[538980,539076],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to increment.","nodes":[{"pos":[0,72],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to increment.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to increment."}],"pos":[539776,539849],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incremented expression.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the incremented expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incremented expression."}],"pos":[539932,540039],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies a delegate or lambda expression to a list of argument expressions.","nodes":[{"pos":[0,156],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.InvocationExpression\"&gt;&lt;/xref&gt;</ph> that applies a delegate or lambda expression to a list of argument expressions.","source":"Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies a delegate or lambda expression to a list of argument expressions."}],"pos":[541825,541982],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.  \n  \n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","nodes":[{"pos":[0,216],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> represents the return type of the delegate that is represented by <ph id=\"ph3\">`expression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type."},{"pos":[223,553],"content":"The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.InvocationExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> is empty if <ph id=\"ph3\">`arguments`</ph> is <ph id=\"ph4\">`null`</ph>.","pos":[0,181],"source":"The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`."},{"content":"Otherwise, it contains the same elements as <ph id=\"ph1\">`arguments`</ph> except that some of these <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> objects may be <bpt id=\"p1\">*</bpt>quoted<ept id=\"p1\">*</ept>.","pos":[182,330],"source":" Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*."}]},{"pos":[561,1006],"content":"[!NOTE]\n An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","pos":[8,443],"nodes":[{"content":"An element will be quoted only if the corresponding parameter of the delegate represented by <ph id=\"ph1\">`expression`</ph> is of type <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,160],"source":" An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[161,260],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`arguments`</ph>.","pos":[261,435],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."}]}]}],"pos":[541993,543007],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the delegate or lambda expression to be applied.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the delegate or lambda expression to be applied.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the delegate or lambda expression to be applied."}],"pos":[543972,544096],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.","nodes":[{"pos":[0,158],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects that represent the arguments that the delegate or lambda expression is applied to.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to."}],"pos":[544184,544343],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies the specified delegate or lambda expression to the provided arguments.","nodes":[{"pos":[0,152],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.InvocationExpression\"&gt;&lt;/xref&gt;</ph> that applies the specified delegate or lambda expression to the provided arguments.","source":"An <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies the specified delegate or lambda expression to the provided arguments."}],"pos":[544431,544584],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[544755,544790],"yaml":true},{"content":"<code>expression</code>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\"></xref>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type does not represent a delegate type or an <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>expression</code>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\"></xref>."},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,376],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the delegate represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>."}],"pos":[544884,545271],"yaml":true},{"content":"<code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.","nodes":[{"pos":[0,150],"content":"<ph id=\"ph1\">&lt;code&gt;arguments&lt;/code&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate represented by <ph id=\"ph2\">&lt;code&gt;expression&lt;/code&gt;</ph>.","source":"<code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>."}],"pos":[545381,545532],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies a delegate or lambda expression to a list of argument expressions.","nodes":[{"pos":[0,156],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.InvocationExpression\"&gt;&lt;/xref&gt;</ph> that applies a delegate or lambda expression to a list of argument expressions.","source":"Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies a delegate or lambda expression to a list of argument expressions."}],"pos":[547412,547569],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.  \n  \n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","nodes":[{"pos":[0,216],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> represents the return type of the delegate that is represented by <ph id=\"ph3\">`expression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type."},{"pos":[223,553],"content":"The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.InvocationExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.InvocationExpression&gt;</ph> is empty if <ph id=\"ph3\">`arguments`</ph> is <ph id=\"ph4\">`null`</ph>.","pos":[0,181],"source":"The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`."},{"content":"Otherwise, it contains the same elements as <ph id=\"ph1\">`arguments`</ph> except that some of these <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> objects may be <bpt id=\"p1\">*</bpt>quoted<ept id=\"p1\">*</ept>.","pos":[182,330],"source":" Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*."}]},{"pos":[561,1006],"content":"[!NOTE]\n An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.","pos":[8,443],"nodes":[{"content":"An element will be quoted only if the corresponding parameter of the delegate represented by <ph id=\"ph1\">`expression`</ph> is of type <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,160],"source":" An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[161,260],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`arguments`</ph>.","pos":[261,435],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`."}]}]}],"pos":[547580,548594],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the delegate or lambda expression to be applied to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the delegate or lambda expression to be applied to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the delegate or lambda expression to be applied to."}],"pos":[549597,549724],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.","nodes":[{"pos":[0,225],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects that represent the arguments that the delegate or lambda expression is applied to.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to."}],"pos":[549850,550076],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies the specified delegate or lambda expression to the provided arguments.","nodes":[{"pos":[0,152],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.InvocationExpression\"&gt;&lt;/xref&gt;</ph> that applies the specified delegate or lambda expression to the provided arguments.","source":"An <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies the specified delegate or lambda expression to the provided arguments."}],"pos":[550164,550317],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[550488,550523],"yaml":true},{"content":"<code>expression</code>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\"></xref>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type does not represent a delegate type or an <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph>.","source":"<code>expression</code>.Type does not represent a delegate type or an <xref href=\"System.Linq.Expressions.Expression`1\"></xref>."},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,376],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the delegate represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>."}],"pos":[550617,551004],"yaml":true},{"content":"<code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.","nodes":[{"pos":[0,150],"content":"<ph id=\"ph1\">&lt;code&gt;arguments&lt;/code&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate represented by <ph id=\"ph2\">&lt;code&gt;expression&lt;/code&gt;</ph>.","source":"<code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>."}],"pos":[551114,551265],"yaml":true},{"content":"Returns whether the expression evaluates to false.","nodes":[{"pos":[0,50],"content":"Returns whether the expression evaluates to false.","nodes":[{"content":"Returns whether the expression evaluates to false.","pos":[0,50]}]}],"pos":[552851,552902],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to evaluate.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate."}],"pos":[553139,553211],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>."}],"pos":[553294,553371],"yaml":true},{"content":"Returns whether the expression evaluates to false.","nodes":[{"pos":[0,50],"content":"Returns whether the expression evaluates to false.","nodes":[{"content":"Returns whether the expression evaluates to false.","pos":[0,50]}]}],"pos":[555153,555204],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to evaluate.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate."}],"pos":[555478,555550],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[555627,555720],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>."}],"pos":[555803,555880],"yaml":true},{"content":"Returns whether the expression evaluates to true.","nodes":[{"pos":[0,49],"content":"Returns whether the expression evaluates to true.","nodes":[{"content":"Returns whether the expression evaluates to true.","pos":[0,49]}]}],"pos":[557533,557583],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to evaluate.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate."}],"pos":[557819,557891],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>."}],"pos":[557974,558051],"yaml":true},{"content":"Returns whether the expression evaluates to true.","nodes":[{"pos":[0,49],"content":"Returns whether the expression evaluates to true.","nodes":[{"content":"Returns whether the expression evaluates to true.","pos":[0,49]}]}],"pos":[559826,559876],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to evaluate.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate."}],"pos":[560149,560221],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[560298,560391],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>."}],"pos":[560474,560551],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with void type and no name.","nodes":[{"pos":[0,115],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> representing a label with void type and no name.","source":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with void type and no name."}],"pos":[562059,562175],"yaml":true},{"content":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.","nodes":[{"pos":[0,65],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph>.","source":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>."}],"pos":[562860,562926],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> representing a label without a default value.","nodes":[{"pos":[0,116],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelExpression\"&gt;&lt;/xref&gt;</ph> representing a label without a default value.","source":"Creates a <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> representing a label without a default value."}],"pos":[564577,564694],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> will be associated with.","nodes":[{"pos":[0,157],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> which this <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LabelExpression\"&gt;&lt;/xref&gt;</ph> will be associated with.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> will be associated with."}],"pos":[564923,565081],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> without a default value.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelExpression\"&gt;&lt;/xref&gt;</ph> without a default value.","source":"A <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> without a default value."}],"pos":[565164,565252],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with void type and the given name.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> representing a label with void type and the given name.","source":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with void type and the given name."}],"pos":[566822,566945],"yaml":true},{"content":"The name of the label.","nodes":[{"pos":[0,22],"content":"The name of the label.","nodes":[{"content":"The name of the label.","pos":[0,22]}]}],"pos":[567115,567138],"yaml":true},{"content":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.","nodes":[{"pos":[0,65],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph>.","source":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>."}],"pos":[567217,567283],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with the given type.","nodes":[{"pos":[0,108],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> representing a label with the given type.","source":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with the given type."}],"pos":[568841,568950],"yaml":true},{"content":"The type of value that is passed when jumping to the label.","nodes":[{"pos":[0,59],"content":"The type of value that is passed when jumping to the label.","nodes":[{"content":"The type of value that is passed when jumping to the label.","pos":[0,59]}]}],"pos":[569610,569670],"yaml":true},{"content":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.","nodes":[{"pos":[0,65],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph>.","source":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>."}],"pos":[569749,569815],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> representing a label with the given default value.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelExpression\"&gt;&lt;/xref&gt;</ph> representing a label with the given default value.","source":"Creates a <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> representing a label with the given default value."}],"pos":[571585,571707],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> will be associated with.","nodes":[{"pos":[0,157],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> which this <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LabelExpression\"&gt;&lt;/xref&gt;</ph> will be associated with.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> will be associated with."}],"pos":[571985,572143],"yaml":true},{"content":"The value of this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> when the label is reached through regular control flow.","nodes":[{"pos":[0,134],"content":"The value of this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelExpression\"&gt;&lt;/xref&gt;</ph> when the label is reached through regular control flow.","source":"The value of this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> when the label is reached through regular control flow."}],"pos":[572232,572367],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> with the given default value.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelExpression\"&gt;&lt;/xref&gt;</ph> with the given default value.","source":"A <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> with the given default value."}],"pos":[572450,572543],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with the given type and name.","nodes":[{"pos":[0,117],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> representing a label with the given type and name.","source":"Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with the given type and name."}],"pos":[574167,574285],"yaml":true},{"content":"The type of value that is passed when jumping to the label.","nodes":[{"pos":[0,59],"content":"The type of value that is passed when jumping to the label.","nodes":[{"content":"The type of value that is passed when jumping to the label.","pos":[0,59]}]}],"pos":[574464,574524],"yaml":true},{"content":"The name of the label.","nodes":[{"pos":[0,22],"content":"The name of the label.","nodes":[{"content":"The name of the label.","pos":[0,22]}]}],"pos":[574584,574607],"yaml":true},{"content":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.","nodes":[{"pos":[0,65],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph>.","source":"The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>."}],"pos":[574686,574752],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[576949,577015],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> representing the delegate signature for the lambda.","source":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda."}],"pos":[577368,577483],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[577564,577720],"yaml":true},{"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"pos":[0,61],"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"content":"The name for the lambda. Used for emitting debug information.","pos":[0,61],"nodes":[{"content":"The name for the lambda.","pos":[0,24]},{"content":"Used for emitting debug information.","pos":[25,61]}]}]}],"pos":[577780,577842],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[577907,578041],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[578177,578437],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[578521,578886],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[581012,581078],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> representing the delegate signature for the lambda.","source":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda."}],"pos":[581416,581531],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[581612,581768],"yaml":true},{"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"pos":[0,61],"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"content":"The name for the lambda. Used for emitting debug information.","pos":[0,61],"nodes":[{"content":"The name for the lambda.","pos":[0,24]},{"content":"Used for emitting debug information.","pos":[25,61]}]}]}],"pos":[581828,581890],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[582026,582286],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[582370,582735],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[584867,584933],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> representing the delegate signature for the lambda.","source":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda."}],"pos":[585273,585388],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[585469,585625],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[585690,585824],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[585960,586220],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[586304,586669],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[588813,588879],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[589228,589384],"yaml":true},{"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"pos":[0,61],"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"content":"The name for the lambda. Used for emitting debug information.","pos":[0,61],"nodes":[{"content":"The name for the lambda.","pos":[0,24]},{"content":"Used for emitting debug information.","pos":[25,61]}]}]}],"pos":[589444,589506],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[589571,589705],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[589841,590101],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[590185,590550],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.","nodes":[{"pos":[0,178],"content":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> by first constructing a delegate type.","pos":[0,110],"source":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type."},{"content":"It can be used when the delegate type is not known at compile time.","pos":[111,178]}]}],"pos":[592463,592642],"yaml":true},{"content":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \n  \n The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"pos":[0,283],"content":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.","nodes":[{"content":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.","pos":[0,283],"nodes":[{"content":"The object that is returned from this function is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[0,104],"source":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.","pos":[105,283],"source":" The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time."}]}]},{"pos":[290,405],"content":"The number of parameters for the delegate type represented by <ph id=\"ph1\">`delegateType`</ph> must equal the length of <ph id=\"ph2\">`parameters`</ph>.","source":"The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`."},{"pos":[412,504],"content":"The elements of <ph id=\"ph1\">`parameters`</ph> must be reference equal to the parameter expressions in <ph id=\"ph2\">`body`</ph>.","source":"The elements of `parameters` must be reference equal to the parameter expressions in `body`."},{"pos":[511,775],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object is equal to <ph id=\"ph2\">`delegateType`</ph>.","pos":[0,114],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`."},{"content":"If <ph id=\"ph1\">`parameters`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.","pos":[115,264],"source":" If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."}]}],"pos":[592653,593437],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents a delegate signature for the lambda.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents a delegate signature for the lambda.","source":"A <xref href=\"System.Type\"></xref> that represents a delegate signature for the lambda."}],"pos":[593724,593812],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[593893,594049],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,192],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[594147,594340],"yaml":true},{"content":"An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,401],"content":"An object that represents a lambda expression which has the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[594424,594826],"yaml":true},{"content":"<code>delegateType</code> or <code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;delegateType&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;body&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>delegateType</code> or <code>body</code> is `null`."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,134],"content":"One or more elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements in <code>parameters</code> are `null`."}],"pos":[594997,595138],"yaml":true},{"content":"<code>delegateType</code> does not represent a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">&lt;code&gt;delegateType&lt;/code&gt;</ph> does not represent a delegate type.","source":"<code>delegateType</code> does not represent a delegate type."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,224],"content":"<ph id=\"ph1\">&lt;code&gt;body&lt;/code&gt;</ph>.Type represents a type that is not assignable to the return type of the delegate type represented by <ph id=\"ph2\">&lt;code&gt;delegateType&lt;/code&gt;</ph>.","source":"<code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>."},{"pos":[231,235],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[242,400],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate type represented by <ph id=\"ph2\">&lt;code&gt;delegateType&lt;/code&gt;</ph>.","source":"<code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>."},{"pos":[407,411],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[418,663],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable from the type of the corresponding parameter type of the delegate type represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">delegateType</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>."}],"pos":[595232,595912],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[597825,597891],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> representing the delegate signature for the lambda.","source":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda."}],"pos":[598193,598308],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[598389,598545],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[598610,598744],"yaml":true},{"content":"An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,203],"content":"An array that contains <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[598842,599046],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[599130,599495],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[601567,601633],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[601967,602123],"yaml":true},{"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"pos":[0,61],"content":"The name for the lambda. Used for emitting debug information.","nodes":[{"content":"The name for the lambda. Used for emitting debug information.","pos":[0,61],"nodes":[{"content":"The name for the lambda.","pos":[0,24]},{"content":"Used for emitting debug information.","pos":[25,61]}]}]}],"pos":[602183,602245],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[602381,602641],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[602725,603090],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[605021,605087],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[605385,605541],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[605606,605740],"yaml":true},{"content":"An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,203],"content":"An array that contains <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[605838,606042],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[606126,606491],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[608569,608635],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[608971,609127],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[609192,609326],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[609462,609722],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[609806,610171],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.","nodes":[{"pos":[0,178],"content":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> by first constructing a delegate type.","pos":[0,110],"source":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type."},{"content":"It can be used when the delegate type is not known at compile time.","pos":[111,178]}]}],"pos":[612231,612410],"yaml":true},{"content":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \n  \n The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"pos":[0,283],"content":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.","nodes":[{"content":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.","pos":[0,283],"nodes":[{"content":"The object that is returned from this function is of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[0,104],"source":"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.","pos":[105,283],"source":" The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time."}]}]},{"pos":[290,404],"content":"The number of parameters for the delegate type represented by<ph id=\"ph1\">`delegateType`</ph> must equal the length of <ph id=\"ph2\">`parameters`</ph>.","source":"The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`."},{"pos":[411,503],"content":"The elements of <ph id=\"ph1\">`parameters`</ph> must be reference equal to the parameter expressions in <ph id=\"ph2\">`body`</ph>.","source":"The elements of `parameters` must be reference equal to the parameter expressions in `body`."},{"pos":[510,774],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object is equal to <ph id=\"ph2\">`delegateType`</ph>.","pos":[0,114],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`."},{"content":"If <ph id=\"ph1\">`parameters`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.","pos":[115,264],"source":" If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."}]}],"pos":[612421,613204],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents a delegate signature for the lambda.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents a delegate signature for the lambda.","source":"A <xref href=\"System.Type\"></xref> that represents a delegate signature for the lambda."}],"pos":[614024,614112],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[614193,614349],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[614485,614745],"yaml":true},{"content":"An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,401],"content":"An object that represents a lambda expression which has the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[614829,615231],"yaml":true},{"content":"<code>delegateType</code> or <code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;delegateType&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;body&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>delegateType</code> or <code>body</code> is `null`."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,134],"content":"One or more elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements in <code>parameters</code> are `null`."}],"pos":[615402,615543],"yaml":true},{"content":"<code>delegateType</code> does not represent a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">&lt;code&gt;delegateType&lt;/code&gt;</ph> does not represent a delegate type.","source":"<code>delegateType</code> does not represent a delegate type."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,224],"content":"<ph id=\"ph1\">&lt;code&gt;body&lt;/code&gt;</ph>.Type represents a type that is not assignable to the return type of the delegate type represented by <ph id=\"ph2\">&lt;code&gt;delegateType&lt;/code&gt;</ph>.","source":"<code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>."},{"pos":[231,235],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[242,400],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> does not contain the same number of elements as the list of parameters for the delegate type represented by <ph id=\"ph2\">&lt;code&gt;delegateType&lt;/code&gt;</ph>.","source":"<code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>."},{"pos":[407,411],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[418,663],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable from the type of the corresponding parameter type of the delegate type represented by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">delegateType</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>."}],"pos":[615637,616317],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type.","nodes":[{"pos":[0,110],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> by first constructing a delegate type.","source":"Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type."}],"pos":[618104,618215],"yaml":true},{"content":"The `parameters` parameter must not have more than sixteen elements.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n This method constructs an appropriate delegate type from one of the `System.Func` generic delegates. It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">`parameters`</ph> parameter must not have more than sixteen elements.","source":"The `parameters` parameter must not have more than sixteen elements."},{"pos":[75,167],"content":"The elements of <ph id=\"ph1\">`parameters`</ph> must be reference equal to the parameter expressions in <ph id=\"ph2\">`body`</ph>.","source":"The elements of `parameters` must be reference equal to the parameter expressions in `body`."},{"pos":[174,451],"content":"This method constructs an appropriate delegate type from one of the `System.Func` generic delegates. It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.","nodes":[{"content":"This method constructs an appropriate delegate type from one of the <ph id=\"ph1\">`System.Func`</ph> generic delegates.","pos":[0,100],"source":"This method constructs an appropriate delegate type from one of the `System.Func` generic delegates."},{"content":"It then passes the delegate type to one of the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph> factory methods to create a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.LambdaExpression&gt;</ph>.","pos":[101,277],"source":" It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>."}]}],"pos":[618226,618684],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[618967,619123],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,192],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[619221,619414],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,418],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[619498,619917],"yaml":true},{"content":"<code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>parameters</code> are `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;body&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>body</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,105],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>parameters</code> are `null`."}],"pos":[620088,620200],"yaml":true},{"content":"<code>parameters</code> contains more than sixteen elements.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> contains more than sixteen elements.","source":"<code>parameters</code> contains more than sixteen elements."}],"pos":[620294,620355],"yaml":true},{"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"pos":[0,65],"content":"Creates a LambdaExpression by first constructing a delegate type.","nodes":[{"content":"Creates a LambdaExpression by first constructing a delegate type.","pos":[0,65]}]}],"pos":[622289,622355],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[622676,622832],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[622968,623228],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,364],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to Lambda and the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[623312,623677],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.","nodes":[{"pos":[0,118],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> where the delegate type is known at compile time.","source":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time."}],"pos":[625791,625910],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[626260,626416],"yaml":true},{"content":"The name of the lambda. Used for generating debugging information.","nodes":[{"pos":[0,66],"content":"The name of the lambda. Used for generating debugging information.","nodes":[{"content":"The name of the lambda. Used for generating debugging information.","pos":[0,66],"nodes":[{"content":"The name of the lambda.","pos":[0,23]},{"content":"Used for generating debugging information.","pos":[24,66]}]}]}],"pos":[626476,626543],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[626679,626939],"yaml":true},{"content":"The delegate type.","nodes":[{"pos":[0,18],"content":"The delegate type.","nodes":[{"content":"The delegate type.","pos":[0,18]}]}],"pos":[626998,627017],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[627097,627513],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.","nodes":[{"pos":[0,118],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> where the delegate type is known at compile time.","source":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time."}],"pos":[629467,629586],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[629900,630056],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[630121,630255],"yaml":true},{"content":"An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,203],"content":"An array that contains <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[630353,630557],"yaml":true},{"content":"The delegate type.","nodes":[{"pos":[0,18],"content":"The delegate type.","nodes":[{"content":"The delegate type.","pos":[0,18]}]}],"pos":[630616,630635],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[630715,631131],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.","nodes":[{"pos":[0,118],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> where the delegate type is known at compile time.","source":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time."}],"pos":[633320,633439],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[633804,633960],"yaml":true},{"content":"The name of the lambda. Used for generating debugging info.","nodes":[{"pos":[0,59],"content":"The name of the lambda. Used for generating debugging info.","nodes":[{"content":"The name of the lambda. Used for generating debugging info.","pos":[0,59],"nodes":[{"content":"The name of the lambda.","pos":[0,23]},{"content":"Used for generating debugging info.","pos":[24,59]}]}]}],"pos":[634020,634080],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[634145,634279],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[634415,634675],"yaml":true},{"content":"The delegate type.","nodes":[{"pos":[0,18],"content":"The delegate type.","nodes":[{"content":"The delegate type.","pos":[0,18]}]}],"pos":[634734,634753],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,421],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[634833,635255],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.","nodes":[{"pos":[0,118],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> where the delegate type is known at compile time.","source":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time."}],"pos":[637159,637278],"yaml":true},{"content":"The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in`body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"pos":[0,109],"content":"The number of parameters for the delegate type <ph id=\"ph1\">`TDelegate`</ph> must equal the number of elements in <ph id=\"ph2\">`parameters`</ph>.","source":"The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`."},{"pos":[116,207],"content":"The elements of <ph id=\"ph1\">`parameters`</ph> must be reference equal to the parameter expressions in<ph id=\"ph2\">`body`</ph>.","source":"The elements of `parameters` must be reference equal to the parameter expressions in`body`."},{"pos":[214,483],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object represents the type <ph id=\"ph2\">`TDelegate`</ph>.","pos":[0,119],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`."},{"content":"If <ph id=\"ph1\">`parameters`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.","pos":[120,269],"source":" If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."}]}],"pos":[637289,637779],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[638078,638234],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,192],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[638332,638525],"yaml":true},{"content":"A delegate type.","nodes":[{"pos":[0,16],"content":"A delegate type.","nodes":[{"content":"A delegate type.","pos":[0,16]}]}],"pos":[638584,638601],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[638681,639097],"yaml":true},{"content":"<code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;body&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>body</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,105],"content":"One or more elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements in <code>parameters</code> are `null`."}],"pos":[639271,639383],"yaml":true},{"content":"<code>TDelegate</code> is not a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;TDelegate&lt;/code&gt;</ph> is not a delegate type.","source":"<code>TDelegate</code> is not a delegate type."},{"pos":[53,57],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[64,173],"content":"<ph id=\"ph1\">&lt;code&gt;body&lt;/code&gt;</ph>.Type represents a type that is not assignable to the return type of <ph id=\"ph2\">&lt;code&gt;TDelegate&lt;/code&gt;</ph>.","source":"<code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>."},{"pos":[180,184],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[191,313],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> does not contain the same number of elements as the list of parameters for <ph id=\"ph2\">&lt;code&gt;TDelegate&lt;/code&gt;</ph>.","source":"<code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>."},{"pos":[320,324],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[331,540],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable from the type of the corresponding parameter type of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">TDelegate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>."}],"pos":[639477,640034],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.","nodes":[{"pos":[0,118],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> where the delegate type is known at compile time.","source":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time."}],"pos":[642010,642129],"yaml":true},{"content":"The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.  \n  \n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"pos":[0,109],"content":"The number of parameters for the delegate type <ph id=\"ph1\">`TDelegate`</ph> must equal the number of elements in <ph id=\"ph2\">`parameters`</ph>.","source":"The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`."},{"pos":[116,208],"content":"The elements of <ph id=\"ph1\">`parameters`</ph> must be reference equal to the parameter expressions in <ph id=\"ph2\">`body`</ph>.","source":"The elements of `parameters` must be reference equal to the parameter expressions in `body`."},{"pos":[215,484],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting object represents the type <ph id=\"ph2\">`TDelegate`</ph>.","pos":[0,119],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`."},{"content":"If <ph id=\"ph1\">`parameters`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt;</ph> property of the resulting object is an empty collection.","pos":[120,269],"source":" If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."}]}],"pos":[642140,642631],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[642968,643124],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[643260,643520],"yaml":true},{"content":"A delegate type.","nodes":[{"pos":[0,16],"content":"A delegate type.","nodes":[{"content":"A delegate type.","pos":[0,16]}]}],"pos":[643579,643596],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[643676,644092],"yaml":true},{"content":"<code>body</code> is `null`.  \n  \n -or-  \n  \n One or more elements in <code>parameters</code> are `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;body&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>body</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,105],"content":"One or more elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements in <code>parameters</code> are `null`."}],"pos":[644266,644378],"yaml":true},{"content":"<code>TDelegate</code> is not a delegate type.  \n  \n -or-  \n  \n <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  \n  \n -or-  \n  \n <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;TDelegate&lt;/code&gt;</ph> is not a delegate type.","source":"<code>TDelegate</code> is not a delegate type."},{"pos":[53,57],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[64,173],"content":"<ph id=\"ph1\">&lt;code&gt;body&lt;/code&gt;</ph>.Type represents a type that is not assignable to the return type of <ph id=\"ph2\">&lt;code&gt;TDelegate&lt;/code&gt;</ph>.","source":"<code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>."},{"pos":[180,184],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[191,313],"content":"<ph id=\"ph1\">&lt;code&gt;parameters&lt;/code&gt;</ph> does not contain the same number of elements as the list of parameters for <ph id=\"ph2\">&lt;code&gt;TDelegate&lt;/code&gt;</ph>.","source":"<code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>."},{"pos":[320,324],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[331,540],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable from the type of the corresponding parameter type of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">TDelegate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>."}],"pos":[644472,645029],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.","nodes":[{"pos":[0,118],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> where the delegate type is known at compile time.","source":"Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time."}],"pos":[647077,647196],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to."}],"pos":[647548,647704],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates if tail call optimization will be applied when compiling the created expression.","source":"A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression."}],"pos":[647769,647903],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.","nodes":[{"pos":[0,259],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection."}],"pos":[648039,648299],"yaml":true},{"content":"The delegate type.","nodes":[{"pos":[0,18],"content":"The delegate type.","nodes":[{"content":"The delegate type.","pos":[0,18]}]}],"pos":[648358,648377],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.","nodes":[{"pos":[0,421],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression`1\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Body\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values."}],"pos":[648457,648879],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift operation.","nodes":[{"pos":[0,119],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise left-shift operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift operation."}],"pos":[650693,650813],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1060],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the left-shift operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1070,1406],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type is an integral type (one of <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id=\"ph10\">`right`</ph>.Type is <ph id=\"ph11\">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id=\"ph12\">`null`</ph>.","source":"Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`."},{"pos":[1417,1455],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1459,1500],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1510,1712],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1722,1897],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1911,2109],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2123,2195],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2202,2239],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2249,2406],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined left-shift operator.","pos":[79,157]}]},{"pos":[2416,2603],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.","pos":[71,187]}]}],"pos":[650824,653456],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[653726,653882],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[653964,654121],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,416],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[654205,654622],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[654796,654847],"yaml":true},{"content":"The left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,94],"content":"The left-shift operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[654957,655052],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift operation.","nodes":[{"pos":[0,119],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise left-shift operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift operation."}],"pos":[656914,657034],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,968],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[978,1249],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the left-shift operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1259,1595],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type is an integral type (one of <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id=\"ph10\">`right`</ph>.Type is <ph id=\"ph11\">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id=\"ph12\">`null`</ph>.","source":"Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`."},{"pos":[1606,1644],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1648,1689],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1699,1901],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1911,2086],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[2100,2298],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2312,2384],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2391,2428],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2438,2595],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined left-shift operator.","pos":[79,157]}]},{"pos":[2605,2792],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.","pos":[71,187]}]}],"pos":[657045,659868],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[660175,660331],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[660413,660570],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[660647,660798],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,487],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[660882,661370],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[661544,661595],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[661689,661852],"yaml":true},{"content":"<code>method</code> is `null` and the left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the left-shift operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[661962,662091],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation.","nodes":[{"pos":[0,130],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise left-shift assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation."}],"pos":[663866,663997],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[664273,664429],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[664511,664668],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,422],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[664752,665175],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation.","nodes":[{"pos":[0,130],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise left-shift assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation."}],"pos":[667132,667263],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[667576,667732],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[667814,667971],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[668048,668199],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,493],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[668283,668777],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation.","nodes":[{"pos":[0,130],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise left-shift assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation."}],"pos":[670933,671064],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[671430,671586],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[671668,671825],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[671902,672053],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[672146,672313],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,567],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[672397,672965],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than\" numeric comparison.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \"less than\" numeric comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than\" numeric comparison."}],"pos":[674779,674901],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"pos":[0,580],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[264,370],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[371,396],"source":" Otherwise, it is `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id=\"ph2\">`false`</ph>.","pos":[397,494],"source":" The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[495,580],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[587,692],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[703,722],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[726,807],"content":"The implementing method for the operation is chosen based on the following rules:","nodes":[{"content":"The implementing method for the operation is chosen based on the following rules:","pos":[0,81]}]},{"pos":[817,1078],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"less than\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1088,1184],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1195,1233],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1237,1278],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1288,1490],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1500,1616],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>:","pos":[0,116],"source":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:"}]},{"pos":[1630,1828],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1842,1910],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[1917,1954],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1964,2089],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2099,2216],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[71,117],"source":" The type of the node is <xref:System.Boolean>."}]}],"pos":[674912,677159],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[677877,678033],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[678115,678272],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[678356,678772],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[678945,678996],"yaml":true},{"content":"The \"less than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,95],"content":"The \"less than\" operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The \"less than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[679106,679202],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than\" numeric comparison.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \"less than\" numeric comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than\" numeric comparison."}],"pos":[681108,681230],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"pos":[0,598],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id=\"ph4\">`liftToNull`</ph>.","pos":[264,478],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`."},{"content":"Otherwise, they are both <ph id=\"ph1\">`false`</ph>.","pos":[479,512],"source":" Otherwise, they are both `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[513,598],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[605,710],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[721,740],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[744,816],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[826,981],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[991,1263],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"less than\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1273,1369],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1380,1418],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1422,1463],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1473,1675],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1685,1891],"content":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>:","source":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:"},{"pos":[1905,2103],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2117,2185],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[2192,2229],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2239,2364],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2374,2578],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>.","pos":[71,204],"source":" The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."}]}],"pos":[681241,683852],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[684175,684331],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[684413,684570],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[684637,684845],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[684922,685073],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,564],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[685157,685722],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[685895,685946],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[686040,686203],"yaml":true},{"content":"<code>method</code> is `null` and the \"less than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the \"less than\" operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the \"less than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[686313,686443],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \" less than or equal\" numeric comparison.","nodes":[{"pos":[0,131],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \" less than or equal\" numeric comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \" less than or equal\" numeric comparison."}],"pos":[688218,688350],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"pos":[0,580],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[264,370],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[371,396],"source":" Otherwise, it is `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id=\"ph2\">`false`</ph>.","pos":[397,494],"source":" The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[495,580],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[587,692],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[703,722],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[726,798],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[808,1078],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"less than or equal\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1088,1184],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1195,1233],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1237,1278],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1288,1490],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1500,1616],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>:","pos":[0,116],"source":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:"}]},{"pos":[1630,1828],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1842,1910],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[1917,1954],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1964,2089],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2099,2216],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[71,117],"source":" The type of the node is <xref:System.Boolean>."}]}],"pos":[688361,690608],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[691333,691489],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[691571,691728],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,422],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[691812,692235],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[692415,692466],"yaml":true},{"content":"The \"less than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,104],"content":"The \"less than or equal\" operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The \"less than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[692576,692681],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than or equal\" numeric comparison.","nodes":[{"pos":[0,130],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a \"less than or equal\" numeric comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than or equal\" numeric comparison."}],"pos":[694651,694782],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"pos":[0,598],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id=\"ph4\">`liftToNull`</ph>.","pos":[264,478],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`."},{"content":"Otherwise, they are both <ph id=\"ph1\">`false`</ph>.","pos":[479,512],"source":" Otherwise, they are both `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[513,598],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[605,710],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[721,740],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[744,816],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[826,981],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[991,1272],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the \"less than or equal\" operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1282,1378],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1389,1427],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1431,1472],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1482,1684],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1694,1900],"content":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>:","source":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:"},{"pos":[1914,2112],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2126,2194],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[2201,2238],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2248,2373],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2383,2587],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>.","pos":[71,204],"source":" The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."}]}],"pos":[694793,697413],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[697743,697899],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[697981,698138],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[698205,698413],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[698490,698641],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,571],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[698725,699297],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[699477,699528],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[699622,699785],"yaml":true},{"content":"<code>method</code> is `null` and the \"less than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the \"less than or equal\" operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the \"less than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[699895,700034],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> object based on a specified property accessor method.","nodes":[{"pos":[0,126],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> object based on a specified property accessor method.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> object based on a specified property accessor method."}],"pos":[701767,701894],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents a property accessor method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method."}],"pos":[702186,702282],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.","nodes":[{"pos":[0,187],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection."}],"pos":[702374,702562],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> populated with the elements of <code>initializers</code>.","nodes":[{"pos":[0,592],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> that represents the property accessed in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph6\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> populated with the elements of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph8\">initializers</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> populated with the elements of <code>initializers</code>."}],"pos":[702647,703240],"yaml":true},{"content":"<code>propertyAccessor</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>propertyAccessor</code> is `null`."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,119],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[703413,703539],"yaml":true},{"content":"<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> does not represent a property accessor method.","source":"<code>propertyAccessor</code> does not represent a property accessor method."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,320],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo.PropertyType\"&gt;&lt;/xref&gt;</ph> of the property that the method represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept> accesses does not implement <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[703633,703964],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> based on a specified property accessor method.","nodes":[{"pos":[0,119],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> based on a specified property accessor method.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> based on a specified property accessor method."}],"pos":[705844,705964],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents a property accessor method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method."}],"pos":[706294,706390],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.","nodes":[{"pos":[0,254],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection."}],"pos":[706520,706775],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> populated with the elements of <code>initializers</code>.","nodes":[{"pos":[0,592],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> that represents the property accessed in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph6\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> populated with the elements of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph8\">initializers</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> populated with the elements of <code>initializers</code>."}],"pos":[706860,707453],"yaml":true},{"content":"<code>propertyAccessor</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>propertyAccessor</code> is `null`."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,119],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[707626,707752],"yaml":true},{"content":"<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> does not represent a property accessor method.","source":"<code>propertyAccessor</code> does not represent a property accessor method."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,320],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo.PropertyType\"&gt;&lt;/xref&gt;</ph> of the property that the method represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept> accesses does not implement <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[707846,708177],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> where the member is a field or property.","nodes":[{"pos":[0,113],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> where the member is a field or property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> where the member is a field or property."}],"pos":[710057,710171],"yaml":true},{"content":"A <xref href=\"System.Reflection.MemberInfo\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.","nodes":[{"pos":[0,183],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> that represents a field or property to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MemberInfo\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to."}],"pos":[710481,710665],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.","nodes":[{"pos":[0,254],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection."}],"pos":[710795,711050],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> properties set to the specified values.","nodes":[{"pos":[0,435],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> properties set to the specified values."}],"pos":[711135,711571],"yaml":true},{"content":"<code>member</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>member</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,109],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[711744,711860],"yaml":true},{"content":"<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.FieldInfo.FieldType\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> does not represent a field or property.","source":"<code>member</code> does not represent a field or property."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,340],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo.FieldType\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Reflection.PropertyInfo.PropertyType\"&gt;&lt;/xref&gt;</ph> of the field or property that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">member</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents does not implement <ph id=\"ph4\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Reflection.FieldInfo.FieldType\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[711954,712307],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> where the member is a field or property.","nodes":[{"pos":[0,113],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> where the member is a field or property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> where the member is a field or property."}],"pos":[714040,714154],"yaml":true},{"content":"A <xref href=\"System.Reflection.MemberInfo\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.","nodes":[{"pos":[0,183],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> that represents a field or property to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MemberInfo\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to."}],"pos":[714426,714610],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.","nodes":[{"pos":[0,187],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection."}],"pos":[714702,714890],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> properties set to the specified values.","nodes":[{"pos":[0,435],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> properties set to the specified values."}],"pos":[714975,715411],"yaml":true},{"content":"<code>member</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>member</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,109],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[715584,715700],"yaml":true},{"content":"<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.FieldInfo.FieldType\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> does not represent a field or property.","source":"<code>member</code> does not represent a field or property."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,340],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo.FieldType\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Reflection.PropertyInfo.PropertyType\"&gt;&lt;/xref&gt;</ph> of the field or property that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">member</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents does not implement <ph id=\"ph4\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Reflection.FieldInfo.FieldType\"></xref> or <xref href=\"System.Reflection.PropertyInfo.PropertyType\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[715794,716147],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to initialize a collection.","nodes":[{"pos":[0,186],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that uses specified <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to initialize a collection.","source":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to initialize a collection."}],"pos":[718063,718250],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.","nodes":[{"pos":[0,158],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`newExpression`</ph> must represent a type that implements <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>."},{"pos":[165,328],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id=\"ph3\">`newExpression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."}],"pos":[718261,718594],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,168],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to."}],"pos":[719626,719795],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.","nodes":[{"pos":[0,255],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection."}],"pos":[719925,720181],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> properties set to the specified values.","nodes":[{"pos":[0,437],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> properties set to the specified values."}],"pos":[720267,720705],"yaml":true},{"content":"<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>initializers</code> is `null`."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,145],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[720878,721030],"yaml":true},{"content":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type does not implement <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[721124,721228],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a method named \"Add\" to add elements to a collection.","nodes":[{"pos":[0,137],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that uses a method named \"Add\" to add elements to a collection.","source":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a method named \"Add\" to add elements to a collection."}],"pos":[723116,723254],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.","nodes":[{"pos":[0,158],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`newExpression`</ph> must represent a type that implements <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>."},{"pos":[165,680],"content":"In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.","nodes":[{"content":"In order to use this overload of <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29&gt;</ph>, <ph id=\"ph2\">`newExpression`</ph>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument.","pos":[0,339],"source":"In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument."},{"content":"The type of the argument must be assignable from the type represented by the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the first element of <ph id=\"ph2\">`initializers`</ph>.","pos":[340,515],"source":" The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`."}]},{"pos":[687,1420],"content":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> contains one element of type <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id=\"ph4\">`initializers`</ph>.","pos":[0,252],"source":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id=\"ph3\">`initializers`</ph>.","pos":[253,491],"source":" The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> represents the add method that was discovered on <ph id=\"ph3\">`newExpression`</ph>.Type or its base type.","pos":[492,733],"source":" The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type."}]},{"pos":[1427,1590],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id=\"ph3\">`newExpression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."}],"pos":[723265,724866],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,168],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to."}],"pos":[725208,725377],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.","nodes":[{"pos":[0,254],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection."}],"pos":[725506,725761],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.","nodes":[{"pos":[0,353],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value."}],"pos":[725847,726201],"yaml":true},{"content":"<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>initializers</code> is `null`."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,145],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[726374,726526],"yaml":true},{"content":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type does not implement <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[726620,726724],"yaml":true},{"content":"There is no instance method named \"Add\" (case insensitive) declared in <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  \n  \n -or-  \n  \n The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n More than one argument-compatible method named \"Add\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type.","nodes":[{"pos":[0,120],"content":"There is no instance method named \"Add\" (case insensitive) declared in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newExpression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type or its base type.","source":"There is no instance method named \"Add\" (case insensitive) declared in <code>newExpression</code>.Type or its base type."},{"pos":[127,131],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[138,240],"content":"The add method on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newExpression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type or its base type does not take exactly one argument.","source":"The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument."},{"pos":[247,251],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[258,515],"content":"The type represented by the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of the first element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the argument type of the add method on <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">newExpression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type or its base type.","source":"The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type."},{"pos":[522,526],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[533,668],"content":"More than one argument-compatible method named \"Add\" (case-insensitive) exists on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newExpression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and/or its base type.","source":"More than one argument-compatible method named \"Add\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type."}],"pos":[726834,727523],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to initialize a collection.","nodes":[{"pos":[0,186],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that uses specified <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to initialize a collection.","source":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to initialize a collection."}],"pos":[729292,729479],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.","nodes":[{"pos":[0,158],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`newExpression`</ph> must represent a type that implements <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>."},{"pos":[165,328],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id=\"ph3\">`newExpression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."}],"pos":[729490,729823],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,168],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to."}],"pos":[730816,730985],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.","nodes":[{"pos":[0,188],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ElementInit\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection."}],"pos":[731077,731266],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> properties set to the specified values.","nodes":[{"pos":[0,437],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> properties set to the specified values."}],"pos":[731352,731790],"yaml":true},{"content":"<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>initializers</code> is `null`."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,145],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[731963,732115],"yaml":true},{"content":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type does not implement <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[732209,732313],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a method named \"Add\" to add elements to a collection.","nodes":[{"pos":[0,137],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that uses a method named \"Add\" to add elements to a collection.","source":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a method named \"Add\" to add elements to a collection."}],"pos":[734076,734214],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.","nodes":[{"pos":[0,158],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`newExpression`</ph> must represent a type that implements <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>."},{"pos":[165,642],"content":"In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.","nodes":[{"content":"In order to use this overload of <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29&gt;</ph>, <ph id=\"ph2\">`newExpression`</ph>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument.","pos":[0,301],"source":"In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument."},{"content":"The type of the argument must be assignable from the type represented by the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the first element of <ph id=\"ph2\">`initializers`</ph>.","pos":[302,477],"source":" The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`."}]},{"pos":[649,1381],"content":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph>contains one element of type <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id=\"ph4\">`initializers`</ph>.","pos":[0,251],"source":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id=\"ph3\">`initializers`</ph>.","pos":[252,490],"source":" The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> represents the add method that was discovered on <ph id=\"ph3\">`newExpression`</ph>.Type or its base type.","pos":[491,732],"source":" The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type."}]},{"pos":[1388,1551],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id=\"ph3\">`newExpression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."}],"pos":[734225,735787],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,168],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to."}],"pos":[736091,736260],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.","nodes":[{"pos":[0,187],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection."}],"pos":[736351,736539],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.","nodes":[{"pos":[0,353],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value."}],"pos":[736625,736979],"yaml":true},{"content":"<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>initializers</code> is `null`."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,145],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[737152,737304],"yaml":true},{"content":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type does not implement <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."}],"pos":[737398,737502],"yaml":true},{"content":"There is no instance method named \"Add\" (case insensitive) declared in <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  \n  \n -or-  \n  \n The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  \n  \n -or-  \n  \n More than one argument-compatible method named \"Add\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type.","nodes":[{"pos":[0,120],"content":"There is no instance method named \"Add\" (case insensitive) declared in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newExpression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type or its base type.","source":"There is no instance method named \"Add\" (case insensitive) declared in <code>newExpression</code>.Type or its base type."},{"pos":[127,131],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[138,240],"content":"The add method on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newExpression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type or its base type does not take exactly one argument.","source":"The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument."},{"pos":[247,251],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[258,515],"content":"The type represented by the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of the first element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the argument type of the add method on <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">newExpression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type or its base type.","source":"The type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type."},{"pos":[522,526],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[533,668],"content":"More than one argument-compatible method named \"Add\" (case-insensitive) exists on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">newExpression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and/or its base type.","source":"More than one argument-compatible method named \"Add\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type."}],"pos":[737612,738301],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a specified method to add elements to a collection.","nodes":[{"pos":[0,135],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that uses a specified method to add elements to a collection.","source":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a specified method to add elements to a collection."}],"pos":[740334,740470],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.","nodes":[{"pos":[0,158],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`newExpression`</ph> must represent a type that implements <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>."},{"pos":[165,631],"content":"If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.","nodes":[{"content":"If <ph id=\"ph1\">`addMethod`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`newExpression`</ph>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument.","pos":[0,156],"source":"If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument."},{"content":"If <ph id=\"ph1\">`addMethod`</ph> is not <ph id=\"ph2\">`null`</ph>, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter.","pos":[157,286],"source":" If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter."},{"content":"The type represented by the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id=\"ph2\">`initializers`</ph> must be assignable to the argument type of the add method.","pos":[287,466],"source":" The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method."}]},{"pos":[638,1308],"content":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> contains one element of type <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id=\"ph4\">`initializers`</ph>.","pos":[0,252],"source":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id=\"ph3\">`initializers`</ph>.","pos":[253,491],"source":" The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is equal to <ph id=\"ph3\">`addMethod`</ph>.","pos":[492,670],"source":" The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`."}]},{"pos":[1315,1478],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id=\"ph3\">`newExpression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."}],"pos":[740481,741972],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,168],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to."}],"pos":[742354,742523],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents an instance method named \"Add\" (case insensitive), that adds an element to a collection.","nodes":[{"pos":[0,156],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents an instance method named \"Add\" (case insensitive), that adds an element to a collection.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents an instance method named \"Add\" (case insensitive), that adds an element to a collection."}],"pos":[742603,742760],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.","nodes":[{"pos":[0,254],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection."}],"pos":[742889,743144],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.","nodes":[{"pos":[0,353],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value."}],"pos":[743230,743584],"yaml":true},{"content":"<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>initializers</code> is `null`."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,145],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[743757,743909],"yaml":true},{"content":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type does not implement <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."},{"pos":[110,114],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[121,266],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.","source":"<code>addMethod</code> is not `null` and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument."},{"pos":[273,277],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[284,568],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the type represented by the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of one or more elements of <ph id=\"ph4\">&lt;code&gt;initializers&lt;/code&gt;</ph> is not assignable to the argument type of the method that <ph id=\"ph5\">&lt;code&gt;addMethod&lt;/code&gt;</ph> represents.","source":"<code>addMethod</code> is not `null` and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents."}],"pos":[744003,744588],"yaml":true},{"content":"<code>addMethod</code> is `null` and no instance method named \"Add\" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.","nodes":[{"pos":[0,167],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and no instance method named \"Add\" that takes one type-compatible argument exists on <ph id=\"ph3\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type or its base type.","source":"<code>addMethod</code> is `null` and no instance method named \"Add\" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type."}],"pos":[744698,744866],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a specified method to add elements to a collection.","nodes":[{"pos":[0,135],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that uses a specified method to add elements to a collection.","source":"Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a specified method to add elements to a collection."}],"pos":[746752,746888],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.","nodes":[{"pos":[0,158],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph2\">`newExpression`</ph> must represent a type that implements <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>."},{"pos":[165,631],"content":"If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.","nodes":[{"content":"If <ph id=\"ph1\">`addMethod`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">`newExpression`</ph>.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument.","pos":[0,156],"source":"If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument."},{"content":"If <ph id=\"ph1\">`addMethod`</ph> is not <ph id=\"ph2\">`null`</ph>, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter.","pos":[157,286],"source":" If `addMethod` is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter."},{"content":"The type represented by the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id=\"ph2\">`initializers`</ph> must be assignable to the argument type of the add method.","pos":[287,466],"source":" The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method."}]},{"pos":[638,1307],"content":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> property of the returned <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph>contains one element of type <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.ElementInit&gt;</ph> for each element of <ph id=\"ph4\">`initializers`</ph>.","pos":[0,251],"source":"The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is a singleton collection that contains the corresponding element of <ph id=\"ph3\">`initializers`</ph>.","pos":[252,490],"source":" The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt;</ph> property of each element of <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt;</ph> is equal to <ph id=\"ph3\">`addMethod`</ph>.","pos":[491,669],"source":" The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`."}]},{"pos":[1314,1477],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ListInitExpression&gt;</ph> is equal to <ph id=\"ph3\">`newExpression`</ph>.Type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type."}],"pos":[746899,748389],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,168],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to."}],"pos":[748733,748902],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents an instance method that takes one argument, that adds an element to a collection.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents an instance method that takes one argument, that adds an element to a collection.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents an instance method that takes one argument, that adds an element to a collection."}],"pos":[748982,749132],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.","nodes":[{"pos":[0,187],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection."}],"pos":[749223,749411],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.","nodes":[{"pos":[0,353],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value."}],"pos":[749497,749851],"yaml":true},{"content":"<code>newExpression</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n One or more elements of <code>initializers</code> are `null`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>initializers</code> is `null`."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,145],"content":"One or more elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> are <ph id=\"ph2\">`null`</ph>.","source":"One or more elements of <code>initializers</code> are `null`."}],"pos":[750024,750176],"yaml":true},{"content":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.  \n  \n -or-  \n  \n <code>addMethod</code> is not `null` and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type does not implement <ph id=\"ph2\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.","source":"<code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>."},{"pos":[110,114],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[121,266],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument.","source":"<code>addMethod</code> is not `null` and it does not represent an instance method named \"Add\" (case insensitive) that takes exactly one argument."},{"pos":[273,277],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[284,568],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the type represented by the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of one or more elements of <ph id=\"ph4\">&lt;code&gt;initializers&lt;/code&gt;</ph> is not assignable to the argument type of the method that <ph id=\"ph5\">&lt;code&gt;addMethod&lt;/code&gt;</ph> represents.","source":"<code>addMethod</code> is not `null` and the type represented by the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents."}],"pos":[750270,750855],"yaml":true},{"content":"<code>addMethod</code> is `null` and no instance method named \"Add\" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.","nodes":[{"pos":[0,167],"content":"<ph id=\"ph1\">&lt;code&gt;addMethod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and no instance method named \"Add\" that takes one type-compatible argument exists on <ph id=\"ph3\">&lt;code&gt;newExpression&lt;/code&gt;</ph>.Type or its base type.","source":"<code>addMethod</code> is `null` and no instance method named \"Add\" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type."}],"pos":[750965,751133],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body.","nodes":[{"pos":[0,90],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LoopExpression\"&gt;&lt;/xref&gt;</ph> with the given body.","source":"Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body."}],"pos":[752679,752770],"yaml":true},{"content":"The body of the loop.","nodes":[{"pos":[0,21],"content":"The body of the loop.","nodes":[{"content":"The body of the loop.","pos":[0,21]}]}],"pos":[752991,753013],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>.","nodes":[{"pos":[0,72],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LoopExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>."}],"pos":[753095,753168],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body and break target.","nodes":[{"pos":[0,107],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LoopExpression\"&gt;&lt;/xref&gt;</ph> with the given body and break target.","source":"Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body and break target."}],"pos":[754931,755039],"yaml":true},{"content":"The body of the loop.","nodes":[{"pos":[0,21],"content":"The body of the loop.","nodes":[{"content":"The body of the loop.","pos":[0,21]}]}],"pos":[755815,755837],"yaml":true},{"content":"The break target used by the loop body.","nodes":[{"pos":[0,39],"content":"The break target used by the loop body.","nodes":[{"content":"The break target used by the loop body.","pos":[0,39]}]}],"pos":[755920,755960],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>.","nodes":[{"pos":[0,72],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LoopExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>."}],"pos":[756042,756115],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body.","nodes":[{"pos":[0,90],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LoopExpression\"&gt;&lt;/xref&gt;</ph> with the given body.","source":"Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body."}],"pos":[758047,758138],"yaml":true},{"content":"The body of the loop.","nodes":[{"pos":[0,21],"content":"The body of the loop.","nodes":[{"content":"The body of the loop.","pos":[0,21]}]}],"pos":[758448,758470],"yaml":true},{"content":"The break target used by the loop body.","nodes":[{"pos":[0,39],"content":"The break target used by the loop body.","nodes":[{"content":"The break target used by the loop body.","pos":[0,39]}]}],"pos":[758553,758593],"yaml":true},{"content":"The continue target used by the loop body.","nodes":[{"pos":[0,42],"content":"The continue target used by the loop body.","nodes":[{"content":"The continue target used by the loop body.","pos":[0,42]}]}],"pos":[758679,758722],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>.","nodes":[{"pos":[0,72],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LoopExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>."}],"pos":[758804,758877],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left and right operands, by calling an appropriate factory method.","nodes":[{"pos":[0,149],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph>, given the left and right operands, by calling an appropriate factory method.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left and right operands, by calling an appropriate factory method."}],"pos":[760857,761007],"yaml":true},{"content":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.","nodes":[{"pos":[0,288],"content":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.","nodes":[{"content":"The <ph id=\"ph1\">`binaryType`</ph> parameter determines which <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> factory method this method calls.","pos":[0,125],"source":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls."},{"content":"For example, if <ph id=\"ph1\">`binaryType`</ph> is <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, this method invokes <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.","pos":[126,288],"source":" For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>."}]}],"pos":[761018,761307],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation.","nodes":[{"pos":[0,108],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> that specifies the type of binary operation.","source":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation."}],"pos":[762329,762438],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the left operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand."}],"pos":[762519,762612],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the right operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand."}],"pos":[762694,762788],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method.","nodes":[{"pos":[0,123],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that results from calling the appropriate factory method.","source":"The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method."}],"pos":[762872,762996],"yaml":true},{"content":"<code>binaryType</code> does not correspond to a binary expression node.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;binaryType&lt;/code&gt;</ph> does not correspond to a binary expression node.","source":"<code>binaryType</code> does not correspond to a binary expression node."}],"pos":[763163,763236],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[763338,763389],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left operand, right operand and implementing method, by calling the appropriate factory method.","nodes":[{"pos":[0,178],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph>, given the left operand, right operand and implementing method, by calling the appropriate factory method.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left operand, right operand and implementing method, by calling the appropriate factory method."}],"pos":[765494,765673],"yaml":true},{"content":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.","nodes":[{"pos":[0,420],"content":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.","nodes":[{"content":"The <ph id=\"ph1\">`binaryType`</ph> parameter determines which <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> factory method this method will call.","pos":[0,129],"source":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call."},{"content":"For example, if <ph id=\"ph1\">`binaryType`</ph> is <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, this method invokes <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.","pos":[130,292],"source":" For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>."},{"content":"The <ph id=\"ph1\">`liftToNull`</ph> and <ph id=\"ph2\">`method`</ph> parameters are ignored if the appropriate factory method does not have a corresponding parameter.","pos":[293,420],"source":" The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter."}]}],"pos":[765684,766105],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation.","nodes":[{"pos":[0,108],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> that specifies the type of binary operation.","source":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation."}],"pos":[766491,766600],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the left operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand."}],"pos":[766681,766774],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the right operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand."}],"pos":[766856,766950],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[767017,767225],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that specifies the implementing method.","nodes":[{"pos":[0,91],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that specifies the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that specifies the implementing method."}],"pos":[767302,767394],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method.","nodes":[{"pos":[0,123],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that results from calling the appropriate factory method.","source":"The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method."}],"pos":[767478,767602],"yaml":true},{"content":"<code>binaryType</code> does not correspond to a binary expression node.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;binaryType&lt;/code&gt;</ph> does not correspond to a binary expression node.","source":"<code>binaryType</code> does not correspond to a binary expression node."}],"pos":[767769,767842],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[767944,767995],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.","nodes":[{"pos":[0,204],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method."}],"pos":[770277,770482],"yaml":true},{"content":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.","nodes":[{"pos":[0,434],"content":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.","nodes":[{"content":"The <ph id=\"ph1\">`binaryType`</ph> parameter determines which <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> factory method this method will call.","pos":[0,129],"source":"The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call."},{"content":"For example, if <ph id=\"ph1\">`binaryType`</ph> is <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType.Subtract&gt;</ph>, this method invokes <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Subtract%2A&gt;</ph>.","pos":[130,292],"source":" For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>."},{"content":"The <ph id=\"ph1\">`liftToNull`</ph>, <ph id=\"ph2\">`method`</ph> and <ph id=\"ph3\">`conversion`</ph> parameters are ignored if the appropriate factory method does not have a corresponding parameter.","pos":[293,434],"source":" The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter."}]}],"pos":[770493,770928],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation.","nodes":[{"pos":[0,108],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> that specifies the type of binary operation.","source":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation."}],"pos":[771367,771476],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the left operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand."}],"pos":[771557,771650],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand.","nodes":[{"pos":[0,93],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the right operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand."}],"pos":[771732,771826],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[771893,772101],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that specifies the implementing method.","nodes":[{"pos":[0,91],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that specifies the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that specifies the implementing method."}],"pos":[772178,772270],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that represents a type conversion function. This parameter is used only if <code>binaryType</code> is <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> or compound assignment..","nodes":[{"pos":[0,259],"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that represents a type conversion function. This parameter is used only if <code>binaryType</code> is <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> or compound assignment..","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> that represents a type conversion function.","pos":[0,107],"source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that represents a type conversion function."},{"content":"This parameter is used only if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binaryType</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"&gt;&lt;/xref&gt;</ph> or compound assignment..","pos":[108,259],"source":" This parameter is used only if <code>binaryType</code> is <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> or compound assignment.."}]}],"pos":[772363,772623],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method.","nodes":[{"pos":[0,123],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that results from calling the appropriate factory method.","source":"The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method."}],"pos":[772707,772831],"yaml":true},{"content":"<code>binaryType</code> does not correspond to a binary expression node.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;binaryType&lt;/code&gt;</ph> does not correspond to a binary expression node.","source":"<code>binaryType</code> does not correspond to a binary expression node."}],"pos":[772998,773071],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[773173,773224],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with the specified elements.","nodes":[{"pos":[0,125],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> representing a catch statement with the specified elements.","source":"Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with the specified elements."}],"pos":[775242,775368],"yaml":true},{"content":"`type` must be non-null and match the type of `variable` (if it is supplied).","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`type`</ph> must be non-null and match the type of <ph id=\"ph2\">`variable`</ph> (if it is supplied).","source":"`type` must be non-null and match the type of `variable` (if it is supplied)."}],"pos":[775379,775459],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle.","nodes":[{"pos":[0,179],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> this <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> will handle.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle."}],"pos":[775771,775951],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler.","nodes":[{"pos":[0,167],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> representing a reference to the <ph id=\"ph2\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object caught by this handler.","source":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler."}],"pos":[776045,776213],"yaml":true},{"content":"The body of the catch statement.","nodes":[{"pos":[0,32],"content":"The body of the catch statement.","nodes":[{"content":"The body of the catch statement.","pos":[0,32]}]}],"pos":[776294,776327],"yaml":true},{"content":"The body of the <xref href=\"System.Exception\"></xref> filter.","nodes":[{"pos":[0,61],"content":"The body of the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> filter.","source":"The body of the <xref href=\"System.Exception\"></xref> filter."}],"pos":[776410,776472],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.","nodes":[{"pos":[0,68],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>."}],"pos":[776550,776619],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and four arguments.","nodes":[{"pos":[0,218],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and four arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and four arguments."}],"pos":[778975,779194],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[779607,779707],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[779802,779848],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[779929,779974],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[780055,780101],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[780182,780227],"yaml":true},{"content":"The fourth argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The fourth argument to the dynamic operation.","nodes":[{"content":"The fourth argument to the dynamic operation.","pos":[0,45]}]}],"pos":[780308,780354],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[780439,780921],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and two arguments.","nodes":[{"pos":[0,217],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and two arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and two arguments."}],"pos":[782688,782906],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[783237,783337],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[783432,783478],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[783559,783604],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[783685,783731],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[783816,784298],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and three arguments.","nodes":[{"pos":[0,219],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and three arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and three arguments."}],"pos":[786206,786426],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[786798,786898],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[786993,787039],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[787120,787165],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[787246,787292],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[787373,787418],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[787503,787985],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and one argument.","nodes":[{"pos":[0,216],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and one argument.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and one argument."}],"pos":[789589,789806],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[790096,790196],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[790291,790337],"yaml":true},{"content":"The argument to the dynamic operation.","nodes":[{"pos":[0,38],"content":"The argument to the dynamic operation.","nodes":[{"content":"The argument to the dynamic operation.","pos":[0,38]}]}],"pos":[790418,790457],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[790542,791024],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[792809,793009],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[793344,793444],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[793539,793585],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[793711,793751],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[793836,794318],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[795956,796156],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[796453,796553],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[796648,796694],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[796782,796822],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph> and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[796907,797389],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a jump of the specified <xref href=\"System.Linq.Expressions.GotoExpressionKind\"></xref>. The value passed to the label upon jumping can also be specified.","nodes":[{"pos":[0,237],"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a jump of the specified <xref href=\"System.Linq.Expressions.GotoExpressionKind\"></xref>. The value passed to the label upon jumping can also be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a jump of the specified <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpressionKind\"&gt;&lt;/xref&gt;</ph>.","pos":[0,171],"source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a jump of the specified <xref href=\"System.Linq.Expressions.GotoExpressionKind\"></xref>."},{"content":"The value passed to the label upon jumping can also be specified.","pos":[172,237]}]}],"pos":[799144,799382],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.GotoExpressionKind\"></xref> of the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref>.","nodes":[{"pos":[0,135],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpressionKind\"&gt;&lt;/xref&gt;</ph> of the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Linq.Expressions.GotoExpressionKind\"></xref> of the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref>."}],"pos":[799720,799856],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[799940,800084],"yaml":true},{"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"pos":[0,67],"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"content":"The value that will be passed to the associated label upon jumping.","pos":[0,67]}]}],"pos":[800166,800234],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[800292,800419],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to <code>kind</code>, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.","nodes":[{"pos":[0,437],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">kind</ph><ept id=\"p1\">&lt;/code&gt;</ept>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">target</ph><ept id=\"p2\">&lt;/code&gt;</ept>, the <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph7\">type</ph><ept id=\"p3\">&lt;/code&gt;</ept>, and <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph8\">value</ph><ept id=\"p4\">&lt;/code&gt;</ept> to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to <code>kind</code>, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping."}],"pos":[800501,800939],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> that represents accessing an indexed property in an object.","nodes":[{"pos":[0,131],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing an indexed property in an object.","source":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> that represents accessing an indexed property in an object."}],"pos":[803046,803178],"yaml":true},{"content":"The object to which the property belongs. It should be null if the property is `static` (`shared` in Visual Basic).","nodes":[{"pos":[0,115],"content":"The object to which the property belongs. It should be null if the property is `static` (`shared` in Visual Basic).","nodes":[{"content":"The object to which the property belongs.","pos":[0,41]},{"content":"It should be null if the property is <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`shared`</ph> in Visual Basic).","pos":[42,115],"source":" It should be null if the property is `static` (`shared` in Visual Basic)."}]}],"pos":[803539,803655],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> representing the property to index.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> representing the property to index.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> representing the property to index."}],"pos":[803735,803830],"yaml":true},{"content":"An <code>IEnumerable<Expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property.","nodes":[{"pos":[0,167],"content":"An <ph id=\"ph1\">&lt;code&gt;</ph><ph id=\"ph2\">IEnumerable</ph><ph id=\"ph3\">&lt;Expression&gt;</ph><ph id=\"ph4\">&lt;/code&gt;</ph> (<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">IEnumerable (Of Expression)</ph><ept id=\"p1\">&lt;/code&gt;</ept> in Visual Basic) that contains the arguments that will be used to index the property.","source":"An <code>IEnumerable<Expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property."}],"pos":[803956,804124],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>."}],"pos":[804207,804281],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing either a field or a property.","nodes":[{"pos":[0,127],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing either a field or a property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing either a field or a property."}],"pos":[806119,806247],"yaml":true},{"content":"This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`. If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>. If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.","nodes":[{"pos":[0,562],"content":"This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`. If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>. If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.","nodes":[{"content":"This method can be used to create a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> that represents accessing either a field or a property, depending on the type of <ph id=\"ph2\">`member`</ph>.","pos":[0,174],"source":"This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`."},{"content":"If <ph id=\"ph1\">`member`</ph> is of type <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, this method calls <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph> to create the <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph>.","pos":[175,365],"source":" If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>."},{"content":"If <ph id=\"ph1\">`member`</ph> is of type <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, this method calls <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph> to create the <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph>.","pos":[366,562],"source":" If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>."}]}],"pos":[806258,806821],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the object that the member belongs to. This can be null for static members.","nodes":[{"pos":[0,150],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the object that the member belongs to. This can be null for static members.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the object that the member belongs to.","pos":[0,113],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the object that the member belongs to."},{"content":"This can be null for static members.","pos":[114,150]}]}],"pos":[807105,807256],"yaml":true},{"content":"The <xref href=\"System.Reflection.MemberInfo\"></xref> that describes the field or property to be accessed.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> that describes the field or property to be accessed.","source":"The <xref href=\"System.Reflection.MemberInfo\"></xref> that describes the field or property to be accessed."}],"pos":[807333,807440],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that results from calling the appropriate factory method.","nodes":[{"pos":[0,123],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that results from calling the appropriate factory method.","source":"The <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that results from calling the appropriate factory method."}],"pos":[807524,807648],"yaml":true},{"content":"<code>member</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>member</code> is `null`."}],"pos":[807829,807860],"yaml":true},{"content":"<code>member</code> does not represent a field or property.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> does not represent a field or property.","source":"<code>member</code> does not represent a field or property."}],"pos":[807954,808014],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with the specified elements.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph> representing a try block with the specified elements.","source":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with the specified elements."}],"pos":[810214,810337],"yaml":true},{"content":"The result type of the try expression. If null, bodh and all handlers must have identical type.","nodes":[{"pos":[0,95],"content":"The result type of the try expression. If null, bodh and all handlers must have identical type.","nodes":[{"content":"The result type of the try expression. If null, bodh and all handlers must have identical type.","pos":[0,95],"nodes":[{"content":"The result type of the try expression.","pos":[0,38]},{"content":"If null, bodh and all handlers must have identical type.","pos":[39,95]}]}]}],"pos":[810719,810815],"yaml":true},{"content":"The body of the try block.","nodes":[{"pos":[0,26],"content":"The body of the try block.","nodes":[{"content":"The body of the try block.","pos":[0,26]}]}],"pos":[810896,810923],"yaml":true},{"content":"The body of the finally block. Pass null if the try block has no finally block associated with it.","nodes":[{"pos":[0,98],"content":"The body of the finally block. Pass null if the try block has no finally block associated with it.","nodes":[{"content":"The body of the finally block. Pass null if the try block has no finally block associated with it.","pos":[0,98],"nodes":[{"content":"The body of the finally block.","pos":[0,30]},{"content":"Pass null if the try block has no finally block associated with it.","pos":[31,98]}]}]}],"pos":[811007,811106],"yaml":true},{"content":"The body of the fault block. Pass null if the try block has no fault block associated with it.","nodes":[{"pos":[0,94],"content":"The body of the fault block. Pass null if the try block has no fault block associated with it.","nodes":[{"content":"The body of the fault block. Pass null if the try block has no fault block associated with it.","pos":[0,94],"nodes":[{"content":"The body of the fault block.","pos":[0,28]},{"content":"Pass null if the try block has no fault block associated with it.","pos":[29,94]}]}]}],"pos":[811188,811283],"yaml":true},{"content":"A collection of <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>s representing the catch statements to be associated with the try block.","nodes":[{"pos":[0,143],"content":"A collection of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph>s representing the catch statements to be associated with the try block.","source":"A collection of <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>s representing the catch statements to be associated with the try block."}],"pos":[811408,811552],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.","nodes":[{"pos":[0,71],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>."}],"pos":[811633,811705],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>, given an operand, by calling the appropriate factory method.","nodes":[{"pos":[0,132],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>, given an operand, by calling the appropriate factory method.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>, given an operand, by calling the appropriate factory method."}],"pos":[813595,813728],"yaml":true},{"content":"The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type`parameter is ignored if it does not apply to the factory method that is called.","nodes":[{"pos":[0,382],"content":"The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type`parameter is ignored if it does not apply to the factory method that is called.","nodes":[{"content":"The <ph id=\"ph1\">`unaryType`</ph> parameter determines which <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> factory method this method calls.","pos":[0,123],"source":"The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls."},{"content":"For example, if <ph id=\"ph1\">`unaryType`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType.Convert&gt;</ph>, this method invokes <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Convert%2A&gt;</ph>.","pos":[124,292],"source":" For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>."},{"content":"The <ph id=\"ph1\">`type`</ph>parameter is ignored if it does not apply to the factory method that is called.","pos":[293,382],"source":" The `type`parameter is ignored if it does not apply to the factory method that is called."}]}],"pos":[813739,814122],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of unary operation.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> that specifies the type of unary operation.","source":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of unary operation."}],"pos":[814422,814530],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the operand.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the operand."}],"pos":[814614,814702],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> that specifies the type to be converted to (pass `null` if not applicable).","nodes":[{"pos":[0,112],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that specifies the type to be converted to (pass <ph id=\"ph2\">`null`</ph> if not applicable).","source":"The <xref href=\"System.Type\"></xref> that specifies the type to be converted to (pass `null` if not applicable)."}],"pos":[814760,814873],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that results from calling the appropriate factory method.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that results from calling the appropriate factory method.","source":"The <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that results from calling the appropriate factory method."}],"pos":[814956,815079],"yaml":true},{"content":"<code>operand</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;operand&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>operand</code> is `null`."}],"pos":[815253,815285],"yaml":true},{"content":"<code>unaryType</code> does not correspond to a unary expression node.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">&lt;code&gt;unaryType&lt;/code&gt;</ph> does not correspond to a unary expression node.","source":"<code>unaryType</code> does not correspond to a unary expression node."}],"pos":[815379,815450],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>, given an operand and implementing method, by calling the appropriate factory method.","nodes":[{"pos":[0,156],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>, given an operand and implementing method, by calling the appropriate factory method.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>, given an operand and implementing method, by calling the appropriate factory method."}],"pos":[817390,817547],"yaml":true},{"content":"The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.","nodes":[{"pos":[0,398],"content":"The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.","nodes":[{"content":"The <ph id=\"ph1\">`unaryType`</ph> parameter determines which <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> factory method this method calls.","pos":[0,123],"source":"The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls."},{"content":"For example, if <ph id=\"ph1\">`unaryType`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType.Convert&gt;</ph>, this method invokes <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Convert%2A&gt;</ph>.","pos":[124,292],"source":" For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>."},{"content":"The <ph id=\"ph1\">`type`</ph> and <ph id=\"ph2\">`method`</ph> parameters are ignored if they do not apply to the factory method that is called.","pos":[293,398],"source":" The `type` and `method` parameters are ignored if they do not apply to the factory method that is called."}]}],"pos":[817558,817957],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of unary operation.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> that specifies the type of unary operation.","source":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of unary operation."}],"pos":[818294,818402],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the operand.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> that represents the operand.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the operand."}],"pos":[818486,818574],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> that specifies the type to be converted to (pass `null` if not applicable).","nodes":[{"pos":[0,112],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that specifies the type to be converted to (pass <ph id=\"ph2\">`null`</ph> if not applicable).","source":"The <xref href=\"System.Type\"></xref> that specifies the type to be converted to (pass `null` if not applicable)."}],"pos":[818632,818745],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[818822,818917],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that results from calling the appropriate factory method.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that results from calling the appropriate factory method.","source":"The <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that results from calling the appropriate factory method."}],"pos":[819000,819123],"yaml":true},{"content":"<code>operand</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;operand&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>operand</code> is `null`."}],"pos":[819297,819329],"yaml":true},{"content":"<code>unaryType</code> does not correspond to a unary expression node.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">&lt;code&gt;unaryType&lt;/code&gt;</ph> does not correspond to a unary expression node.","source":"<code>unaryType</code> does not correspond to a unary expression node."}],"pos":[819423,819494],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.","nodes":[{"pos":[0,196],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method."}],"pos":[821251,821448],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents a property accessor method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method."}],"pos":[821742,821840],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.","nodes":[{"pos":[0,187],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection."}],"pos":[821930,822118],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.","nodes":[{"pos":[0,578],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> that represents the property accessed in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph6\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values."}],"pos":[822205,822784],"yaml":true},{"content":"<code>propertyAccessor</code> or <code>bindings</code> is `null`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bindings&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>propertyAccessor</code> or <code>bindings</code> is `null`."}],"pos":[822959,823025],"yaml":true},{"content":"<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> does not represent a property accessor method.","source":"<code>propertyAccessor</code> does not represent a property accessor method."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,337],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindings</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a member of the type of the property accessed by the method that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">propertyAccessor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents."}],"pos":[823119,823465],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.","nodes":[{"pos":[0,196],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method."}],"pos":[825369,825566],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents a property accessor method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method."}],"pos":[825898,825996],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.","nodes":[{"pos":[0,254],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection."}],"pos":[826124,826379],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.","nodes":[{"pos":[0,578],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> that represents the property accessed in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph6\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values."}],"pos":[826466,827045],"yaml":true},{"content":"<code>propertyAccessor</code> or <code>bindings</code> is `null`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bindings&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>propertyAccessor</code> or <code>bindings</code> is `null`."}],"pos":[827220,827286],"yaml":true},{"content":"<code>propertyAccessor</code> does not represent a property accessor method.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> does not represent a property accessor method.","source":"<code>propertyAccessor</code> does not represent a property accessor method."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,337],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindings</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a member of the type of the property accessed by the method that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">propertyAccessor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents."}],"pos":[827380,827726],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a field or property.","nodes":[{"pos":[0,154],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that represents the recursive initialization of members of a field or property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a field or property."}],"pos":[829630,829785],"yaml":true},{"content":"The `member` parameter must represent a field or property.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">`member`</ph> parameter must represent a field or property.","source":"The `member` parameter must represent a field or property."}],"pos":[829796,829855],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to."}],"pos":[830167,830317],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.","nodes":[{"pos":[0,254],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection."}],"pos":[830445,830700],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.","nodes":[{"pos":[0,437],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values."}],"pos":[830787,831225],"yaml":true},{"content":"<code>member</code> or <code>bindings</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bindings&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>member</code> or <code>bindings</code> is `null`."}],"pos":[831400,831456],"yaml":true},{"content":"<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> does not represent a field or property.","source":"<code>member</code> does not represent a field or property."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,296],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindings</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a member of the type of the field or property that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">member</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents."}],"pos":[831550,831855],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a field or property.","nodes":[{"pos":[0,154],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that represents the recursive initialization of members of a field or property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a field or property."}],"pos":[833612,833767],"yaml":true},{"content":"The `member` parameter must represent a field or property.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">`member`</ph> parameter must represent a field or property.","source":"The `member` parameter must represent a field or property."}],"pos":[833778,833837],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to."}],"pos":[834111,834261],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.","nodes":[{"pos":[0,187],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection."}],"pos":[834351,834539],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.","nodes":[{"pos":[0,437],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values."}],"pos":[834626,835064],"yaml":true},{"content":"<code>member</code> or <code>bindings</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bindings&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>member</code> or <code>bindings</code> is `null`."}],"pos":[835239,835295],"yaml":true},{"content":"<code>member</code> does not represent a field or property.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;member&lt;/code&gt;</ph> does not represent a field or property.","source":"<code>member</code> does not represent a field or property."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,296],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindings</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a member of the type of the field or property that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">member</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents."}],"pos":[835389,835694],"yaml":true},{"content":"Represents an expression that creates a new object and initializes a property of the object.","nodes":[{"pos":[0,92],"content":"Represents an expression that creates a new object and initializes a property of the object.","nodes":[{"content":"Represents an expression that creates a new object and initializes a property of the object.","pos":[0,92]}]}],"pos":[837634,837727],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.","nodes":[{"pos":[0,226],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph4\">`newExpression`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`."}],"pos":[837738,837965],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,170],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> property equal to."}],"pos":[838787,838958],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> collection.","nodes":[{"pos":[0,255],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberBinding\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> collection."}],"pos":[839086,839342],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> properties set to the specified values.","nodes":[{"pos":[0,441],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> properties set to the specified values."}],"pos":[839430,839872],"yaml":true},{"content":"<code>newExpression</code> or <code>bindings</code> is `null`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bindings&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>bindings</code> is `null`."}],"pos":[840047,840110],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.","nodes":[{"pos":[0,206],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindings</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a member of the type that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">newExpression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type represents.","source":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents."}],"pos":[840204,840411],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref>."}],"pos":[842204,842281],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.","nodes":[{"pos":[0,226],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberInitExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of <ph id=\"ph4\">`newExpression`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`."}],"pos":[842292,842519],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> property equal to.","nodes":[{"pos":[0,170],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> property equal to."}],"pos":[843498,843669],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> collection.","nodes":[{"pos":[0,188],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> collection."}],"pos":[843759,843948],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> properties set to the specified values.","nodes":[{"pos":[0,441],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> properties set to the specified values."}],"pos":[844036,844478],"yaml":true},{"content":"<code>newExpression</code> or <code>bindings</code> is `null`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;newExpression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bindings&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>newExpression</code> or <code>bindings</code> is `null`."}],"pos":[844653,844716],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.","nodes":[{"pos":[0,206],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberBinding.Member\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindings</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent a member of the type that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">newExpression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type represents.","source":"The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents."}],"pos":[844810,845017],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic remainder operation.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic remainder operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic remainder operation."}],"pos":[846738,846861],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1057],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the modulus operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1067,1163],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1174,1212],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1216,1257],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1267,1469],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1479,1654],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1668,1866],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1880,1952],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1959,1996],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2006,2160],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined modulus operator.","pos":[79,154]}]},{"pos":[2170,2354],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.","pos":[71,184]}]}],"pos":[846872,849255],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[849522,849678],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[849760,849917],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,413],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[850001,850415],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[850586,850637],"yaml":true},{"content":"The modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,91],"content":"The modulus operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[850747,850839],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic remainder operation.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic remainder operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic remainder operation."}],"pos":[852683,852806],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The implementing method for the operation is chosen based on the following rules:","nodes":[{"content":"The implementing method for the operation is chosen based on the following rules:","pos":[0,81]}]},{"pos":[800,968],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[978,1246],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the modulus operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1256,1352],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1363,1401],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1405,1446],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1456,1658],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1668,1843],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1857,2055],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2069,2141],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2148,2185],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2195,2349],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined modulus operator.","pos":[79,154]}]},{"pos":[2359,2543],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.","pos":[71,184]}]}],"pos":[852817,855391],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[855695,855851],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[855933,856090],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[856167,856318],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,484],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[856402,856887],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[857058,857109],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[857203,857366],"yaml":true},{"content":"<code>method</code> is `null` and the modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the modulus operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[857476,857602],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a remainder assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation."}],"pos":[859482,859604],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[859914,860070],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[860152,860309],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[860386,860537],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,490],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[860621,861112],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a remainder assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation."}],"pos":[862947,863069],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[863342,863498],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[863580,863737],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,419],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[863821,864241],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation.","nodes":[{"pos":[0,121],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a remainder assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation."}],"pos":[866376,866498],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[866861,867017],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[867099,867256],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[867333,867484],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[867577,867744],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,564],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[867828,868393],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.","nodes":[{"pos":[0,164],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic multiplication operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking."}],"pos":[870327,870492],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,959],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[969,1244],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1254,1350],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1361,1399],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1403,1444],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1454,1656],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1666,1841],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1855,2053],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2067,2139],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2146,2183],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2193,2354],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined multiplication operator.","pos":[79,161]}]},{"pos":[2364,2555],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","pos":[71,191]}]}],"pos":[870503,873089],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[873395,873551],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[873633,873790],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[873867,874018],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,486],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[874102,874589],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[874762,874813],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[874907,875070],"yaml":true},{"content":"<code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the multiplication operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[875180,875313],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.","nodes":[{"pos":[0,164],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic multiplication operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking."}],"pos":[877024,877189],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1064],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1074,1170],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1181,1219],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1223,1264],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1274,1476],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1486,1661],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1675,1873],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1887,1959],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1966,2003],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2013,2174],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined multiplication operator.","pos":[79,161]}]},{"pos":[2184,2375],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","pos":[71,191]}]}],"pos":[877200,879604],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[880322,880478],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[880560,880717],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[880801,881217],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[881390,881441],"yaml":true},{"content":"The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,98],"content":"The multiplication operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[881551,881650],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking.","nodes":[{"pos":[0,163],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a multiplication assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking."}],"pos":[883419,883583],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[883858,884014],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[884096,884253],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,421],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[884337,884759],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking.","nodes":[{"pos":[0,163],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a multiplication assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking."}],"pos":[886709,886873],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[887185,887341],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[887423,887580],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[887657,887808],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,492],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[887892,888385],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking.","nodes":[{"pos":[0,163],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a multiplication assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking."}],"pos":[890534,890698],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[891063,891219],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[891301,891458],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[891535,891686],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[891779,891946],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,566],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[892030,892597],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a multiplication assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking."}],"pos":[894488,894642],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[894924,895080],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[895162,895319],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,428],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[895403,895832],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a multiplication assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking."}],"pos":[897853,898007],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[898326,898482],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[898564,898721],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[898798,898949],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,499],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[899033,899533],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a multiplication assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking."}],"pos":[901731,901885],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[902257,902413],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[902495,902652],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[902729,902880],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[902973,903140],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,573],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[903224,903798],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that has overflow checking.","nodes":[{"pos":[0,154],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic multiplication operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that has overflow checking."}],"pos":[905660,905815],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1064],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1074,1170],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1181,1219],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1223,1264],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1274,1476],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1486,1661],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1675,1873],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1887,1959],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1966,2003],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2013,2174],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined multiplication operator.","pos":[79,161]}]},{"pos":[2184,2375],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","pos":[71,191]}]}],"pos":[905826,908230],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[908506,908662],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[908744,908901],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,422],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[908985,909408],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[909588,909639],"yaml":true},{"content":"The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,98],"content":"The multiplication operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[909749,909848],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that has overflow checking.","nodes":[{"pos":[0,154],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic multiplication operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that has overflow checking."}],"pos":[911746,911901],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,959],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[969,1244],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the multiplication operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1254,1350],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1361,1399],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1403,1444],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1454,1656],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1666,1841],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1855,2053],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2067,2139],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2146,2183],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2193,2354],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined multiplication operator.","pos":[79,161]}]},{"pos":[2364,2555],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.","pos":[71,191]}]}],"pos":[911912,914498],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[914811,914967],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[915049,915206],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[915283,915434],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,493],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[915518,916012],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[916192,916243],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[916337,916500],"yaml":true},{"content":"<code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the multiplication operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[916610,916743],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation.","nodes":[{"pos":[0,120],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic negation operation.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation."}],"pos":[918446,918567],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,475],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are false.","pos":[449,475]}]},{"pos":[486,505],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[509,581],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[591,758],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node."},{"pos":[768,948],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[958,1043],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`."},{"pos":[1054,1092],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1096,1137],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1147,1322],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1332,1507],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1521,1667],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method."},{"pos":[1681,1753],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1760,1933],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[918578,920536],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[920809,920967],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to."}],"pos":[921044,921194],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,414],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Negate\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[921277,921692],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[921863,921898],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly one argument.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument."}],"pos":[921992,922154],"yaml":true},{"content":"<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the unary minus operator is not defined for <ph id=\"ph3\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,314],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."}],"pos":[922264,922585],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation.","nodes":[{"pos":[0,120],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic negation operation.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation."}],"pos":[924165,924286],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,475],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are false.","pos":[449,475]}]},{"pos":[486,505],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[509,581],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[591,771],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[781,866],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`."},{"pos":[877,915],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[919,960],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[970,1145],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1155,1330],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1344,1490],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method."},{"pos":[1504,1576],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1583,1756],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[924297,926076],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[926785,926943],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.","nodes":[{"pos":[0,339],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Negate\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value."}],"pos":[927026,927366],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[927537,927572],"yaml":true},{"content":"The unary minus operator is not defined for <code>expression</code>.Type.","nodes":[{"pos":[0,73],"content":"The unary minus operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type.","source":"The unary minus operator is not defined for <code>expression</code>.Type."}],"pos":[927682,927756],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation that has overflow checking.","nodes":[{"pos":[0,147],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic negation operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation that has overflow checking."}],"pos":[929378,929526],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,475],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are false.","pos":[449,475]}]},{"pos":[486,505],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[509,581],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[591,771],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[781,866],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`."},{"pos":[877,915],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[919,960],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[970,1145],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1155,1330],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1344,1490],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method."},{"pos":[1504,1576],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1583,1756],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[929537,931316],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[931559,931717],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.","nodes":[{"pos":[0,346],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value."}],"pos":[931800,932147],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[932325,932360],"yaml":true},{"content":"The unary minus operator is not defined for <code>expression</code>.Type.","nodes":[{"pos":[0,73],"content":"The unary minus operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type.","source":"The unary minus operator is not defined for <code>expression</code>.Type."}],"pos":[932470,932544],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.","nodes":[{"pos":[0,189],"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic negation operation that has overflow checking.","pos":[0,147],"source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation that has overflow checking."},{"content":"The implementing method can be specified.","pos":[148,189]}]}],"pos":[934267,934457],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,475],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are false.","pos":[449,475]}]},{"pos":[486,505],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[509,581],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[591,758],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node."},{"pos":[768,948],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary minus operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[958,1043],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`."},{"pos":[1054,1092],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1096,1137],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1147,1322],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1332,1507],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1521,1667],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method."},{"pos":[1681,1753],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1760,1933],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[934468,936426],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[936706,936864],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to."}],"pos":[936941,937091],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,421],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[937174,937596],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[937774,937809],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly one argument.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument."}],"pos":[937903,938065],"yaml":true},{"content":"<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the unary minus operator is not defined for <ph id=\"ph3\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type."},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,314],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."}],"pos":[938175,938496],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor that takes no arguments.","nodes":[{"pos":[0,143],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that represents calling the specified constructor that takes no arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor that takes no arguments."}],"pos":[940070,940214],"yaml":true},{"content":"The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.","nodes":[{"pos":[0,359],"content":"The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> properties of the resulting <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> are empty collections.","pos":[0,217],"source":"The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property represents the declaring type of the constructor represented by <ph id=\"ph2\">`constructor`</ph>.","pos":[218,359],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`."}]}],"pos":[940225,940585],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to."}],"pos":[940816,940976],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property set to the specified value.","nodes":[{"pos":[0,336],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.New\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property set to the specified value."}],"pos":[941057,941394],"yaml":true},{"content":"<code>constructor</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;constructor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>constructor</code> is `null`."}],"pos":[941562,941598],"yaml":true},{"content":"The constructor that <code>constructor</code> represents has at least one parameter.","nodes":[{"pos":[0,84],"content":"The constructor that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">constructor</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents has at least one parameter.","source":"The constructor that <code>constructor</code> represents has at least one parameter."}],"pos":[941692,941777],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the parameterless constructor of the specified type.","nodes":[{"pos":[0,145],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that represents calling the parameterless constructor of the specified type.","source":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the parameterless constructor of the specified type."}],"pos":[943252,943398],"yaml":true},{"content":"The `type` parameter must represent a type that has a constructor without parameters.  \n  \n The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">`type`</ph> parameter must represent a type that has a constructor without parameters.","source":"The `type` parameter must represent a type that has a constructor without parameters."},{"pos":[92,392],"content":"The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> properties of the resulting <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> are empty collections.","pos":[0,217],"source":"The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is equal to <ph id=\"ph2\">`type`</ph>.","pos":[218,300],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`."}]}],"pos":[943409,943806],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that has a constructor that takes no arguments.","nodes":[{"pos":[0,82],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that has a constructor that takes no arguments.","source":"A <xref href=\"System.Type\"></xref> that has a constructor that takes no arguments."}],"pos":[944609,944692],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property set to the <xref href=\"System.Reflection.ConstructorInfo\"></xref> that represents the constructor without parameters for the specified type.","nodes":[{"pos":[0,449],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.New\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph5\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> that represents the constructor without parameters for the specified type.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property set to the <xref href=\"System.Reflection.ConstructorInfo\"></xref> that represents the constructor without parameters for the specified type."}],"pos":[944773,945223],"yaml":true},{"content":"<code>type</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."}],"pos":[945391,945420],"yaml":true},{"content":"The type that <code>type</code> represents does not have a constructor without parameters.","nodes":[{"pos":[0,90],"content":"The type that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents does not have a constructor without parameters.","source":"The type that <code>type</code> represents does not have a constructor without parameters."}],"pos":[945514,945605],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments.","nodes":[{"pos":[0,148],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that represents calling the specified constructor with the specified arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments."}],"pos":[947479,947628],"yaml":true},{"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.","nodes":[{"pos":[0,355],"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id=\"ph2\">`constructor`</ph>.","pos":[0,144],"source":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`."},{"content":"If <ph id=\"ph1\">`arguments`</ph> is <ph id=\"ph2\">`null`</ph>, it is considered empty, and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.","pos":[145,355],"source":" If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection."}]},{"pos":[362,658],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor represented by <ph id=\"ph3\">`constructor`</ph>.","pos":[0,203],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property is an empty collection.","pos":[204,296],"source":" The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection."}]}],"pos":[947639,948302],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to."}],"pos":[948619,948779],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,246],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection."}],"pos":[948905,949152],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,412],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.New\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> properties set to the specified values."}],"pos":[949233,949646],"yaml":true},{"content":"<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;constructor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>constructor</code> is `null`."},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,100],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>arguments</code> is `null`."}],"pos":[949814,949921],"yaml":true},{"content":"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.","nodes":[{"pos":[0,171],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not contain the same number of elements as the number of parameters for the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents."},{"pos":[178,182],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[189,424],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents."}],"pos":[950015,950448],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments.","nodes":[{"pos":[0,148],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that represents calling the specified constructor with the specified arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments."}],"pos":[952175,952324],"yaml":true},{"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.","nodes":[{"pos":[0,355],"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id=\"ph2\">`constructor`</ph>.","pos":[0,144],"source":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`."},{"content":"If <ph id=\"ph1\">`arguments`</ph> is <ph id=\"ph2\">`null`</ph>, it is considered empty, and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.","pos":[145,355],"source":" If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection."}]},{"pos":[362,658],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor represented by <ph id=\"ph3\">`constructor`</ph>.","pos":[0,203],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property is an empty collection.","pos":[204,296],"source":" The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection."}]}],"pos":[952335,952998],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to."}],"pos":[953277,953437],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,179],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection."}],"pos":[953525,953705],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> properties set to the specified values.","nodes":[{"pos":[0,412],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.New\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> properties set to the specified values."}],"pos":[953786,954199],"yaml":true},{"content":"<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;constructor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>constructor</code> is `null`."},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,100],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>arguments</code> is `null`."}],"pos":[954367,954474],"yaml":true},{"content":"The length of <code>arguments</code> does match the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.","nodes":[{"pos":[0,134],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> does match the number of parameters for the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The length of <code>arguments</code> does match the number of parameters for the constructor that <code>constructor</code> represents."},{"pos":[141,145],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[152,387],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents."}],"pos":[954568,954964],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.","nodes":[{"pos":[0,222],"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that represents calling the specified constructor with the specified arguments.","pos":[0,148],"source":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments."},{"content":"The members that access the constructor initialized fields are specified.","pos":[149,222]}]}],"pos":[957120,957343],"yaml":true},{"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must have a `get` accessor. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.","nodes":[{"pos":[0,355],"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id=\"ph2\">`constructor`</ph>.","pos":[0,144],"source":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`."},{"content":"If <ph id=\"ph1\">`arguments`</ph> is <ph id=\"ph2\">`null`</ph>, it is considered empty, and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.","pos":[145,355],"source":" If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection."}]},{"pos":[362,1235],"content":"If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must have a `get` accessor. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.","nodes":[{"content":"If <ph id=\"ph1\">`members`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property of the resulting <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.","pos":[0,178],"source":"If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection."},{"content":"If <ph id=\"ph1\">`members`</ph> is not <ph id=\"ph2\">`null`</ph>, it must have the same number of elements as <ph id=\"ph3\">`arguments`</ph> and each element must not be <ph id=\"ph4\">`null`</ph>.","pos":[179,299],"source":" If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`."},{"content":"Each element of <ph id=\"ph1\">`members`</ph> must be a <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents an instance member on the declaring type of the constructor represented by <ph id=\"ph5\">`constructor`</ph>.","pos":[300,554],"source":" Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`."},{"content":"If it represents a property, the property must have a <ph id=\"ph1\">`get`</ph> accessor.","pos":[555,624],"source":" If it represents a property, the property must have a `get` accessor."},{"content":"The corresponding element of <ph id=\"ph1\">`arguments`</ph> for each element of <ph id=\"ph2\">`members`</ph> must have a <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property that represents a type that is assignable to the type of the member that the <ph id=\"ph4\">`members`</ph> element represents.","pos":[625,873],"source":" The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents."}]},{"pos":[1242,1446],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor that <ph id=\"ph3\">`constructor`</ph> represents.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents."}],"pos":[957354,958807],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to."}],"pos":[959202,959362],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,246],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection."}],"pos":[959488,959735],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Reflection.MemberInfo\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> collection.","nodes":[{"pos":[0,238],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Members\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Reflection.MemberInfo\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> collection."}],"pos":[959853,960092],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> properties set to the specified values.","nodes":[{"pos":[0,480],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.New\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Members\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> properties set to the specified values."}],"pos":[960173,960654],"yaml":true},{"content":"<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`.  \n  \n -or-  \n  \n An element of <code>members</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;constructor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>constructor</code> is `null`."},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,100],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>arguments</code> is `null`."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,163],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">members</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>members</code> is `null`."}],"pos":[960822,960996],"yaml":true},{"content":"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  \n  \n -or-  \n  \n An element of <code>arguments</code> has a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>.","nodes":[{"pos":[0,171],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not contain the same number of elements as the number of parameters for the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents."},{"pos":[178,182],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[189,424],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents."},{"pos":[431,435],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[442,545],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">members</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not have the same number of elements as <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>."},{"pos":[552,556],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[563,821],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> has a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">members</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An element of <code>arguments</code> has a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>."}],"pos":[961090,961930],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.","nodes":[{"pos":[0,234],"content":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that represents calling the specified constructor with the specified arguments.","pos":[0,148],"source":"Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments."},{"content":"The members that access the constructor initialized fields are specified as an array.","pos":[149,234]}]}],"pos":[963939,964174],"yaml":true},{"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.","nodes":[{"pos":[0,355],"content":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.","nodes":[{"content":"The <ph id=\"ph1\">`arguments`</ph> parameter must contain the same number of elements as the number of parameters for the constructor represented by <ph id=\"ph2\">`constructor`</ph>.","pos":[0,144],"source":"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`."},{"content":"If <ph id=\"ph1\">`arguments`</ph> is <ph id=\"ph2\">`null`</ph>, it is considered empty, and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property of the resulting <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.","pos":[145,355],"source":" If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection."}]},{"pos":[362,1267],"content":"If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.","nodes":[{"content":"If <ph id=\"ph1\">`members`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property of the resulting <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> is an empty collection.","pos":[0,178],"source":"If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection."},{"content":"If <ph id=\"ph1\">`members`</ph> is not <ph id=\"ph2\">`null`</ph>, it must have the same number of elements as <ph id=\"ph3\">`arguments`</ph> and each element must not be <ph id=\"ph4\">`null`</ph>.","pos":[179,299],"source":" If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`."},{"content":"Each element of <ph id=\"ph1\">`members`</ph> must be a <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents an instance member on the declaring type of the constructor represented by <ph id=\"ph5\">`constructor`</ph>.","pos":[300,554],"source":" Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`."},{"content":"If it represents a property, the property must be able to retrieve the value of the associated field.","pos":[555,656]},{"content":"The corresponding element of <ph id=\"ph1\">`arguments`</ph> for each element of <ph id=\"ph2\">`members`</ph> must have a <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property that represents a type that is assignable to the type of the member that the <ph id=\"ph4\">`members`</ph> element represents.","pos":[657,905],"source":" The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents."}]},{"pos":[1274,1478],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> represents the declaring type of the constructor that <ph id=\"ph3\">`constructor`</ph> represents.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents."}],"pos":[964185,965670],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to."}],"pos":[966027,966187],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.","nodes":[{"pos":[0,246],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection."}],"pos":[966313,966560],"yaml":true},{"content":"An array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> collection.","nodes":[{"pos":[0,171],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Members\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> collection."}],"pos":[966640,966812],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> properties set to the specified values.","nodes":[{"pos":[0,480],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.New\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Constructor\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Arguments\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.NewExpression.Members\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> properties set to the specified values."}],"pos":[966893,967374],"yaml":true},{"content":"<code>constructor</code> is `null`.  \n  \n -or-  \n  \n An element of <code>arguments</code> is `null`.  \n  \n -or-  \n  \n An element of <code>members</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;constructor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>constructor</code> is `null`."},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,100],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>arguments</code> is `null`."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,163],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">members</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>members</code> is `null`."}],"pos":[967542,967716],"yaml":true},{"content":"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  \n  \n -or-  \n  \n The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  \n  \n -or-  \n  \n An element of <code>arguments</code> has a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>.","nodes":[{"pos":[0,171],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not contain the same number of elements as the number of parameters for the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents."},{"pos":[178,182],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[189,424],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not assignable to the type of the corresponding parameter of the constructor that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents."},{"pos":[431,435],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[442,545],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">members</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not have the same number of elements as <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arguments</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>."},{"pos":[552,556],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[563,821],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> has a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">members</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An element of <code>arguments</code> has a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>."}],"pos":[967810,968650],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating an array that has a specified rank.","nodes":[{"pos":[0,134],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that represents creating an array that has a specified rank.","source":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating an array that has a specified rank."}],"pos":[970322,970457],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.","nodes":[{"pos":[0,234],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is equal to the length of <ph id=\"ph3\">`bounds`</ph> and whose element type is <ph id=\"ph4\">`type`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`."},{"pos":[241,364],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id=\"ph2\">`bounds`</ph> must represent an integral type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type."}],"pos":[970468,970837],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the element type of the array.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the element type of the array.","source":"A <xref href=\"System.Type\"></xref> that represents the element type of the array."}],"pos":[971614,971696],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.","nodes":[{"pos":[0,186],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection."}],"pos":[971781,971968],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.","nodes":[{"pos":[0,357],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value."}],"pos":[972054,972412],"yaml":true},{"content":"<code>type</code> or <code>bounds</code> is `null`.  \n  \n -or-  \n  \n An element of <code>bounds</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bounds&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>type</code> or <code>bounds</code> is `null`."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,113],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bounds</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>bounds</code> is `null`."}],"pos":[972591,972711],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>bounds</code> does not represent an integral type.","nodes":[{"pos":[0,147],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bounds</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent an integral type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>bounds</code> does not represent an integral type."}],"pos":[972805,972953],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating an array that has a specified rank.","nodes":[{"pos":[0,134],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that represents creating an array that has a specified rank.","source":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating an array that has a specified rank."}],"pos":[974794,974929],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.","nodes":[{"pos":[0,234],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is equal to the length of <ph id=\"ph3\">`bounds`</ph> and whose element type is <ph id=\"ph4\">`type`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`."},{"pos":[241,364],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id=\"ph2\">`bounds`</ph> must represent an integral type.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type."}],"pos":[974940,975309],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the element type of the array.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the element type of the array.","source":"A <xref href=\"System.Type\"></xref> that represents the element type of the array."}],"pos":[976124,976206],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.","nodes":[{"pos":[0,253],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection."}],"pos":[976329,976583],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.","nodes":[{"pos":[0,357],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value."}],"pos":[976669,977027],"yaml":true},{"content":"<code>type</code> or <code>bounds</code> is `null`.  \n  \n -or-  \n  \n An element of <code>bounds</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bounds&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>type</code> or <code>bounds</code> is `null`."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,113],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bounds</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>bounds</code> is `null`."}],"pos":[977206,977326],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>bounds</code> does not represent an integral type.","nodes":[{"pos":[0,147],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bounds</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not represent an integral type.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>bounds</code> does not represent an integral type."}],"pos":[977420,977568],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.","nodes":[{"pos":[0,167],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that represents creating a one-dimensional array and initializing it from a list of elements.","source":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements."}],"pos":[979397,979565],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.","nodes":[{"pos":[0,203],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id=\"ph2\">`initializers`</ph> must represent a type that is assignable to the type represented by <ph id=\"ph3\">`type`</ph>, possibly after it is <bpt id=\"p1\">*</bpt>quoted<ept id=\"p1\">*</ept>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*."},{"pos":[211,586],"content":"[!NOTE]\n An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.","pos":[8,373],"nodes":[{"content":"An element will be quoted only if <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,87],"source":" An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[88,187],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`initializers`</ph>.","pos":[188,365],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`."}]}]},{"pos":[593,797],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is 1 and whose element type is <ph id=\"ph3\">`type`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`."}],"pos":[979576,980381],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the element type of the array.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the element type of the array.","source":"A <xref href=\"System.Type\"></xref> that represents the element type of the array."}],"pos":[981247,981329],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.","nodes":[{"pos":[0,253],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> collection.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection."}],"pos":[981458,981712],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.","nodes":[{"pos":[0,355],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value."}],"pos":[981798,982154],"yaml":true},{"content":"<code>type</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n An element of <code>initializers</code> is `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>type</code> or <code>initializers</code> is `null`."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,125],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>initializers</code> is `null`."}],"pos":[982331,982463],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type that <code>type</code> represents.","nodes":[{"pos":[0,204],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents a type that is not assignable to the type that <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept> represents.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type that <code>type</code> represents."}],"pos":[982573,982778],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.","nodes":[{"pos":[0,167],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that represents creating a one-dimensional array and initializing it from a list of elements.","source":"Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements."}],"pos":[984438,984606],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.","nodes":[{"pos":[0,203],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of each element of <ph id=\"ph2\">`initializers`</ph> must represent a type that is assignable to the type represented by <ph id=\"ph3\">`type`</ph>, possibly after it is <bpt id=\"p1\">*</bpt>quoted<ept id=\"p1\">*</ept>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*."},{"pos":[211,586],"content":"[!NOTE]\n An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.","leadings":["","> "],"nodes":[{"content":" An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.","pos":[8,373],"nodes":[{"content":"An element will be quoted only if <ph id=\"ph1\">`type`</ph> is <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph>.","pos":[1,87],"source":" An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>."},{"content":"Quoting means the element is wrapped in a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Quote&gt;</ph> node.","pos":[88,187],"source":" Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node."},{"content":"The resulting node is a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> whose <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;</ph> property is the element of <ph id=\"ph3\">`initializers`</ph>.","pos":[188,365],"source":" The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`."}]}]},{"pos":[593,797],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.NewArrayExpression&gt;</ph> represents an array type whose rank is 1 and whose element type is <ph id=\"ph3\">`type`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`."}],"pos":[984617,985422],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the element type of the array.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the element type of the array.","source":"A <xref href=\"System.Type\"></xref> that represents the element type of the array."}],"pos":[986250,986332],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.","nodes":[{"pos":[0,186],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection."}],"pos":[986423,986610],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.","nodes":[{"pos":[0,355],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value."}],"pos":[986696,987052],"yaml":true},{"content":"<code>type</code> or <code>initializers</code> is `null`.  \n  \n -or-  \n  \n An element of <code>initializers</code> is `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;initializers&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>type</code> or <code>initializers</code> is `null`."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,125],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>initializers</code> is `null`."}],"pos":[987229,987361],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type <code>type</code>.","nodes":[{"pos":[0,188],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property of an element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">initializers</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents a type that is not assignable to the type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type <code>type</code>."}],"pos":[987471,987660],"yaml":true},{"content":"Gets the node type of this <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,83],"content":"Gets the node type of this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the node type of this <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[989110,989194],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type. For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation. The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.  \n  \n The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.","nodes":[{"pos":[0,614],"content":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type. For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation. The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.","nodes":[{"content":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type. For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation. The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.","pos":[0,614],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property provides a more specialized description of an <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> than just its derived type.","pos":[0,182],"source":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type."},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation.","pos":[183,374],"source":" For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property would describe these binary expressions as <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionType.Divide&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.ExpressionType.GreaterThan&gt;</ph>, respectively.","pos":[375,614],"source":" The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively."}]}]},{"pos":[621,809],"content":"The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.","nodes":[{"content":"The static CLR type of the expression that the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> object represents is represented by the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property.","pos":[0,188],"source":"The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property."}]}],"pos":[989205,990021],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> values.","nodes":[{"pos":[0,78],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> values."}],"pos":[990198,990277],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a bitwise complement operation.","nodes":[{"pos":[0,118],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise complement operation.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a bitwise complement operation."}],"pos":[991891,992010],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,477],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."}]},{"pos":[488,507],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[511,583],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[593,771],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary not operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[781,877],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric or Boolean type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`."},{"pos":[888,926],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[930,971],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[981,1156],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1166,1341],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1355,1495],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method."},{"pos":[1509,1581],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1588,1761],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[992021,993805],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[994502,994660],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.","nodes":[{"pos":[0,336],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Not\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value."}],"pos":[994743,995080],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[995248,995283],"yaml":true},{"content":"The unary not operator is not defined for <code>expression</code>.Type.","nodes":[{"pos":[0,71],"content":"The unary not operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type.","source":"The unary not operator is not defined for <code>expression</code>.Type."}],"pos":[995393,995465],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a bitwise complement operation. The implementing method can be specified.","nodes":[{"pos":[0,160],"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a bitwise complement operation. The implementing method can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise complement operation.","pos":[0,118],"source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a bitwise complement operation."},{"content":"The implementing method can be specified.","pos":[119,160]}]}],"pos":[997128,997289],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,477],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."}]},{"pos":[488,507],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[511,583],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[593,760],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node."},{"pos":[770,948],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary not operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[958,1043],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`."},{"pos":[1054,1092],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1096,1137],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1147,1322],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1332,1507],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1521,1667],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method."},{"pos":[1681,1753],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1760,1933],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[997300,999258],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[999528,999686],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to."}],"pos":[999763,999913],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,411],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Not\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[999996,1000408],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[1000576,1000611],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly one argument.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument."}],"pos":[1000705,1000867],"yaml":true},{"content":"<code>method</code> is `null` and the unary not operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the unary not operator is not defined for <ph id=\"ph3\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the unary not operator is not defined for <code>expression</code>.Type."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,312],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."}],"pos":[1000977,1001296],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an inequality comparison.","nodes":[{"pos":[0,113],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an inequality comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an inequality comparison."}],"pos":[1003007,1003121],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"pos":[0,580],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[264,370],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`."},{"content":"Otherwise, it is <ph id=\"ph1\">`false`</ph>.","pos":[371,396],"source":" Otherwise, it is `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is always <ph id=\"ph2\">`false`</ph>.","pos":[397,494],"source":" The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[495,580],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[587,692],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[703,722],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[726,798],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[808,1068],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the inequality operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1078,1123],"content":"Otherwise, the implementing method is <ph id=\"ph1\">`null`</ph>.","source":"Otherwise, the implementing method is `null`."},{"pos":[1134,1172],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1176,1217],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1227,1429],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1439,1555],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>:","pos":[0,116],"source":"If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:"}]},{"pos":[1569,1767],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1781,1849],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[1856,1893],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[1903,2028],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2038,2155],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[71,117],"source":" The type of the node is <xref:System.Boolean>."}]}],"pos":[1003132,1005316],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1005585,1005741],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1005823,1005980],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1006064,1006480],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1006653,1006704],"yaml":true},{"content":"The inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,94],"content":"The inequality operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1006814,1006909],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an inequality comparison.","nodes":[{"pos":[0,113],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an inequality comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an inequality comparison."}],"pos":[1008837,1008951],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"pos":[0,598],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph> and the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> property is equal to <ph id=\"ph4\">`liftToNull`</ph>.","pos":[264,478],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`."},{"content":"Otherwise, they are both <ph id=\"ph1\">`false`</ph>.","pos":[479,512],"source":" Otherwise, they are both `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[513,598],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[605,710],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[721,740],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[744,816],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[826,981],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[991,1262],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the inequality operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1272,1317],"content":"Otherwise, the implementing method is <ph id=\"ph1\">`null`</ph>.","source":"Otherwise, the implementing method is `null`."},{"pos":[1328,1366],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1370,1411],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1421,1623],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1633,1839],"content":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>:","source":"If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:"},{"pos":[1853,2051],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2065,2133],"content":"The return type of the implementing method is <xref:System.Boolean>.","nodes":[{"content":"The return type of the implementing method is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,68],"source":"The return type of the implementing method is <xref:System.Boolean>."}]},{"pos":[2140,2177],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2187,2312],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph>.","pos":[79,125],"source":" The type of the node is <xref:System.Boolean>."}]},{"pos":[2322,2526],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is nullable <ph id=\"ph1\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph2\">`liftToNull`</ph> is <ph id=\"ph3\">`true`</ph> or <ph id=\"ph4\">&lt;xref:System.Boolean&gt;</ph> if <ph id=\"ph5\">`liftToNull`</ph> is <ph id=\"ph6\">`false`</ph>.","pos":[71,204],"source":" The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`."}]}],"pos":[1008962,1011519],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1011842,1011998],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1012080,1012237],"yaml":true},{"content":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.","nodes":[{"pos":[0,205],"content":"<ph id=\"ph1\">`true`</ph> to set <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph3\">`true`</ph>; <ph id=\"ph4\">`false`</ph> to set <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph6\">`false`</ph>.","source":"`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`."}],"pos":[1012304,1012512],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1012589,1012740],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,564],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1012824,1013389],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1013562,1013613],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[1013707,1013870],"yaml":true},{"content":"<code>method</code> is `null` and the inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the inequality operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1013980,1014109],"yaml":true},{"content":"Returns the expression representing the ones complement.","nodes":[{"pos":[0,56],"content":"Returns the expression representing the ones complement.","nodes":[{"content":"Returns the expression representing the ones complement.","pos":[0,56]}]}],"pos":[1015737,1015794],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,59],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[1016038,1016098],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>."}],"pos":[1016181,1016258],"yaml":true},{"content":"Returns the expression representing the ones complement.","nodes":[{"pos":[0,56],"content":"Returns the expression representing the ones complement.","nodes":[{"content":"Returns the expression representing the ones complement.","pos":[0,56]}]}],"pos":[1018089,1018146],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,59],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[1018427,1018487],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[1018564,1018657],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>."}],"pos":[1018740,1018817],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `OR` operation.","nodes":[{"pos":[0,113],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise <ph id=\"ph2\">`OR`</ph> operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `OR` operation."}],"pos":[1020594,1020708],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1053],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`OR`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1063,1171],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`."},{"pos":[1182,1220],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1224,1265],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1275,1477],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1487,1662],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1676,1874],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1888,1960],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1967,2004],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2014,2173],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined bitwise <ph id=\"ph1\">`OR`</ph> operator.","pos":[79,159],"source":" The type of the node is the result type of the predefined bitwise `OR` operator."}]},{"pos":[2183,2372],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id=\"ph1\">`OR`</ph> operator.","pos":[71,189],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator."}]}],"pos":[1020719,1023120],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1023844,1024000],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1024082,1024239],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,409],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Or\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1024323,1024733],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1024900,1024951],"yaml":true},{"content":"The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,96],"content":"The bitwise <ph id=\"ph1\">`OR`</ph> operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1025061,1025158],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `OR` operation.","nodes":[{"pos":[0,113],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise <ph id=\"ph2\">`OR`</ph> operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `OR` operation."}],"pos":[1026956,1027070],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,946],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[956,1229],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`OR`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1239,1347],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are integral or Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`."},{"pos":[1358,1396],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1400,1441],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1451,1653],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1663,1838],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1852,2050],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2064,2136],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2143,2180],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2190,2349],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined bitwise <ph id=\"ph1\">`OR`</ph> operator.","pos":[79,159],"source":" The type of the node is the result type of the predefined bitwise `OR` operator."}]},{"pos":[2359,2548],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined bitwise <ph id=\"ph1\">`OR`</ph> operator.","pos":[71,189],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator."}]}],"pos":[1027081,1029660],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1029960,1030116],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1030198,1030355],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1030432,1030583],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,480],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Or\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1030667,1031148],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1031315,1031366],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[1031460,1031623],"yaml":true},{"content":"<code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the bitwise <ph id=\"ph3\">`OR`</ph> operator is not defined for <ph id=\"ph4\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph5\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1031733,1031864],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise OR assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation."}],"pos":[1033597,1033720],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1033989,1034145],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1034227,1034384],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1034468,1034884],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise OR assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation."}],"pos":[1036814,1036937],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1037243,1037399],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1037481,1037638],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1037715,1037866],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,486],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1037950,1038437],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise OR assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation."}],"pos":[1040544,1040667],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1041026,1041182],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1041264,1041421],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1041498,1041649],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[1041742,1041909],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,560],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[1041993,1042554],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.","nodes":[{"pos":[0,198],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional <ph id=\"ph2\">`OR`</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id=\"ph3\">`false`</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`."}],"pos":[1044349,1044548],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1053],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`OR`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1065,1382],"content":"[!NOTE]\nThe conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.","leadings":["","    >  "],"nodes":[{"content":"The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.","pos":[8,310],"nodes":[{"content":"The conditional <ph id=\"ph1\">`OR`</ph> operator cannot be overloaded in C# or <ph id=\"ph2\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[0,104],"source":"The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"content":"However, the conditional <ph id=\"ph1\">`OR`</ph> operator is evaluated by using the bitwise <ph id=\"ph2\">`OR`</ph> operator.","pos":[105,192],"source":" However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator."},{"content":"Thus, a user-defined overload of the bitwise <ph id=\"ph1\">`OR`</ph> operator can be the implementing method for this node type.","pos":[193,302],"source":" Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type."}]}]},{"pos":[1392,1488],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`."},{"pos":[1499,1537],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1541,1582],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1592,1794],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1804,1979],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1993,2192],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2206,2278],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2285,2322],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2332,2387],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are the same Boolean type.","source":"`left`.Type and `right`.Type are the same Boolean type."},{"pos":[2397,2555],"content":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are non-nullable, the node is not lifted.","pos":[0,73],"source":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined conditional <ph id=\"ph1\">`OR`</ph> operator.","pos":[74,158],"source":" The type of the node is the result type of the predefined conditional `OR` operator."}]},{"pos":[2565,2753],"content":"If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are nullable, the node is lifted.","pos":[0,65],"source":"If `left`.Type and `right`.Type are nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id=\"ph1\">`OR`</ph> operator.","pos":[66,188],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator."}]}],"pos":[1044559,1047346],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1048157,1048313],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1048395,1048552],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,413],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1048636,1049050],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1049221,1049272],"yaml":true},{"content":"The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.","nodes":[{"pos":[0,96],"content":"The bitwise <ph id=\"ph1\">`OR`</ph> operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,195],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not the same Boolean type.","source":"<code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."}],"pos":[1049382,1049584],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.","nodes":[{"pos":[0,198],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a conditional <ph id=\"ph2\">`OR`</ph> operation that evaluates the second operand only if the first operand evaluates to <ph id=\"ph3\">`false`</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`."}],"pos":[1051428,1051627],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   `left`.Type and `right`.Type are the same Boolean type.  \n  \n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \n  \n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.","nodes":[{"pos":[0,562],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph>property is <ph id=\"ph2\">`null`</ph>.","pos":[478,562],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>property is `null`."}]},{"pos":[569,674],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[685,704],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[708,780],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[790,958],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[968,1241],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the bitwise <ph id=\"ph4\">`OR`</ph> operator, the <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1253,1570],"content":"[!NOTE]\nThe conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.","leadings":["","    >  "],"nodes":[{"content":"The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.","pos":[8,310],"nodes":[{"content":"The conditional <ph id=\"ph1\">`OR`</ph> operator cannot be overloaded in C# or <ph id=\"ph2\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.","pos":[0,104],"source":"The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]."},{"content":"However, the conditional <ph id=\"ph1\">`OR`</ph> operator is evaluated by using the bitwise <ph id=\"ph2\">`OR`</ph> operator.","pos":[105,192],"source":" However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator."},{"content":"Thus, a user-defined overload of the bitwise <ph id=\"ph1\">`OR`</ph> operator can be the implementing method for this node type.","pos":[193,302],"source":" Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type."}]}]},{"pos":[1580,1676],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are Boolean types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`."},{"pos":[1687,1725],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1729,1770],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1780,1982],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1992,2167],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[2181,2380],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2394,2466],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2473,2510],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2520,2575],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are the same Boolean type.","source":"`left`.Type and `right`.Type are the same Boolean type."},{"pos":[2585,2743],"content":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are non-nullable, the node is not lifted.","pos":[0,73],"source":"If `left`.Type and `right`.Type are non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined conditional <ph id=\"ph1\">`OR`</ph> operator.","pos":[74,158],"source":" The type of the node is the result type of the predefined conditional `OR` operator."}]},{"pos":[2753,2941],"content":"If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are nullable, the node is lifted.","pos":[0,65],"source":"If `left`.Type and `right`.Type are nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined conditional <ph id=\"ph1\">`OR`</ph> operator.","pos":[66,188],"source":" The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator."}]}],"pos":[1051638,1054615],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1054919,1055075],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1055157,1055314],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1055391,1055542],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,484],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1055626,1056111],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1056282,1056333],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[1056427,1056590],"yaml":true},{"content":"<code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the bitwise <ph id=\"ph3\">`OR`</ph> operator is not defined for <ph id=\"ph4\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph5\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,263],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not the same Boolean type.","source":"<code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type."}],"pos":[1056700,1056970],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.","source":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree."}],"pos":[1058547,1058705],"yaml":true},{"content":"The type of the parameter or variable.","nodes":[{"pos":[0,38],"content":"The type of the parameter or variable.","nodes":[{"content":"The type of the parameter or variable.","pos":[0,38]}]}],"pos":[1058896,1058935],"yaml":true},{"content":"The name of the parameter or variable, used for debugging or printing purpose only.","nodes":[{"pos":[0,83],"content":"The name of the parameter or variable, used for debugging or printing purpose only.","nodes":[{"content":"The name of the parameter or variable, used for debugging or printing purpose only.","pos":[0,83]}]}],"pos":[1058995,1059079],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Parameter\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> and <xref href=\"System.Linq.Expressions.ParameterExpression.Name\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Parameter\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression.Name\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Parameter\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> and <xref href=\"System.Linq.Expressions.ParameterExpression.Name\"></xref> properties set to the specified values."}],"pos":[1059166,1059582],"yaml":true},{"content":"<code>type</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."}],"pos":[1059756,1059785],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.","source":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree."}],"pos":[1061296,1061454],"yaml":true},{"content":"The type of the parameter or variable.","nodes":[{"pos":[0,38],"content":"The type of the parameter or variable.","nodes":[{"content":"The type of the parameter or variable.","pos":[0,38]}]}],"pos":[1062202,1062241],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> node with the specified name and type.","source":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type."}],"pos":[1062328,1062434],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.","nodes":[{"pos":[0,187],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression."}],"pos":[1064290,1064478],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1064764,1064851],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[1064928,1065021],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1065104,1065209],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.","nodes":[{"pos":[0,187],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression."}],"pos":[1066952,1067140],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1067389,1067476],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1067559,1067664],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.","nodes":[{"pos":[0,187],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression."}],"pos":[1069407,1069595],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1069844,1069931],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1070014,1070119],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.","nodes":[{"pos":[0,187],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression."}],"pos":[1071963,1072151],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1072437,1072524],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[1072601,1072694],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1072777,1072882],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising a number to a power.","nodes":[{"pos":[0,116],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents raising a number to a power.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising a number to a power."}],"pos":[1074682,1074799],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,1055],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the exponentiation operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1065,1192],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph>, the implementing method is <ph id=\"ph4\">&lt;xref:System.Math.Pow%2A&gt;</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>."},{"pos":[1203,1241],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1251,1453],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1463,1638],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1652,1850],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1864,1936],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]}],"pos":[1074810,1076768],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1077034,1077190],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1077272,1077429],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,412],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Power\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1077513,1077926],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1078096,1078147],"yaml":true},{"content":"The exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\"System.Double\"></xref>.","nodes":[{"pos":[0,98],"content":"The exponentiation operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type."},{"pos":[105,109],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[116,213],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and/or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not <ph id=\"ph3\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph>.","source":"<code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\"System.Double\"></xref>."}],"pos":[1078257,1078479],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising a number to a power.","nodes":[{"pos":[0,116],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents raising a number to a power.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising a number to a power."}],"pos":[1080317,1080434],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,946],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method."},{"pos":[956,1231],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the exponentiation operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1241,1368],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph>, the implementing method is <ph id=\"ph4\">&lt;xref:System.Math.Pow%2A&gt;</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>."},{"pos":[1379,1417],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1427,1629],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1639,1814],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1828,2026],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2040,2112],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]}],"pos":[1080445,1082581],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1082884,1083040],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1083122,1083279],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1083356,1083507],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,483],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Power\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1083591,1084075],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1084245,1084296],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[1084390,1084553],"yaml":true},{"content":"<code>method</code> is `null` and the exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \n  \n -or-  \n  \n <code>method</code> is `null` and <code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\"System.Double\"></xref>.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the exponentiation operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type."},{"pos":[139,143],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[150,281],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and/or <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type are not <ph id=\"ph5\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph>.","source":"<code>method</code> is `null` and <code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\"System.Double\"></xref>."}],"pos":[1084663,1084953],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression.","nodes":[{"pos":[0,169],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents raising an expression to a power and assigning the result back to the expression.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression."}],"pos":[1086704,1086874],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1087146,1087302],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1087384,1087541],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,418],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1087625,1088044],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression.","nodes":[{"pos":[0,169],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents raising an expression to a power and assigning the result back to the expression.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression."}],"pos":[1089995,1090165],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1090474,1090630],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1090712,1090869],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1090946,1091097],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1091181,1091671],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression.","nodes":[{"pos":[0,169],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents raising an expression to a power and assigning the result back to the expression.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression."}],"pos":[1093777,1093947],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1094309,1094465],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1094547,1094704],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1094781,1094932],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[1095025,1095192],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,563],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[1095276,1095840],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that decrements the expression by 1 and assigns the result back to the expression.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that decrements the expression by 1 and assigns the result back to the expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that decrements the expression by 1 and assigns the result back to the expression."}],"pos":[1097569,1097723],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1097971,1098058],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1098141,1098246],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that decrements the expression by 1 and assigns the result back to the expression.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that decrements the expression by 1 and assigns the result back to the expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that decrements the expression by 1 and assigns the result back to the expression."}],"pos":[1100105,1100259],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1100544,1100631],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[1100708,1100801],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1100884,1100989],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that increments the expression by 1 and assigns the result back to the expression.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that increments the expression by 1 and assigns the result back to the expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that increments the expression by 1 and assigns the result back to the expression."}],"pos":[1102725,1102879],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1103127,1103214],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1103297,1103402],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that increments the expression by 1 and assigns the result back to the expression.","nodes":[{"pos":[0,153],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that increments the expression by 1 and assigns the result back to the expression.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that increments the expression by 1 and assigns the result back to the expression."}],"pos":[1105261,1105415],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to apply the operations on.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on."}],"pos":[1105700,1105787],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents the implementing method.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method."}],"pos":[1105864,1105957],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the resultant expression.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression."}],"pos":[1106040,1106145],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property.","nodes":[{"pos":[0,119],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph> representing the access to an indexed property.","source":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property."}],"pos":[1108040,1108160],"yaml":true},{"content":"The object to which the property belongs. If the property is static/shared, it must be null.","nodes":[{"pos":[0,92],"content":"The object to which the property belongs. If the property is static/shared, it must be null.","nodes":[{"content":"The object to which the property belongs. If the property is static/shared, it must be null.","pos":[0,92],"nodes":[{"content":"The object to which the property belongs.","pos":[0,41]},{"content":"If the property is static/shared, it must be null.","pos":[42,92]}]}]}],"pos":[1108463,1108556],"yaml":true},{"content":"The name of the indexer.","nodes":[{"pos":[0,24],"content":"The name of the indexer.","nodes":[{"content":"The name of the indexer.","pos":[0,24]}]}],"pos":[1108624,1108649],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property.","nodes":[{"pos":[0,112],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects that are used to index the property.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property."}],"pos":[1108737,1108850],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>."}],"pos":[1108933,1109007],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property.","nodes":[{"pos":[0,119],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph> representing the access to an indexed property.","source":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property."}],"pos":[1110961,1111081],"yaml":true},{"content":"The object to which the property belongs. If the property is static/shared, it must be null.","nodes":[{"pos":[0,92],"content":"The object to which the property belongs. If the property is static/shared, it must be null.","nodes":[{"content":"The object to which the property belongs. If the property is static/shared, it must be null.","pos":[0,92],"nodes":[{"content":"The object to which the property belongs.","pos":[0,41]},{"content":"If the property is static/shared, it must be null.","pos":[42,92]}]}]}],"pos":[1111403,1111496],"yaml":true},{"content":"The <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property to index.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> that represents the property to index.","source":"The <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property to index."}],"pos":[1111576,1111671],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property.","nodes":[{"pos":[0,112],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects that are used to index the property.","source":"An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property."}],"pos":[1111759,1111872],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>."}],"pos":[1111955,1112029],"yaml":true},{"content":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property.","nodes":[{"pos":[0,119],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph> representing the access to an indexed property.","source":"Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property."}],"pos":[1114130,1114250],"yaml":true},{"content":"The object to which the property belongs. If the property is static/shared, it must be null.","nodes":[{"pos":[0,92],"content":"The object to which the property belongs. If the property is static/shared, it must be null.","nodes":[{"content":"The object to which the property belongs. If the property is static/shared, it must be null.","pos":[0,92],"nodes":[{"content":"The object to which the property belongs.","pos":[0,41]},{"content":"If the property is static/shared, it must be null.","pos":[42,92]}]}]}],"pos":[1114610,1114703],"yaml":true},{"content":"The <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property to index.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> that represents the property to index.","source":"The <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property to index."}],"pos":[1114783,1114878],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property.","nodes":[{"pos":[0,168],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> objects that are used to index the property.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property."}],"pos":[1115004,1115173],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.","nodes":[{"pos":[0,73],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.IndexExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>."}],"pos":[1115256,1115330],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> accessing a property.","nodes":[{"pos":[0,93],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> accessing a property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> accessing a property."}],"pos":[1117094,1117188],"yaml":true},{"content":"The containing object of the property. This can be null for static properties.","nodes":[{"pos":[0,78],"content":"The containing object of the property. This can be null for static properties.","nodes":[{"content":"The containing object of the property. This can be null for static properties.","pos":[0,78],"nodes":[{"content":"The containing object of the property.","pos":[0,38]},{"content":"This can be null for static properties.","pos":[39,78]}]}]}],"pos":[1117459,1117538],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> that contains the property.","nodes":[{"pos":[0,92],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> that contains the property.","source":"The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> that contains the property."}],"pos":[1117596,1117689],"yaml":true},{"content":"The property to be accessed.","nodes":[{"pos":[0,28],"content":"The property to be accessed.","nodes":[{"content":"The property to be accessed.","pos":[0,28]}]}],"pos":[1117757,1117786],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.MemberExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.MemberExpression\"></xref>."}],"pos":[1117870,1117945],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property.","nodes":[{"pos":[0,109],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing a property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property."}],"pos":[1119746,1119856],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \n  \n If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.","nodes":[{"pos":[0,268],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt;</ph>.","pos":[0,268],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>."}]},{"pos":[275,384],"content":"If the property represented by <ph id=\"ph1\">`property`</ph> is <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic), <ph id=\"ph4\">`expression`</ph> can be <ph id=\"ph5\">`null`</ph>.","source":"If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`."}],"pos":[1119867,1120256],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. This can be null for static properties.","nodes":[{"pos":[0,201],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. This can be null for static properties.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> property equal to.","pos":[0,161],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to."},{"content":"This can be null for static properties.","pos":[162,201]}]}],"pos":[1120536,1120738],"yaml":true},{"content":"The <xref href=\"System.Reflection.PropertyInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"The <xref href=\"System.Reflection.PropertyInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property equal to."}],"pos":[1120819,1120974],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> properties set to the specified values.","nodes":[{"pos":[0,426],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> properties set to the specified values."}],"pos":[1121058,1121485],"yaml":true},{"content":"<code>property</code> is `null`.  \n  \n -or-  \n  \n The property that <code>property</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;property&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>property</code> is `null`."},{"pos":[39,43],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[50,182],"content":"The property that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">property</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents is not <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">`null`</ph>.","source":"The property that <code>property</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`."}],"pos":[1121658,1121847],"yaml":true},{"content":"<code>expression</code>.Type is not assignable to the declaring type of the property that <code>property</code> represents.","nodes":[{"pos":[0,123],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type is not assignable to the declaring type of the property that <ph id=\"ph2\">&lt;code&gt;property&lt;/code&gt;</ph> represents.","source":"<code>expression</code>.Type is not assignable to the declaring type of the property that <code>property</code> represents."}],"pos":[1121941,1122065],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property by using a property accessor method.","nodes":[{"pos":[0,145],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing a property by using a property accessor method.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property by using a property accessor method."}],"pos":[1123780,1123926],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \n  \n If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.","nodes":[{"pos":[0,268],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt;</ph>.","pos":[0,268],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>."}]},{"pos":[275,390],"content":"If the method represented by <ph id=\"ph1\">`propertyAccessor`</ph> is <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic), <ph id=\"ph4\">`expression`</ph> can be <ph id=\"ph5\">`null`</ph>.","source":"If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`."}],"pos":[1123937,1124332],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. This can be null for static properties.","nodes":[{"pos":[0,201],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. This can be null for static properties.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> property equal to.","pos":[0,161],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to."},{"content":"This can be null for static properties.","pos":[162,201]}]}],"pos":[1124618,1124820],"yaml":true},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> that represents a property accessor method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method."}],"pos":[1124907,1125005],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code> and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>.","nodes":[{"pos":[0,571],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> and the <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph7\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> that represents the property accessed in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph8\">propertyAccessor</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code> and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>."}],"pos":[1125089,1125661],"yaml":true},{"content":"<code>propertyAccessor</code> is `null`.  \n  \n -or-  \n  \n The method that <code>propertyAccessor</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>propertyAccessor</code> is `null`."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,196],"content":"The method that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents is not <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">`null`</ph>.","source":"The method that <code>propertyAccessor</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`."}],"pos":[1125834,1126037],"yaml":true},{"content":"<code>expression</code>.Type is not assignable to the declaring type of the method represented by <code>propertyAccessor</code>.  \n  \n -or-  \n  \n The method that <code>propertyAccessor</code> represents is not a property accessor method.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type is not assignable to the declaring type of the method represented by <ph id=\"ph2\">&lt;code&gt;propertyAccessor&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type is not assignable to the declaring type of the method represented by <code>propertyAccessor</code>."},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,237],"content":"The method that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">propertyAccessor</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents is not a property accessor method.","source":"The method that <code>propertyAccessor</code> represents is not a property accessor method."}],"pos":[1126131,1126375],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property.","nodes":[{"pos":[0,109],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing a property.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property."}],"pos":[1128011,1128121],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression>is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.  \n  \n This method searches `expression`.Type and its base types for a property that has the name `propertyName`. Public properties are given preference over non-public properties. If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.","nodes":[{"pos":[0,306],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph>is equal to the <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> that represents the property denoted by <ph id=\"ph5\">`propertyName`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression>is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`."},{"pos":[313,685],"content":"This method searches `expression`.Type and its base types for a property that has the name `propertyName`. Public properties are given preference over non-public properties. If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.","nodes":[{"content":"This method searches <ph id=\"ph1\">`expression`</ph>.Type and its base types for a property that has the name <ph id=\"ph2\">`propertyName`</ph>.","pos":[0,106],"source":"This method searches `expression`.Type and its base types for a property that has the name `propertyName`."},{"content":"Public properties are given preference over non-public properties.","pos":[107,173]},{"content":"If a matching property is found, this method passes <ph id=\"ph1\">`expression`</ph> and the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> that represents that property to <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph>.","pos":[174,372],"source":" If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>."}]}],"pos":[1128132,1128822],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property named <code>propertyName</code>. This can be `null` for static properties.","nodes":[{"pos":[0,220],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property named <code>propertyName</code>. This can be `null` for static properties.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> contains a property named <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">propertyName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,178],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property named <code>propertyName</code>."},{"content":"This can be <ph id=\"ph1\">`null`</ph> for static properties.","pos":[179,220],"source":" This can be `null` for static properties."}]}],"pos":[1129536,1129757],"yaml":true},{"content":"The name of a property to be accessed.","nodes":[{"pos":[0,38],"content":"The name of a property to be accessed.","nodes":[{"content":"The name of a property to be accessed.","pos":[0,38]}]}],"pos":[1129825,1129864],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property denoted by <code>propertyName</code>.","nodes":[{"pos":[0,567],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and the <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph7\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> that represents the property denoted by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph8\">propertyName</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property denoted by <code>propertyName</code>."}],"pos":[1129948,1130516],"yaml":true},{"content":"<code>expression</code> or <code>propertyName</code> is `null`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;propertyName&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>propertyName</code> is `null`."}],"pos":[1130689,1130753],"yaml":true},{"content":"No property named <code>propertyName</code> is defined in <code>expression</code>.Type or its base types.","nodes":[{"pos":[0,105],"content":"No property named <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">propertyName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type or its base types.","source":"No property named <code>propertyName</code> is defined in <code>expression</code>.Type or its base types."}],"pos":[1130847,1130953],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property or field.","nodes":[{"pos":[0,118],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that represents accessing a property or field.","source":"Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property or field."}],"pos":[1132653,1132772],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.  \n  \n This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`. Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.","nodes":[{"pos":[0,429],"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MemberExpression&gt;</ph> is equal to the <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph> properties of the <ph id=\"ph5\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> or <ph id=\"ph6\">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, respectively, that represents the property or field denoted by <ph id=\"ph7\">`propertyOrFieldName`</ph>.","source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`."},{"pos":[436,1021],"content":"This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`. Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.","nodes":[{"content":"This method searches <ph id=\"ph1\">`expression`</ph>.Type and its base types for a property or field that has the name <ph id=\"ph2\">`propertyOrFieldName`</ph>.","pos":[0,122],"source":"This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`."},{"content":"Public properties and fields are given preference over non-public properties and fields.","pos":[123,211]},{"content":"Also, properties are given preference over fields.","pos":[212,262]},{"content":"If a matching property or field is found, this method passes <ph id=\"ph1\">`expression`</ph> and the <ph id=\"ph2\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> that represents that property or field to <ph id=\"ph4\">&lt;xref:System.Linq.Expressions.Expression.Property%2A&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Linq.Expressions.Expression.Field%2A&gt;</ph>, respectively.","pos":[263,585],"source":" If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively."}]}],"pos":[1132783,1133809],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property or field named <code>propertyOrFieldName</code>. This can be null for static members.","nodes":[{"pos":[0,231],"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property or field named <code>propertyOrFieldName</code>. This can be null for static members.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> contains a property or field named <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">propertyOrFieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,194],"source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property or field named <code>propertyOrFieldName</code>."},{"content":"This can be null for static members.","pos":[195,231]}]}],"pos":[1134546,1134778],"yaml":true},{"content":"The name of a property or field to be accessed.","nodes":[{"pos":[0,47],"content":"The name of a property or field to be accessed.","nodes":[{"content":"The name of a property or field to be accessed.","pos":[0,47]}]}],"pos":[1134853,1134901],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> or <xref href=\"System.Reflection.FieldInfo\"></xref> that represents the property or field denoted by <code>propertyOrFieldName</code>.","nodes":[{"pos":[0,635],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MemberExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"&gt;&lt;/xref&gt;</ph>, the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Expression\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and the <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.MemberExpression.Member\"&gt;&lt;/xref&gt;</ph> property set to the <ph id=\"ph7\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph8\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> that represents the property or field denoted by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph9\">propertyOrFieldName</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> or <xref href=\"System.Reflection.FieldInfo\"></xref> that represents the property or field denoted by <code>propertyOrFieldName</code>."}],"pos":[1134985,1135621],"yaml":true},{"content":"<code>expression</code> or <code>propertyOrFieldName</code> is `null`.","nodes":[{"pos":[0,70],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;propertyOrFieldName&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>propertyOrFieldName</code> is `null`."}],"pos":[1135801,1135872],"yaml":true},{"content":"No property or field named <code>propertyOrFieldName</code> is defined in <code>expression</code>.Type or its base types.","nodes":[{"pos":[0,121],"content":"No property or field named <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">propertyOrFieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">expression</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type or its base types.","source":"No property or field named <code>propertyOrFieldName</code> is defined in <code>expression</code>.Type or its base types."}],"pos":[1135966,1136088],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an expression that has a constant value of type <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,191],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an expression that has a constant value of type <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an expression that has a constant value of type <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[1137662,1137854],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`. Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.","nodes":[{"pos":[0,502],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`. Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> represents the constructed type <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, where the type argument is the type represented by <ph id=\"ph4\">`expression`</ph>.Type.","pos":[0,275],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[276,356],"source":" The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`."},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> are <ph id=\"ph3\">`false`</ph>.","pos":[357,502],"source":" Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`."}]}],"pos":[1137865,1138368],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[1138603,1138761],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Quote\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.","nodes":[{"pos":[0,338],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Quote\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Quote\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value."}],"pos":[1138844,1139183],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[1139353,1139388],"yaml":true},{"content":"Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.","nodes":[{"pos":[0,174],"content":"Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.","nodes":[{"content":"Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.","pos":[0,174],"nodes":[{"content":"Reduces this node to a simpler expression.","pos":[0,42]},{"content":"If CanReduce returns true, this should return a valid expression.","pos":[43,108]},{"content":"This method can return another node which itself must be reduced.","pos":[109,174]}]}]}],"pos":[1140830,1141005],"yaml":true},{"content":"The reduced expression.","nodes":[{"pos":[0,23],"content":"The reduced expression.","nodes":[{"content":"The reduced expression.","pos":[0,23]}]}],"pos":[1141186,1141210],"yaml":true},{"content":"Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.","nodes":[{"pos":[0,174],"content":"Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.","nodes":[{"content":"Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.","pos":[0,174],"nodes":[{"content":"Reduces this node to a simpler expression.","pos":[0,42]},{"content":"If CanReduce returns true, this should return a valid expression.","pos":[43,108]},{"content":"This method can return another node which itself must be reduced.","pos":[109,174]}]}]}],"pos":[1142750,1142925],"yaml":true},{"content":"Unlike Reduce, this method checks that the reduced node satisfies certain invariants.","nodes":[{"pos":[0,85],"content":"Unlike Reduce, this method checks that the reduced node satisfies certain invariants.","nodes":[{"content":"Unlike Reduce, this method checks that the reduced node satisfies certain invariants.","pos":[0,85]}]}],"pos":[1142936,1143022],"yaml":true,"extradata":"MT"},{"content":"The reduced expression.","nodes":[{"pos":[0,23],"content":"The reduced expression.","nodes":[{"content":"The reduced expression.","pos":[0,23]}]}],"pos":[1143203,1143227],"yaml":true},{"content":"Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.","nodes":[{"pos":[0,137],"content":"Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.","nodes":[{"content":"Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.","pos":[0,137]}]}],"pos":[1144809,1144947],"yaml":true},{"content":"The reduced expression.","nodes":[{"pos":[0,23],"content":"The reduced expression.","nodes":[{"content":"The reduced expression.","pos":[0,23]}]}],"pos":[1145130,1145154],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a reference equality comparison.","nodes":[{"pos":[0,120],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a reference equality comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a reference equality comparison."}],"pos":[1147005,1147126],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1147401,1147557],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1147639,1147796],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,412],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Equal\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1147880,1148293],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a reference inequality comparison.","nodes":[{"pos":[0,122],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a reference inequality comparison.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a reference inequality comparison."}],"pos":[1150160,1150283],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1150561,1150717],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1150799,1150956],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1151040,1151456],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception with a given type.","nodes":[{"pos":[0,134],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a rethrowing of an exception with a given type.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception with a given type."}],"pos":[1153038,1153173],"yaml":true},{"content":"The new <xref href=\"System.Type\"></xref> of the expression.","nodes":[{"pos":[0,59],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the expression.","source":"The new <xref href=\"System.Type\"></xref> of the expression."}],"pos":[1153345,1153405],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception.","nodes":[{"pos":[0,108],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a rethrowing of an exception.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception."}],"pos":[1153488,1153597],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception.","nodes":[{"pos":[0,116],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a rethrowing of an exception.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception."}],"pos":[1155118,1155235],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception.","nodes":[{"pos":[0,108],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a rethrowing of an exception.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception."}],"pos":[1155426,1155535],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement.","nodes":[{"pos":[0,102],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a return statement.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement."}],"pos":[1157194,1157297],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[1157526,1157670],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.","nodes":[{"pos":[0,320],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Return, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and a null value to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping."}],"pos":[1157752,1158073],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement. The value passed to the label upon jumping can be specified.","nodes":[{"pos":[0,163],"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement. The value passed to the label upon jumping can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a return statement.","pos":[0,102],"source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement."},{"content":"The value passed to the label upon jumping can be specified.","pos":[103,163]}]}],"pos":[1159850,1160014],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[1160800,1160944],"yaml":true},{"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"pos":[0,67],"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"content":"The value that will be passed to the associated label upon jumping.","pos":[0,67]}]}],"pos":[1161026,1161094],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.","nodes":[{"pos":[0,328],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Continue, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping."}],"pos":[1161176,1161505],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement with the specified type.","nodes":[{"pos":[0,126],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a return statement with the specified type.","source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement with the specified type."}],"pos":[1163217,1163344],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[1163584,1163728],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[1163786,1163913],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.","nodes":[{"pos":[0,420],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Return, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, the <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and a null value to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping."}],"pos":[1163995,1164416],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.","nodes":[{"pos":[0,187],"content":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> representing a return statement with the specified type.","pos":[0,126],"source":"Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement with the specified type."},{"content":"The value passed to the label upon jumping can be specified.","pos":[127,187]}]}],"pos":[1166247,1166435],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LabelTarget\"&gt;&lt;/xref&gt;</ph> that the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> will jump to.","source":"The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to."}],"pos":[1166717,1166861],"yaml":true},{"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"pos":[0,67],"content":"The value that will be passed to the associated label upon jumping.","nodes":[{"content":"The value that will be passed to the associated label upon jumping.","pos":[0,67]}]}],"pos":[1166943,1167011],"yaml":true},{"content":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,126],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[1167069,1167196],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.","nodes":[{"pos":[0,428],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.GotoExpression\"&gt;&lt;/xref&gt;</ph> with <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Kind\"&gt;&lt;/xref&gt;</ph> equal to Continue, the <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.GotoExpression.Target\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>, the <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property set to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph6\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph7\">value</ph><ept id=\"p3\">&lt;/code&gt;</ept> to be passed to the target label upon jumping.","source":"A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping."}],"pos":[1167278,1167707],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift operation.","nodes":[{"pos":[0,120],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise right-shift operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift operation."}],"pos":[1169524,1169645],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1061],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the right-shift operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1071,1407],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type is an integral type (one of <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id=\"ph10\">`right`</ph>.Type is <ph id=\"ph11\">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id=\"ph12\">`null`</ph>.","source":"Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`."},{"pos":[1418,1456],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1460,1501],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1511,1713],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1723,1898],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1912,2110],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2124,2196],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2203,2240],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2250,2408],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined right-shift operator.","pos":[79,158]}]},{"pos":[2418,2606],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.","pos":[71,188]}]}],"pos":[1169656,1172291],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1172562,1172718],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1172800,1172957],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,417],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1173041,1173459],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1173634,1173685],"yaml":true},{"content":"The right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,95],"content":"The right-shift operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1173795,1173891],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift operation.","nodes":[{"pos":[0,120],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise right-shift operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift operation."}],"pos":[1175759,1175880],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,968],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[978,1250],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the right-shift operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1260,1596],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type is an integral type (one of <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.UInt64&gt;</ph>, or the corresponding nullable types) and <ph id=\"ph10\">`right`</ph>.Type is <ph id=\"ph11\">&lt;xref:System.Int32&gt;</ph>, the implementing method is <ph id=\"ph12\">`null`</ph>.","source":"Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`."},{"pos":[1607,1645],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1649,1690],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1700,1902],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1912,2087],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[2101,2299],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2313,2385],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2392,2429],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2439,2597],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined right-shift operator.","pos":[79,158]}]},{"pos":[2607,2795],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.","pos":[71,188]}]}],"pos":[1175891,1178717],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1179025,1179181],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1179263,1179420],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1179497,1179648],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,488],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1179732,1180221],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1180396,1180447],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[1180541,1180704],"yaml":true},{"content":"<code>method</code> is `null` and the right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the right-shift operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1180814,1180944],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation.","nodes":[{"pos":[0,131],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise right-shift assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation."}],"pos":[1182725,1182857],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1183134,1183290],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1183372,1183529],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,423],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1183613,1184037],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation.","nodes":[{"pos":[0,131],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise right-shift assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation."}],"pos":[1186023,1186155],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1186469,1186625],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1186707,1186864],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1186941,1187092],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,494],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1187176,1187671],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation.","nodes":[{"pos":[0,131],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a bitwise right-shift assignment operation.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation."}],"pos":[1189834,1189966],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1190333,1190489],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1190571,1190728],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1190805,1190956],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[1191049,1191216],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,568],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[1191300,1191869],"yaml":true},{"content":"Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref>.","nodes":[{"pos":[0,95],"content":"Creates an instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref>."}],"pos":[1193657,1193753],"yaml":true},{"content":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> collection.","nodes":[{"pos":[0,201],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"&gt;&lt;/xref&gt;</ph> collection.","source":"An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> collection."}],"pos":[1194030,1194232],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> property set to the specified value.","nodes":[{"pos":[0,386],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> property set to the specified value."}],"pos":[1194326,1194713],"yaml":true},{"content":"Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref>.","nodes":[{"pos":[0,95],"content":"Creates an instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref>."}],"pos":[1196648,1196744],"yaml":true},{"content":"A collection of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> collection.","nodes":[{"pos":[0,205],"content":"A collection of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> objects to use to populate the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"&gt;&lt;/xref&gt;</ph> collection.","source":"A collection of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> collection."}],"pos":[1197097,1197303],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> property set to the specified value.","nodes":[{"pos":[0,386],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> property set to the specified value."}],"pos":[1197397,1197784],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.","nodes":[{"pos":[0,161],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic subtraction operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking."}],"pos":[1199599,1199761],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1061],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1071,1167],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1178,1216],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1220,1261],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1271,1473],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1483,1658],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1672,1870],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1884,1956],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1963,2000],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2010,2168],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined subtraction operator.","pos":[79,158]}]},{"pos":[2178,2366],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","pos":[71,188]}]}],"pos":[1199772,1202167],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1202910,1203066],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1203148,1203304],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,415],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1203388,1203804],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1203977,1204028],"yaml":true},{"content":"The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,95],"content":"The subtraction operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1204138,1204234],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.","nodes":[{"pos":[0,161],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic subtraction operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking."}],"pos":[1206068,1206230],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,781],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[791,959],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[969,1241],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1251,1347],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1358,1396],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1400,1441],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1451,1653],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1663,1838],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1852,2050],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2064,2136],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2143,2180],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2190,2348],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined subtraction operator.","pos":[79,158]}]},{"pos":[2358,2546],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","pos":[71,188]}]}],"pos":[1206241,1208818],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1209124,1209279],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1209361,1209517],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1209594,1209745],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,486],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1209829,1210316],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1210489,1210540],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[1210634,1210797],"yaml":true},{"content":"<code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the subtraction operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1210907,1211037],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking.","nodes":[{"pos":[0,160],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a subtraction assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking."}],"pos":[1212784,1212945],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1213220,1213376],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1213458,1213615],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,421],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1213699,1214121],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking.","nodes":[{"pos":[0,160],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a subtraction assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking."}],"pos":[1216093,1216254],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1216566,1216722],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1216804,1216961],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1217038,1217189],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,492],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1217273,1217766],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking.","nodes":[{"pos":[0,160],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a subtraction assignment operation that does not have overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking."}],"pos":[1219915,1220076],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1220441,1220597],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1220679,1220836],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1220913,1221064],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[1221157,1221324],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,566],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[1221408,1221975],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking.","nodes":[{"pos":[0,150],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a subtraction assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking."}],"pos":[1224144,1224295],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1224667,1224823],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1224905,1225062],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1225139,1225290],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.","nodes":[{"pos":[0,166],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.LambdaExpression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to."}],"pos":[1225383,1225550],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.","nodes":[{"pos":[0,573],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values."}],"pos":[1225634,1226208],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking.","nodes":[{"pos":[0,150],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a subtraction assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking."}],"pos":[1228084,1228235],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1228517,1228673],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1228755,1228912],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,428],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1228996,1229425],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking.","nodes":[{"pos":[0,150],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a subtraction assignment operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking."}],"pos":[1231446,1231597],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1231916,1232072],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1232154,1232311],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1232388,1232539],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,499],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1232623,1233123],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that has overflow checking.","nodes":[{"pos":[0,151],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic subtraction operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that has overflow checking."}],"pos":[1235108,1235260],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation :  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,782],"content":"The following rules determine the implementing method for the operation :","nodes":[{"content":"The following rules determine the implementing method for the operation :","pos":[0,73]}]},{"pos":[792,960],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes two arguments, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node."},{"pos":[970,1242],"content":"Otherwise, if the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1252,1348],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1359,1397],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1401,1442],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1452,1654],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1664,1839],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1853,2051],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[2065,2137],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[2144,2181],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2191,2349],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined subtraction operator.","pos":[79,158]}]},{"pos":[2359,2547],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","pos":[71,188]}]}],"pos":[1235271,1237849],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1238162,1238317],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1238399,1238555],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to."}],"pos":[1238632,1238783],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,493],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1238867,1239361],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1239541,1239592],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.","nodes":[{"pos":[0,162],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly two arguments.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments."}],"pos":[1239686,1239849],"yaml":true},{"content":"<code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the subtraction operator is not defined for <ph id=\"ph3\">&lt;code&gt;left&lt;/code&gt;</ph>.Type and <ph id=\"ph4\">&lt;code&gt;right&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1239959,1240089],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that has overflow checking.","nodes":[{"pos":[0,151],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an arithmetic subtraction operation that has overflow checking.","source":"Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that has overflow checking."}],"pos":[1241864,1242016],"yaml":true},{"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"pos":[0,563],"content":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.","nodes":[{"content":"The resulting <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression&gt;</ph> has the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;</ph> property set to the implementing method.","pos":[0,168],"source":"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are <ph id=\"ph1\">`false`</ph>.","pos":[449,477],"source":" Otherwise, they are `false`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>.","pos":[478,563],"source":" The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."}]},{"pos":[570,675],"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","nodes":[{"content":"The following information describes the implementing method, the node type, and whether a node is lifted.","pos":[0,105]}]},{"pos":[686,705],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[709,790],"content":"The following rules determine the selected implementing method for the operation:","nodes":[{"content":"The following rules determine the selected implementing method for the operation:","pos":[0,81]}]},{"pos":[800,1061],"content":"If the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of either <ph id=\"ph2\">`left`</ph> or <ph id=\"ph3\">`right`</ph> represents a user-defined type that overloads the subtraction operator, the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that method is the implementing method.","source":"If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method."},{"pos":[1071,1167],"content":"Otherwise, if <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are numeric types, the implementing method is <ph id=\"ph3\">`null`</ph>.","source":"Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`."},{"pos":[1178,1216],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1220,1261],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1271,1473],"content":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.","pos":[0,134],"source":"If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[135,202]}]},{"pos":[1483,1658],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1672,1870],"content":"<ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.","source":"`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method."},{"pos":[1884,1956],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1963,2000],"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is `null`:"},{"pos":[2010,2168],"content":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both non-nullable, the node is not lifted.","pos":[0,78],"source":"If `left`.Type and `right`.Type are both non-nullable, the node is not lifted."},{"content":"The type of the node is the result type of the predefined subtraction operator.","pos":[79,158]}]},{"pos":[2178,2366],"content":"If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","nodes":[{"content":"If <ph id=\"ph1\">`left`</ph>.Type and <ph id=\"ph2\">`right`</ph>.Type are both nullable, the node is lifted.","pos":[0,70],"source":"If `left`.Type and `right`.Type are both nullable, the node is lifted."},{"content":"The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.","pos":[71,188]}]}],"pos":[1242027,1244422],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to."}],"pos":[1244698,1244853],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.","nodes":[{"pos":[0,155],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to."}],"pos":[1244935,1245091],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.","nodes":[{"pos":[0,422],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Left\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.BinaryExpression.Right\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values."}],"pos":[1245175,1245598],"yaml":true},{"content":"<code>left</code> or <code>right</code> is `null`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>left</code> or <code>right</code> is `null`."}],"pos":[1245778,1245829],"yaml":true},{"content":"The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.","nodes":[{"pos":[0,95],"content":"The subtraction operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.Type.","source":"The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type."}],"pos":[1245939,1246035],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case..","nodes":[{"pos":[0,134],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph> that represents a <ph id=\"ph2\">`switch`</ph> statement that has a default case..","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.."}],"pos":[1248086,1248221],"yaml":true},{"content":"The result type of the switch.","nodes":[{"pos":[0,30],"content":"The result type of the switch.","nodes":[{"content":"The result type of the switch.","pos":[0,30]}]}],"pos":[1248574,1248605],"yaml":true},{"content":"The value to be tested against each case.","nodes":[{"pos":[0,41],"content":"The value to be tested against each case.","nodes":[{"content":"The value to be tested against each case.","pos":[0,41]}]}],"pos":[1248693,1248735],"yaml":true},{"content":"The result of the switch if <code>switchValue</code> does not match any of the cases.","nodes":[{"pos":[0,85],"content":"The result of the switch if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">switchValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match any of the cases.","source":"The result of the switch if <code>switchValue</code> does not match any of the cases."}],"pos":[1248823,1248909],"yaml":true},{"content":"The equality comparison method to use.","nodes":[{"pos":[0,38],"content":"The equality comparison method to use.","nodes":[{"content":"The equality comparison method to use.","pos":[0,38]}]}],"pos":[1248990,1249029],"yaml":true},{"content":"The set of cases for this switch expression.","nodes":[{"pos":[0,44],"content":"The set of cases for this switch expression.","nodes":[{"content":"The set of cases for this switch expression.","pos":[0,44]}]}],"pos":[1249113,1249158],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>."}],"pos":[1249242,1249317],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement without a default case.","nodes":[{"pos":[0,132],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph> that represents a <ph id=\"ph2\">`switch`</ph> statement without a default case.","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement without a default case."}],"pos":[1251122,1251255],"yaml":true},{"content":"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \n  \n If `switchValue` does not match any of the cases, no exception is thrown.","nodes":[{"pos":[0,218],"content":"All <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> objects in a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> object must have the same type, unless the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> has the type <ph id=\"ph4\">`void`</ph>.","source":"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`."},{"pos":[225,396],"content":"Each <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> object has an implicit <ph id=\"ph2\">`break`</ph> statement, which means that there is no implicit fall through from one case label to another.","source":"Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another."},{"pos":[403,476],"content":"If <ph id=\"ph1\">`switchValue`</ph> does not match any of the cases, no exception is thrown.","source":"If `switchValue` does not match any of the cases, no exception is thrown."}],"pos":[1251266,1251749],"yaml":true,"extradata":"MT"},{"content":"The value to be tested against each case.","nodes":[{"pos":[0,41],"content":"The value to be tested against each case.","nodes":[{"content":"The value to be tested against each case.","pos":[0,41]}]}],"pos":[1252514,1252556],"yaml":true},{"content":"The set of cases for this switch expression.","nodes":[{"pos":[0,44],"content":"The set of cases for this switch expression.","nodes":[{"content":"The set of cases for this switch expression.","pos":[0,44]}]}],"pos":[1252640,1252685],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>."}],"pos":[1252769,1252844],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.","nodes":[{"pos":[0,133],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph> that represents a <ph id=\"ph2\">`switch`</ph> statement that has a default case.","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case."}],"pos":[1254768,1254902],"yaml":true},{"content":"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \n  \n If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.","nodes":[{"pos":[0,218],"content":"All <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> objects in a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> object must have the same type, unless the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> has the type <ph id=\"ph4\">`void`</ph>.","source":"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`."},{"pos":[225,396],"content":"Each <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> object has an implicit <ph id=\"ph2\">`break`</ph> statement, which means that there is no implicit fall through from one case label to another.","source":"Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another."},{"pos":[403,506],"content":"If <ph id=\"ph1\">`switchValue`</ph> does not match any of the cases, the default case represented by <ph id=\"ph2\">`defaultBody`</ph> is run.","source":"If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run."}],"pos":[1254913,1255426],"yaml":true,"extradata":"MT"},{"content":"The value to be tested against each case.","nodes":[{"pos":[0,41],"content":"The value to be tested against each case.","nodes":[{"content":"The value to be tested against each case.","pos":[0,41]}]}],"pos":[1256240,1256282],"yaml":true},{"content":"The result of the switch if <code>switchValue</code> does not match any of the cases.","nodes":[{"pos":[0,85],"content":"The result of the switch if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">switchValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match any of the cases.","source":"The result of the switch if <code>switchValue</code> does not match any of the cases."}],"pos":[1256370,1256456],"yaml":true},{"content":"The set of cases for this switch expression.","nodes":[{"pos":[0,44],"content":"The set of cases for this switch expression.","nodes":[{"content":"The set of cases for this switch expression.","pos":[0,44]}]}],"pos":[1256540,1256585],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>."}],"pos":[1256669,1256744],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.","nodes":[{"pos":[0,133],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph> that represents a <ph id=\"ph2\">`switch`</ph> statement that has a default case.","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case."}],"pos":[1258960,1259094],"yaml":true},{"content":"The value to be tested against each case.","nodes":[{"pos":[0,41],"content":"The value to be tested against each case.","nodes":[{"content":"The value to be tested against each case.","pos":[0,41]}]}],"pos":[1259504,1259546],"yaml":true},{"content":"The result of the switch if <code>switchValue</code> does not match any of the cases.","nodes":[{"pos":[0,85],"content":"The result of the switch if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">switchValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match any of the cases.","source":"The result of the switch if <code>switchValue</code> does not match any of the cases."}],"pos":[1259634,1259720],"yaml":true},{"content":"The equality comparison method to use.","nodes":[{"pos":[0,38],"content":"The equality comparison method to use.","nodes":[{"content":"The equality comparison method to use.","pos":[0,38]}]}],"pos":[1259801,1259840],"yaml":true},{"content":"The set of cases for this switch expression.","nodes":[{"pos":[0,44],"content":"The set of cases for this switch expression.","nodes":[{"content":"The set of cases for this switch expression.","pos":[0,44]}]}],"pos":[1259962,1260007],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>."}],"pos":[1260091,1260166],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.","nodes":[{"pos":[0,133],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph> that represents a <ph id=\"ph2\">`switch`</ph> statement that has a default case.","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case."}],"pos":[1262235,1262369],"yaml":true},{"content":"The value to be tested against each case.","nodes":[{"pos":[0,41],"content":"The value to be tested against each case.","nodes":[{"content":"The value to be tested against each case.","pos":[0,41]}]}],"pos":[1262741,1262783],"yaml":true},{"content":"The result of the switch if <code>switchValue</code> does not match any of the cases.","nodes":[{"pos":[0,85],"content":"The result of the switch if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">switchValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match any of the cases.","source":"The result of the switch if <code>switchValue</code> does not match any of the cases."}],"pos":[1262871,1262957],"yaml":true},{"content":"The equality comparison method to use.","nodes":[{"pos":[0,38],"content":"The equality comparison method to use.","nodes":[{"content":"The equality comparison method to use.","pos":[0,38]}]}],"pos":[1263038,1263077],"yaml":true},{"content":"The set of cases for this switch expression.","nodes":[{"pos":[0,44],"content":"The set of cases for this switch expression.","nodes":[{"content":"The set of cases for this switch expression.","pos":[0,44]}]}],"pos":[1263161,1263206],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>."}],"pos":[1263290,1263365],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.","nodes":[{"pos":[0,133],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph> that represents a <ph id=\"ph2\">`switch`</ph> statement that has a default case.","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case."}],"pos":[1265635,1265769],"yaml":true},{"content":"The result type of the switch.","nodes":[{"pos":[0,30],"content":"The result type of the switch.","nodes":[{"content":"The result type of the switch.","pos":[0,30]}]}],"pos":[1266160,1266191],"yaml":true},{"content":"The value to be tested against each case.","nodes":[{"pos":[0,41],"content":"The value to be tested against each case.","nodes":[{"content":"The value to be tested against each case.","pos":[0,41]}]}],"pos":[1266279,1266321],"yaml":true},{"content":"The result of the switch if <code>switchValue</code> does not match any of the cases.","nodes":[{"pos":[0,85],"content":"The result of the switch if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">switchValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match any of the cases.","source":"The result of the switch if <code>switchValue</code> does not match any of the cases."}],"pos":[1266409,1266495],"yaml":true},{"content":"The equality comparison method to use.","nodes":[{"pos":[0,38],"content":"The equality comparison method to use.","nodes":[{"content":"The equality comparison method to use.","pos":[0,38]}]}],"pos":[1266576,1266615],"yaml":true},{"content":"The set of cases for this switch expression.","nodes":[{"pos":[0,44],"content":"The set of cases for this switch expression.","nodes":[{"content":"The set of cases for this switch expression.","pos":[0,44]}]}],"pos":[1266737,1266782],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.","nodes":[{"pos":[0,74],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>."}],"pos":[1266866,1266941],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchCase\"></xref> for use in a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.","nodes":[{"pos":[0,141],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchCase\"&gt;&lt;/xref&gt;</ph> for use in a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchCase\"></xref> for use in a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>."}],"pos":[1268770,1268912],"yaml":true},{"content":"The body of the case.","nodes":[{"pos":[0,21],"content":"The body of the case.","nodes":[{"content":"The body of the case.","pos":[0,21]}]}],"pos":[1269184,1269206],"yaml":true},{"content":"The test values of the case.","nodes":[{"pos":[0,28],"content":"The test values of the case.","nodes":[{"content":"The test values of the case.","pos":[0,28]}]}],"pos":[1269295,1269324],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchCase\"></xref>.","nodes":[{"pos":[0,68],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchCase\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchCase\"></xref>."}],"pos":[1269402,1269471],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.SwitchCase\"></xref> object to be used in a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> object.","nodes":[{"pos":[0,158],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchCase\"&gt;&lt;/xref&gt;</ph> object to be used in a <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SwitchExpression\"&gt;&lt;/xref&gt;</ph> object.","source":"Creates a <xref href=\"System.Linq.Expressions.SwitchCase\"></xref> object to be used in a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> object."}],"pos":[1271451,1271610],"yaml":true},{"content":"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.","nodes":[{"pos":[0,218],"content":"All <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> objects in a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> object must have the same type, unless the <ph id=\"ph3\">&lt;xref:System.Linq.Expressions.SwitchExpression&gt;</ph> has the type <ph id=\"ph4\">`void`</ph>.","source":"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`."},{"pos":[225,396],"content":"Each <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.SwitchCase&gt;</ph> object has an implicit <ph id=\"ph2\">`break`</ph> statement, which means that there is no implicit fall through from one case label to another.","source":"Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another."}],"pos":[1271621,1272022],"yaml":true,"extradata":"MT"},{"content":"The body of the case.","nodes":[{"pos":[0,21],"content":"The body of the case.","nodes":[{"content":"The body of the case.","pos":[0,21]}]}],"pos":[1272815,1272837],"yaml":true},{"content":"The test values of the case.","nodes":[{"pos":[0,28],"content":"The test values of the case.","nodes":[{"content":"The test values of the case.","pos":[0,28]}]}],"pos":[1272964,1272993],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.SwitchCase\"></xref>.","nodes":[{"pos":[0,68],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SwitchCase\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.SwitchCase\"></xref>."}],"pos":[1273071,1273140],"yaml":true},{"content":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.","nodes":[{"pos":[0,87],"content":"Creates an instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>."}],"pos":[1274931,1275019],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to."}],"pos":[1275268,1275399],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to.","nodes":[{"pos":[0,128],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to."}],"pos":[1275461,1275590],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> equal to.","nodes":[{"pos":[0,134],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> equal to."}],"pos":[1275658,1275793],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"></xref> equal to.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"></xref> equal to."}],"pos":[1275859,1275992],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"></xref> properties set to the specified value.","nodes":[{"pos":[0,431],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"&gt;&lt;/xref&gt;</ph> properties set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"></xref> properties set to the specified value."}],"pos":[1276078,1276510],"yaml":true},{"content":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.","nodes":[{"pos":[0,87],"content":"Creates an instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>."}],"pos":[1278229,1278317],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to."}],"pos":[1278547,1278678],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to.","nodes":[{"pos":[0,128],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to."}],"pos":[1278740,1278869],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> equal to.","nodes":[{"pos":[0,134],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> equal to."}],"pos":[1278937,1279072],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> properties set to the specified value.","nodes":[{"pos":[0,350],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"&gt;&lt;/xref&gt;</ph> properties set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> properties set to the specified value."}],"pos":[1279158,1279509],"yaml":true},{"content":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.","nodes":[{"pos":[0,87],"content":"Creates an instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>."}],"pos":[1281120,1281208],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to."}],"pos":[1281402,1281533],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> property set to the specified value.","nodes":[{"pos":[0,188],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> property set to the specified value."}],"pos":[1281619,1281808],"yaml":true},{"content":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.","nodes":[{"pos":[0,87],"content":"Creates an instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>."}],"pos":[1283495,1283583],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to."}],"pos":[1283792,1283923],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to.","nodes":[{"pos":[0,128],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"&gt;&lt;/xref&gt;</ph> equal to.","source":"A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to."}],"pos":[1283985,1284114],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> properties set to the specified value.","nodes":[{"pos":[0,267],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"&gt;&lt;/xref&gt;</ph> properties set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> properties set to the specified value."}],"pos":[1284200,1284468],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a throwing of an exception.","nodes":[{"pos":[0,114],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a throwing of an exception.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a throwing of an exception."}],"pos":[1286100,1286215],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,59],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[1286990,1287050],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the exception.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the exception.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the exception."}],"pos":[1287133,1287227],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a throwing of an exception with a given type.","nodes":[{"pos":[0,132],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a throwing of an exception with a given type.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a throwing of an exception with a given type."}],"pos":[1288926,1289059],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,59],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[1289295,1289355],"yaml":true},{"content":"The new <xref href=\"System.Type\"></xref> of the expression.","nodes":[{"pos":[0,59],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the expression.","source":"The new <xref href=\"System.Type\"></xref> of the expression."}],"pos":[1289413,1289473],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the exception.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents the exception.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the exception."}],"pos":[1289556,1289650],"yaml":true},{"content":"Returns a textual representation of the <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,96],"content":"Returns a textual representation of the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a textual representation of the <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[1291175,1291272],"yaml":true},{"content":"A textual representation of the <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,88],"content":"A textual representation of the <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"A textual representation of the <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[1291407,1291496],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with any number of catch statements and neither a fault nor finally block.","nodes":[{"pos":[0,168],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph> representing a try block with any number of catch statements and neither a fault nor finally block.","source":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with any number of catch statements and neither a fault nor finally block."}],"pos":[1293315,1293484],"yaml":true},{"content":"The body of the try block.","nodes":[{"pos":[0,26],"content":"The body of the try block.","nodes":[{"content":"The body of the try block.","pos":[0,26]}]}],"pos":[1294265,1294292],"yaml":true},{"content":"The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> expressions representing the catch statements to be associated with the try block.","nodes":[{"pos":[0,164],"content":"The array of zero or more <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> expressions representing the catch statements to be associated with the try block.","source":"The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> expressions representing the catch statements to be associated with the try block."}],"pos":[1294379,1294544],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.","nodes":[{"pos":[0,71],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>."}],"pos":[1294625,1294697],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with any number of catch statements and a finally block.","nodes":[{"pos":[0,150],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph> representing a try block with any number of catch statements and a finally block.","source":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with any number of catch statements and a finally block."}],"pos":[1296699,1296850],"yaml":true},{"content":"The body of the try block.","nodes":[{"pos":[0,26],"content":"The body of the try block.","nodes":[{"content":"The body of the try block.","pos":[0,26]}]}],"pos":[1297706,1297733],"yaml":true},{"content":"The body of the finally block.","nodes":[{"pos":[0,30],"content":"The body of the finally block.","nodes":[{"content":"The body of the finally block.","pos":[0,30]}]}],"pos":[1297817,1297848],"yaml":true},{"content":"The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> expressions representing the catch statements to be associated with the try block.","nodes":[{"pos":[0,164],"content":"The array of zero or more <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.CatchBlock\"&gt;&lt;/xref&gt;</ph> expressions representing the catch statements to be associated with the try block.","source":"The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> expressions representing the catch statements to be associated with the try block."}],"pos":[1297935,1298100],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.","nodes":[{"pos":[0,71],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>."}],"pos":[1298181,1298253],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with a fault block and no catch statements.","nodes":[{"pos":[0,137],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph> representing a try block with a fault block and no catch statements.","source":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with a fault block and no catch statements."}],"pos":[1300067,1300205],"yaml":true},{"content":"The body of the try block.","nodes":[{"pos":[0,26],"content":"The body of the try block.","nodes":[{"content":"The body of the try block.","pos":[0,26]}]}],"pos":[1300471,1300498],"yaml":true},{"content":"The body of the fault block.","nodes":[{"pos":[0,28],"content":"The body of the fault block.","nodes":[{"content":"The body of the fault block.","pos":[0,28]}]}],"pos":[1300580,1300609],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.","nodes":[{"pos":[0,71],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>."}],"pos":[1300690,1300762],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with a finally block and no catch statements.","nodes":[{"pos":[0,139],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph> representing a try block with a finally block and no catch statements.","source":"Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with a finally block and no catch statements."}],"pos":[1302559,1302699],"yaml":true},{"content":"The body of the try block.","nodes":[{"pos":[0,26],"content":"The body of the try block.","nodes":[{"content":"The body of the try block.","pos":[0,26]}]}],"pos":[1302969,1302996],"yaml":true},{"content":"The body of the finally block.","nodes":[{"pos":[0,30],"content":"The body of the finally block.","nodes":[{"content":"The body of the finally block.","pos":[0,30]}]}],"pos":[1303080,1303111],"yaml":true},{"content":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.","nodes":[{"pos":[0,71],"content":"The created <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>."}],"pos":[1303192,1303264],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic System.Action delegate type that has specific type arguments.","nodes":[{"pos":[0,165],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> object that represents a generic System.Action delegate type that has specific type arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic System.Action delegate type that has specific type arguments."}],"pos":[1304962,1305128],"yaml":true},{"content":"An array of Type objects that specify the type arguments for the System.Action delegate type.","nodes":[{"pos":[0,93],"content":"An array of Type objects that specify the type arguments for the System.Action delegate type.","nodes":[{"content":"An array of Type objects that specify the type arguments for the System.Action delegate type.","pos":[0,93]}]}],"pos":[1305307,1305401],"yaml":true},{"content":"When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.","nodes":[{"pos":[0,247],"content":"When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the generic System.Action delegate type that has specific type arguments.","pos":[0,108]},{"content":"Contains null if there is no generic System.Action delegate that matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArgs</ph><ept id=\"p1\">&lt;/code&gt;</ept>.This parameter is passed uninitialized.","pos":[109,247],"source":" Contains null if there is no generic System.Action delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized."}]}],"pos":[1305465,1305713],"yaml":true},{"content":"true if generic System.Action delegate type was created for specific <code>typeArgs</code>; false otherwise.","nodes":[{"pos":[0,108],"content":"true if generic System.Action delegate type was created for specific <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArgs</ph><ept id=\"p1\">&lt;/code&gt;</ept>; false otherwise.","source":"true if generic System.Action delegate type was created for specific <code>typeArgs</code>; false otherwise."}],"pos":[1305771,1305880],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.","nodes":[{"pos":[0,237],"content":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> object that represents a generic System.Func delegate type that has specific type arguments.","pos":[0,163],"source":"Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic System.Func delegate type that has specific type arguments."},{"content":"The last type argument specifies the return type of the created delegate.","pos":[164,237]}]}],"pos":[1307572,1307810],"yaml":true},{"content":"An array of Type objects that specify the type arguments for the System.Func delegate type.","nodes":[{"pos":[0,91],"content":"An array of Type objects that specify the type arguments for the System.Func delegate type.","nodes":[{"content":"An array of Type objects that specify the type arguments for the System.Func delegate type.","pos":[0,91]}]}],"pos":[1307985,1308077],"yaml":true},{"content":"When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.","nodes":[{"pos":[0,243],"content":"When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the generic System.Func delegate type that has specific type arguments.","pos":[0,106]},{"content":"Contains null if there is no generic System.Func delegate that matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArgs</ph><ept id=\"p1\">&lt;/code&gt;</ept>.This parameter is passed uninitialized.","pos":[107,243],"source":" Contains null if there is no generic System.Func delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized."}]}],"pos":[1308139,1308383],"yaml":true},{"content":"true if generic System.Func delegate type was created for specific <code>typeArgs</code>; false otherwise.","nodes":[{"pos":[0,106],"content":"true if generic System.Func delegate type was created for specific <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArgs</ph><ept id=\"p1\">&lt;/code&gt;</ept>; false otherwise.","source":"true if generic System.Func delegate type was created for specific <code>typeArgs</code>; false otherwise."}],"pos":[1308441,1308548],"yaml":true},{"content":"Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\"></xref> represents.","nodes":[{"pos":[0,116],"content":"Gets the static type of the expression that this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> represents.","source":"Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\"></xref> represents."}],"pos":[1310054,1310171],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.  \n  \n [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]","nodes":[{"pos":[0,419],"content":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.","nodes":[{"content":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.","pos":[0,419],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> is the type of the expression tree node, whereas the <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> represents the static common language runtime (CLR) type of the expression that the node represents.","pos":[0,261],"source":"The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents."},{"content":"For example, two nodes with different node types can have the same <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph>, as shown in the following code example.","pos":[262,419],"source":" For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example."}]}]},{"pos":[426,759],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Linq.Expressions.ExpressionDev10#36<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Linq.Expressions.ExpressionDev10#36<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]\n [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]"}],"pos":[1310182,1310947],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> that represents the static type of the expression.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the static type of the expression.","source":"The <xref href=\"System.Type\"></xref> that represents the static type of the expression."}],"pos":[1311059,1311147],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an explicit reference or boxing conversion where `null` is supplied if the conversion fails.","nodes":[{"pos":[0,179],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an explicit reference or boxing conversion where <ph id=\"ph2\">`null`</ph> is supplied if the conversion fails.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an explicit reference or boxing conversion where `null` is supplied if the conversion fails."}],"pos":[1312829,1313009],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`. The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.","nodes":[{"pos":[0,305],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`. The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","pos":[0,144],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`false`</ph>.","pos":[145,305],"source":" The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`."}]}],"pos":[1313020,1313326],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[1314246,1314404],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to."}],"pos":[1314462,1314588],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeAs\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.","nodes":[{"pos":[0,407],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.TypeAs\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeAs\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values."}],"pos":[1314671,1315079],"yaml":true},{"content":"<code>expression</code> or <code>type</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>type</code> is `null`."}],"pos":[1315250,1315306],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> that compares run-time type identity.","nodes":[{"pos":[0,113],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression\"&gt;&lt;/xref&gt;</ph> that compares run-time type identity.","source":"Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> that compares run-time type identity."}],"pos":[1316958,1317072],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression\"></xref> property equal to.","nodes":[{"pos":[0,144],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression\"></xref> property equal to."}],"pos":[1317327,1317472],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> property equal to.","nodes":[{"pos":[0,170],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> property equal to."}],"pos":[1317530,1317701],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property is equal to <xref href=\"System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\"></xref> and for which the <xref href=\"System.Linq.Expressions.Expression\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> properties are set to the specified values.","nodes":[{"pos":[0,481],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression\"&gt;&lt;/xref&gt;</ph> for which the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property is equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\"&gt;&lt;/xref&gt;</ph> and for which the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"&gt;&lt;/xref&gt;</ph> properties are set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property is equal to <xref href=\"System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\"></xref> and for which the <xref href=\"System.Linq.Expressions.Expression\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> properties are set to the specified values."}],"pos":[1317789,1318271],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref>."}],"pos":[1319980,1320057],"yaml":true},{"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.","nodes":[{"pos":[0,160],"content":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> represents <ph id=\"ph3\">&lt;xref:System.Boolean&gt;</ph>.","pos":[0,160],"source":"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>."}]}],"pos":[1320068,1320229],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"></xref> property equal to.","nodes":[{"pos":[0,165],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"></xref> property equal to."}],"pos":[1321135,1321301],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> property equal to.","nodes":[{"pos":[0,170],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression.Type\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> property equal to."}],"pos":[1321359,1321530],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property is equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeIs\"></xref> and for which the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> properties are set to the specified values.","nodes":[{"pos":[0,455],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression\"&gt;&lt;/xref&gt;</ph> for which the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property is equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.TypeIs\"&gt;&lt;/xref&gt;</ph> and for which the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"&gt;&lt;/xref&gt;</ph> properties are set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property is equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeIs\"></xref> and for which the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> properties are set to the specified values."}],"pos":[1321618,1322074],"yaml":true},{"content":"<code>expression</code> or <code>type</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>expression</code> or <code>type</code> is `null`."}],"pos":[1322245,1322301],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a unary plus operation.","nodes":[{"pos":[0,110],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a unary plus operation.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a unary plus operation."}],"pos":[1324000,1324111],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,475],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are false.","pos":[449,475]}]},{"pos":[486,505],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[509,581],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[591,758],"content":"If <ph id=\"ph1\">`method`</ph> is not <ph id=\"ph2\">`null`</ph> and it represents a non-void, <ph id=\"ph3\">`static`</ph> (<ph id=\"ph4\">`Shared`</ph> in Visual Basic) method that takes one argument, it is the implementing method for the node.","source":"If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node."},{"pos":[768,947],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary plus operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[957,1042],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`."},{"pos":[1053,1091],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[1095,1136],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[1146,1321],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1331,1506],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1520,1666],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method."},{"pos":[1680,1752],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1759,1932],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[1324122,1326079],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[1326355,1326513],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to."}],"pos":[1326590,1326740],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.","nodes":[{"pos":[0,417],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Method\"&gt;&lt;/xref&gt;</ph> properties set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values."}],"pos":[1326823,1327241],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[1327415,1327450],"yaml":true},{"content":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> and the method it represents returns <ph id=\"ph3\">`void`</ph>, is not <ph id=\"ph4\">`static`</ph> (<ph id=\"ph5\">`Shared`</ph> in Visual Basic), or does not take exactly one argument.","source":"<code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument."}],"pos":[1327544,1327706],"yaml":true},{"content":"<code>method</code> is `null` and the unary plus operator is not defined for <code>expression</code>.Type.  \n  \n -or-  \n  \n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> and the unary plus operator is not defined for <ph id=\"ph3\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type.","source":"<code>method</code> is `null` and the unary plus operator is not defined for <code>expression</code>.Type."},{"pos":[113,117],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[124,313],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <ph id=\"ph2\">&lt;code&gt;method&lt;/code&gt;</ph>.","source":"<code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>."}],"pos":[1327816,1328136],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a unary plus operation.","nodes":[{"pos":[0,110],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents a unary plus operation.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a unary plus operation."}],"pos":[1329734,1329845],"yaml":true},{"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"pos":[0,475],"content":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt;</ph> property of the resulting <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> is set to the implementing method.","pos":[0,168],"source":"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;</ph> property is set to the type of the node.","pos":[169,263],"source":" The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node."},{"content":"If the node is lifted, the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;</ph> properties are both <ph id=\"ph3\">`true`</ph>.","pos":[264,448],"source":" If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`."},{"content":"Otherwise, they are false.","pos":[449,475]}]},{"pos":[486,505],"content":"Implementing Method","linkify":"Implementing Method","nodes":[{"content":"Implementing Method","pos":[0,19]}]},{"pos":[509,581],"content":"The following rules determine the implementing method for the operation:","nodes":[{"content":"The following rules determine the implementing method for the operation:","pos":[0,72]}]},{"pos":[591,770],"content":"If <ph id=\"ph1\">`expression`</ph>.Type is a user-defined type that defines the unary plus operator, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents that operator is the implementing method.","source":"If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method."},{"pos":[780,865],"content":"Otherwise, if <ph id=\"ph1\">`expression`</ph>.Type is a numeric type, the implementing method is <ph id=\"ph2\">`null`</ph>.","source":"Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`."},{"pos":[876,914],"content":"Node Type and Lifted versus Non-Lifted","linkify":"Node Type and Lifted versus Non-Lifted","nodes":[{"content":"Node Type and Lifted versus Non-Lifted","pos":[0,38]}]},{"pos":[918,959],"content":"If the implementing method is not <ph id=\"ph1\">`null`</ph>:","source":"If the implementing method is not `null`:"},{"pos":[969,1144],"content":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.","nodes":[{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is assignable to the argument type of the implementing method, the node is not lifted.","pos":[0,107],"source":"If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted."},{"content":"The type of the node is the return type of the implementing method.","pos":[108,175]}]},{"pos":[1154,1329],"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","nodes":[{"content":"If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:","pos":[0,175]}]},{"pos":[1343,1489],"content":"<ph id=\"ph1\">`expression`</ph>.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.","source":"`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method."},{"pos":[1503,1575],"content":"The return type of the implementing method is a non-nullable value type.","nodes":[{"content":"The return type of the implementing method is a non-nullable value type.","pos":[0,72]}]},{"pos":[1582,1755],"content":"If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.","nodes":[{"content":"If the implementing method is <ph id=\"ph1\">`null`</ph>, the type of the node is <ph id=\"ph2\">`expression`</ph>.Type.","pos":[0,80],"source":"If the implementing method is `null`, the type of the node is `expression`.Type."},{"content":"If <ph id=\"ph1\">`expression`</ph>.Type is non-nullable, the node is not lifted.","pos":[81,142],"source":" If `expression`.Type is non-nullable, the node is not lifted."},{"content":"Otherwise, the node is lifted.","pos":[143,173]}]}],"pos":[1329856,1331634],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.","nodes":[{"pos":[0,157],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property equal to.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to."}],"pos":[1331873,1332031],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.","nodes":[{"pos":[0,342],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that has the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.Expression.NodeType\"&gt;&lt;/xref&gt;</ph> property equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"&gt;&lt;/xref&gt;</ph> and the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"&gt;&lt;/xref&gt;</ph> property set to the specified value.","source":"A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value."}],"pos":[1332114,1332457],"yaml":true},{"content":"<code>expression</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;expression&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>expression</code> is `null`."}],"pos":[1332631,1332666],"yaml":true},{"content":"The unary plus operator is not defined for <code>expression</code>.Type.","nodes":[{"pos":[0,72],"content":"The unary plus operator is not defined for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">expression</ph><ept id=\"p1\">&lt;/code&gt;</ept>.Type.","source":"The unary plus operator is not defined for <code>expression</code>.Type."}],"pos":[1332776,1332849],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an explicit unboxing.","nodes":[{"pos":[0,108],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph> that represents an explicit unboxing.","source":"Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an explicit unboxing."}],"pos":[1334477,1334586],"yaml":true},{"content":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to unbox.","nodes":[{"pos":[0,68],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> to unbox.","source":"An <xref href=\"System.Linq.Expressions.Expression\"></xref> to unbox."}],"pos":[1334832,1334901],"yaml":true},{"content":"The new <xref href=\"System.Type\"></xref> of the expression.","nodes":[{"pos":[0,59],"content":"The new <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the expression.","source":"The new <xref href=\"System.Type\"></xref> of the expression."}],"pos":[1334959,1335019],"yaml":true},{"content":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.","nodes":[{"pos":[0,76],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.UnaryExpression\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>."}],"pos":[1335102,1335179],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.","source":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree."}],"pos":[1336821,1336979],"yaml":true},{"content":"The type of the parameter or variable.","nodes":[{"pos":[0,38],"content":"The type of the parameter or variable.","nodes":[{"content":"The type of the parameter or variable.","pos":[0,38]}]}],"pos":[1337169,1337208],"yaml":true},{"content":"The name of the parameter or variable. This name is used for debugging or printing purpose only.","nodes":[{"pos":[0,96],"content":"The name of the parameter or variable. This name is used for debugging or printing purpose only.","nodes":[{"content":"The name of the parameter or variable. This name is used for debugging or printing purpose only.","pos":[0,96],"nodes":[{"content":"The name of the parameter or variable.","pos":[0,38]},{"content":"This name is used for debugging or printing purpose only.","pos":[39,96]}]}]}],"pos":[1337268,1337365],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> node with the specified name and type.","source":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type."}],"pos":[1337452,1337558],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.","nodes":[{"pos":[0,157],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> node that can be used to identify a parameter or a variable in an expression tree.","source":"Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree."}],"pos":[1339137,1339295],"yaml":true},{"content":"The type of the parameter or variable.","nodes":[{"pos":[0,38],"content":"The type of the parameter or variable.","nodes":[{"content":"The type of the parameter or variable.","pos":[0,38]}]}],"pos":[1339472,1339511],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ParameterExpression\"&gt;&lt;/xref&gt;</ph> node with the specified name and type","source":"A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type"}],"pos":[1339598,1339703],"yaml":true},{"content":"Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.","nodes":[{"pos":[0,140],"content":"Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.","nodes":[{"content":"Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.","pos":[0,140],"nodes":[{"content":"Reduces the node and then calls the visitor delegate on the reduced expression.","pos":[0,79]},{"content":"The method throws an exception if the node is not reducible.","pos":[80,140]}]}]}],"pos":[1341441,1341582],"yaml":true},{"content":"Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.","nodes":[{"pos":[0,230],"content":"Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.","nodes":[{"content":"Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.","pos":[0,230],"nodes":[{"content":"Override this method to provide logic to walk the node's children.","pos":[0,66]},{"content":"A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.","pos":[67,230]}]}]}],"pos":[1341593,1341824],"yaml":true,"extradata":"MT"},{"content":"An instance of <xref href=\"System.Func`2\"></xref>.","nodes":[{"pos":[0,50],"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Func`2\"&gt;&lt;/xref&gt;</ph>.","source":"An instance of <xref href=\"System.Func`2\"></xref>."}],"pos":[1342074,1342125],"yaml":true},{"content":"The expression being visited, or an expression which should replace it in the tree.","nodes":[{"pos":[0,83],"content":"The expression being visited, or an expression which should replace it in the tree.","nodes":[{"content":"The expression being visited, or an expression which should replace it in the tree.","pos":[0,83]}]}],"pos":[1342203,1342287],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  id: Expression\n  children:\n  - System.Linq.Expressions.Expression.#ctor\n  - System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)\n  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.CanReduce\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Constant(System.Object)\n  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Default(System.Type)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Empty\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Label\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Label(System.String)\n  - System.Linq.Expressions.Expression.Label(System.Type)\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  - System.Linq.Expressions.Expression.New(System.Type)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NodeType\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Parameter(System.Type)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Reduce\n  - System.Linq.Expressions.Expression.ReduceAndCheck\n  - System.Linq.Expressions.Expression.ReduceExtensions\n  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Rethrow(System.Type)\n  - System.Linq.Expressions.Expression.Rethrow\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ToString\n  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.Type\n  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Variable(System.Type)\n  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  langs:\n  - csharp\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n  type: Class\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Provides the base class from which the classes that represent expression tree nodes are derived. It also contains `static` (`Shared` in Visual Basic) factory methods to create the various node types. This is an `abstract` class.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]\"\n  syntax:\n    content: public abstract class Expression\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Linq.Expressions.BinaryExpression\n  - System.Linq.Expressions.BlockExpression\n  - System.Linq.Expressions.ConditionalExpression\n  - System.Linq.Expressions.ConstantExpression\n  - System.Linq.Expressions.DebugInfoExpression\n  - System.Linq.Expressions.DefaultExpression\n  - System.Linq.Expressions.DynamicExpression\n  - System.Linq.Expressions.GotoExpression\n  - System.Linq.Expressions.IndexExpression\n  - System.Linq.Expressions.InvocationExpression\n  - System.Linq.Expressions.LabelExpression\n  - System.Linq.Expressions.LambdaExpression\n  - System.Linq.Expressions.ListInitExpression\n  - System.Linq.Expressions.LoopExpression\n  - System.Linq.Expressions.MemberExpression\n  - System.Linq.Expressions.MemberInitExpression\n  - System.Linq.Expressions.MethodCallExpression\n  - System.Linq.Expressions.NewArrayExpression\n  - System.Linq.Expressions.NewExpression\n  - System.Linq.Expressions.ParameterExpression\n  - System.Linq.Expressions.RuntimeVariablesExpression\n  - System.Linq.Expressions.SwitchExpression\n  - System.Linq.Expressions.TryExpression\n  - System.Linq.Expressions.TypeBinaryExpression\n  - System.Linq.Expressions.UnaryExpression\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.#ctor\n  commentId: M:System.Linq.Expressions.Expression.#ctor\n  id: '#ctor'\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Expression()\n  nameWithType: Expression.Expression()\n  fullName: Expression.Expression()\n  type: Constructor\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Constructs a new instance of <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n  syntax:\n    content: protected Expression ();\n    parameters: []\n  overload: System.Linq.Expressions.Expression.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)\n  id: '#ctor(System.Linq.Expressions.ExpressionType,System.Type)'\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Expression(ExpressionType, Type)\n  nameWithType: Expression.Expression(ExpressionType, Type)\n  fullName: Expression.Expression(ExpressionType, Type)\n  type: Constructor\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Initializes a new instance of the <xref href=\"System.Linq.Expressions.Expression\"></xref> class.\n  remarks: This constructor is called from constructors in derived classes.\n  syntax:\n    content: >-\n      [System.Obsolete(\"use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.\")]\n\n      protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);\n    parameters:\n    - id: nodeType\n      type: System.Linq.Expressions.ExpressionType\n      description: The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> to set as the node type.\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of this <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n  overload: System.Linq.Expressions.Expression.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  commentId: M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  id: Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Accept(ExpressionVisitor)\n  nameWithType: Expression.Accept(ExpressionVisitor)\n  fullName: Expression.Accept(ExpressionVisitor)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>.\n  remarks: This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.\n  syntax:\n    content: protected virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: The visitor to visit this node with.\n    return:\n      type: System.Linq.Expressions.Expression\n      description: The result of visiting this node.\n  overload: System.Linq.Expressions.Expression.Accept*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Add(Expression, Expression)\n  nameWithType: Expression.Add(Expression, Expression)\n  fullName: Expression.Add(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that does not have overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.\"\n  example:\n  - \"The following code example shows how to create an expression that adds two integers.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Add(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Add(Expression, Expression, MethodInfo)\n  fullName: Expression.Add(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Add\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssign(Expression, Expression)\n  nameWithType: Expression.AddAssign(Expression, Expression)\n  fullName: Expression.AddAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.AddAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssignChecked(Expression, Expression)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression)\n  fullName: Expression.AddAssignChecked(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an addition assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddChecked(Expression, Expression)\n  nameWithType: Expression.AddChecked(Expression, Expression)\n  fullName: Expression.AddChecked(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that has overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.AddChecked(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The implementing method for the operation is chosen based on the following rules:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AddChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AddChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the addition operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: And(Expression, Expression)\n  nameWithType: Expression.And(Expression, Expression)\n  fullName: Expression.And(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `AND` operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.\"\n  example:\n  - \"The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.And*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: And(Expression, Expression, MethodInfo)\n  nameWithType: Expression.And(Expression, Expression, MethodInfo)\n  fullName: Expression.And(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `AND` operation. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The implementing method for the operation is chosen based on the following rules:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.And\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.And*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAlso(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AndAlso(Expression, Expression, MethodInfo)\n  fullName: Expression.AndAlso(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The implementing method for the operation is chosen based on the following rules:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n    > [!NOTE]\\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   `left`.Type and `right`.Type are the same Boolean type.  \\n  \\n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \\n  \\n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AndAlso*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>method</code> is `null` and the bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAlso(Expression, Expression)\n  nameWithType: Expression.AndAlso(Expression, Expression)\n  fullName: Expression.AndAlso(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `AND` operation that evaluates the second operand only if the first operand evaluates to `true`.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n    > [!NOTE]\\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   `left`.Type and `right`.Type are the same Boolean type.  \\n  \\n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \\n  \\n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.\"\n  example:\n  - \"The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAlso\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AndAlso*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The bitwise `AND` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \\n  \\n -or-  \\n  \\n <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAssign(Expression, Expression)\n  nameWithType: Expression.AndAssign(Expression, Expression)\n  fullName: Expression.AndAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AndAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.AndAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AndAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise AND assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.AndAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.AndAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayAccess(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.ArrayAccess(Expression, IEnumerable<Expression>)\n  fullName: Expression.ArrayAccess(Expression, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> to access a multidimensional array.\n  remarks: The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.\n  example:\n  - \"The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]\"\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: An expression that represents the multidimensional array.\n    - id: indexes\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> containing expressions used to index the array.\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.ArrayAccess*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayAccess(Expression, Expression[])\n  nameWithType: Expression.ArrayAccess(Expression, Expression[])\n  fullName: Expression.ArrayAccess(Expression, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> to access an array.\n  remarks: \"The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.  \\n  \\n For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.\"\n  example:\n  - \"The following code example shows how to change a value of an array element by using the `ArrayAccess` method.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]\"\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: An expression representing the array to index.\n    - id: indexes\n      type: System.Linq.Expressions.Expression[]\n      description: An array that contains expressions used to index the array.\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.ArrayAccess*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayIndex(Expression, Expression[])\n  nameWithType: Expression.ArrayIndex(Expression, Expression[])\n  fullName: Expression.ArrayIndex(Expression, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents applying an array index operator to a multidimensional array.\n  remarks: \"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.  \\n  \\n If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the<xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.  \\n  \\n If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]\\n [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> instances - indexes for the array index operation.\n    - id: indexes\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ArrayIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> or <code>indexes</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code>.Type does not represent an array type.  \\n  \\n -or-  \\n  \\n The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\\\"System.Int32\\\"></xref> type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayIndex(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.ArrayIndex(Expression, IEnumerable<Expression>)\n  fullName: Expression.ArrayIndex(Expression, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents applying an array index operator to an array of rank more than one.\n  remarks: \"Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.  \\n  \\n If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.  \\n  \\n If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]\\n [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to.\n    - id: indexes\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ArrayIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> or <code>indexes</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code>.Type does not represent an array type.  \\n  \\n -or-  \\n  \\n The rank of <code>array</code>.Type does not match the number of elements in <code>indexes</code>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of one or more elements of <code>indexes</code> does not represent the <xref href=\\\"System.Int32\\\"></xref> type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayIndex(Expression, Expression)\n  nameWithType: Expression.ArrayIndex(Expression, Expression)\n  fullName: Expression.ArrayIndex(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents applying an array index operator to an array of rank one.\n  remarks: \"`index` must represent an index of type <xref:System.Int32>.  \\n  \\n The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: index\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayIndex\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ArrayIndex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> or <code>index</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code>.Type does not represent an array type.  \\n  \\n -or-  \\n  \\n <code>array</code>.Type represents an array type whose rank is not 1.  \\n  \\n -or-  \\n  \\n <code>index</code>.Type does not represent the <xref href=\\\"System.Int32\\\"></xref> type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  id: ArrayLength(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayLength(Expression)\n  nameWithType: Expression.ArrayLength(Expression)\n  fullName: Expression.ArrayLength(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an expression for obtaining the length of a one-dimensional array.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ArrayLength\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to <code>array</code>.\n  overload: System.Linq.Expressions.Expression.ArrayLength*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code>.Type does not represent an array type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Assign(Expression, Expression)\n  nameWithType: Expression.Assign(Expression, Expression)\n  fullName: Expression.Assign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an assignment operation.\n  remarks: The `Assign` expression copies a value for value types, and it copies a reference for reference types.\n  example:\n  - \"The following code example shows how to create an expression that represents an assignment operation.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Assign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Assign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Bind(MemberInfo, Expression)\n  nameWithType: Expression.Bind(MemberInfo, Expression)\n  fullName: Expression.Bind(MemberInfo, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that represents the initialization of a field or property.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.\n  syntax:\n    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: A <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: A <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that has <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Bind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>member</code> or <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>member</code> does not represent a field or property.  \\n  \\n -or-  \\n  \\n The property represented by <code>member</code> does not have a `set` accessor.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Bind(MethodInfo, Expression)\n  nameWithType: Expression.Bind(MethodInfo, Expression)\n  fullName: Expression.Bind(MethodInfo, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that represents the initialization of a member by using a property accessor method.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.\n  syntax:\n    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: A <xref href=\"System.Linq.Expressions.MemberAssignment\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.Assignment\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and the <xref href=\"System.Linq.Expressions.MemberAssignment.Expression\"></xref> property set to <code>expression</code>.\n  overload: System.Linq.Expressions.Expression.Bind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>propertyAccessor</code> or <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>propertyAccessor</code> does not represent a property accessor method.  \\n  \\n -or-  \\n  \\n The property accessed by <code>propertyAccessor</code> does not have a `set` accessor.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type is not assignable to the type of the field or property that <code>member</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The result type of the block.\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: The variables in the block.\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains three expressions and has no variables.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first expression in the block.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second expression in the block.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third expression in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains five expressions and has no variables.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first expression in the block.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second expression in the block.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third expression in the block.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The fourth expression in the block.\n    - id: arg4\n      type: System.Linq.Expressions.Expression\n      description: The fifth expression in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The result type of the block.\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: The variables in the block.\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  id: Block(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type, Expression[])\n  nameWithType: Expression.Block(Type, Expression[])\n  fullName: Expression.Block(Type, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions, has no variables and has specific result type.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The result type of the block.\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains four expressions and has no variables.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first expression in the block.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second expression in the block.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third expression in the block.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The fourth expression in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression)\n  fullName: Expression.Block(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains two expressions and has no variables.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first expression in the block.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second expression in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(IEnumerable<ParameterExpression>, Expression[])\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, Expression[])\n  fullName: Expression.Block(IEnumerable<ParameterExpression>, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: The variables in the block.\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given variables and expressions.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  example:\n  - \"The following code example shows how to pass a parameter to a block expression and process this parameter within a block.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: The variables in the block.\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  id: Block(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression[])\n  nameWithType: Expression.Block(Expression[])\n  fullName: Expression.Block(Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions and has no variables.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  example:\n  - \"The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<Expression>)\n  fullName: Expression.Block(IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions and has no variables.\n  remarks: When the block expression is executed, it returns the value of the last expression in the block.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type, IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type, IEnumerable<Expression>)\n  fullName: Expression.Block(Type, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BlockExpression\"></xref> that contains the given expressions, has no variables and has specific result type.\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The result type of the block.\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The expressions in the block.\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: The created <xref href=\"System.Linq.Expressions.BlockExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Block*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  id: Break(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget)\n  nameWithType: Expression.Break(LabelTarget)\n  fullName: Expression.Break(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]\"\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Break*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget, Expression)\n  nameWithType: Expression.Break(LabelTarget, Expression)\n  fullName: Expression.Break(LabelTarget, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement. The value passed to the label upon jumping can be specified.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: The value that will be passed to the associated label upon jumping.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Break*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget, Type)\n  nameWithType: Expression.Break(LabelTarget, Type)\n  fullName: Expression.Break(LabelTarget, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement with the specified type.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>.\n  overload: System.Linq.Expressions.Expression.Break*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget, Expression, Type)\n  nameWithType: Expression.Break(LabelTarget, Expression, Type)\n  fullName: Expression.Break(LabelTarget, Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: The value that will be passed to the associated label upon jumping.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Break, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Break*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes five arguments.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fourth argument.\n    - id: arg4\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fifth argument.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression, MethodInfo, Expression, Expression, Expression)\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)\n  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes three arguments.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Type, String, Type[], Expression[])\n  nameWithType: Expression.Call(Type, String, Type[], Expression[])\n  fullName: Expression.Call(Type, String, Type[], Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method by calling the appropriate factory method.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> that specifies the type that contains the specified `static` (`Shared` in Visual Basic) method.\n    - id: methodName\n      type: System.String\n      description: The name of the method.\n    - id: typeArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments to the method.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property set to the <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the specified `static` (`Shared` in Visual Basic) method, and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> property set to the specified arguments.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> or <code>methodName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types.  \\n  \\n -or-  \\n  \\n More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>type</code> or its base types.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes three arguments.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression, String, Type[], Expression[])\n  nameWithType: Expression.Call(Expression, String, Type[], Expression[])\n  fullName: Expression.Call(Expression, String, Type[], Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method by calling the appropriate factory method.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property value will be searched for a specific method.\n    - id: methodName\n      type: System.String\n      description: The name of the method.\n    - id: typeArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represents the arguments to the method.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref>, the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to <code>instance</code>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> set to the <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the specified instance method, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> set to the specified arguments.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>instance</code> or <code>methodName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types.  \\n  \\n -or-  \\n  \\n More than one method whose name is <code>methodName</code>, whose type parameters match <code>typeArguments</code>, and whose parameter types match <code>arguments</code> is found in <code>instance</code>.Type or its base types.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression, MethodInfo, Expression, Expression)\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression)\n  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes two arguments.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create an expression that calls an instance method that has two arguments.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes four arguments.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the third argument.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the fourth argument.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression, MethodInfo, Expression[])\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression[])\n  fullName: Expression.Call(Expression, MethodInfo, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes arguments.\n  remarks: \"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \\n  \\n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \\n  \\n If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \\n  \\n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>method</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>instance</code> is `null` and <code>method</code> represents an instance method.  \\n  \\n -or-  \\n  \\n <code>arguments</code> is not `null` and one or more of its elements is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  \\n  \\n -or-  \\n  \\n The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \\n  \\n -or-  \\n  \\n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression, MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes arguments.\n  remarks: \"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \\n  \\n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \\n  \\n If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \\n  \\n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> property equal to (pass `null` for a `static` (`Shared` in Visual Basic) method).\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref>, <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>method</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>instance</code> is `null` and <code>method</code> represents an instance method.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.  \\n  \\n -or-  \\n  \\n The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \\n  \\n -or-  \\n  \\n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo, Expression[])\n  nameWithType: Expression.Call(MethodInfo, Expression[])\n  fullName: Expression.Call(MethodInfo, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that has arguments.\n  remarks: \"If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`. Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.  \\n  \\n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments`, some of which may be quoted.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`. The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a `static` (`Shared` in Visual Basic) method to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The number of elements in <code>arguments</code> does not equal the number of parameters for the method represented by <code>method</code>.  \\n  \\n -or-  \\n  \\n One or more of the elements of <code>arguments</code> is not assignable to the corresponding parameter for the method represented by <code>method</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression)\n  fullName: Expression.Call(MethodInfo, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a `static` (`Shared` in Visual Basic) method that takes one argument.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Call(MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.Call(MethodInfo, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static (Shared in Visual Basic) method.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the target method.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: A collection of <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the call arguments.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression, MethodInfo)\n  nameWithType: Expression.Call(Expression, MethodInfo)\n  fullName: Expression.Call(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a method that takes no arguments.\n  remarks: \"To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.  \\n  \\n If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.  \\n  \\n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.\"\n  example:\n  - \"The following code example shows how to create an expression that calls a method without arguments.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>method</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>instance</code> is `null` and <code>method</code> represents an instance method.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>instance</code>.Type is not assignable to the declaring type of the method represented by <code>method</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that represents a call to a static method that takes two arguments.\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> property equal to.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the first argument.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the second argument.\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: A <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Call\"></xref> and the <xref href=\"System.Linq.Expressions.MethodCallExpression.Object\"></xref> and <xref href=\"System.Linq.Expressions.MethodCallExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Call*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>method</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.CanReduce\n  commentId: P:System.Linq.Expressions.Expression.CanReduce\n  id: CanReduce\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: CanReduce\n  nameWithType: Expression.CanReduce\n  fullName: Expression.CanReduce\n  type: Property\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.\n  syntax:\n    content: public virtual bool CanReduce { get; }\n    return:\n      type: System.Boolean\n      description: True if the node can be reduced, otherwise false.\n  overload: System.Linq.Expressions.Expression.CanReduce*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(ParameterExpression, Expression)\n  nameWithType: Expression.Catch(ParameterExpression, Expression)\n  fullName: Expression.Catch(ParameterExpression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with a reference to the caught <xref href=\"System.Exception\"></xref> object for use in the handler body.\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);\n    parameters:\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the catch statement.\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.\n  overload: System.Linq.Expressions.Expression.Catch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  id: Catch(System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(Type, Expression)\n  nameWithType: Expression.Catch(Type, Expression)\n  fullName: Expression.Catch(Type, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the catch statement.\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.\n  overload: System.Linq.Expressions.Expression.Catch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(ParameterExpression, Expression, Expression)\n  nameWithType: Expression.Catch(ParameterExpression, Expression, Expression)\n  fullName: Expression.Catch(ParameterExpression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with an <xref href=\"System.Exception\"></xref> filter and a reference to the caught <xref href=\"System.Exception\"></xref> object.\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);\n    parameters:\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the catch statement.\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: The body of the <xref href=\"System.Exception\"></xref> filter.\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.\n  overload: System.Linq.Expressions.Expression.Catch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(Type, Expression, Expression)\n  nameWithType: Expression.Catch(Type, Expression, Expression)\n  fullName: Expression.Catch(Type, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with an <xref href=\"System.Exception\"></xref> filter but no reference to the caught <xref href=\"System.Exception\"></xref> object.\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the catch statement.\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: The body of the <xref href=\"System.Exception\"></xref> filter.\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.\n  overload: System.Linq.Expressions.Expression.Catch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  commentId: M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ClearDebugInfo(SymbolDocumentInfo)\n  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)\n  fullName: Expression.ClearDebugInfo(SymbolDocumentInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> for clearing a sequence point.\n  syntax:\n    content: public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);\n    parameters:\n    - id: document\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that represents the source file.\n    return:\n      type: System.Linq.Expressions.DebugInfoExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> for clearning a sequence point.\n  overload: System.Linq.Expressions.Expression.ClearDebugInfo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Coalesce(Expression, Expression, LambdaExpression)\n  nameWithType: Expression.Coalesce(Expression, Expression, LambdaExpression)\n  fullName: Expression.Coalesce(Expression, Expression, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a coalescing operation, given a conversion function.\n  remarks: \"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.  \\n  \\n The following rules determine the result type:  \\n  \\n-   If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.  \\n  \\n-   Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.  \\n  \\n-   Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Coalesce*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>left</code>.Type and <code>right</code>.Type are not convertible to each other.  \\n  \\n -or-  \\n  \\n <code>conversion</code> is not `null` and <code>conversion</code>.Type is a delegate type that does not take exactly one argument.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of <code>left</code> does not represent a reference type or a nullable value type.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of <code>left</code> represents a type that is not assignable to the parameter type of the delegate type <code>conversion</code>.Type.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of <code>right</code> is not equal to the return type of the delegate type <code>conversion</code>.Type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Coalesce(Expression, Expression)\n  nameWithType: Expression.Coalesce(Expression, Expression)\n  fullName: Expression.Coalesce(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a coalescing operation.\n  remarks: \"The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n#### Result Type  \\n The following rules determine the result type:  \\n  \\n-   If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.  \\n  \\n-   Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.  \\n  \\n-   Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Coalesce*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of <code>left</code> does not represent a reference type or a nullable value type.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>left</code>.Type and <code>right</code>.Type are not convertible to each other.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Condition(Expression, Expression, Expression)\n  nameWithType: Expression.Condition(Expression, Expression, Expression)\n  fullName: Expression.Condition(Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional statement.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.\n  example:\n  - \"The following code example shows how to create an expression that represents a conditional statement. If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Condition*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>test</code> or <code>ifTrue</code> or <code>ifFalse</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>test</code>.Type is not <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>ifTrue</code>.Type is not equal to <code>ifFalse</code>.Type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Condition(Expression, Expression, Expression, Type)\n  nameWithType: Expression.Condition(Expression, Expression, Expression, Type)\n  fullName: Expression.Condition(Expression, Expression, Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional statement.\n  remarks: This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal. Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type. The `type` is allowed to be <xref:System.Void>.\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Condition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Constant(System.Object)\n  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object)\n  id: Constant(System.Object)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Constant(Object)\n  nameWithType: Expression.Constant(Object)\n  fullName: Expression.Constant(Object)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property set to the specified value.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`. If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.  \\n  \\n To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.\"\n  example:\n  - \"The following code example shows how to create an expression that represents a constant value.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ConstantExpression Constant (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ConstantExpression\n      description: A <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.Constant*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  id: Constant(System.Object,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Constant(Object, Type)\n  nameWithType: Expression.Constant(Object, Type)\n  fullName: Expression.Constant(Object, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.\n  remarks: This method can be useful for representing values of nullable types.\n  example:\n  - \"The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> to set the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ConstantExpression\n      description: A <xref href=\"System.Linq.Expressions.ConstantExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Constant\"></xref> and the <xref href=\"System.Linq.Expressions.ConstantExpression.Value\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Constant*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>value</code> is not `null` and <code>type</code> is not assignable from the dynamic type of <code>value</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  id: Continue(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Continue(LabelTarget)\n  nameWithType: Expression.Continue(LabelTarget)\n  fullName: Expression.Continue(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a continue statement.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]\"\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Continue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Continue(LabelTarget, Type)\n  nameWithType: Expression.Continue(LabelTarget, Type)\n  fullName: Expression.Continue(LabelTarget, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a continue statement with the specified type.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Continue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  id: Convert(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Convert(Expression, Type)\n  nameWithType: Expression.Convert(Expression, Type)\n  fullName: Expression.Convert(Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a type conversion operation.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise:  \\n  \\n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \\n  \\n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \\n  \\n#### Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \\n  \\n-   If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \\n  \\n-   Otherwise the node is lifted.\"\n  example:\n  - \"The following code example shows how to create an expression that represents a type convertion operation.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Convert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>type</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Convert(Expression, Type, MethodInfo)\n  nameWithType: Expression.Convert(Expression, Type, MethodInfo)\n  fullName: Expression.Convert(Expression, Type, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation for which the implementing method is specified.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \\n  \\n-   Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise:  \\n  \\n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \\n  \\n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \\n  \\n#### Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \\n  \\n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \\n  \\n-   Otherwise the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Convert\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Convert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>type</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  \\n  \\n -or-  \\n  \\n The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>.\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: More than one method that matches the <code>method</code> description was found.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ConvertChecked(Expression, Type)\n  nameWithType: Expression.ConvertChecked(Expression, Type)\n  fullName: Expression.ConvertChecked(Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise:  \\n  \\n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \\n  \\n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \\n  \\n#### Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \\n  \\n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \\n  \\n-   Otherwise the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ConvertChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>type</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ConvertChecked(Expression, Type, MethodInfo)\n  nameWithType: Expression.ConvertChecked(Expression, Type, MethodInfo)\n  fullName: Expression.ConvertChecked(Expression, Type, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \\n  \\n-   Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise:  \\n  \\n    -   If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \\n  \\n    -   If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.  \\n  \\n#### Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.  \\n  \\n-   If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If both `expression`.Type and `type` are non-nullable, the node is not lifted.  \\n  \\n-   Otherwise the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ConvertChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref>, <xref href=\"System.Linq.Expressions.Expression.Type\"></xref>, and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ConvertChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>type</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No conversion operator is defined between <code>expression</code>.Type and <code>type</code>.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type is not assignable to the argument type of the method represented by <code>method</code>.  \\n  \\n -or-  \\n  \\n The return type of the method represented by <code>method</code> is not assignable to <code>type</code>.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type or <code>type</code> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <code>method</code>.\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: More than one method that matches the <code>method</code> description was found.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  nameWithType: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  fullName: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref> with the specified span.\n  syntax:\n    content: public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);\n    parameters:\n    - id: document\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: The <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that represents the source file.\n    - id: startLine\n      type: System.Int32\n      description: The start line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater than 0.\n    - id: startColumn\n      type: System.Int32\n      description: The start column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater than 0.\n    - id: endLine\n      type: System.Int32\n      description: The end line of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. Must be greater or equal than the start line.\n    - id: endColumn\n      type: System.Int32\n      description: The end column of this <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.\n    return:\n      type: System.Linq.Expressions.DebugInfoExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.DebugInfoExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.DebugInfo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  id: Decrement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Decrement(Expression)\n  nameWithType: Expression.Decrement(Expression)\n  fullName: Expression.Decrement(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decrementing of the expression by 1.\n  remarks: This expression is functional and does not change the value of the object passed to it.\n  example:\n  - \"The following code example shows how to create an expression that substracts 1 from a given value.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to decrement.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decremented expression.\n  overload: System.Linq.Expressions.Expression.Decrement*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Decrement(Expression, MethodInfo)\n  nameWithType: Expression.Decrement(Expression, MethodInfo)\n  fullName: Expression.Decrement(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decrementing of the expression by 1.\n  remarks: This expression is functional and does not change the value of the object passed to it.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to decrement.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the decremented expression.\n  overload: System.Linq.Expressions.Expression.Decrement*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Default(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Default(System.Type)\n  id: Default(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Default(Type)\n  nameWithType: Expression.Default(Type)\n  fullName: Expression.Default(Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to the specified type.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create an expression that represents a default vaule for a given type.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]\"\n  syntax:\n    content: public static System.Linq.Expressions.DefaultExpression Default (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.DefaultExpression\n      description: A <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to the specified type.\n  overload: System.Linq.Expressions.Expression.Default*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Divide(Expression, Expression)\n  nameWithType: Expression.Divide(Expression, Expression)\n  fullName: Expression.Divide(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic division operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.\"\n  example:\n  - \"The following code example shows how to create an expression that divides divides its first argument by its second argument.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Divide*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Divide(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Divide(Expression, Expression, MethodInfo)\n  fullName: Expression.Divide(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic division operation. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Divide\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Divide*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the division operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DivideAssign(Expression, Expression)\n  nameWithType: Expression.DivideAssign(Expression, Expression)\n  fullName: Expression.DivideAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.DivideAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DivideAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.DivideAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a division assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.DivideAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.DivideAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The fourth argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression[])\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression[])\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ElementInit(MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.ElementInit\"></xref>, given an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> as the second argument.\n  remarks: \"The `addMethod` parameter must represent an instance method named \\\"Add\\\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]\\n [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> property equal to.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ElementInit\n      description: An <xref href=\"System.Linq.Expressions.ElementInit\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ElementInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>addMethod</code> or <code>arguments</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The method that <code>addMethod</code> represents is not named \\\"Add\\\" (case insensitive).  \\n  \\n -or-  \\n  \\n The method that <code>addMethod</code> represents is not an instance method.  \\n  \\n -or-  \\n  \\n <code>arguments</code> does not contain the same number of elements as the number of parameters for the method that <code>addMethod</code> represents.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ElementInit(MethodInfo, Expression[])\n  nameWithType: Expression.ElementInit(MethodInfo, Expression[])\n  fullName: Expression.ElementInit(MethodInfo, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.ElementInit\"></xref>, given an array of values as the second argument.\n  remarks: \"The `addMethod` parameter must represent an instance method named \\\"Add\\\" (case insensitive). The add method must have the same number of parameters as the number of elements in `arguments`. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]\\n [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> property equal to.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to set the <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ElementInit\n      description: An <xref href=\"System.Linq.Expressions.ElementInit\"></xref> that has the <xref href=\"System.Linq.Expressions.ElementInit.AddMethod\"></xref> and <xref href=\"System.Linq.Expressions.ElementInit.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ElementInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>addMethod</code> or <code>arguments</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The method that addMethod represents is not named \\\"Add\\\" (case insensitive).  \\n  \\n -or-  \\n  \\n The method that addMethod represents is not an instance method.  \\n  \\n -or-  \\n  \\n arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of one or more elements of <code>arguments</code> is not assignable to the type of the corresponding parameter of the method that <code>addMethod</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Empty\n  commentId: M:System.Linq.Expressions.Expression.Empty\n  id: Empty\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Empty()\n  nameWithType: Expression.Empty()\n  fullName: Expression.Empty()\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an empty expression that has <xref href=\"System.Void\"></xref> type.\n  remarks: An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.\n  example:\n  - \"The following code example shows how to create an empty expression and add it to a block expression.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]\"\n  syntax:\n    content: public static System.Linq.Expressions.DefaultExpression Empty ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.DefaultExpression\n      description: A <xref href=\"System.Linq.Expressions.DefaultExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Default\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <xref href=\"System.Void\"></xref>.\n  overload: System.Linq.Expressions.Expression.Empty*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Equal(Expression, Expression)\n  nameWithType: Expression.Equal(Expression, Expression)\n  fullName: Expression.Equal(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an equality comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.\"\n  example:\n  - \"The following code example shows how to create an expression that checks whether the values of its two arguments are equal.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Equal*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Equal(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.Equal(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.Equal(Expression, Expression, Boolean, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an equality comparison. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Equal*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the equality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOr(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ExclusiveOr(Expression, Expression, MethodInfo)\n  fullName: Expression.ExclusiveOr(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the chosen implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ExclusiveOr*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOr(Expression, Expression)\n  nameWithType: Expression.ExclusiveOr(Expression, Expression)\n  fullName: Expression.ExclusiveOr(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `XOR` operation, using <code>op_ExclusiveOr</code> for user-defined types.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.\"\n  example:\n  - \"The following code example shows how to create an expression that represents the logical XOR operation.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOr\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ExclusiveOr*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The `XOR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOrAssign(Expression, Expression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Field(Expression, FieldInfo)\n  nameWithType: Expression.Field(Expression, FieldInfo)\n  fullName: Expression.Field(Expression, FieldInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. For `static` (`Shared` in Visual Basic), <code>expression</code> must be `null`.\n    - id: field\n      type: System.Reflection.FieldInfo\n      description: The <xref href=\"System.Reflection.FieldInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Field*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>field</code> is `null`.  \\n  \\n -or-  \\n  \\n The field represented by <code>field</code> is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>expression</code>.Type is not assignable to the declaring type of the field represented by <code>field</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  id: Field(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Field(Expression, String)\n  nameWithType: Expression.Field(Expression, String)\n  fullName: Expression.Field(Expression, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field given the name of the field.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.  \\n  \\n This method searches `expression`.Type and its base types for a field that has the name `fieldName`. Public fields are given preference over non-public fields. If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.\"\n  example:\n  - \"The following code example shows how to create an expression that represents accessing a field.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a field named <code>fieldName</code>. This can be null for static fields.\n    - id: fieldName\n      type: System.String\n      description: The name of a field to be accessed.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.FieldInfo\"></xref> that represents the field denoted by <code>fieldName</code>.\n  overload: System.Linq.Expressions.Expression.Field*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>fieldName</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: No field named <code>fieldName</code> is defined in <code>expression</code>.Type or its base types.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Field(Expression, Type, String)\n  nameWithType: Expression.Field(Expression, Type, String)\n  fullName: Expression.Field(Expression, Type, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a field.\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: The containing object of the field. This can be null for static fields.\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> that contains the field.\n    - id: fieldName\n      type: System.String\n      description: The field to be accessed.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: The created <xref href=\"System.Linq.Expressions.MemberExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Field*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  commentId: M:System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  id: GetActionType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GetActionType(Type[])\n  nameWithType: Expression.GetActionType(Type[])\n  fullName: Expression.GetActionType(Type[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Type\"></xref> object that represents a generic <code>System.Action</code> delegate type that has specific type arguments.\n  remarks: As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.\n  syntax:\n    content: public static Type GetActionType (Type[] typeArgs);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: An array of up to sixteen <xref href=\"System.Type\"></xref> objects that specify the type arguments for the `System.Action` delegate type.\n    return:\n      type: System.Type\n      description: The type of a <code>System.Action</code> delegate that has the specified type arguments.\n  overload: System.Linq.Expressions.Expression.GetActionType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>typeArgs</code> contains more than sixteen elements.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>typeArgs</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  commentId: M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  id: GetDelegateType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GetDelegateType(Type[])\n  nameWithType: Expression.GetDelegateType(Type[])\n  fullName: Expression.GetDelegateType(Type[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Gets a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments.\n  remarks: \"The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.  \\n  \\n As with Func, the last argument is the return type. It can be set to System.Void to produce an Action.\"\n  syntax:\n    content: public static Type GetDelegateType (Type[] typeArgs);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: The type arguments of the delegate.\n    return:\n      type: System.Type\n      description: The delegate type.\n  overload: System.Linq.Expressions.Expression.GetDelegateType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  commentId: M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  id: GetFuncType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GetFuncType(Type[])\n  nameWithType: Expression.GetFuncType(Type[])\n  fullName: Expression.GetFuncType(Type[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.\n  remarks: \"`typeArgs` must contain at least one and at most seventeen elements.  \\n  \\n As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.\"\n  syntax:\n    content: public static Type GetFuncType (Type[] typeArgs);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: An array of one to seventeen <xref href=\"System.Type\"></xref> objects that specify the type arguments for the `System.Func` delegate type.\n    return:\n      type: System.Type\n      description: The type of a <code>System.Func</code> delegate that has the specified type arguments.\n  overload: System.Linq.Expressions.Expression.GetFuncType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>typeArgs</code> contains fewer than one or more than seventeen elements.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>typeArgs</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget, Expression, Type)\n  nameWithType: Expression.Goto(LabelTarget, Expression, Type)\n  fullName: Expression.Goto(LabelTarget, Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement with the specified type. The value passed to the label upon jumping can be specified.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: The value that will be passed to the associated label upon jumping.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Goto*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget, Type)\n  nameWithType: Expression.Goto(LabelTarget, Type)\n  fullName: Expression.Goto(LabelTarget, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement with the specified type.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to the specified value, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Goto*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  id: Goto(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget)\n  nameWithType: Expression.Goto(LabelTarget)\n  fullName: Expression.Goto(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]\"\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to the specified value, and a null value to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Goto*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget, Expression)\n  nameWithType: Expression.Goto(LabelTarget, Expression)\n  fullName: Expression.Goto(LabelTarget, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a \"go to\" statement. The value passed to the label upon jumping can be specified.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: The value that will be passed to the associated label upon jumping.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Goto, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Goto*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThan(Expression, Expression)\n  nameWithType: Expression.GreaterThan(Expression, Expression)\n  fullName: Expression.GreaterThan(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than\" numeric comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"greater than\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.\"\n  example:\n  - \"The following code example shows how to create an expression that compares two integers.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.GreaterThan*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The \"greater than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than\" numeric comparison. The implementing method can be specified.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation :  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"greater than\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.GreaterThan*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the \"greater than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThanOrEqual(Expression, Expression)\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression)\n  fullName: Expression.GreaterThanOrEqual(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than or equal\" numeric comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"greater than or equal\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.\"\n  example:\n  - \"The following code example shows how to create an expression that compares two integers.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The \"greater than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"greater than or equal\" numeric comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"greater than or equal\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the \"greater than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IfThen(Expression, Expression)\n  nameWithType: Expression.IfThen(Expression, Expression)\n  fullName: Expression.IfThen(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional block with an `if` statement.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create an expression that represents a conditional block.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, properties set to the specified values. The <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property is set to default expression and the type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>.\n  overload: System.Linq.Expressions.Expression.IfThen*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IfThenElse(Expression, Expression, Expression)\n  nameWithType: Expression.IfThenElse(Expression, Expression, Expression)\n  fullName: Expression.IfThenElse(Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that represents a conditional block with `if` and `else` statements.\n  remarks: ''\n  example:\n  - \"The following code example shows how to create an expression that represents a conditional block.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref> property equal to.\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref> property equal to.\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: A <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Conditional\"></xref> and the <xref href=\"System.Linq.Expressions.ConditionalExpression.Test\"></xref>, <xref href=\"System.Linq.Expressions.ConditionalExpression.IfTrue\"></xref>, and <xref href=\"System.Linq.Expressions.ConditionalExpression.IfFalse\"></xref> properties set to the specified values. The type of the resulting <xref href=\"System.Linq.Expressions.ConditionalExpression\"></xref> returned by this method is <xref href=\"System.Void\"></xref>.\n  overload: System.Linq.Expressions.Expression.IfThenElse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Increment(Expression, MethodInfo)\n  nameWithType: Expression.Increment(Expression, MethodInfo)\n  fullName: Expression.Increment(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incrementing of the expression by 1.\n  remarks: This expression is functional and does not change the value of the object that is passed to it.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to increment.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incremented expression.\n  overload: System.Linq.Expressions.Expression.Increment*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  id: Increment(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Increment(Expression)\n  nameWithType: Expression.Increment(Expression)\n  fullName: Expression.Increment(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incrementing of the expression value by 1.\n  remarks: This expression is functional and does not change the value of the object that is passed to it.\n  example:\n  - \"The following code example shows how to create an expression that represents an increment operation.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to increment.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the incremented expression.\n  overload: System.Linq.Expressions.Expression.Increment*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Invoke(Expression, Expression[])\n  nameWithType: Expression.Invoke(Expression, Expression[])\n  fullName: Expression.Invoke(Expression, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies a delegate or lambda expression to a list of argument expressions.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.  \\n  \\n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]\\n [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]\"\n  syntax:\n    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the delegate or lambda expression to be applied.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.\n    return:\n      type: System.Linq.Expressions.InvocationExpression\n      description: An <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies the specified delegate or lambda expression to the provided arguments.\n  overload: System.Linq.Expressions.Expression.Invoke*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>expression</code>.Type does not represent a delegate type or an <xref href=\\\"System.Linq.Expressions.Expression`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Invoke(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.Invoke(Expression, IEnumerable<Expression>)\n  fullName: Expression.Invoke(Expression, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies a delegate or lambda expression to a list of argument expressions.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.  \\n  \\n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`. Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]\\n [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]\"\n  syntax:\n    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the delegate or lambda expression to be applied to.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.\n    return:\n      type: System.Linq.Expressions.InvocationExpression\n      description: An <xref href=\"System.Linq.Expressions.InvocationExpression\"></xref> that applies the specified delegate or lambda expression to the provided arguments.\n  overload: System.Linq.Expressions.Expression.Invoke*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>expression</code>.Type does not represent a delegate type or an <xref href=\\\"System.Linq.Expressions.Expression`1\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the delegate represented by <code>expression</code>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>arguments</code> does not contain the same number of elements as the list of parameters for the delegate represented by <code>expression</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  id: IsFalse(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsFalse(Expression)\n  nameWithType: Expression.IsFalse(Expression)\n  fullName: Expression.IsFalse(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Returns whether the expression evaluates to false.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.IsFalse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsFalse(Expression, MethodInfo)\n  nameWithType: Expression.IsFalse(Expression, MethodInfo)\n  fullName: Expression.IsFalse(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Returns whether the expression evaluates to false.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.IsFalse*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  id: IsTrue(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsTrue(Expression)\n  nameWithType: Expression.IsTrue(Expression)\n  fullName: Expression.IsTrue(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Returns whether the expression evaluates to true.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.IsTrue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsTrue(Expression, MethodInfo)\n  nameWithType: Expression.IsTrue(Expression, MethodInfo)\n  fullName: Expression.IsTrue(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Returns whether the expression evaluates to true.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to evaluate.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.IsTrue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Label\n  commentId: M:System.Linq.Expressions.Expression.Label\n  id: Label\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label()\n  nameWithType: Expression.Label()\n  fullName: Expression.Label()\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with void type and no name.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]\"\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.\n  overload: System.Linq.Expressions.Expression.Label*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  id: Label(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(LabelTarget)\n  nameWithType: Expression.Label(LabelTarget)\n  fullName: Expression.Label(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> representing a label without a default value.\n  syntax:\n    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> will be associated with.\n    return:\n      type: System.Linq.Expressions.LabelExpression\n      description: A <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> without a default value.\n  overload: System.Linq.Expressions.Expression.Label*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Label(System.String)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.String)\n  id: Label(System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(String)\n  nameWithType: Expression.Label(String)\n  fullName: Expression.Label(String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with void type and the given name.\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the label.\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.\n  overload: System.Linq.Expressions.Expression.Label*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Label(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Type)\n  id: Label(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(Type)\n  nameWithType: Expression.Label(Type)\n  fullName: Expression.Label(Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with the given type.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]\"\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of value that is passed when jumping to the label.\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.\n  overload: System.Linq.Expressions.Expression.Label*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(LabelTarget, Expression)\n  nameWithType: Expression.Label(LabelTarget, Expression)\n  fullName: Expression.Label(LabelTarget, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> representing a label with the given default value.\n  syntax:\n    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> which this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> will be associated with.\n    - id: defaultValue\n      type: System.Linq.Expressions.Expression\n      description: The value of this <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> when the label is reached through regular control flow.\n    return:\n      type: System.Linq.Expressions.LabelExpression\n      description: A <xref href=\"System.Linq.Expressions.LabelExpression\"></xref> with the given default value.\n  overload: System.Linq.Expressions.Expression.Label*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  id: Label(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(Type, String)\n  nameWithType: Expression.Label(Type, String)\n  fullName: Expression.Label(Type, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> representing a label with the given type and name.\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label (Type type, string name);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of value that is passed when jumping to the label.\n    - id: name\n      type: System.String\n      description: The name of the label.\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: The new <xref href=\"System.Linq.Expressions.LabelTarget\"></xref>.\n  overload: System.Linq.Expressions.Expression.Label*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: name\n      type: System.String\n      description: The name for the lambda. Used for emitting debug information.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: name\n      type: System.String\n      description: The name for the lambda. Used for emitting debug information.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: name\n      type: System.String\n      description: The name for the lambda. Used for emitting debug information.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type, Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda(Type, Expression, ParameterExpression[])\n  fullName: Expression.Lambda(Type, Expression, ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.\n  remarks: \"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \\n  \\n The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.  \\n  \\n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.\"\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents a delegate signature for the lambda.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>delegateType</code> or <code>body</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements in <code>parameters</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>delegateType</code> does not represent a delegate type.  \\n  \\n -or-  \\n  \\n <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  \\n  \\n -or-  \\n  \\n <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type, Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> representing the delegate signature for the lambda.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: name\n      type: System.String\n      description: The name for the lambda. Used for emitting debug information.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda(Expression, Boolean, ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.\n  remarks: \"The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \\n  \\n The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.  \\n  \\n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.\"\n  example:\n  - \"The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]\"\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents a delegate signature for the lambda.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: An object that represents a lambda expression which has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>delegateType</code> or <code>body</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements in <code>parameters</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>delegateType</code> does not represent a delegate type.  \\n  \\n -or-  \\n  \\n <code>body</code>.Type represents a type that is not assignable to the return type of the delegate type represented by <code>delegateType</code>.  \\n  \\n -or-  \\n  \\n <code>parameters</code> does not contain the same number of elements as the list of parameters for the delegate type represented by <code>delegateType</code>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of the delegate type represented by <code>delegateType</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression, ParameterExpression[])\n  fullName: Expression.Lambda(Expression, ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> by first constructing a delegate type.\n  remarks: \"The `parameters` parameter must not have more than sixteen elements.  \\n  \\n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \\n  \\n This method constructs an appropriate delegate type from one of the `System.Func` generic delegates. It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.\"\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>body</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>parameters</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>parameters</code> contains more than sixteen elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a LambdaExpression by first constructing a delegate type.\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to Lambda and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: name\n      type: System.String\n      description: The name of the lambda. Used for generating debugging information.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    typeParameters:\n    - id: TDelegate\n      description: The delegate type.\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: An array that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    typeParameters:\n    - id: TDelegate\n      description: The delegate type.\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: name\n      type: System.String\n      description: The name of the lambda. Used for generating debugging info.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    typeParameters:\n    - id: TDelegate\n      description: The delegate type.\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda<TDelegate>(Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])\n  fullName: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.\n  remarks: \"The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.  \\n  \\n The elements of `parameters` must be reference equal to the parameter expressions in`body`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.\"\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    typeParameters:\n    - id: TDelegate\n      description: A delegate type.\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>body</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements in <code>parameters</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>TDelegate</code> is not a delegate type.  \\n  \\n -or-  \\n  \\n <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  \\n  \\n -or-  \\n  \\n <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.\n  remarks: \"The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.  \\n  \\n The elements of `parameters` must be reference equal to the parameter expressions in `body`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`. If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.\"\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    typeParameters:\n    - id: TDelegate\n      description: A delegate type.\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>body</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements in <code>parameters</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>TDelegate</code> is not a delegate type.  \\n  \\n -or-  \\n  \\n <code>body</code>.Type represents a type that is not assignable to the return type of <code>TDelegate</code>.  \\n  \\n -or-  \\n  \\n <code>parameters</code> does not contain the same number of elements as the list of parameters for <code>TDelegate</code>.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>parameters</code> is not assignable from the type of the corresponding parameter type of <code>TDelegate</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.Expression`1\"></xref> where the delegate type is known at compile time.\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> property equal to.\n    - id: tailCall\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> collection.\n    typeParameters:\n    - id: TDelegate\n      description: The delegate type.\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: An <xref href=\"System.Linq.Expressions.Expression`1\"></xref> that has the <xref href=\"System.Linq.Expressions.LambdaExpression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Lambda\"></xref> and the <xref href=\"System.Linq.Expressions.LambdaExpression.Body\"></xref> and <xref href=\"System.Linq.Expressions.LambdaExpression.Parameters\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Lambda``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShift(Expression, Expression)\n  nameWithType: Expression.LeftShift(Expression, Expression)\n  fullName: Expression.LeftShift(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LeftShift*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShift(Expression, Expression, MethodInfo)\n  nameWithType: Expression.LeftShift(Expression, Expression, MethodInfo)\n  fullName: Expression.LeftShift(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LeftShift*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the left-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShiftAssign(Expression, Expression)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression)\n  fullName: Expression.LeftShiftAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LeftShiftAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShiftAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LeftShiftAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise left-shift assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LeftShiftAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThan(Expression, Expression)\n  nameWithType: Expression.LessThan(Expression, Expression)\n  fullName: Expression.LessThan(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than\" numeric comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The implementing method for the operation is chosen based on the following rules:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"less than\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.\"\n  example:\n  - \"The following code example shows how to create an expression that compares two integers.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LessThan*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The \"less than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThan(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than\" numeric comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"less than\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThan\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LessThan*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the \"less than\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThanOrEqual(Expression, Expression)\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression)\n  fullName: Expression.LessThanOrEqual(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \" less than or equal\" numeric comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"less than or equal\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.\"\n  example:\n  - \"The following code example shows how to create an expression that compares two integers.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LessThanOrEqual*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The \"less than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a \"less than or equal\" numeric comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the \\\"less than or equal\\\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.LessThanOrEqual*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the \"less than or equal\" operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MethodInfo, ElementInit[])\n  nameWithType: Expression.ListBind(MethodInfo, ElementInit[])\n  fullName: Expression.ListBind(MethodInfo, ElementInit[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> object based on a specified property accessor method.\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.ElementInit[] initializers);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> populated with the elements of <code>initializers</code>.\n  overload: System.Linq.Expressions.Expression.ListBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>propertyAccessor</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>propertyAccessor</code> does not represent a property accessor method.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\\\"System.Collections.IEnumerable\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MethodInfo, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)\n  fullName: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> based on a specified property accessor method.\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.MemberInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> populated with the elements of <code>initializers</code>.\n  overload: System.Linq.Expressions.Expression.ListBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>propertyAccessor</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>propertyAccessor</code> does not represent a property accessor method.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\"></xref> of the property that the method represented by <code>propertyAccessor</code> accesses does not implement <xref href=\\\"System.Collections.IEnumerable\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MemberInfo, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)\n  fullName: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> where the member is a field or property.\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: A <xref href=\"System.Reflection.MemberInfo\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ListBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>member</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>member</code> does not represent a field or property.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.FieldInfo.FieldType\\\"></xref> or <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\\\"System.Collections.IEnumerable\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MemberInfo, ElementInit[])\n  nameWithType: Expression.ListBind(MemberInfo, ElementInit[])\n  fullName: Expression.ListBind(MemberInfo, ElementInit[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> where the member is a field or property.\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Linq.Expressions.ElementInit[] initializers);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: A <xref href=\"System.Reflection.MemberInfo\"></xref> that represents a field or property to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberListBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.ListBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberListBinding.Initializers\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ListBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>member</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>member</code> does not represent a field or property.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.FieldInfo.FieldType\\\"></xref> or <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\"></xref> of the field or property that <code>member</code> represents does not implement <xref href=\\\"System.Collections.IEnumerable\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)\n  fullName: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to initialize a collection.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]\\n [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ListInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>newExpression</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression, IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<Expression>)\n  fullName: Expression.ListInit(NewExpression, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a method named \"Add\" to add elements to a collection.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \\n  \\n In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named \\\"Add\\\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.  \\n  \\n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.\"\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.ListInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>newExpression</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"There is no instance method named \\\"Add\\\" (case insensitive) declared in <code>newExpression</code>.Type or its base type.  \\n  \\n -or-  \\n  \\n The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  \\n  \\n -or-  \\n  \\n The type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  \\n  \\n -or-  \\n  \\n More than one argument-compatible method named \\\"Add\\\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression, ElementInit[])\n  nameWithType: Expression.ListInit(NewExpression, ElementInit[])\n  fullName: Expression.ListInit(NewExpression, ElementInit[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses specified <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to initialize a collection.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression>that represents the initialization of a new dictionary instance with two key-value pairs.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]\\n [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.ElementInit[] initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: An array of <xref href=\"System.Linq.Expressions.ElementInit\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ListInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>newExpression</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression, Expression[])\n  nameWithType: Expression.ListInit(NewExpression, Expression[])\n  fullName: Expression.ListInit(NewExpression, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a method named \"Add\" to add elements to a collection.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \\n  \\n In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named \\\"Add\\\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.  \\n  \\n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.\"\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.Expression[] initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.ListInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>newExpression</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newExpression</code>.Type does not implement <xref href=\"System.Collections.IEnumerable\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"There is no instance method named \\\"Add\\\" (case insensitive) declared in <code>newExpression</code>.Type or its base type.  \\n  \\n -or-  \\n  \\n The add method on <code>newExpression</code>.Type or its base type does not take exactly one argument.  \\n  \\n -or-  \\n  \\n The type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of the first element of <code>initializers</code> is not assignable to the argument type of the add method on <code>newExpression</code>.Type or its base type.  \\n  \\n -or-  \\n  \\n More than one argument-compatible method named \\\"Add\\\" (case-insensitive) exists on <code>newExpression</code>.Type and/or its base type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a specified method to add elements to a collection.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \\n  \\n If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \\\"Add\\\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \\\"Add\\\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.  \\n  \\n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.\"\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents an instance method named \"Add\" (case insensitive), that adds an element to a collection.\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.ListInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>newExpression</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>newExpression</code>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>addMethod</code> is not `null` and it does not represent an instance method named \\\"Add\\\" (case insensitive) that takes exactly one argument.  \\n  \\n -or-  \\n  \\n <code>addMethod</code> is not `null` and the type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>addMethod</code> is `null` and no instance method named \"Add\" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression, MethodInfo, Expression[])\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, Expression[])\n  fullName: Expression.ListInit(NewExpression, MethodInfo, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that uses a specified method to add elements to a collection.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.  \\n  \\n If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named \\\"Add\\\" (case insensitive) that takes exactly one argument. If `addMethod` is not `null`, it must represent an instance method named \\\"Add\\\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.  \\n  \\n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.\"\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property equal to.\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents an instance method that takes one argument, that adds an element to a collection.\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.ListInitExpression.Initializers\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: A <xref href=\"System.Linq.Expressions.ListInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ListInit\"></xref> and the <xref href=\"System.Linq.Expressions.ListInitExpression.NewExpression\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.ListInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>newExpression</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n One or more elements of <code>initializers</code> are `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>newExpression</code>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>addMethod</code> is not `null` and it does not represent an instance method named \\\"Add\\\" (case insensitive) that takes exactly one argument.  \\n  \\n -or-  \\n  \\n <code>addMethod</code> is not `null` and the type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of one or more elements of <code>initializers</code> is not assignable to the argument type of the method that <code>addMethod</code> represents.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>addMethod</code> is `null` and no instance method named \"Add\" that takes one type-compatible argument exists on <code>newExpression</code>.Type or its base type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  id: Loop(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Loop(Expression)\n  nameWithType: Expression.Loop(Expression)\n  fullName: Expression.Loop(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body.\n  syntax:\n    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the loop.\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Loop*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Loop(Expression, LabelTarget)\n  nameWithType: Expression.Loop(Expression, LabelTarget)\n  fullName: Expression.Loop(Expression, LabelTarget)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body and break target.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]\"\n  syntax:\n    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the loop.\n    - id: break\n      type: System.Linq.Expressions.LabelTarget\n      description: The break target used by the loop body.\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Loop*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Loop(Expression, LabelTarget, LabelTarget)\n  nameWithType: Expression.Loop(Expression, LabelTarget, LabelTarget)\n  fullName: Expression.Loop(Expression, LabelTarget, LabelTarget)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.LoopExpression\"></xref> with the given body.\n  syntax:\n    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the loop.\n    - id: break\n      type: System.Linq.Expressions.LabelTarget\n      description: The break target used by the loop body.\n    - id: continue\n      type: System.Linq.Expressions.LabelTarget\n      description: The continue target used by the loop body.\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: The created <xref href=\"System.Linq.Expressions.LoopExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Loop*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeBinary(ExpressionType, Expression, Expression)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left and right operands, by calling an appropriate factory method.\n  remarks: The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]\\n [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation.\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method.\n  overload: System.Linq.Expressions.Expression.MakeBinary*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>binaryType</code> does not correspond to a binary expression node.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left operand, right operand and implementing method, by calling the appropriate factory method.\n  remarks: The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation.\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that specifies the implementing method.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method.\n  overload: System.Linq.Expressions.Expression.MakeBinary*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>binaryType</code> does not correspond to a binary expression node.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.\n  remarks: The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of binary operation.\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the left operand.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the right operand.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that specifies the implementing method.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> that represents a type conversion function. This parameter is used only if <code>binaryType</code> is <xref href=\"System.Linq.Expressions.ExpressionType.Coalesce\"></xref> or compound assignment..\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: The <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that results from calling the appropriate factory method.\n  overload: System.Linq.Expressions.Expression.MakeBinary*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>binaryType</code> does not correspond to a binary expression node.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  nameWithType: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  fullName: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> representing a catch statement with the specified elements.\n  remarks: '`type` must be non-null and match the type of `variable` (if it is supplied).'\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> of <xref href=\"System.Exception\"></xref> this <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> will handle.\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> representing a reference to the <xref href=\"System.Exception\"></xref> object caught by this handler.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the catch statement.\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: The body of the <xref href=\"System.Exception\"></xref> filter.\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: The created <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>.\n  overload: System.Linq.Expressions.Expression.MakeCatchBlock*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and four arguments.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The fourth argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and two arguments.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and three arguments.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and one argument.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression[])\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref> and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  nameWithType: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  fullName: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a jump of the specified <xref href=\"System.Linq.Expressions.GotoExpressionKind\"></xref>. The value passed to the label upon jumping can also be specified.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: kind\n      type: System.Linq.Expressions.GotoExpressionKind\n      description: The <xref href=\"System.Linq.Expressions.GotoExpressionKind\"></xref> of the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref>.\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: The value that will be passed to the associated label upon jumping.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to <code>kind</code>, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.MakeGoto*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> that represents accessing an indexed property in an object.\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: The object to which the property belongs. It should be null if the property is `static` (`shared` in Visual Basic).\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> representing the property to index.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <code>IEnumerable<Expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property.\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.MakeIndex*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  commentId: M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeMemberAccess(Expression, MemberInfo)\n  nameWithType: Expression.MakeMemberAccess(Expression, MemberInfo)\n  fullName: Expression.MakeMemberAccess(Expression, MemberInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing either a field or a property.\n  remarks: This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`. If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>. If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the object that the member belongs to. This can be null for static members.\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The <xref href=\"System.Reflection.MemberInfo\"></xref> that describes the field or property to be accessed.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: The <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that results from calling the appropriate factory method.\n  overload: System.Linq.Expressions.Expression.MakeMemberAccess*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>member</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>member</code> does not represent a field or property.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  commentId: M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  nameWithType: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  fullName: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with the specified elements.\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The result type of the try expression. If null, bodh and all handlers must have identical type.\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the try block.\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: The body of the finally block. Pass null if the try block has no finally block associated with it.\n    - id: fault\n      type: System.Linq.Expressions.Expression\n      description: The body of the fault block. Pass null if the try block has no fault block associated with it.\n    - id: handlers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}\n      description: A collection of <xref href=\"System.Linq.Expressions.CatchBlock\"></xref>s representing the catch statements to be associated with the try block.\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.MakeTry*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeUnary(ExpressionType, Expression, Type)\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type)\n  fullName: Expression.MakeUnary(ExpressionType, Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>, given an operand, by calling the appropriate factory method.\n  remarks: The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type`parameter is ignored if it does not apply to the factory method that is called.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);\n    parameters:\n    - id: unaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of unary operation.\n    - id: operand\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the operand.\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> that specifies the type to be converted to (pass `null` if not applicable).\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: The <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that results from calling the appropriate factory method.\n  overload: System.Linq.Expressions.Expression.MakeUnary*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>operand</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>unaryType</code> does not correspond to a unary expression node.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  fullName: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>, given an operand and implementing method, by calling the appropriate factory method.\n  remarks: The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: unaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> that specifies the type of unary operation.\n    - id: operand\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> that represents the operand.\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> that specifies the type to be converted to (pass `null` if not applicable).\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: The <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that results from calling the appropriate factory method.\n  overload: System.Linq.Expressions.Expression.MakeUnary*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>operand</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>unaryType</code> does not correspond to a unary expression node.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MethodInfo, MemberBinding[])\n  nameWithType: Expression.MemberBind(MethodInfo, MemberBinding[])\n  fullName: Expression.MemberBind(MethodInfo, MemberBinding[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.MemberBinding[] bindings);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>propertyAccessor</code> or <code>bindings</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>propertyAccessor</code> does not represent a property accessor method.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref>, the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>, and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>propertyAccessor</code> or <code>bindings</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>propertyAccessor</code> does not represent a property accessor method.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the property accessed by the method that <code>propertyAccessor</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a field or property.\n  remarks: The `member` parameter must represent a field or property.\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>member</code> or <code>bindings</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>member</code> does not represent a field or property.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MemberInfo, MemberBinding[])\n  nameWithType: Expression.MemberBind(MemberInfo, MemberBinding[])\n  fullName: Expression.MemberBind(MemberInfo, MemberBinding[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that represents the recursive initialization of members of a field or property.\n  remarks: The `member` parameter must represent a field or property.\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Linq.Expressions.MemberBinding[] bindings);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: The <xref href=\"System.Reflection.MemberInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property equal to.\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: A <xref href=\"System.Linq.Expressions.MemberMemberBinding\"></xref> that has the <xref href=\"System.Linq.Expressions.MemberBinding.BindingType\"></xref> property equal to <xref href=\"System.Linq.Expressions.MemberBindingType.MemberBinding\"></xref> and the <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> and <xref href=\"System.Linq.Expressions.MemberMemberBinding.Bindings\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>member</code> or <code>bindings</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>member</code> does not represent a field or property.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\"></xref> property of an element of <code>bindings</code> does not represent a member of the type of the field or property that <code>member</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Represents an expression that creates a new object and initializes a property of the object.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.\n  example:\n  - \"The following example demonstrates an expression that creates a new object and initializes a property of the object.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> property equal to.\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberInitExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MemberInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>newExpression</code> or <code>bindings</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberInit(NewExpression, MemberBinding[])\n  nameWithType: Expression.MemberInit(NewExpression, MemberBinding[])\n  fullName: Expression.MemberInit(NewExpression, MemberBinding[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]\\n [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.MemberBinding[] bindings);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> property equal to.\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: An array of <xref href=\"System.Linq.Expressions.MemberBinding\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.MemberInitExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberInitExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberInit\"></xref> and the <xref href=\"System.Linq.Expressions.MemberInitExpression.NewExpression\"></xref> and <xref href=\"System.Linq.Expressions.MemberInitExpression.Bindings\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MemberInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>newExpression</code> or <code>bindings</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Linq.Expressions.MemberBinding.Member\"></xref> property of an element of <code>bindings</code> does not represent a member of the type that <code>newExpression</code>.Type represents.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Modulo(Expression, Expression)\n  nameWithType: Expression.Modulo(Expression, Expression)\n  fullName: Expression.Modulo(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic remainder operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Modulo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Modulo(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Modulo(Expression, Expression, MethodInfo)\n  fullName: Expression.Modulo(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic remainder operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The implementing method for the operation is chosen based on the following rules:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Modulo\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Modulo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the modulus operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ModuloAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ModuloAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ModuloAssign(Expression, Expression)\n  nameWithType: Expression.ModuloAssign(Expression, Expression)\n  fullName: Expression.ModuloAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ModuloAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a remainder assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.ModuloAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ModuloAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Multiply(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Multiply(Expression, Expression, MethodInfo)\n  fullName: Expression.Multiply(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Multiply*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Multiply(Expression, Expression)\n  nameWithType: Expression.Multiply(Expression, Expression)\n  fullName: Expression.Multiply(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.\"\n  example:\n  - \"The following code example shows how to create an expression that multiplies two values.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Multiply\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Multiply*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssign(Expression, Expression)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression)\n  fullName: Expression.MultiplyAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssignChecked(Expression, Expression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a multiplication assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyChecked(Expression, Expression)\n  nameWithType: Expression.MultiplyChecked(Expression, Expression)\n  fullName: Expression.MultiplyChecked(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that has overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyChecked(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic multiplication operation that has overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MultiplyChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.MultiplyChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the multiplication operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Negate(Expression, MethodInfo)\n  nameWithType: Expression.Negate(Expression, MethodInfo)\n  fullName: Expression.Negate(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Negate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  id: Negate(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Negate(Expression)\n  nameWithType: Expression.Negate(Expression)\n  fullName: Expression.Negate(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  example:\n  - \"The following example demonstrates how to create an expression that represents an arithmetic negation operation.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Negate\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.Negate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The unary minus operator is not defined for <code>expression</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  id: NegateChecked(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NegateChecked(Expression)\n  nameWithType: Expression.NegateChecked(Expression)\n  fullName: Expression.NegateChecked(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation that has overflow checking.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.NegateChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The unary minus operator is not defined for <code>expression</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NegateChecked(Expression, MethodInfo)\n  nameWithType: Expression.NegateChecked(Expression, MethodInfo)\n  fullName: Expression.NegateChecked(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NegateChecked\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.NegateChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>method</code> is `null` and the unary minus operator is not defined for <code>expression</code>.Type.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  id: New(System.Reflection.ConstructorInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo)\n  nameWithType: Expression.New(ConstructorInfo)\n  fullName: Expression.New(ConstructorInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor that takes no arguments.\n  remarks: The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.New*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>constructor</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The constructor that <code>constructor</code> represents has at least one parameter.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.New(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.New(System.Type)\n  id: New(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(Type)\n  nameWithType: Expression.New(Type)\n  fullName: Expression.New(Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the parameterless constructor of the specified type.\n  remarks: \"The `type` parameter must represent a type that has a constructor without parameters.  \\n  \\n The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]\\n [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]\"\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that has a constructor that takes no arguments.\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property set to the <xref href=\"System.Reflection.ConstructorInfo\"></xref> that represents the constructor without parameters for the specified type.\n  overload: System.Linq.Expressions.Expression.New*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The type that <code>type</code> represents does not have a constructor without parameters.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo, IEnumerable<Expression>)\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>)\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments.\n  remarks: \"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.\"\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.New*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>constructor</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>arguments</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo, Expression[])\n  nameWithType: Expression.New(ConstructorInfo, Expression[])\n  fullName: Expression.New(ConstructorInfo, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments.\n  remarks: \"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.\"\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.New*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>constructor</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>arguments</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>arguments</code> does match the number of parameters for the constructor that <code>constructor</code> represents.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.\n  remarks: \"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \\n  \\n If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must have a `get` accessor. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.\"\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> members);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.\n    - id: members\n      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Reflection.MemberInfo\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.New*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>constructor</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>arguments</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>members</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  \\n  \\n -or-  \\n  \\n The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  \\n  \\n -or-  \\n  \\n An element of <code>arguments</code> has a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.\n  remarks: \"The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`. If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \\n  \\n If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`. Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`. If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.\"\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Reflection.MemberInfo[] members);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: The <xref href=\"System.Reflection.ConstructorInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref> property equal to.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> collection.\n    - id: members\n      type: System.Reflection.MemberInfo[]\n      description: An array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: A <xref href=\"System.Linq.Expressions.NewExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.New\"></xref> and the <xref href=\"System.Linq.Expressions.NewExpression.Constructor\"></xref>, <xref href=\"System.Linq.Expressions.NewExpression.Arguments\"></xref> and <xref href=\"System.Linq.Expressions.NewExpression.Members\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.New*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>constructor</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>arguments</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>members</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>arguments</code> parameter does not contain the same number of elements as the number of parameters for the constructor that <code>constructor</code> represents.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property of an element of <code>arguments</code> is not assignable to the type of the corresponding parameter of the constructor that <code>constructor</code> represents.  \\n  \\n -or-  \\n  \\n The <code>members</code> parameter does not have the same number of elements as <code>arguments</code>.  \\n  \\n -or-  \\n  \\n An element of <code>arguments</code> has a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <code>members</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayBounds(Type, Expression[])\n  nameWithType: Expression.NewArrayBounds(Type, Expression[])\n  fullName: Expression.NewArrayBounds(Type, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating an array that has a specified rank.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]\\n [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]\"\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Linq.Expressions.Expression[] bounds);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the element type of the array.\n    - id: bounds\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.NewArrayBounds*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> or <code>bounds</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>bounds</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>bounds</code> does not represent an integral type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayBounds(Type, IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayBounds(Type, IEnumerable<Expression>)\n  fullName: Expression.NewArrayBounds(Type, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating an array that has a specified rank.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]\\n [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]\"\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> bounds);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the element type of the array.\n    - id: bounds\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayBounds\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.NewArrayBounds*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> or <code>bounds</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>bounds</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>bounds</code> does not represent an integral type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayInit(Type, IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayInit(Type, IEnumerable<Expression>)\n  fullName: Expression.NewArrayInit(Type, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]\\n [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]\"\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the element type of the array.\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that contains <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.NewArrayInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>initializers</code> is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type that <code>type</code> represents.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayInit(Type, Expression[])\n  nameWithType: Expression.NewArrayInit(Type, Expression[])\n  fullName: Expression.NewArrayInit(Type, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.  \\n  \\n> [!NOTE]\\n>  An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.  \\n  \\n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.\"\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]\\n [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]\"\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Linq.Expressions.Expression[] initializers);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the element type of the array.\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: A <xref href=\"System.Linq.Expressions.NewArrayExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NewArrayInit\"></xref> and the <xref href=\"System.Linq.Expressions.NewArrayExpression.Expressions\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.NewArrayInit*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>type</code> or <code>initializers</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>initializers</code> is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property of an element of <code>initializers</code> represents a type that is not assignable to the type <code>type</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.NodeType\n  commentId: P:System.Linq.Expressions.Expression.NodeType\n  id: NodeType\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: Expression.NodeType\n  fullName: Expression.NodeType\n  type: Property\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Gets the node type of this <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type. For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a \\\"greater than\\\" operation. The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.  \\n  \\n The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.\"\n  syntax:\n    content: public virtual System.Linq.Expressions.ExpressionType NodeType { get; }\n    return:\n      type: System.Linq.Expressions.ExpressionType\n      description: One of the <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> values.\n  overload: System.Linq.Expressions.Expression.NodeType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  id: Not(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Not(Expression)\n  nameWithType: Expression.Not(Expression)\n  fullName: Expression.Not(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a bitwise complement operation.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  example:\n  - \"The following example demonstrates how to create an expression that represents a logical NOT operation.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.Not*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The unary not operator is not defined for <code>expression</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Not(Expression, MethodInfo)\n  nameWithType: Expression.Not(Expression, MethodInfo)\n  fullName: Expression.Not(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a bitwise complement operation. The implementing method can be specified.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Not\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Not*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>method</code> is `null` and the unary not operator is not defined for <code>expression</code>.Type.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NotEqual(Expression, Expression)\n  nameWithType: Expression.NotEqual(Expression, Expression)\n  fullName: Expression.NotEqual(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an inequality comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.NotEqual*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NotEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an inequality comparison.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`. Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is <xref:System.Boolean>.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: liftToNull\n      type: System.Boolean\n      description: '`true` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `true`; `false` to set <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref> to `false`.'\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.NotEqual*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the inequality operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  id: OnesComplement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OnesComplement(Expression)\n  nameWithType: Expression.OnesComplement(Expression)\n  fullName: Expression.OnesComplement(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Returns the expression representing the ones complement.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.OnesComplement*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OnesComplement(Expression, MethodInfo)\n  nameWithType: Expression.OnesComplement(Expression, MethodInfo)\n  fullName: Expression.OnesComplement(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Returns the expression representing the ones complement.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.OnesComplement*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Or(Expression, Expression)\n  nameWithType: Expression.Or(Expression, Expression)\n  fullName: Expression.Or(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `OR` operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.\"\n  example:\n  - \"The following code example shows how to create an expression that represents a logical OR operation.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Or*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Or(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Or(Expression, Expression, MethodInfo)\n  fullName: Expression.Or(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise `OR` operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Or\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Or*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrAssign(Expression, Expression)\n  nameWithType: Expression.OrAssign(Expression, Expression)\n  fullName: Expression.OrAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.OrAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.OrAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.OrAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise OR assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.OrAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrElse(Expression, Expression)\n  nameWithType: Expression.OrElse(Expression, Expression)\n  fullName: Expression.OrElse(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n    > [!NOTE]\\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   `left`.Type and `right`.Type are the same Boolean type.  \\n  \\n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \\n  \\n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.\"\n  example:\n  - \"The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.OrElse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \\n  \\n -or-  \\n  \\n <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrElse(Expression, Expression, MethodInfo)\n  nameWithType: Expression.OrElse(Expression, Expression, MethodInfo)\n  fullName: Expression.OrElse(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n    > [!NOTE]\\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   `left`.Type and `right`.Type are the same Boolean type.  \\n  \\n-   If `left`.Type and `right`.Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \\n  \\n-   If `left`.Type and `right`.Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.OrElse\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.OrElse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>method</code> is `null` and the bitwise `OR` operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null` and <code>left</code>.Type and <code>right</code>.Type are not the same Boolean type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  id: Parameter(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Parameter(Type, String)\n  nameWithType: Expression.Parameter(Type, String)\n  fullName: Expression.Parameter(Type, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the parameter or variable.\n    - id: name\n      type: System.String\n      description: The name of the parameter or variable, used for debugging or printing purpose only.\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Parameter\"></xref> and the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> and <xref href=\"System.Linq.Expressions.ParameterExpression.Name\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Parameter*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type)\n  id: Parameter(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Parameter(Type)\n  nameWithType: Expression.Parameter(Type)\n  fullName: Expression.Parameter(Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]\"\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the parameter or variable.\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type.\n  overload: System.Linq.Expressions.Expression.Parameter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostDecrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PostDecrementAssign(Expression, MethodInfo)\n  fullName: Expression.PostDecrementAssign(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PostDecrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  id: PostDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostDecrementAssign(Expression)\n  nameWithType: Expression.PostDecrementAssign(Expression)\n  fullName: Expression.PostDecrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PostDecrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  id: PostIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostIncrementAssign(Expression)\n  nameWithType: Expression.PostIncrementAssign(Expression)\n  fullName: Expression.PostIncrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PostIncrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostIncrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PostIncrementAssign(Expression, MethodInfo)\n  fullName: Expression.PostIncrementAssign(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PostIncrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Power(Expression, Expression)\n  nameWithType: Expression.Power(Expression, Expression)\n  fullName: Expression.Power(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising a number to a power.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Power*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \\n  \\n -or-  \\n  \\n <code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\\\"System.Double\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Power(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Power(Expression, Expression, MethodInfo)\n  fullName: Expression.Power(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising a number to a power.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Power\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Power*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>method</code> is `null` and the exponentiation operator is not defined for <code>left</code>.Type and <code>right</code>.Type.  \\n  \\n -or-  \\n  \\n <code>method</code> is `null` and <code>left</code>.Type and/or <code>right</code>.Type are not <xref href=\\\"System.Double\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PowerAssign(Expression, Expression)\n  nameWithType: Expression.PowerAssign(Expression, Expression)\n  fullName: Expression.PowerAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.PowerAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PowerAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.PowerAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents raising an expression to a power and assigning the result back to the expression.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.PowerAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.PowerAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  id: PreDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreDecrementAssign(Expression)\n  nameWithType: Expression.PreDecrementAssign(Expression)\n  fullName: Expression.PreDecrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that decrements the expression by 1 and assigns the result back to the expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PreDecrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreDecrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PreDecrementAssign(Expression, MethodInfo)\n  fullName: Expression.PreDecrementAssign(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that decrements the expression by 1 and assigns the result back to the expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PreDecrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  id: PreIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreIncrementAssign(Expression)\n  nameWithType: Expression.PreIncrementAssign(Expression)\n  fullName: Expression.PreIncrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that increments the expression by 1 and assigns the result back to the expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PreIncrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreIncrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PreIncrementAssign(Expression, MethodInfo)\n  fullName: Expression.PreIncrementAssign(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that increments the expression by 1 and assigns the result back to the expression.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to apply the operations on.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> that represents the implementing method.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the resultant expression.\n  overload: System.Linq.Expressions.Expression.PreIncrementAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression, String, Expression[])\n  nameWithType: Expression.Property(Expression, String, Expression[])\n  fullName: Expression.Property(Expression, String, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property.\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: The object to which the property belongs. If the property is static/shared, it must be null.\n    - id: propertyName\n      type: System.String\n      description: The name of the indexer.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property.\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Property*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression, PropertyInfo, Expression[])\n  nameWithType: Expression.Property(Expression, PropertyInfo, Expression[])\n  fullName: Expression.Property(Expression, PropertyInfo, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property.\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: The object to which the property belongs. If the property is static/shared, it must be null.\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: The <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property to index.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: An array of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property.\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Property*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an <xref href=\"System.Linq.Expressions.IndexExpression\"></xref> representing the access to an indexed property.\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: The object to which the property belongs. If the property is static/shared, it must be null.\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: The <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property to index.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Linq.Expressions.Expression\"></xref> objects that are used to index the property.\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: The created <xref href=\"System.Linq.Expressions.IndexExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Property*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression, Type, String)\n  nameWithType: Expression.Property(Expression, Type, String)\n  fullName: Expression.Property(Expression, Type, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> accessing a property.\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: The containing object of the property. This can be null for static properties.\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> that contains the property.\n    - id: propertyName\n      type: System.String\n      description: The property to be accessed.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: The created <xref href=\"System.Linq.Expressions.MemberExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Property*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression, PropertyInfo)\n  nameWithType: Expression.Property(Expression, PropertyInfo)\n  fullName: Expression.Property(Expression, PropertyInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \\n  \\n If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.\"\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. This can be null for static properties.\n    - id: property\n      type: System.Reflection.PropertyInfo\n      description: The <xref href=\"System.Reflection.PropertyInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref> and the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Property*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>property</code> is `null`.  \\n  \\n -or-  \\n  \\n The property that <code>property</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>expression</code>.Type is not assignable to the declaring type of the property that <code>property</code> represents.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression, MethodInfo)\n  nameWithType: Expression.Property(Expression, MethodInfo)\n  fullName: Expression.Property(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property by using a property accessor method.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \\n  \\n If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.\"\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property equal to. This can be null for static properties.\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> that represents a property accessor method.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code> and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property accessed in <code>propertyAccessor</code>.\n  overload: System.Linq.Expressions.Expression.Property*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>propertyAccessor</code> is `null`.  \\n  \\n -or-  \\n  \\n The method that <code>propertyAccessor</code> represents is not `static` (`Shared` in Visual Basic) and <code>expression</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>expression</code>.Type is not assignable to the declaring type of the method represented by <code>propertyAccessor</code>.  \\n  \\n -or-  \\n  \\n The method that <code>propertyAccessor</code> represents is not a property accessor method.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  id: Property(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression, String)\n  nameWithType: Expression.Property(Expression, String)\n  fullName: Expression.Property(Expression, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression>is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.  \\n  \\n This method searches `expression`.Type and its base types for a property that has the name `propertyName`. Public properties are given preference over non-public properties. If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.\"\n  example:\n  - \"The following example shows how to create an expression that represents accessing a property.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property named <code>propertyName</code>. This can be `null` for static properties.\n    - id: propertyName\n      type: System.String\n      description: The name of a property to be accessed.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> that represents the property denoted by <code>propertyName</code>.\n  overload: System.Linq.Expressions.Expression.Property*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>propertyName</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: No property named <code>propertyName</code> is defined in <code>expression</code>.Type or its base types.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  commentId: M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PropertyOrField(Expression, String)\n  nameWithType: Expression.PropertyOrField(Expression, String)\n  fullName: Expression.PropertyOrField(Expression, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that represents accessing a property or field.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.  \\n  \\n This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`. Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.\"\n  example:\n  - \"The following example shows how to create an expression that represents accessing a property or field.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]\"\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> whose <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> contains a property or field named <code>propertyOrFieldName</code>. This can be null for static members.\n    - id: propertyOrFieldName\n      type: System.String\n      description: The name of a property or field to be accessed.\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: A <xref href=\"System.Linq.Expressions.MemberExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.MemberAccess\"></xref>, the <xref href=\"System.Linq.Expressions.MemberExpression.Expression\"></xref> property set to <code>expression</code>, and the <xref href=\"System.Linq.Expressions.MemberExpression.Member\"></xref> property set to the <xref href=\"System.Reflection.PropertyInfo\"></xref> or <xref href=\"System.Reflection.FieldInfo\"></xref> that represents the property or field denoted by <code>propertyOrFieldName</code>.\n  overload: System.Linq.Expressions.Expression.PropertyOrField*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>propertyOrFieldName</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: No property or field named <code>propertyOrFieldName</code> is defined in <code>expression</code>.Type or its base types.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  id: Quote(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Quote(Expression)\n  nameWithType: Expression.Quote(Expression)\n  fullName: Expression.Quote(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an expression that has a constant value of type <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`. Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Quote\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.Quote*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Reduce\n  commentId: M:System.Linq.Expressions.Expression.Reduce\n  id: Reduce\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Reduce()\n  nameWithType: Expression.Reduce()\n  fullName: Expression.Reduce()\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.\n  syntax:\n    content: public virtual System.Linq.Expressions.Expression Reduce ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.Expression\n      description: The reduced expression.\n  overload: System.Linq.Expressions.Expression.Reduce*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.ReduceAndCheck\n  commentId: M:System.Linq.Expressions.Expression.ReduceAndCheck\n  id: ReduceAndCheck\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReduceAndCheck()\n  nameWithType: Expression.ReduceAndCheck()\n  fullName: Expression.ReduceAndCheck()\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.\n  remarks: Unlike Reduce, this method checks that the reduced node satisfies certain invariants.\n  syntax:\n    content: public System.Linq.Expressions.Expression ReduceAndCheck ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.Expression\n      description: The reduced expression.\n  overload: System.Linq.Expressions.Expression.ReduceAndCheck*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ReduceExtensions\n  commentId: M:System.Linq.Expressions.Expression.ReduceExtensions\n  id: ReduceExtensions\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReduceExtensions()\n  nameWithType: Expression.ReduceExtensions()\n  fullName: Expression.ReduceExtensions()\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.\n  syntax:\n    content: public System.Linq.Expressions.Expression ReduceExtensions ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.Expression\n      description: The reduced expression.\n  overload: System.Linq.Expressions.Expression.ReduceExtensions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReferenceEqual(Expression, Expression)\n  nameWithType: Expression.ReferenceEqual(Expression, Expression)\n  fullName: Expression.ReferenceEqual(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a reference equality comparison.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Equal\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ReferenceEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReferenceNotEqual(Expression, Expression)\n  nameWithType: Expression.ReferenceNotEqual(Expression, Expression)\n  fullName: Expression.ReferenceNotEqual(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a reference inequality comparison.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.NotEqual\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.ReferenceNotEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Rethrow(System.Type)\n  id: Rethrow(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Rethrow(Type)\n  nameWithType: Expression.Rethrow(Type)\n  fullName: Expression.Rethrow(Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception with a given type.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The new <xref href=\"System.Type\"></xref> of the expression.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception.\n  overload: System.Linq.Expressions.Expression.Rethrow*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Rethrow\n  commentId: M:System.Linq.Expressions.Expression.Rethrow\n  id: Rethrow\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Rethrow()\n  nameWithType: Expression.Rethrow()\n  fullName: Expression.Rethrow()\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Rethrow ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a rethrowing of an exception.\n  overload: System.Linq.Expressions.Expression.Rethrow*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  id: Return(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget)\n  nameWithType: Expression.Return(LabelTarget)\n  fullName: Expression.Return(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and a null value to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Return*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget, Expression)\n  nameWithType: Expression.Return(LabelTarget, Expression)\n  fullName: Expression.Return(LabelTarget, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement. The value passed to the label upon jumping can be specified.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]\"\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: The value that will be passed to the associated label upon jumping.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, and <code>value</code> to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Return*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget, Type)\n  nameWithType: Expression.Return(LabelTarget, Type)\n  fullName: Expression.Return(LabelTarget, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement with the specified type.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Return, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and a null value to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Return*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget, Expression, Type)\n  nameWithType: Expression.Return(LabelTarget, Expression, Type)\n  fullName: Expression.Return(LabelTarget, Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: The <xref href=\"System.Linq.Expressions.LabelTarget\"></xref> that the <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> will jump to.\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: The value that will be passed to the associated label upon jumping.\n    - id: type\n      type: System.Type\n      description: An <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: A <xref href=\"System.Linq.Expressions.GotoExpression\"></xref> with <xref href=\"System.Linq.Expressions.GotoExpression.Kind\"></xref> equal to Continue, the <xref href=\"System.Linq.Expressions.GotoExpression.Target\"></xref> property set to <code>target</code>, the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property set to <code>type</code>, and <code>value</code> to be passed to the target label upon jumping.\n  overload: System.Linq.Expressions.Expression.Return*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShift(Expression, Expression)\n  nameWithType: Expression.RightShift(Expression, Expression)\n  fullName: Expression.RightShift(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.RightShift*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShift(Expression, Expression, MethodInfo)\n  nameWithType: Expression.RightShift(Expression, Expression, MethodInfo)\n  fullName: Expression.RightShift(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift operation.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShift\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.RightShift*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the right-shift operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShiftAssign(Expression, Expression)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression)\n  fullName: Expression.RightShiftAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.RightShiftAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShiftAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.RightShiftAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a bitwise right-shift assignment operation.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RightShiftAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.RightShiftAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RuntimeVariables(ParameterExpression[])\n  nameWithType: Expression.RuntimeVariables(ParameterExpression[])\n  fullName: Expression.RuntimeVariables(ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Linq.Expressions.ParameterExpression[] variables);\n    parameters:\n    - id: variables\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: An array of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.RuntimeVariablesExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.RuntimeVariables*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RuntimeVariables(IEnumerable<ParameterExpression>)\n  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  fullName: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables);\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: A collection of <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> objects to use to populate the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> collection.\n    return:\n      type: System.Linq.Expressions.RuntimeVariablesExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.RuntimeVariables\"></xref> and the <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.RuntimeVariables*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Subtract(Expression, Expression)\n  nameWithType: Expression.Subtract(Expression, Expression)\n  fullName: Expression.Subtract(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.\"\n  example:\n  - \"The following code example shows how to create an expression that subtracts the argument from the first argument.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Subtract*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Subtract(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Subtract(Expression, Expression, MethodInfo)\n  fullName: Expression.Subtract(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.Subtract\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.Subtract*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssign(Expression, Expression)\n  nameWithType: Expression.SubtractAssign(Expression, Expression)\n  fullName: Expression.SubtractAssign(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that does not have overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssign\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractAssign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: A <xref href=\"System.Linq.Expressions.LambdaExpression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Conversion\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssignChecked(Expression, Expression)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents a subtraction assignment operation that has overflow checking.\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractChecked(Expression, Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that has overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation :  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \\n  \\n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref>, <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref>, and <xref href=\"System.Linq.Expressions.BinaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly two arguments.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>method</code> is `null` and the subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractChecked(Expression, Expression)\n  nameWithType: Expression.SubtractChecked(Expression, Expression)\n  fullName: Expression.SubtractChecked(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that represents an arithmetic subtraction operation that has overflow checking.\n  remarks: \"The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \\n  \\n The following information describes the implementing method, the node type, and whether a node is lifted.  \\n  \\n#### Implementing Method  \\n The following rules determine the selected implementing method for the operation:  \\n  \\n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \\n  \\n-   Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`:  \\n  \\n-   If `left`.Type and `right`.Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \\n  \\n-   If `left`.Type and `right`.Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.\"\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> property equal to.\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: A <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.BinaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.SubtractChecked\"></xref> and the <xref href=\"System.Linq.Expressions.BinaryExpression.Left\"></xref> and <xref href=\"System.Linq.Expressions.BinaryExpression.Right\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.SubtractChecked*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>left</code> or <code>right</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The subtraction operator is not defined for <code>left</code>.Type and <code>right</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case..\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The result type of the switch.\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: The value to be tested against each case.\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: The result of the switch if <code>switchValue</code> does not match any of the cases.\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: The equality comparison method to use.\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: The set of cases for this switch expression.\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Switch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, SwitchCase[])\n  fullName: Expression.Switch(Expression, SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement without a default case.\n  remarks: \"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \\n  \\n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \\n  \\n If `switchValue` does not match any of the cases, no exception is thrown.\"\n  example:\n  - \"The following example demonstrates how to create an expression that represents a swtich statement without a default case.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]\"\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: The value to be tested against each case.\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: The set of cases for this switch expression.\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Switch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression, Expression, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, Expression, SwitchCase[])\n  fullName: Expression.Switch(Expression, Expression, SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.\n  remarks: \"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \\n  \\n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \\n  \\n If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.\"\n  example:\n  - \"The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]\"\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: The value to be tested against each case.\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: The result of the switch if <code>switchValue</code> does not match any of the cases.\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: The set of cases for this switch expression.\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Switch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: The value to be tested against each case.\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: The result of the switch if <code>switchValue</code> does not match any of the cases.\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: The equality comparison method to use.\n    - id: cases\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n      description: The set of cases for this switch expression.\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Switch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: The value to be tested against each case.\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: The result of the switch if <code>switchValue</code> does not match any of the cases.\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: The equality comparison method to use.\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: The set of cases for this switch expression.\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Switch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> that represents a `switch` statement that has a default case.\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The result type of the switch.\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: The value to be tested against each case.\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: The result of the switch if <code>switchValue</code> does not match any of the cases.\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: The equality comparison method to use.\n    - id: cases\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n      description: The set of cases for this switch expression.\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: The created <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Switch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SwitchCase(Expression, Expression[])\n  nameWithType: Expression.SwitchCase(Expression, Expression[])\n  fullName: Expression.SwitchCase(Expression, Expression[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchCase\"></xref> for use in a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression[] testValues);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the case.\n    - id: testValues\n      type: System.Linq.Expressions.Expression[]\n      description: The test values of the case.\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: The created <xref href=\"System.Linq.Expressions.SwitchCase\"></xref>.\n  overload: System.Linq.Expressions.Expression.SwitchCase*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SwitchCase(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.SwitchCase(Expression, IEnumerable<Expression>)\n  fullName: Expression.SwitchCase(Expression, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.SwitchCase\"></xref> object to be used in a <xref href=\"System.Linq.Expressions.SwitchExpression\"></xref> object.\n  remarks: \"All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \\n  \\n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.\"\n  example:\n  - \"The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]\"\n  syntax:\n    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the case.\n    - id: testValues\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The test values of the case.\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: The created <xref href=\"System.Linq.Expressions.SwitchCase\"></xref>.\n  overload: System.Linq.Expressions.Expression.SwitchCase*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String, Guid, Guid, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid, Guid)\n  fullName: Expression.SymbolDocument(String, Guid, Guid, Guid)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.\n    - id: language\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to.\n    - id: languageVendor\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> equal to.\n    - id: documentType\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"></xref> equal to.\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\"></xref> properties set to the specified value.\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  id: SymbolDocument(System.String,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String, Guid, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid)\n  fullName: Expression.SymbolDocument(String, Guid, Guid)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.\n    - id: language\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to.\n    - id: languageVendor\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> equal to.\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\"></xref> properties set to the specified value.\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  id: SymbolDocument(System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String)\n  nameWithType: Expression.SymbolDocument(String)\n  fullName: Expression.SymbolDocument(String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  id: SymbolDocument(System.String,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid)\n  fullName: Expression.SymbolDocument(String, Guid)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates an instance of <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> equal to.\n    - id: language\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> to set the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> equal to.\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: A <xref href=\"System.Linq.Expressions.SymbolDocumentInfo\"></xref> that has the <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.FileName\"></xref> and <xref href=\"System.Linq.Expressions.SymbolDocumentInfo.Language\"></xref> properties set to the specified value.\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  id: Throw(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Throw(Expression)\n  nameWithType: Expression.Throw(Expression)\n  fullName: Expression.Throw(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a throwing of an exception.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);\n    parameters:\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the exception.\n  overload: System.Linq.Expressions.Expression.Throw*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  id: Throw(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Throw(Expression, Type)\n  nameWithType: Expression.Throw(Expression, Type)\n  fullName: Expression.Throw(Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a throwing of an exception with a given type.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n    - id: type\n      type: System.Type\n      description: The new <xref href=\"System.Type\"></xref> of the expression.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents the exception.\n  overload: System.Linq.Expressions.Expression.Throw*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.ToString\n  commentId: M:System.Linq.Expressions.Expression.ToString\n  id: ToString\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Expression.ToString()\n  fullName: Expression.ToString()\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Returns a textual representation of the <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A textual representation of the <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n  overload: System.Linq.Expressions.Expression.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  commentId: M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryCatch(Expression, CatchBlock[])\n  nameWithType: Expression.TryCatch(Expression, CatchBlock[])\n  fullName: Expression.TryCatch(Expression, CatchBlock[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with any number of catch statements and neither a fault nor finally block.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]\"\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, System.Linq.Expressions.CatchBlock[] handlers);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the try block.\n    - id: handlers\n      type: System.Linq.Expressions.CatchBlock[]\n      description: The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> expressions representing the catch statements to be associated with the try block.\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.TryCatch*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  commentId: M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryCatchFinally(Expression, Expression, CatchBlock[])\n  nameWithType: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])\n  fullName: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with any number of catch statements and a finally block.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]\"\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.CatchBlock[] handlers);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the try block.\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: The body of the finally block.\n    - id: handlers\n      type: System.Linq.Expressions.CatchBlock[]\n      description: The array of zero or more <xref href=\"System.Linq.Expressions.CatchBlock\"></xref> expressions representing the catch statements to be associated with the try block.\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.TryCatchFinally*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryFault(Expression, Expression)\n  nameWithType: Expression.TryFault(Expression, Expression)\n  fullName: Expression.TryFault(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with a fault block and no catch statements.\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the try block.\n    - id: fault\n      type: System.Linq.Expressions.Expression\n      description: The body of the fault block.\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.TryFault*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryFinally(Expression, Expression)\n  nameWithType: Expression.TryFinally(Expression, Expression)\n  fullName: Expression.TryFinally(Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.TryExpression\"></xref> representing a try block with a finally block and no catch statements.\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: The body of the try block.\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: The body of the finally block.\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: The created <xref href=\"System.Linq.Expressions.TryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.TryFinally*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  commentId: M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  id: TryGetActionType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryGetActionType(Type[], Type)\n  nameWithType: Expression.TryGetActionType(Type[], Type)\n  fullName: Expression.TryGetActionType(Type[], Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic System.Action delegate type that has specific type arguments.\n  syntax:\n    content: public static bool TryGetActionType (Type[] typeArgs, out Type actionType);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: An array of Type objects that specify the type arguments for the System.Action delegate type.\n    - id: actionType\n      type: System.Type\n      description: When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: true if generic System.Action delegate type was created for specific <code>typeArgs</code>; false otherwise.\n  overload: System.Linq.Expressions.Expression.TryGetActionType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  commentId: M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  id: TryGetFuncType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryGetFuncType(Type[], Type)\n  nameWithType: Expression.TryGetFuncType(Type[], Type)\n  fullName: Expression.TryGetFuncType(Type[], Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.\n  syntax:\n    content: public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: An array of Type objects that specify the type arguments for the System.Func delegate type.\n    - id: funcType\n      type: System.Type\n      description: When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <code>typeArgs</code>.This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: true if generic System.Func delegate type was created for specific <code>typeArgs</code>; false otherwise.\n  overload: System.Linq.Expressions.Expression.TryGetFuncType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Type\n  commentId: P:System.Linq.Expressions.Expression.Type\n  id: Type\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Type\n  nameWithType: Expression.Type\n  fullName: Expression.Type\n  type: Property\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\"></xref> represents.\n  remarks: \"The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.  \\n  \\n [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]\\n [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]\"\n  syntax:\n    content: public virtual Type Type { get; }\n    return:\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> that represents the static type of the expression.\n  overload: System.Linq.Expressions.Expression.Type*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  id: TypeAs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TypeAs(Expression, Type)\n  nameWithType: Expression.TypeAs(Expression, Type)\n  fullName: Expression.TypeAs(Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an explicit reference or boxing conversion where `null` is supplied if the conversion fails.\n  remarks: The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`. The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]\\n [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeAs\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.TypeAs*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>type</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TypeEqual(Expression, Type)\n  nameWithType: Expression.TypeEqual(Expression, Type)\n  fullName: Expression.TypeEqual(Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> that compares run-time type identity.\n  syntax:\n    content: public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.Expression\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.TypeBinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property is equal to <xref href=\"System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\"></xref> and for which the <xref href=\"System.Linq.Expressions.Expression\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> properties are set to the specified values.\n  overload: System.Linq.Expressions.Expression.TypeEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  id: TypeIs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TypeIs(Expression, Type)\n  nameWithType: Expression.TypeIs(Expression, Type)\n  fullName: Expression.TypeIs(Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.  \\n  \\n [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]\\n [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]\"\n  syntax:\n    content: public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"></xref> property equal to.\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Linq.Expressions.Expression.Type\"></xref> to set the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.TypeBinaryExpression\n      description: A <xref href=\"System.Linq.Expressions.TypeBinaryExpression\"></xref> for which the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property is equal to <xref href=\"System.Linq.Expressions.ExpressionType.TypeIs\"></xref> and for which the <xref href=\"System.Linq.Expressions.TypeBinaryExpression.Expression\"></xref> and <xref href=\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\"></xref> properties are set to the specified values.\n  overload: System.Linq.Expressions.Expression.TypeIs*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> or <code>type</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: UnaryPlus(Expression, MethodInfo)\n  nameWithType: Expression.UnaryPlus(Expression, MethodInfo)\n  fullName: Expression.UnaryPlus(Expression, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a unary plus operation.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> and <xref href=\"System.Linq.Expressions.UnaryExpression.Method\"></xref> properties set to the specified values.\n  overload: System.Linq.Expressions.Expression.UnaryPlus*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>method</code> is not `null` and the method it represents returns `void`, is not `static` (`Shared` in Visual Basic), or does not take exactly one argument.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<code>method</code> is `null` and the unary plus operator is not defined for <code>expression</code>.Type.  \\n  \\n -or-  \\n  \\n <code>expression</code>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <code>method</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  id: UnaryPlus(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: UnaryPlus(Expression)\n  nameWithType: Expression.UnaryPlus(Expression)\n  fullName: Expression.UnaryPlus(Expression)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents a unary plus operation.\n  remarks: \"The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \\n  \\n#### Implementing Method  \\n The following rules determine the implementing method for the operation:  \\n  \\n-   If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \\n  \\n-   Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.  \\n  \\n#### Node Type and Lifted versus Non-Lifted  \\n If the implementing method is not `null`:  \\n  \\n-   If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \\n  \\n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \\n  \\n    -   `expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \\n  \\n    -   The return type of the implementing method is a non-nullable value type.  \\n  \\n If the implementing method is `null`, the type of the node is `expression`.Type. If `expression`.Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.\"\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to set the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property equal to.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: A <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that has the <xref href=\"System.Linq.Expressions.Expression.NodeType\"></xref> property equal to <xref href=\"System.Linq.Expressions.ExpressionType.UnaryPlus\"></xref> and the <xref href=\"System.Linq.Expressions.UnaryExpression.Operand\"></xref> property set to the specified value.\n  overload: System.Linq.Expressions.Expression.UnaryPlus*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>expression</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The unary plus operator is not defined for <code>expression</code>.Type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  id: Unbox(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Unbox(Expression, Type)\n  nameWithType: Expression.Unbox(Expression, Type)\n  fullName: Expression.Unbox(Expression, Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref> that represents an explicit unboxing.\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: An <xref href=\"System.Linq.Expressions.Expression\"></xref> to unbox.\n    - id: type\n      type: System.Type\n      description: The new <xref href=\"System.Type\"></xref> of the expression.\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: An instance of <xref href=\"System.Linq.Expressions.UnaryExpression\"></xref>.\n  overload: System.Linq.Expressions.Expression.Unbox*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  id: Variable(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Variable(Type, String)\n  nameWithType: Expression.Variable(Type, String)\n  fullName: Expression.Variable(Type, String)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the parameter or variable.\n    - id: name\n      type: System.String\n      description: The name of the parameter or variable. This name is used for debugging or printing purpose only.\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type.\n  overload: System.Linq.Expressions.Expression.Variable*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.Variable(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type)\n  id: Variable(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Variable(Type)\n  nameWithType: Expression.Variable(Type)\n  fullName: Expression.Variable(Type)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node that can be used to identify a parameter or a variable in an expression tree.\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type of the parameter or variable.\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: A <xref href=\"System.Linq.Expressions.ParameterExpression\"></xref> node with the specified name and type\n  overload: System.Linq.Expressions.Expression.Variable*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  commentId: M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: VisitChildren(ExpressionVisitor)\n  nameWithType: Expression.VisitChildren(ExpressionVisitor)\n  fullName: Expression.VisitChildren(ExpressionVisitor)\n  type: Method\n  assemblies:\n  - System.Linq.Expressions\n  - System.Core\n  - netstandard\n  namespace: System.Linq.Expressions\n  summary: Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.\n  remarks: Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.\n  syntax:\n    content: protected virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: An instance of <xref href=\"System.Func`2\"></xref>.\n    return:\n      type: System.Linq.Expressions.Expression\n      description: The expression being visited, or an expression which should replace it in the tree.\n  overload: System.Linq.Expressions.Expression.VisitChildren*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Reflection.AmbiguousMatchException\n  parent: System.Reflection\n  isExternal: false\n  name: AmbiguousMatchException\n  nameWithType: AmbiguousMatchException\n  fullName: System.Reflection.AmbiguousMatchException\n- uid: System.Linq.Expressions.Expression.#ctor\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Expression()\n  nameWithType: Expression.Expression()\n  fullName: Expression.Expression()\n- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Expression(ExpressionType, Type)\n  nameWithType: Expression.Expression(ExpressionType, Type)\n  fullName: Expression.Expression(ExpressionType, Type)\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Accept(ExpressionVisitor)\n  nameWithType: Expression.Accept(ExpressionVisitor)\n  fullName: Expression.Accept(ExpressionVisitor)\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.ExpressionVisitor\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionVisitor\n  nameWithType: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Add(Expression, Expression)\n  nameWithType: Expression.Add(Expression, Expression)\n  fullName: Expression.Add(Expression, Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Add(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Add(Expression, Expression, MethodInfo)\n  fullName: Expression.Add(Expression, Expression, MethodInfo)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression, Expression)\n  nameWithType: Expression.AddAssign(Expression, Expression)\n  fullName: Expression.AddAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.AddAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression, Expression)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression)\n  fullName: Expression.AddAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddChecked(Expression, Expression)\n  nameWithType: Expression.AddChecked(Expression, Expression)\n  fullName: Expression.AddChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.AddChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: And(Expression, Expression)\n  nameWithType: Expression.And(Expression, Expression)\n  fullName: Expression.And(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: And(Expression, Expression, MethodInfo)\n  nameWithType: Expression.And(Expression, Expression, MethodInfo)\n  fullName: Expression.And(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAlso(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AndAlso(Expression, Expression, MethodInfo)\n  fullName: Expression.AndAlso(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAlso(Expression, Expression)\n  nameWithType: Expression.AndAlso(Expression, Expression)\n  fullName: Expression.AndAlso(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression, Expression)\n  nameWithType: Expression.AndAssign(Expression, Expression)\n  fullName: Expression.AndAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.AndAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayAccess(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.ArrayAccess(Expression, IEnumerable<Expression>)\n  fullName: Expression.ArrayAccess(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  nameWithType: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayAccess(Expression, Expression[])\n  nameWithType: Expression.ArrayAccess(Expression, Expression[])\n  fullName: Expression.ArrayAccess(Expression, Expression[])\n- uid: System.Linq.Expressions.Expression[]\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression[]\n  nameWithType: Expression[]\n  fullName: System.Linq.Expressions.Expression[]\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression, Expression[])\n  nameWithType: Expression.ArrayIndex(Expression, Expression[])\n  fullName: Expression.ArrayIndex(Expression, Expression[])\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.ArrayIndex(Expression, IEnumerable<Expression>)\n  fullName: Expression.ArrayIndex(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression, Expression)\n  nameWithType: Expression.ArrayIndex(Expression, Expression)\n  fullName: Expression.ArrayIndex(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayLength(Expression)\n  nameWithType: Expression.ArrayLength(Expression)\n  fullName: Expression.ArrayLength(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Assign(Expression, Expression)\n  nameWithType: Expression.Assign(Expression, Expression)\n  fullName: Expression.Assign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Bind(MemberInfo, Expression)\n  nameWithType: Expression.Bind(MemberInfo, Expression)\n  fullName: Expression.Bind(MemberInfo, Expression)\n- uid: System.Linq.Expressions.MemberAssignment\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberAssignment\n  nameWithType: MemberAssignment\n  fullName: System.Linq.Expressions.MemberAssignment\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Bind(MethodInfo, Expression)\n  nameWithType: Expression.Bind(MethodInfo, Expression)\n  fullName: Expression.Bind(MethodInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Linq.Expressions.ParameterExpression\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.ParameterExpression\n    name: ParameterExpression\n    nameWithType: ParameterExpression\n    fullName: System.Linq.Expressions.ParameterExpression\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, Expression[])\n  nameWithType: Expression.Block(Type, Expression[])\n  fullName: Expression.Block(Type, Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression)\n  fullName: Expression.Block(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<ParameterExpression>, Expression[])\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, Expression[])\n  fullName: Expression.Block(IEnumerable<ParameterExpression>, Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression[])\n  nameWithType: Expression.Block(Expression[])\n  fullName: Expression.Block(Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<Expression>)\n  fullName: Expression.Block(IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type, IEnumerable<Expression>)\n  fullName: Expression.Block(Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget)\n  nameWithType: Expression.Break(LabelTarget)\n  fullName: Expression.Break(LabelTarget)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget, Expression)\n  nameWithType: Expression.Break(LabelTarget, Expression)\n  fullName: Expression.Break(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget, Type)\n  nameWithType: Expression.Break(LabelTarget, Type)\n  fullName: Expression.Break(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget, Expression, Type)\n  nameWithType: Expression.Break(LabelTarget, Expression, Type)\n  fullName: Expression.Break(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, Expression, Expression, Expression)\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)\n  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Type, String, Type[], Expression[])\n  nameWithType: Expression.Call(Type, String, Type[], Expression[])\n  fullName: Expression.Call(Type, String, Type[], Expression[])\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, String, Type[], Expression[])\n  nameWithType: Expression.Call(Expression, String, Type[], Expression[])\n  fullName: Expression.Call(Expression, String, Type[], Expression[])\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, Expression, Expression)\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression)\n  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, Expression[])\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression[])\n  fullName: Expression.Call(Expression, MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression[])\n  nameWithType: Expression.Call(MethodInfo, Expression[])\n  fullName: Expression.Call(MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression)\n  fullName: Expression.Call(MethodInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Call(MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.Call(MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo)\n  nameWithType: Expression.Call(Expression, MethodInfo)\n  fullName: Expression.Call(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.CanReduce\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: CanReduce\n  nameWithType: Expression.CanReduce\n  fullName: Expression.CanReduce\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(ParameterExpression, Expression)\n  nameWithType: Expression.Catch(ParameterExpression, Expression)\n  fullName: Expression.Catch(ParameterExpression, Expression)\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(Type, Expression)\n  nameWithType: Expression.Catch(Type, Expression)\n  fullName: Expression.Catch(Type, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(ParameterExpression, Expression, Expression)\n  nameWithType: Expression.Catch(ParameterExpression, Expression, Expression)\n  fullName: Expression.Catch(ParameterExpression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(Type, Expression, Expression)\n  nameWithType: Expression.Catch(Type, Expression, Expression)\n  fullName: Expression.Catch(Type, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ClearDebugInfo(SymbolDocumentInfo)\n  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)\n  fullName: Expression.ClearDebugInfo(SymbolDocumentInfo)\n- uid: System.Linq.Expressions.DebugInfoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DebugInfoExpression\n  nameWithType: DebugInfoExpression\n  fullName: System.Linq.Expressions.DebugInfoExpression\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Coalesce(Expression, Expression, LambdaExpression)\n  nameWithType: Expression.Coalesce(Expression, Expression, LambdaExpression)\n  fullName: Expression.Coalesce(Expression, Expression, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Coalesce(Expression, Expression)\n  nameWithType: Expression.Coalesce(Expression, Expression)\n  fullName: Expression.Coalesce(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Condition(Expression, Expression, Expression)\n  nameWithType: Expression.Condition(Expression, Expression, Expression)\n  fullName: Expression.Condition(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.ConditionalExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConditionalExpression\n  nameWithType: ConditionalExpression\n  fullName: System.Linq.Expressions.ConditionalExpression\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Condition(Expression, Expression, Expression, Type)\n  nameWithType: Expression.Condition(Expression, Expression, Expression, Type)\n  fullName: Expression.Condition(Expression, Expression, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Constant(System.Object)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Constant(Object)\n  nameWithType: Expression.Constant(Object)\n  fullName: Expression.Constant(Object)\n- uid: System.Linq.Expressions.ConstantExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConstantExpression\n  nameWithType: ConstantExpression\n  fullName: System.Linq.Expressions.ConstantExpression\n- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Constant(Object, Type)\n  nameWithType: Expression.Constant(Object, Type)\n  fullName: Expression.Constant(Object, Type)\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Continue(LabelTarget)\n  nameWithType: Expression.Continue(LabelTarget)\n  fullName: Expression.Continue(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Continue(LabelTarget, Type)\n  nameWithType: Expression.Continue(LabelTarget, Type)\n  fullName: Expression.Continue(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Convert(Expression, Type)\n  nameWithType: Expression.Convert(Expression, Type)\n  fullName: Expression.Convert(Expression, Type)\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Convert(Expression, Type, MethodInfo)\n  nameWithType: Expression.Convert(Expression, Type, MethodInfo)\n  fullName: Expression.Convert(Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ConvertChecked(Expression, Type)\n  nameWithType: Expression.ConvertChecked(Expression, Type)\n  fullName: Expression.ConvertChecked(Expression, Type)\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ConvertChecked(Expression, Type, MethodInfo)\n  nameWithType: Expression.ConvertChecked(Expression, Type, MethodInfo)\n  fullName: Expression.ConvertChecked(Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  nameWithType: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  fullName: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Decrement(Expression)\n  nameWithType: Expression.Decrement(Expression)\n  fullName: Expression.Decrement(Expression)\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Decrement(Expression, MethodInfo)\n  nameWithType: Expression.Decrement(Expression, MethodInfo)\n  fullName: Expression.Decrement(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Default(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Default(Type)\n  nameWithType: Expression.Default(Type)\n  fullName: Expression.Default(Type)\n- uid: System.Linq.Expressions.DefaultExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DefaultExpression\n  nameWithType: DefaultExpression\n  fullName: System.Linq.Expressions.DefaultExpression\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Divide(Expression, Expression)\n  nameWithType: Expression.Divide(Expression, Expression)\n  fullName: Expression.Divide(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Divide(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Divide(Expression, Expression, MethodInfo)\n  fullName: Expression.Divide(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression, Expression)\n  nameWithType: Expression.DivideAssign(Expression, Expression)\n  fullName: Expression.DivideAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression)\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  fullName: Expression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression[])\n  nameWithType: Expression.Dynamic(CallSiteBinder, Type, Expression[])\n  fullName: Expression.Dynamic(CallSiteBinder, Type, Expression[])\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ElementInit(MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  nameWithType: ElementInit\n  fullName: System.Linq.Expressions.ElementInit\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ElementInit(MethodInfo, Expression[])\n  nameWithType: Expression.ElementInit(MethodInfo, Expression[])\n  fullName: Expression.ElementInit(MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Empty\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Empty()\n  nameWithType: Expression.Empty()\n  fullName: Expression.Empty()\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Equal(Expression, Expression)\n  nameWithType: Expression.Equal(Expression, Expression)\n  fullName: Expression.Equal(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Equal(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.Equal(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.Equal(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOr(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ExclusiveOr(Expression, Expression, MethodInfo)\n  fullName: Expression.ExclusiveOr(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOr(Expression, Expression)\n  nameWithType: Expression.ExclusiveOr(Expression, Expression)\n  fullName: Expression.ExclusiveOr(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression, Expression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression, FieldInfo)\n  nameWithType: Expression.Field(Expression, FieldInfo)\n  fullName: Expression.Field(Expression, FieldInfo)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression, String)\n  nameWithType: Expression.Field(Expression, String)\n  fullName: Expression.Field(Expression, String)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression, Type, String)\n  nameWithType: Expression.Field(Expression, Type, String)\n  fullName: Expression.Field(Expression, Type, String)\n- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetActionType(Type[])\n  nameWithType: Expression.GetActionType(Type[])\n  fullName: Expression.GetActionType(Type[])\n- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetDelegateType(Type[])\n  nameWithType: Expression.GetDelegateType(Type[])\n  fullName: Expression.GetDelegateType(Type[])\n- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetFuncType(Type[])\n  nameWithType: Expression.GetFuncType(Type[])\n  fullName: Expression.GetFuncType(Type[])\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget, Expression, Type)\n  nameWithType: Expression.Goto(LabelTarget, Expression, Type)\n  fullName: Expression.Goto(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget, Type)\n  nameWithType: Expression.Goto(LabelTarget, Type)\n  fullName: Expression.Goto(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget)\n  nameWithType: Expression.Goto(LabelTarget)\n  fullName: Expression.Goto(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget, Expression)\n  nameWithType: Expression.Goto(LabelTarget, Expression)\n  fullName: Expression.Goto(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThan(Expression, Expression)\n  nameWithType: Expression.GreaterThan(Expression, Expression)\n  fullName: Expression.GreaterThan(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThanOrEqual(Expression, Expression)\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression)\n  fullName: Expression.GreaterThanOrEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThen(Expression, Expression)\n  nameWithType: Expression.IfThen(Expression, Expression)\n  fullName: Expression.IfThen(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThenElse(Expression, Expression, Expression)\n  nameWithType: Expression.IfThenElse(Expression, Expression, Expression)\n  fullName: Expression.IfThenElse(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Increment(Expression, MethodInfo)\n  nameWithType: Expression.Increment(Expression, MethodInfo)\n  fullName: Expression.Increment(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Increment(Expression)\n  nameWithType: Expression.Increment(Expression)\n  fullName: Expression.Increment(Expression)\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Invoke(Expression, Expression[])\n  nameWithType: Expression.Invoke(Expression, Expression[])\n  fullName: Expression.Invoke(Expression, Expression[])\n- uid: System.Linq.Expressions.InvocationExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: InvocationExpression\n  nameWithType: InvocationExpression\n  fullName: System.Linq.Expressions.InvocationExpression\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Invoke(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.Invoke(Expression, IEnumerable<Expression>)\n  fullName: Expression.Invoke(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsFalse(Expression)\n  nameWithType: Expression.IsFalse(Expression)\n  fullName: Expression.IsFalse(Expression)\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsFalse(Expression, MethodInfo)\n  nameWithType: Expression.IsFalse(Expression, MethodInfo)\n  fullName: Expression.IsFalse(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsTrue(Expression)\n  nameWithType: Expression.IsTrue(Expression)\n  fullName: Expression.IsTrue(Expression)\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsTrue(Expression, MethodInfo)\n  nameWithType: Expression.IsTrue(Expression, MethodInfo)\n  fullName: Expression.IsTrue(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Label\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label()\n  nameWithType: Expression.Label()\n  fullName: Expression.Label()\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(LabelTarget)\n  nameWithType: Expression.Label(LabelTarget)\n  fullName: Expression.Label(LabelTarget)\n- uid: System.Linq.Expressions.LabelExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelExpression\n  nameWithType: LabelExpression\n  fullName: System.Linq.Expressions.LabelExpression\n- uid: System.Linq.Expressions.Expression.Label(System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(String)\n  nameWithType: Expression.Label(String)\n  fullName: Expression.Label(String)\n- uid: System.Linq.Expressions.Expression.Label(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(Type)\n  nameWithType: Expression.Label(Type)\n  fullName: Expression.Label(Type)\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(LabelTarget, Expression)\n  nameWithType: Expression.Label(LabelTarget, Expression)\n  fullName: Expression.Label(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(Type, String)\n  nameWithType: Expression.Label(Type, String)\n  fullName: Expression.Label(Type, String)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda(Type, Expression, ParameterExpression[])\n  fullName: Expression.Lambda(Type, Expression, ParameterExpression[])\n- uid: System.Linq.Expressions.ParameterExpression[]\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression[]\n  nameWithType: ParameterExpression[]\n  fullName: System.Linq.Expressions.ParameterExpression[]\n  spec.csharp:\n  - uid: System.Linq.Expressions.ParameterExpression\n    name: ParameterExpression\n    nameWithType: ParameterExpression\n    fullName: System.Linq.Expressions.ParameterExpression\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda(Expression, Boolean, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression, ParameterExpression[])\n  fullName: Expression.Lambda(Expression, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])\n  fullName: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShift(Expression, Expression)\n  nameWithType: Expression.LeftShift(Expression, Expression)\n  fullName: Expression.LeftShift(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShift(Expression, Expression, MethodInfo)\n  nameWithType: Expression.LeftShift(Expression, Expression, MethodInfo)\n  fullName: Expression.LeftShift(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression, Expression)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression)\n  fullName: Expression.LeftShiftAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThan(Expression, Expression)\n  nameWithType: Expression.LessThan(Expression, Expression)\n  fullName: Expression.LessThan(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThan(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThanOrEqual(Expression, Expression)\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression)\n  fullName: Expression.LessThanOrEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MethodInfo, ElementInit[])\n  nameWithType: Expression.ListBind(MethodInfo, ElementInit[])\n  fullName: Expression.ListBind(MethodInfo, ElementInit[])\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  nameWithType: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n- uid: System.Linq.Expressions.ElementInit[]\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit[]\n  nameWithType: ElementInit[]\n  fullName: System.Linq.Expressions.ElementInit[]\n  spec.csharp:\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    nameWithType: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MethodInfo, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)\n  fullName: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ElementInit>\n  nameWithType: IEnumerable<ElementInit>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    nameWithType: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MemberInfo, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)\n  fullName: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MemberInfo, ElementInit[])\n  nameWithType: Expression.ListBind(MemberInfo, ElementInit[])\n  fullName: Expression.ListBind(MemberInfo, ElementInit[])\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)\n  fullName: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  nameWithType: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<Expression>)\n  fullName: Expression.ListInit(NewExpression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, ElementInit[])\n  nameWithType: Expression.ListInit(NewExpression, ElementInit[])\n  fullName: Expression.ListInit(NewExpression, ElementInit[])\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, Expression[])\n  nameWithType: Expression.ListInit(NewExpression, Expression[])\n  fullName: Expression.ListInit(NewExpression, Expression[])\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, MethodInfo, Expression[])\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, Expression[])\n  fullName: Expression.ListInit(NewExpression, MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression)\n  nameWithType: Expression.Loop(Expression)\n  fullName: Expression.Loop(Expression)\n- uid: System.Linq.Expressions.LoopExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LoopExpression\n  nameWithType: LoopExpression\n  fullName: System.Linq.Expressions.LoopExpression\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression, LabelTarget)\n  nameWithType: Expression.Loop(Expression, LabelTarget)\n  fullName: Expression.Loop(Expression, LabelTarget)\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression, LabelTarget, LabelTarget)\n  nameWithType: Expression.Loop(Expression, LabelTarget, LabelTarget)\n  fullName: Expression.Loop(Expression, LabelTarget, LabelTarget)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType, Expression, Expression)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  nameWithType: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  fullName: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression)\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression[])\n  nameWithType: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])\n  fullName: Expression.MakeDynamic(Type, CallSiteBinder, Expression[])\n- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  nameWithType: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  fullName: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.GotoExpressionKind\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpressionKind\n  nameWithType: GotoExpressionKind\n  fullName: System.Linq.Expressions.GotoExpressionKind\n- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeMemberAccess(Expression, MemberInfo)\n  nameWithType: Expression.MakeMemberAccess(Expression, MemberInfo)\n  fullName: Expression.MakeMemberAccess(Expression, MemberInfo)\n- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  nameWithType: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  fullName: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  nameWithType: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<CatchBlock>\n  nameWithType: IEnumerable<CatchBlock>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.CatchBlock\n    name: CatchBlock\n    nameWithType: CatchBlock\n    fullName: System.Linq.Expressions.CatchBlock\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeUnary(ExpressionType, Expression, Type)\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type)\n  fullName: Expression.MakeUnary(ExpressionType, Expression, Type)\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  fullName: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MethodInfo, MemberBinding[])\n  nameWithType: Expression.MemberBind(MethodInfo, MemberBinding[])\n  fullName: Expression.MemberBind(MethodInfo, MemberBinding[])\n- uid: System.Linq.Expressions.MemberMemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberMemberBinding\n  nameWithType: MemberMemberBinding\n  fullName: System.Linq.Expressions.MemberMemberBinding\n- uid: System.Linq.Expressions.MemberBinding\n  name: MemberBinding\n  nameWithType: MemberBinding\n  fullName: System.Linq.Expressions.MemberBinding\n- uid: System.Linq.Expressions.MemberBinding[]\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberBinding[]\n  nameWithType: MemberBinding[]\n  fullName: System.Linq.Expressions.MemberBinding[]\n  spec.csharp:\n  - uid: System.Linq.Expressions.MemberBinding\n    name: MemberBinding\n    nameWithType: MemberBinding\n    fullName: System.Linq.Expressions.MemberBinding\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<MemberBinding>\n  nameWithType: IEnumerable<MemberBinding>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.MemberBinding\n    name: MemberBinding\n    nameWithType: MemberBinding\n    fullName: System.Linq.Expressions.MemberBinding\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MemberInfo, MemberBinding[])\n  nameWithType: Expression.MemberBind(MemberInfo, MemberBinding[])\n  fullName: Expression.MemberBind(MemberInfo, MemberBinding[])\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.MemberInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberInitExpression\n  nameWithType: MemberInitExpression\n  fullName: System.Linq.Expressions.MemberInitExpression\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberInit(NewExpression, MemberBinding[])\n  nameWithType: Expression.MemberInit(NewExpression, MemberBinding[])\n  fullName: Expression.MemberInit(NewExpression, MemberBinding[])\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Modulo(Expression, Expression)\n  nameWithType: Expression.Modulo(Expression, Expression)\n  fullName: Expression.Modulo(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Modulo(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Modulo(Expression, Expression, MethodInfo)\n  fullName: Expression.Modulo(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression, Expression)\n  nameWithType: Expression.ModuloAssign(Expression, Expression)\n  fullName: Expression.ModuloAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Multiply(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Multiply(Expression, Expression, MethodInfo)\n  fullName: Expression.Multiply(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Multiply(Expression, Expression)\n  nameWithType: Expression.Multiply(Expression, Expression)\n  fullName: Expression.Multiply(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression, Expression)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression)\n  fullName: Expression.MultiplyAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression, Expression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyChecked(Expression, Expression)\n  nameWithType: Expression.MultiplyChecked(Expression, Expression)\n  fullName: Expression.MultiplyChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Negate(Expression, MethodInfo)\n  nameWithType: Expression.Negate(Expression, MethodInfo)\n  fullName: Expression.Negate(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Negate(Expression)\n  nameWithType: Expression.Negate(Expression)\n  fullName: Expression.Negate(Expression)\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NegateChecked(Expression)\n  nameWithType: Expression.NegateChecked(Expression)\n  fullName: Expression.NegateChecked(Expression)\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NegateChecked(Expression, MethodInfo)\n  nameWithType: Expression.NegateChecked(Expression, MethodInfo)\n  fullName: Expression.NegateChecked(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo)\n  nameWithType: Expression.New(ConstructorInfo)\n  fullName: Expression.New(ConstructorInfo)\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Linq.Expressions.Expression.New(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(Type)\n  nameWithType: Expression.New(Type)\n  fullName: Expression.New(Type)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, IEnumerable<Expression>)\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>)\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, Expression[])\n  nameWithType: Expression.New(ConstructorInfo, Expression[])\n  fullName: Expression.New(ConstructorInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<MemberInfo>\n  nameWithType: IEnumerable<MemberInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n- uid: System.Reflection.MemberInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo[]\n  nameWithType: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayBounds(Type, Expression[])\n  nameWithType: Expression.NewArrayBounds(Type, Expression[])\n  fullName: Expression.NewArrayBounds(Type, Expression[])\n- uid: System.Linq.Expressions.NewArrayExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewArrayExpression\n  nameWithType: NewArrayExpression\n  fullName: System.Linq.Expressions.NewArrayExpression\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayBounds(Type, IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayBounds(Type, IEnumerable<Expression>)\n  fullName: Expression.NewArrayBounds(Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayInit(Type, IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayInit(Type, IEnumerable<Expression>)\n  fullName: Expression.NewArrayInit(Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayInit(Type, Expression[])\n  nameWithType: Expression.NewArrayInit(Type, Expression[])\n  fullName: Expression.NewArrayInit(Type, Expression[])\n- uid: System.Linq.Expressions.Expression.NodeType\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NodeType\n  nameWithType: Expression.NodeType\n  fullName: Expression.NodeType\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Not(Expression)\n  nameWithType: Expression.Not(Expression)\n  fullName: Expression.Not(Expression)\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Not(Expression, MethodInfo)\n  nameWithType: Expression.Not(Expression, MethodInfo)\n  fullName: Expression.Not(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NotEqual(Expression, Expression)\n  nameWithType: Expression.NotEqual(Expression, Expression)\n  fullName: Expression.NotEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NotEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OnesComplement(Expression)\n  nameWithType: Expression.OnesComplement(Expression)\n  fullName: Expression.OnesComplement(Expression)\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OnesComplement(Expression, MethodInfo)\n  nameWithType: Expression.OnesComplement(Expression, MethodInfo)\n  fullName: Expression.OnesComplement(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Or(Expression, Expression)\n  nameWithType: Expression.Or(Expression, Expression)\n  fullName: Expression.Or(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Or(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Or(Expression, Expression, MethodInfo)\n  fullName: Expression.Or(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression, Expression)\n  nameWithType: Expression.OrAssign(Expression, Expression)\n  fullName: Expression.OrAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.OrAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrElse(Expression, Expression)\n  nameWithType: Expression.OrElse(Expression, Expression)\n  fullName: Expression.OrElse(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrElse(Expression, Expression, MethodInfo)\n  nameWithType: Expression.OrElse(Expression, Expression, MethodInfo)\n  fullName: Expression.OrElse(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Parameter(Type, String)\n  nameWithType: Expression.Parameter(Type, String)\n  fullName: Expression.Parameter(Type, String)\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Parameter(Type)\n  nameWithType: Expression.Parameter(Type)\n  fullName: Expression.Parameter(Type)\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostDecrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PostDecrementAssign(Expression, MethodInfo)\n  fullName: Expression.PostDecrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostDecrementAssign(Expression)\n  nameWithType: Expression.PostDecrementAssign(Expression)\n  fullName: Expression.PostDecrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostIncrementAssign(Expression)\n  nameWithType: Expression.PostIncrementAssign(Expression)\n  fullName: Expression.PostIncrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostIncrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PostIncrementAssign(Expression, MethodInfo)\n  fullName: Expression.PostIncrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Power(Expression, Expression)\n  nameWithType: Expression.Power(Expression, Expression)\n  fullName: Expression.Power(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Power(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Power(Expression, Expression, MethodInfo)\n  fullName: Expression.Power(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression, Expression)\n  nameWithType: Expression.PowerAssign(Expression, Expression)\n  fullName: Expression.PowerAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreDecrementAssign(Expression)\n  nameWithType: Expression.PreDecrementAssign(Expression)\n  fullName: Expression.PreDecrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreDecrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PreDecrementAssign(Expression, MethodInfo)\n  fullName: Expression.PreDecrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreIncrementAssign(Expression)\n  nameWithType: Expression.PreIncrementAssign(Expression)\n  fullName: Expression.PreIncrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreIncrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PreIncrementAssign(Expression, MethodInfo)\n  fullName: Expression.PreIncrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, String, Expression[])\n  nameWithType: Expression.Property(Expression, String, Expression[])\n  fullName: Expression.Property(Expression, String, Expression[])\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, PropertyInfo, Expression[])\n  nameWithType: Expression.Property(Expression, PropertyInfo, Expression[])\n  fullName: Expression.Property(Expression, PropertyInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, Type, String)\n  nameWithType: Expression.Property(Expression, Type, String)\n  fullName: Expression.Property(Expression, Type, String)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, PropertyInfo)\n  nameWithType: Expression.Property(Expression, PropertyInfo)\n  fullName: Expression.Property(Expression, PropertyInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, MethodInfo)\n  nameWithType: Expression.Property(Expression, MethodInfo)\n  fullName: Expression.Property(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, String)\n  nameWithType: Expression.Property(Expression, String)\n  fullName: Expression.Property(Expression, String)\n- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PropertyOrField(Expression, String)\n  nameWithType: Expression.PropertyOrField(Expression, String)\n  fullName: Expression.PropertyOrField(Expression, String)\n- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Quote(Expression)\n  nameWithType: Expression.Quote(Expression)\n  fullName: Expression.Quote(Expression)\n- uid: System.Linq.Expressions.Expression.Reduce\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Reduce()\n  nameWithType: Expression.Reduce()\n  fullName: Expression.Reduce()\n- uid: System.Linq.Expressions.Expression.ReduceAndCheck\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceAndCheck()\n  nameWithType: Expression.ReduceAndCheck()\n  fullName: Expression.ReduceAndCheck()\n- uid: System.Linq.Expressions.Expression.ReduceExtensions\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceExtensions()\n  nameWithType: Expression.ReduceExtensions()\n  fullName: Expression.ReduceExtensions()\n- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceEqual(Expression, Expression)\n  nameWithType: Expression.ReferenceEqual(Expression, Expression)\n  fullName: Expression.ReferenceEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceNotEqual(Expression, Expression)\n  nameWithType: Expression.ReferenceNotEqual(Expression, Expression)\n  fullName: Expression.ReferenceNotEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Rethrow(Type)\n  nameWithType: Expression.Rethrow(Type)\n  fullName: Expression.Rethrow(Type)\n- uid: System.Linq.Expressions.Expression.Rethrow\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Rethrow()\n  nameWithType: Expression.Rethrow()\n  fullName: Expression.Rethrow()\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget)\n  nameWithType: Expression.Return(LabelTarget)\n  fullName: Expression.Return(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget, Expression)\n  nameWithType: Expression.Return(LabelTarget, Expression)\n  fullName: Expression.Return(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget, Type)\n  nameWithType: Expression.Return(LabelTarget, Type)\n  fullName: Expression.Return(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget, Expression, Type)\n  nameWithType: Expression.Return(LabelTarget, Expression, Type)\n  fullName: Expression.Return(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShift(Expression, Expression)\n  nameWithType: Expression.RightShift(Expression, Expression)\n  fullName: Expression.RightShift(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShift(Expression, Expression, MethodInfo)\n  nameWithType: Expression.RightShift(Expression, Expression, MethodInfo)\n  fullName: Expression.RightShift(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression, Expression)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression)\n  fullName: Expression.RightShiftAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RuntimeVariables(ParameterExpression[])\n  nameWithType: Expression.RuntimeVariables(ParameterExpression[])\n  fullName: Expression.RuntimeVariables(ParameterExpression[])\n- uid: System.Linq.Expressions.RuntimeVariablesExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: RuntimeVariablesExpression\n  nameWithType: RuntimeVariablesExpression\n  fullName: System.Linq.Expressions.RuntimeVariablesExpression\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RuntimeVariables(IEnumerable<ParameterExpression>)\n  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  fullName: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Subtract(Expression, Expression)\n  nameWithType: Expression.Subtract(Expression, Expression)\n  fullName: Expression.Subtract(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Subtract(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Subtract(Expression, Expression, MethodInfo)\n  fullName: Expression.Subtract(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression, Expression)\n  nameWithType: Expression.SubtractAssign(Expression, Expression)\n  fullName: Expression.SubtractAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression, Expression)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractChecked(Expression, Expression)\n  nameWithType: Expression.SubtractChecked(Expression, Expression)\n  fullName: Expression.SubtractChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  nameWithType: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n- uid: System.Linq.Expressions.SwitchCase\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase\n- uid: System.Linq.Expressions.SwitchCase[]\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase[]\n  nameWithType: SwitchCase[]\n  fullName: System.Linq.Expressions.SwitchCase[]\n  spec.csharp:\n  - uid: System.Linq.Expressions.SwitchCase\n    name: SwitchCase\n    nameWithType: SwitchCase\n    fullName: System.Linq.Expressions.SwitchCase\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, SwitchCase[])\n  fullName: Expression.Switch(Expression, SwitchCase[])\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, Expression, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, Expression, SwitchCase[])\n  fullName: Expression.Switch(Expression, Expression, SwitchCase[])\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<SwitchCase>\n  nameWithType: IEnumerable<SwitchCase>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.SwitchCase\n    name: SwitchCase\n    nameWithType: SwitchCase\n    fullName: System.Linq.Expressions.SwitchCase\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SwitchCase(Expression, Expression[])\n  nameWithType: Expression.SwitchCase(Expression, Expression[])\n  fullName: Expression.SwitchCase(Expression, Expression[])\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SwitchCase(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.SwitchCase(Expression, IEnumerable<Expression>)\n  fullName: Expression.SwitchCase(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String, Guid, Guid, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid, Guid)\n  fullName: Expression.SymbolDocument(String, Guid, Guid, Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String, Guid, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid)\n  fullName: Expression.SymbolDocument(String, Guid, Guid)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String)\n  nameWithType: Expression.SymbolDocument(String)\n  fullName: Expression.SymbolDocument(String)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid)\n  fullName: Expression.SymbolDocument(String, Guid)\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Throw(Expression)\n  nameWithType: Expression.Throw(Expression)\n  fullName: Expression.Throw(Expression)\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Throw(Expression, Type)\n  nameWithType: Expression.Throw(Expression, Type)\n  fullName: Expression.Throw(Expression, Type)\n- uid: System.Linq.Expressions.Expression.ToString\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ToString()\n  nameWithType: Expression.ToString()\n  fullName: Expression.ToString()\n- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatch(Expression, CatchBlock[])\n  nameWithType: Expression.TryCatch(Expression, CatchBlock[])\n  fullName: Expression.TryCatch(Expression, CatchBlock[])\n- uid: System.Linq.Expressions.CatchBlock[]\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock[]\n  nameWithType: CatchBlock[]\n  fullName: System.Linq.Expressions.CatchBlock[]\n  spec.csharp:\n  - uid: System.Linq.Expressions.CatchBlock\n    name: CatchBlock\n    nameWithType: CatchBlock\n    fullName: System.Linq.Expressions.CatchBlock\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatchFinally(Expression, Expression, CatchBlock[])\n  nameWithType: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])\n  fullName: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])\n- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFault(Expression, Expression)\n  nameWithType: Expression.TryFault(Expression, Expression)\n  fullName: Expression.TryFault(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFinally(Expression, Expression)\n  nameWithType: Expression.TryFinally(Expression, Expression)\n  fullName: Expression.TryFinally(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetActionType(Type[], Type)\n  nameWithType: Expression.TryGetActionType(Type[], Type)\n  fullName: Expression.TryGetActionType(Type[], Type)\n- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetFuncType(Type[], Type)\n  nameWithType: Expression.TryGetFuncType(Type[], Type)\n  fullName: Expression.TryGetFuncType(Type[], Type)\n- uid: System.Linq.Expressions.Expression.Type\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Type\n  nameWithType: Expression.Type\n  fullName: Expression.Type\n- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeAs(Expression, Type)\n  nameWithType: Expression.TypeAs(Expression, Type)\n  fullName: Expression.TypeAs(Expression, Type)\n- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeEqual(Expression, Type)\n  nameWithType: Expression.TypeEqual(Expression, Type)\n  fullName: Expression.TypeEqual(Expression, Type)\n- uid: System.Linq.Expressions.TypeBinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TypeBinaryExpression\n  nameWithType: TypeBinaryExpression\n  fullName: System.Linq.Expressions.TypeBinaryExpression\n- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeIs(Expression, Type)\n  nameWithType: Expression.TypeIs(Expression, Type)\n  fullName: Expression.TypeIs(Expression, Type)\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: UnaryPlus(Expression, MethodInfo)\n  nameWithType: Expression.UnaryPlus(Expression, MethodInfo)\n  fullName: Expression.UnaryPlus(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: UnaryPlus(Expression)\n  nameWithType: Expression.UnaryPlus(Expression)\n  fullName: Expression.UnaryPlus(Expression)\n- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Unbox(Expression, Type)\n  nameWithType: Expression.Unbox(Expression, Type)\n  fullName: Expression.Unbox(Expression, Type)\n- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Variable(Type, String)\n  nameWithType: Expression.Variable(Type, String)\n  fullName: Expression.Variable(Type, String)\n- uid: System.Linq.Expressions.Expression.Variable(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Variable(Type)\n  nameWithType: Expression.Variable(Type)\n  fullName: Expression.Variable(Type)\n- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: VisitChildren(ExpressionVisitor)\n  nameWithType: Expression.VisitChildren(ExpressionVisitor)\n  fullName: Expression.VisitChildren(ExpressionVisitor)\n- uid: System.Linq.Expressions.Expression.#ctor*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Expression\n  nameWithType: Expression.Expression\n  fullName: Expression.Expression\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Accept*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Accept\n  nameWithType: Expression.Accept\n  fullName: Expression.Accept\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Add*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Add\n  nameWithType: Expression.Add\n  fullName: Expression.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.AddAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign\n  nameWithType: Expression.AddAssign\n  fullName: Expression.AddAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.AddAssignChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked\n  nameWithType: Expression.AddAssignChecked\n  fullName: Expression.AddAssignChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.AddChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddChecked\n  nameWithType: Expression.AddChecked\n  fullName: Expression.AddChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.And*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: And\n  nameWithType: Expression.And\n  fullName: Expression.And\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.AndAlso*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAlso\n  nameWithType: Expression.AndAlso\n  fullName: Expression.AndAlso\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.AndAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign\n  nameWithType: Expression.AndAssign\n  fullName: Expression.AndAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ArrayAccess*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayAccess\n  nameWithType: Expression.ArrayAccess\n  fullName: Expression.ArrayAccess\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ArrayIndex*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex\n  nameWithType: Expression.ArrayIndex\n  fullName: Expression.ArrayIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ArrayLength*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayLength\n  nameWithType: Expression.ArrayLength\n  fullName: Expression.ArrayLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Assign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Assign\n  nameWithType: Expression.Assign\n  fullName: Expression.Assign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Bind*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Bind\n  nameWithType: Expression.Bind\n  fullName: Expression.Bind\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Block*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block\n  nameWithType: Expression.Block\n  fullName: Expression.Block\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Break*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break\n  nameWithType: Expression.Break\n  fullName: Expression.Break\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Call*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call\n  nameWithType: Expression.Call\n  fullName: Expression.Call\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.CanReduce*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: CanReduce\n  nameWithType: Expression.CanReduce\n  fullName: Expression.CanReduce\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Catch*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch\n  nameWithType: Expression.Catch\n  fullName: Expression.Catch\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ClearDebugInfo*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ClearDebugInfo\n  nameWithType: Expression.ClearDebugInfo\n  fullName: Expression.ClearDebugInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Coalesce*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Coalesce\n  nameWithType: Expression.Coalesce\n  fullName: Expression.Coalesce\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Condition*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Condition\n  nameWithType: Expression.Condition\n  fullName: Expression.Condition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Constant*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Constant\n  nameWithType: Expression.Constant\n  fullName: Expression.Constant\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Continue*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Continue\n  nameWithType: Expression.Continue\n  fullName: Expression.Continue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Convert*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Convert\n  nameWithType: Expression.Convert\n  fullName: Expression.Convert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ConvertChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ConvertChecked\n  nameWithType: Expression.ConvertChecked\n  fullName: Expression.ConvertChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.DebugInfo*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DebugInfo\n  nameWithType: Expression.DebugInfo\n  fullName: Expression.DebugInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Decrement*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Decrement\n  nameWithType: Expression.Decrement\n  fullName: Expression.Decrement\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Default*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Default\n  nameWithType: Expression.Default\n  fullName: Expression.Default\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Divide*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Divide\n  nameWithType: Expression.Divide\n  fullName: Expression.Divide\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.DivideAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign\n  nameWithType: Expression.DivideAssign\n  fullName: Expression.DivideAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Dynamic*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic\n  nameWithType: Expression.Dynamic\n  fullName: Expression.Dynamic\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ElementInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ElementInit\n  nameWithType: Expression.ElementInit\n  fullName: Expression.ElementInit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Empty*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Empty\n  nameWithType: Expression.Empty\n  fullName: Expression.Empty\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Equal*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Equal\n  nameWithType: Expression.Equal\n  fullName: Expression.Equal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ExclusiveOr*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOr\n  nameWithType: Expression.ExclusiveOr\n  fullName: Expression.ExclusiveOr\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign\n  nameWithType: Expression.ExclusiveOrAssign\n  fullName: Expression.ExclusiveOrAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Field*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field\n  nameWithType: Expression.Field\n  fullName: Expression.Field\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.GetActionType*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetActionType\n  nameWithType: Expression.GetActionType\n  fullName: Expression.GetActionType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.GetDelegateType*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetDelegateType\n  nameWithType: Expression.GetDelegateType\n  fullName: Expression.GetDelegateType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.GetFuncType*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetFuncType\n  nameWithType: Expression.GetFuncType\n  fullName: Expression.GetFuncType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Goto*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto\n  nameWithType: Expression.Goto\n  fullName: Expression.Goto\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.GreaterThan*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThan\n  nameWithType: Expression.GreaterThan\n  fullName: Expression.GreaterThan\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThanOrEqual\n  nameWithType: Expression.GreaterThanOrEqual\n  fullName: Expression.GreaterThanOrEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.IfThen*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThen\n  nameWithType: Expression.IfThen\n  fullName: Expression.IfThen\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.IfThenElse*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThenElse\n  nameWithType: Expression.IfThenElse\n  fullName: Expression.IfThenElse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Increment*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Increment\n  nameWithType: Expression.Increment\n  fullName: Expression.Increment\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Invoke*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Invoke\n  nameWithType: Expression.Invoke\n  fullName: Expression.Invoke\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.IsFalse*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsFalse\n  nameWithType: Expression.IsFalse\n  fullName: Expression.IsFalse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.IsTrue*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsTrue\n  nameWithType: Expression.IsTrue\n  fullName: Expression.IsTrue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Label*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label\n  nameWithType: Expression.Label\n  fullName: Expression.Label\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Lambda*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda\n  nameWithType: Expression.Lambda\n  fullName: Expression.Lambda\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Lambda``1*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>\n  nameWithType: Expression.Lambda<TDelegate>\n  fullName: Expression.Lambda<TDelegate>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.LeftShift*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShift\n  nameWithType: Expression.LeftShift\n  fullName: Expression.LeftShift\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign\n  nameWithType: Expression.LeftShiftAssign\n  fullName: Expression.LeftShiftAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.LessThan*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThan\n  nameWithType: Expression.LessThan\n  fullName: Expression.LessThan\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThanOrEqual\n  nameWithType: Expression.LessThanOrEqual\n  fullName: Expression.LessThanOrEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ListBind*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind\n  nameWithType: Expression.ListBind\n  fullName: Expression.ListBind\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ListInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit\n  nameWithType: Expression.ListInit\n  fullName: Expression.ListInit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Loop*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop\n  nameWithType: Expression.Loop\n  fullName: Expression.Loop\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeBinary*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary\n  nameWithType: Expression.MakeBinary\n  fullName: Expression.MakeBinary\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeCatchBlock*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeCatchBlock\n  nameWithType: Expression.MakeCatchBlock\n  fullName: Expression.MakeCatchBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeDynamic*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic\n  nameWithType: Expression.MakeDynamic\n  fullName: Expression.MakeDynamic\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeGoto*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeGoto\n  nameWithType: Expression.MakeGoto\n  fullName: Expression.MakeGoto\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeIndex*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeIndex\n  nameWithType: Expression.MakeIndex\n  fullName: Expression.MakeIndex\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeMemberAccess*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeMemberAccess\n  nameWithType: Expression.MakeMemberAccess\n  fullName: Expression.MakeMemberAccess\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeTry*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeTry\n  nameWithType: Expression.MakeTry\n  fullName: Expression.MakeTry\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MakeUnary*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeUnary\n  nameWithType: Expression.MakeUnary\n  fullName: Expression.MakeUnary\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MemberBind*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind\n  nameWithType: Expression.MemberBind\n  fullName: Expression.MemberBind\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MemberInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberInit\n  nameWithType: Expression.MemberInit\n  fullName: Expression.MemberInit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Modulo*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Modulo\n  nameWithType: Expression.Modulo\n  fullName: Expression.Modulo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ModuloAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign\n  nameWithType: Expression.ModuloAssign\n  fullName: Expression.ModuloAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Multiply*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Multiply\n  nameWithType: Expression.Multiply\n  fullName: Expression.Multiply\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MultiplyAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign\n  nameWithType: Expression.MultiplyAssign\n  fullName: Expression.MultiplyAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked\n  nameWithType: Expression.MultiplyAssignChecked\n  fullName: Expression.MultiplyAssignChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.MultiplyChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyChecked\n  nameWithType: Expression.MultiplyChecked\n  fullName: Expression.MultiplyChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Negate*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Negate\n  nameWithType: Expression.Negate\n  fullName: Expression.Negate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.NegateChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NegateChecked\n  nameWithType: Expression.NegateChecked\n  fullName: Expression.NegateChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.New*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New\n  nameWithType: Expression.New\n  fullName: Expression.New\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.NewArrayBounds*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayBounds\n  nameWithType: Expression.NewArrayBounds\n  fullName: Expression.NewArrayBounds\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.NewArrayInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayInit\n  nameWithType: Expression.NewArrayInit\n  fullName: Expression.NewArrayInit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.NodeType*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NodeType\n  nameWithType: Expression.NodeType\n  fullName: Expression.NodeType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Not*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Not\n  nameWithType: Expression.Not\n  fullName: Expression.Not\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.NotEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NotEqual\n  nameWithType: Expression.NotEqual\n  fullName: Expression.NotEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.OnesComplement*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OnesComplement\n  nameWithType: Expression.OnesComplement\n  fullName: Expression.OnesComplement\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Or*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Or\n  nameWithType: Expression.Or\n  fullName: Expression.Or\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.OrAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign\n  nameWithType: Expression.OrAssign\n  fullName: Expression.OrAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.OrElse*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrElse\n  nameWithType: Expression.OrElse\n  fullName: Expression.OrElse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Parameter*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Parameter\n  nameWithType: Expression.Parameter\n  fullName: Expression.Parameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostDecrementAssign\n  nameWithType: Expression.PostDecrementAssign\n  fullName: Expression.PostDecrementAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostIncrementAssign\n  nameWithType: Expression.PostIncrementAssign\n  fullName: Expression.PostIncrementAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Power*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Power\n  nameWithType: Expression.Power\n  fullName: Expression.Power\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.PowerAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign\n  nameWithType: Expression.PowerAssign\n  fullName: Expression.PowerAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreDecrementAssign\n  nameWithType: Expression.PreDecrementAssign\n  fullName: Expression.PreDecrementAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreIncrementAssign\n  nameWithType: Expression.PreIncrementAssign\n  fullName: Expression.PreIncrementAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Property*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property\n  nameWithType: Expression.Property\n  fullName: Expression.Property\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.PropertyOrField*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PropertyOrField\n  nameWithType: Expression.PropertyOrField\n  fullName: Expression.PropertyOrField\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Quote*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Quote\n  nameWithType: Expression.Quote\n  fullName: Expression.Quote\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Reduce*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Reduce\n  nameWithType: Expression.Reduce\n  fullName: Expression.Reduce\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ReduceAndCheck*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceAndCheck\n  nameWithType: Expression.ReduceAndCheck\n  fullName: Expression.ReduceAndCheck\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ReduceExtensions*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceExtensions\n  nameWithType: Expression.ReduceExtensions\n  fullName: Expression.ReduceExtensions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ReferenceEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceEqual\n  nameWithType: Expression.ReferenceEqual\n  fullName: Expression.ReferenceEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ReferenceNotEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceNotEqual\n  nameWithType: Expression.ReferenceNotEqual\n  fullName: Expression.ReferenceNotEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Rethrow*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Rethrow\n  nameWithType: Expression.Rethrow\n  fullName: Expression.Rethrow\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Return*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return\n  nameWithType: Expression.Return\n  fullName: Expression.Return\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.RightShift*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShift\n  nameWithType: Expression.RightShift\n  fullName: Expression.RightShift\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.RightShiftAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign\n  nameWithType: Expression.RightShiftAssign\n  fullName: Expression.RightShiftAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.RuntimeVariables*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RuntimeVariables\n  nameWithType: Expression.RuntimeVariables\n  fullName: Expression.RuntimeVariables\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Subtract*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Subtract\n  nameWithType: Expression.Subtract\n  fullName: Expression.Subtract\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.SubtractAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign\n  nameWithType: Expression.SubtractAssign\n  fullName: Expression.SubtractAssign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked\n  nameWithType: Expression.SubtractAssignChecked\n  fullName: Expression.SubtractAssignChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.SubtractChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractChecked\n  nameWithType: Expression.SubtractChecked\n  fullName: Expression.SubtractChecked\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Switch*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch\n  nameWithType: Expression.Switch\n  fullName: Expression.Switch\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.SwitchCase*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SwitchCase\n  nameWithType: Expression.SwitchCase\n  fullName: Expression.SwitchCase\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.SymbolDocument*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument\n  nameWithType: Expression.SymbolDocument\n  fullName: Expression.SymbolDocument\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Throw*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Throw\n  nameWithType: Expression.Throw\n  fullName: Expression.Throw\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.ToString*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ToString\n  nameWithType: Expression.ToString\n  fullName: Expression.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TryCatch*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatch\n  nameWithType: Expression.TryCatch\n  fullName: Expression.TryCatch\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TryCatchFinally*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatchFinally\n  nameWithType: Expression.TryCatchFinally\n  fullName: Expression.TryCatchFinally\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TryFault*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFault\n  nameWithType: Expression.TryFault\n  fullName: Expression.TryFault\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TryFinally*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFinally\n  nameWithType: Expression.TryFinally\n  fullName: Expression.TryFinally\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TryGetActionType*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetActionType\n  nameWithType: Expression.TryGetActionType\n  fullName: Expression.TryGetActionType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TryGetFuncType*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetFuncType\n  nameWithType: Expression.TryGetFuncType\n  fullName: Expression.TryGetFuncType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Type*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Type\n  nameWithType: Expression.Type\n  fullName: Expression.Type\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TypeAs*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeAs\n  nameWithType: Expression.TypeAs\n  fullName: Expression.TypeAs\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TypeEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeEqual\n  nameWithType: Expression.TypeEqual\n  fullName: Expression.TypeEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.TypeIs*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeIs\n  nameWithType: Expression.TypeIs\n  fullName: Expression.TypeIs\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.UnaryPlus*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: UnaryPlus\n  nameWithType: Expression.UnaryPlus\n  fullName: Expression.UnaryPlus\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Unbox*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Unbox\n  nameWithType: Expression.Unbox\n  fullName: Expression.Unbox\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.Variable*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Variable\n  nameWithType: Expression.Variable\n  fullName: Expression.Variable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Linq.Expressions.Expression.VisitChildren*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: VisitChildren\n  nameWithType: Expression.VisitChildren\n  fullName: Expression.VisitChildren\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/Expression.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}