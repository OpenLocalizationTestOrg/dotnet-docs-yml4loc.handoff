<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">708ba695a03f7ee58ce350818ebe39b35beaa2f5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IO.DirectoryInfo.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8272cd434d56ad8979ba9aea64c0fed47d2de8c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dad557f0082dac21220d4a6081239c421f5e8a52</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>To view the .NET Framework source code for this type, see the <bpt id="p1">[</bpt>Reference Source<ept id="p1">](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id="p1">[</bpt>instructions<ept id="p1">](http://referencesource.microsoft.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> class for typical operations such as copying, moving, renaming, creating, and deleting directories.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are going to reuse an object several times, consider using the instance method of <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> instead of the corresponding static methods of the <ph id="ph2">&lt;xref:System.IO.Directory&gt;</ph> class, because a security check will not always be necessary.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>In members that accept a path as an input string, that path must be well-formed or an exception is raised.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the path is malformed and an exception is raised.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, a path or a combination of paths cannot be fully qualified twice.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, "c:\temp c:\windows" also raises an exception in most cases.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ensure that your paths are well-formed when using methods that accept a path string.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In members that accept a path, the path can refer to a file or just a directory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, all the following are acceptable paths:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>"c:<ph id="ph1">\\</ph>\MyDir<ph id="ph2">\\</ph>\MyFile.txt" in C#, or "c:\MyDir\MyFile.txt" in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>"c:<ph id="ph1">\\</ph>\MyDir" in C#, or "c:\MyDir" in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>"MyDir<ph id="ph1">\\</ph>\MySubdir" in C#, or "MyDir\MySubDir" in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>"<ph id="ph1">\\</ph><ph id="ph2">\\</ph><ph id="ph3">\\</ph>\MyServer<ph id="ph4">\\</ph>\MyShare" in C#, or "<ph id="ph5">\\</ph>\MyServer\MyShare" in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, full read/write access to new directories is granted to all users.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> class on the specified path.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor does not check if a directory exists.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is a placeholder for a string that is used to access the disk in subsequent operations.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A string specifying the path on which to create the <ph id="ph1">`DirectoryInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> contains invalid characters such as ", &lt;, &gt;, or |.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both are too long.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creates a directory.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directory already exists, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The directory cannot be created.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creates a directory using a <ph id="ph1">&lt;xref href="System.Security.AccessControl.DirectorySecurity"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directory already exists, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The access control to apply to the directory.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The directory specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> is read-only or is not empty.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <ph id="ph2">&lt;xref href="System.IO.Path.InvalidPathChars"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Creating a directory with only the colon (:) character was attempted.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Creates a subdirectory or subdirectories on the specified path.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The specified path can be relative to this instance of the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any and all directories specified in <ph id="ph1">`path`</ph> are created, unless some part of <ph id="ph2">`path`</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`path`</ph> parameter specifies a directory path, not a file path.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the subdirectory already exists, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Path names are limited to 248 characters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The specified path.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This cannot be a different disk volume or Universal Naming Convention (UNC) name.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The last directory specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> does not specify a valid file path or contains invalid <ph id="ph2">`DirectoryInfo`</ph> characters.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The subdirectory cannot be created.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A file or directory already has the name specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both are too long.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The caller does not have code access permission to create the directory.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The caller does not have code access permission to read the directory described by the returned <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This can occur when the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter describes an existing directory.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> contains a colon character (:) that is not part of a drive label ("C:<ph id="ph2">\\</ph>").</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Creates a subdirectory or subdirectories on the specified path with the specified security.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The specified path can be relative to this instance of the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any and all directories specified in <ph id="ph1">`path`</ph> are created, unless some part of <ph id="ph2">`path`</ph> is invalid.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`path`</ph> parameter specifies a directory path, not a file path.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the subdirectory already exists, this method does nothing.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Path names are limited to 248 characters.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The specified path.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This cannot be a different disk volume or Universal Naming Convention (UNC) name.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The security to apply.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The last directory specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> does not specify a valid file path or contains invalid <ph id="ph2">`DirectoryInfo`</ph> characters.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The specified path is invalid, such as being on an unmapped drive.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The subdirectory cannot be created.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A file or directory already has the name specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both exceed the system-defined maximum length.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The specified path, file name, or both are too long.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The caller does not have code access permission to create the directory.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The caller does not have code access permission to read the directory described by the returned <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This can occur when the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter describes an existing directory.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> contains a colon character (:) that is not part of a drive label ("C:<ph id="ph2">\\</ph>").</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Deletes this <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> if it is empty.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The directory contains a read-only file.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The directory described by this <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object does not exist or could not be found.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The directory is not empty.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The directory is the application's current working directory.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>There is an open handle on the directory, and the operating system is Windows XP or earlier.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This open handle can result from enumerating directories.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Enumerate Directories and Files<ept id="p1">](~/docs/standard/io/how-to-enumerate-directories-and-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Deletes this instance of a <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph>, specifying whether to delete subdirectories and files.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`DirectoryInfo`</ph> has no files or subdirectories, this method deletes the <ph id="ph2">`DirectoryInfo`</ph> even if <ph id="ph3">`recursive`</ph> is <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Attempting to delete a <ph id="ph1">`DirectoryInfo`</ph> that is not empty when <ph id="ph2">`recursive`</ph> is <ph id="ph3">`false`</ph> throws an <ph id="ph4">&lt;xref:System.IO.IOException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to delete this directory, its subdirectories, and all files; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The directory contains a read-only file.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The directory described by this <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object does not exist or could not be found.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The directory is read-only.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The directory contains one or more files or subdirectories and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">recursive</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The directory is the application's current working directory.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This open handle can result from enumerating directories and files.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Enumerate Directories and Files<ept id="p1">](~/docs/standard/io/how-to-enumerate-directories-and-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on  the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.IO.SearchOption.TopDirectoryOnly"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An enumerable collection of directories that matches <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">searchOption</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.SearchOption"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of directory information that matches a specified search pattern.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on  the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>An enumerable collection of directories that matches <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of directory information in the current directory.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateDirectories%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on  the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>An enumerable collection of directories in the current directory.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of file information in the current directory.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>An enumerable collection of the files in the current directory.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of file information that matches a search pattern.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of files.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>An enumerable collection of files that matches <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid, (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of files.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.IO.SearchOption.TopDirectoryOnly"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>An enumerable collection of files that matches <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">searchOption</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.SearchOption"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of file system information in the current directory.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>An enumerable collection of file system information in the current directory.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of file system information that matches a specified search pattern.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>An enumerable collection of file system information objects that matches <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned collection is not cached; each call to the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method on the collection will start a new enumeration.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.IO.SearchOption.TopDirectoryOnly"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>An enumerable collection of file system information objects that matches <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">searchOption</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.SearchOption"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the directory exists.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.Exists%2A&gt;</ph> property returns <ph id="ph2">`false`</ph> if any error occurs while trying to determine if the specified file exists.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the directory exists; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Gets the full path of the directory.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>A string containing the full path.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.AccessControl.DirectorySecurity"&gt;&lt;/xref&gt;</ph> object that encapsulates the access control list (ACL) entries for the directory described by the current <ph id="ph2">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method overload is equivalent to calling the <ph id="ph1">&lt;xref:System.IO.Directory.GetAccessControl%2A&gt;</ph> method overload and specifying the access control sections <ph id="ph2">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> &amp;#124; <ph id="ph3">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> (<ph id="ph5">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph><ph id="ph6">`Or`</ph><ph id="ph7">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph><ph id="ph8">`Or`</ph><ph id="ph9">&lt;xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName&gt;</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to retrieve the access control list (ACL) entries for the current file.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Security.AccessControl.DirectorySecurity"&gt;&lt;/xref&gt;</ph> object that encapsulates the access control rules for the directory.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The directory could not be found or modified.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The directory is read-only.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>This operation is not supported on the current platform.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>An I/O error occurred while opening the directory.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The current operating system is not Microsoft Windows 2000 or later.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Security.AccessControl.DirectorySecurity"&gt;&lt;/xref&gt;</ph> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <ph id="ph2">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to retrieve the access control list (ACL) entries for the current file.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Security.AccessControl.AccessControlSections"&gt;&lt;/xref&gt;</ph> values that specifies the type of access control list (ACL) information to receive.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Security.AccessControl.DirectorySecurity"&gt;&lt;/xref&gt;</ph> object that encapsulates the access control rules for the file described by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Exception type</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The directory could not be found or modified.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The current process does not have access to open the directory.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>An I/O error occurred while opening the directory.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The current operating system is not Microsoft Windows 2000 or later.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The directory is read-only.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>This operation is not supported on the current platform.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Returns the subdirectories of the current directory.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no subdirectories, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not recursive.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object is invalid, such as being on an unmapped drive.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Returns an array of directories in the current <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> matching the given search criteria.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`DirectoryInfo`</ph> matching <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id="ph2">&lt;xref href="System.IO.Path.GetInvalidPathChars"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">`DirectoryInfo`</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Returns an array of directories in the current <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> matching the given search criteria and using a value to determine whether to search subdirectories.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no subdirectories, or no subdirectories match the <ph id="ph1">`searchPattern`</ph> parameter, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`DirectoryInfo`</ph> matching <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">searchPattern</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id="ph2">&lt;xref href="System.IO.Path.GetInvalidPathChars"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.SearchOption"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The path encapsulated in the <ph id="ph1">`DirectoryInfo`</ph> object is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Returns a file list from the current directory.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no files in the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the returned file names is not guaranteed; use the <ph id="ph1">&lt;xref:System.Array.Sort%2A&gt;</ph> method if a specific sort order is required.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.IO.FileInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The path is invalid, such as being on an unmapped drive.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Returns a file list from the current directory matching the given search pattern.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no files in the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in the <ph id="ph1">`searchPattern`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard character</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exactly zero or one character.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the returned file names is not guaranteed; use the <ph id="ph1">&lt;xref:System.Array.Sort%2A&gt;</ph> method if a specific sort order is required.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcards are permitted.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`searchPattern`</ph> string "*.txt" searches for all file names having an extension of "txt".</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all file names beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no files, or no files that match the <ph id="ph1">`searchPattern`</ph> string in the <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the asterisk wildcard character in a <ph id="ph1">`searchPattern`</ph> (for example, "*.txt"), the matching behavior varies depending on the length of the specified file extension.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`searchPattern`</ph> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <ph id="ph2">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`searchPattern`</ph> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <ph id="ph2">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the question mark wildcard character, this method returns only files that match the specified file extension.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, given two files in a directory, "file1.txt" and "file1.txtother", a search pattern of "file?.txt" returns only the first file, while a search pattern of "file<ph id="ph1">\*</ph>.txt" returns both files.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to "*1<ph id="ph1">\*</ph>.txt" may return unexpected file names.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, using a search pattern of "<ph id="ph1">\*</ph>1<ph id="ph2">\*</ph>.txt" will return "longfilename.txt" because the equivalent 8.3 file name format would be "longf~1.txt".</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of files.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.IO.FileInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id="ph2">&lt;xref href="System.IO.Path.GetInvalidPathChars"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The path is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> methods differ as follows:</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph>, you can start enumerating the collection of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects before the whole collection is returned.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph>, you must wait for the whole array of <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> objects to be returned before you can access the array.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when you are working with many files and directories, <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.EnumerateFiles%2A&gt;</ph> can be more efficient.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no files in the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard character</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT">
          <source>Exactly zero or one character.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT">
          <source>The order of the returned file names is not guaranteed; use the <ph id="ph1">&lt;xref:System.Array.Sort%2A&gt;</ph> method if a specific sort order is required.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcards are permitted.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`searchPattern`</ph> string "*.txt" searches for all file names having an extension of "txt".</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all file names beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no files, or no files that match the <ph id="ph1">`searchPattern`</ph> string in the <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the asterisk wildcard character in a <ph id="ph1">`searchPattern`</ph> (for example, "*.txt"), the matching behavior varies depending on the length of the specified file extension.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`searchPattern`</ph> with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the <ph id="ph2">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`searchPattern`</ph> with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the <ph id="ph2">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using the question mark wildcard character, this method returns only files that match the specified file extension.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, given two files in a directory, "file1.txt" and "file1.txtother", a search pattern of "file?.txt" returns only the first file, while a search pattern of "file<ph id="ph1">\*</ph>.txt" returns both files.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the behavior of different lengths for the <ph id="ph1">`searchPattern`</ph> parameter:</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT">
          <source>"*.abc" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT">
          <source>"*.abcd" returns only files having an extension of.abcd.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT">
          <source>"*.abcde" returns only files having an extension of.abcde.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT">
          <source>"*.abcdef" returns only files having an extension of.abcdef.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to "*1<ph id="ph1">\*</ph>.txt" may return unexpected file names.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, using a search pattern of "<ph id="ph1">\*</ph>1<ph id="ph2">\*</ph>.txt" will return "longfilename.txt" because the equivalent 8.3 file name format would be "longf~1.txt".</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of files.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.IO.FileInfo"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id="ph2">&lt;xref href="System.IO.Path.GetInvalidPathChars"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.SearchOption"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>The path is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Retrieves an array of <ph id="ph1">&lt;xref href="System.IO.FileSystemInfo"&gt;&lt;/xref&gt;</ph> objects that represent the files and subdirectories matching the specified search criteria.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT">
          <source>For subdirectories, the <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects returned by this method can be cast to the derived class <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileAttributes&gt;</ph> value returned by the <ph id="ph2">&lt;xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName&gt;</ph> property to determine whether the <ph id="ph3">&lt;xref:System.IO.FileSystemInfo&gt;</ph> represents a file or a directory.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories and filesa.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.IO.SearchOption.TopDirectoryOnly"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>An array of file system entries that match the search criteria.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id="ph2">&lt;xref href="System.IO.Path.GetInvalidPathChars"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchOption&lt;/code&gt;</ph> is not a valid <ph id="ph2">&lt;xref href="System.IO.SearchOption"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>The specified path is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Returns an array of strongly typed <ph id="ph1">&lt;xref href="System.IO.FileSystemInfo"&gt;&lt;/xref&gt;</ph> entries representing all the files and subdirectories in a directory.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no files or directories in the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not recursive.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT">
          <source>For subdirectories, the <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects returned by this method can be cast to the derived class <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileAttributes&gt;</ph> value returned by the <ph id="ph2">&lt;xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName&gt;</ph> property to determine whether the <ph id="ph3">&lt;xref:System.IO.FileSystemInfo&gt;</ph> represents a file or a directory.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>An array of strongly typed <ph id="ph1">&lt;xref href="System.IO.FileSystemInfo"&gt;&lt;/xref&gt;</ph> entries.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>The path is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Retrieves an array of strongly typed <ph id="ph1">&lt;xref href="System.IO.FileSystemInfo"&gt;&lt;/xref&gt;</ph> objects representing the files and subdirectories that match the specified search criteria.</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`searchPattern`</ph> can be a combination of literal and wildcard characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following wildcard specifiers are permitted in <ph id="ph1">`searchPattern`</ph>.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wildcard specifier</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT">
          <source>* (asterisk)</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or more characters in that position.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT">
          <source>?</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT">
          <source>(question mark)</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT">
          <source>Zero or one character in that position.</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT">
          <source>Characters other than the wildcard are literal characters.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the  string "*t" searches for all names in  ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT">
          <source>".</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is not recursive.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT">
          <source>For subdirectories, the <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> objects returned by this method can be cast to the derived class <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.FileAttributes&gt;</ph> value returned by the <ph id="ph2">&lt;xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName&gt;</ph> property to determine whether the <ph id="ph3">&lt;xref:System.IO.FileSystemInfo&gt;</ph> represents a file or a directory.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT">
          <source>Wild cards are permitted.</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">`searchPattern`</ph> string "*t" searches for all directory names in <ph id="ph2">`path`</ph> ending with the letter "t".</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`searchPattern`</ph> string "s<ph id="ph2">\*</ph>" searches for all directory names in <ph id="ph3">`path`</ph> beginning with the letter "s".</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string ".." can only be used in <ph id="ph1">`searchPattern`</ph> if it is specified as a part of a valid directory name, such as in the directory name "a..b".</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT">
          <source>It cannot be used to move up the directory hierarchy.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no files or directories, or no files or directories that match the <ph id="ph1">`searchPattern`</ph> string in the <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, this method returns an empty array.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method pre-populates the values of the following <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> properties:</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>The search string to match against the names of directories and files.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The default pattern is "*", which returns all files.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>An array of strongly typed <ph id="ph1">`FileSystemInfo`</ph> objects matching the search criteria.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> contains one or more invalid characters defined by the <ph id="ph2">&lt;xref href="System.IO.Path.GetInvalidPathChars"&gt;&lt;/xref&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;searchPattern&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>The specified path is invalid (for example, it is on an unmapped drive).</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Moves a <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> instance and its contents to a new path.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method throws an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph> if, for example, you try to move c:\mydir to c:\public, and c:\public already exists.</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must specify "c:<ph id="ph1">\\</ph>\public<ph id="ph2">\\</ph>\mydir" as the <ph id="ph3">`destDirName`</ph> parameter, or specify a new directory name such as "c:<ph id="ph4">\\</ph>\newdir".</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method permits moving a directory to a read-only directory.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT">
          <source>The read/write attribute of neither directory is affected.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>The name and path to which to move this directory.</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>The destination cannot be another disk volume or a directory with the identical name.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>It can be an existing directory to which you want to add this directory as a subdirectory.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;destDirName&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;destDirName&lt;/code&gt;</ph> is an empty string (''").</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>An attempt was made to move a directory to a different volume.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;destDirName&lt;/code&gt;</ph> already exists.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>You are not authorized to access this path.</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>The directory being moved and the destination directory have the same name.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The destination directory cannot be found.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Gets the name of this <ph id="ph1">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.Name%2A&gt;</ph> property returns only the name of the directory, such as "Bin".</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the full path, such as "c:\public\Bin", use the <ph id="ph1">&lt;xref:System.IO.FileSystemInfo.FullName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.Name%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> requires no permission (beyond the read permission to the directory necessary to construct the <ph id="ph3">&lt;xref:System.IO.DirectoryInfo.Exists%2A&gt;</ph>) but can give out the directory name.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it is necessary to hand out a <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>The directory name.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Gets the parent directory of a specified subdirectory.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of common I/O tasks, see <bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](~/docs/standard/io/common-i-o-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>The parent directory, or <ph id="ph1">`null`</ph> if the path is null or if the file path denotes a root (such as "<ph id="ph2">\\</ph>", "C:", or * "<ph id="ph3">\\</ph>\server\share").</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Gets the root portion of the directory.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>An object that represents the root of the directory.</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Applies access control list (ACL) entries described by a <ph id="ph1">&lt;xref href="System.Security.AccessControl.DirectorySecurity"&gt;&lt;/xref&gt;</ph> object to the directory described by the current <ph id="ph2">&lt;xref href="System.IO.DirectoryInfo"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT">
          <source>An access control list (ACL) describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.SetAccessControl%2A&gt;</ph> method applies ACL entries to a file that represents the noninherited ACL list.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ACL specified for <ph id="ph1">`directorySecurity`</ph> replaces the existing ACL for the directory.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT">
          <source>To add permissions for a new user, use the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to obtain the existing ACL, and modify it.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.SetAccessControl%2A&gt;</ph> method persists only <ph id="ph2">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> objects that have been modified after object creation.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object has not been modified, it will not be persisted to a file.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it is not possible to retrieve a <ph id="ph1">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object from one file and reapply the same object to another file.</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT">
          <source>To copy ACL information from one file to another:</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetAccessControl%2A&gt;</ph> method to retrieve the <ph id="ph2">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object from the source file.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create a new <ph id="ph1">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object for the destination file.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A&gt;</ph> method of the source <ph id="ph3">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object to retrieve the ACL information.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A&gt;</ph> method to copy the information retrieved in step 3 to the destination <ph id="ph3">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the destination <ph id="ph1">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object to the destination file using the <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.SetAccessControl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>An object that describes an ACL entry to apply to the directory described by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">path</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">directorySecurity</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The file could not be found or modified.</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The current process does not have access to open the file.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>The current operating system is not Microsoft Windows 2000 or later.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Returns the original path that was passed by the user.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Returns the original path that was passed by the user.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>