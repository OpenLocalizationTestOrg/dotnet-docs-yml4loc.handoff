{"nodes":[{"content":"Provides data for the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event.","nodes":[{"pos":[0,77],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event."}],"pos":[455,533],"yaml":true},{"content":"Gets the date/time when the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event was raised.","nodes":[{"pos":[0,94],"content":"Gets the date/time when the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event was raised.","source":"Gets the date/time when the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event was raised."}],"pos":[2959,3054],"yaml":true},{"content":"The <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event is raised on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. This race condition cannot be prevented simply by comparing the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> property with the time when the <xref:System.Timers.Timer.Stop%2A> method is called, because the event-handling method might already be executing when the <xref:System.Timers.Timer.Stop%2A> method is called, or might begin executing between the moment when the <xref:System.Timers.Timer.Stop%2A> method is called and the moment when the stop time is saved. If it is critical to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <xref:System.Threading.Monitor> class or the <xref:System.Threading.Interlocked.CompareExchange%2A> method. Code that uses the <xref:System.Threading.Interlocked.CompareExchange%2A> method can be found in the example for the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,1436],"content":"The <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event is raised on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. This race condition cannot be prevented simply by comparing the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> property with the time when the <xref:System.Timers.Timer.Stop%2A> method is called, because the event-handling method might already be executing when the <xref:System.Timers.Timer.Stop%2A> method is called, or might begin executing between the moment when the <xref:System.Timers.Timer.Stop%2A> method is called and the moment when the stop time is saved. If it is critical to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <xref:System.Threading.Monitor> class or the <xref:System.Threading.Interlocked.CompareExchange%2A> method. Code that uses the <xref:System.Threading.Interlocked.CompareExchange%2A> method can be found in the example for the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event is raised on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. This race condition cannot be prevented simply by comparing the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> property with the time when the <xref:System.Timers.Timer.Stop%2A> method is called, because the event-handling method might already be executing when the <xref:System.Timers.Timer.Stop%2A> method is called, or might begin executing between the moment when the <xref:System.Timers.Timer.Stop%2A> method is called and the moment when the stop time is saved. If it is critical to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <xref:System.Threading.Monitor> class or the <xref:System.Threading.Interlocked.CompareExchange%2A> method. Code that uses the <xref:System.Threading.Interlocked.CompareExchange%2A> method can be found in the example for the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method.","pos":[0,1436],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=fullName&gt;</ph> event is raised on a <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, so the event-handling method might run on one thread at the same time that a call to the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Stop%2A?displayProperty=fullName&gt;</ph> method runs on another thread.","pos":[0,307],"source":"The <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event is raised on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method runs on another thread."},{"content":"This might result in the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called.","pos":[308,449],"source":" This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called."},{"content":"This race condition cannot be prevented simply by comparing the <ph id=\"ph1\">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A&gt;</ph> property with the time when the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called, because the event-handling method might already be executing when the <ph id=\"ph3\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called, or might begin executing between the moment when the <ph id=\"ph4\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called and the moment when the stop time is saved.","pos":[450,922],"source":" This race condition cannot be prevented simply by comparing the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> property with the time when the <xref:System.Timers.Timer.Stop%2A> method is called, because the event-handling method might already be executing when the <xref:System.Timers.Timer.Stop%2A> method is called, or might begin executing between the moment when the <xref:System.Timers.Timer.Stop%2A> method is called and the moment when the stop time is saved."},{"content":"If it is critical to prevent the thread that calls the <ph id=\"ph1\">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <ph id=\"ph2\">&lt;xref:System.Threading.Monitor&gt;</ph> class or the <ph id=\"ph3\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method.","pos":[923,1251],"source":" If it is critical to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <xref:System.Threading.Monitor> class or the <xref:System.Threading.Interlocked.CompareExchange%2A> method."},{"content":"Code that uses the <ph id=\"ph1\">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method can be found in the example for the <ph id=\"ph2\">&lt;xref:System.Timers.Timer.Stop%2A?displayProperty=fullName&gt;</ph> method.","pos":[1252,1436],"source":" Code that uses the <xref:System.Threading.Interlocked.CompareExchange%2A> method can be found in the example for the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method."}]}]}],"pos":[3065,4502],"yaml":true,"extradata":"MT"},{"content":"The time the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event was raised.","nodes":[{"pos":[0,79],"content":"The time the <ph id=\"ph1\">&lt;xref href=\"System.Timers.Timer.Elapsed\"&gt;&lt;/xref&gt;</ph> event was raised.","source":"The time the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event was raised."}],"pos":[5423,5503],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Timers.ElapsedEventArgs\n  commentId: T:System.Timers.ElapsedEventArgs\n  id: ElapsedEventArgs\n  children:\n  - System.Timers.ElapsedEventArgs.SignalTime\n  langs:\n  - csharp\n  name: ElapsedEventArgs\n  nameWithType: ElapsedEventArgs\n  fullName: System.Timers.ElapsedEventArgs\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Provides data for the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event.\n  remarks: ''\n  example:\n  - \"The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]\\n [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]\\n [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]\"\n  syntax:\n    content: 'public class ElapsedEventArgs : EventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/ElapsedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Timers.ElapsedEventArgs.SignalTime\n  commentId: P:System.Timers.ElapsedEventArgs.SignalTime\n  id: SignalTime\n  parent: System.Timers.ElapsedEventArgs\n  langs:\n  - csharp\n  name: SignalTime\n  nameWithType: ElapsedEventArgs.SignalTime\n  fullName: ElapsedEventArgs.SignalTime\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.Timers\n  summary: Gets the date/time when the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event was raised.\n  remarks: The <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event is raised on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method runs on another thread. This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called. This race condition cannot be prevented simply by comparing the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A> property with the time when the <xref:System.Timers.Timer.Stop%2A> method is called, because the event-handling method might already be executing when the <xref:System.Timers.Timer.Stop%2A> method is called, or might begin executing between the moment when the <xref:System.Timers.Timer.Stop%2A> method is called and the moment when the stop time is saved. If it is critical to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <xref:System.Threading.Monitor> class or the <xref:System.Threading.Interlocked.CompareExchange%2A> method. Code that uses the <xref:System.Threading.Interlocked.CompareExchange%2A> method can be found in the example for the <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> method.\n  example:\n  - \"The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \\n  \\n [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]\\n [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]\\n [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]\"\n  syntax:\n    content: public DateTime SignalTime { get; }\n    return:\n      type: System.DateTime\n      description: The time the <xref href=\"System.Timers.Timer.Elapsed\"></xref> event was raised.\n  overload: System.Timers.ElapsedEventArgs.SignalTime*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/ElapsedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Timers.ElapsedEventArgs.SignalTime\n  parent: System.Timers.ElapsedEventArgs\n  isExternal: false\n  name: SignalTime\n  nameWithType: ElapsedEventArgs.SignalTime\n  fullName: ElapsedEventArgs.SignalTime\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Timers.ElapsedEventArgs.SignalTime*\n  parent: System.Timers.ElapsedEventArgs\n  isExternal: false\n  name: SignalTime\n  nameWithType: ElapsedEventArgs.SignalTime\n  fullName: ElapsedEventArgs.SignalTime\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Timers/ElapsedEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}