{"nodes":[{"content":"Provides a way to synchronously or asynchronously execute a delegate.","nodes":[{"pos":[0,69],"content":"Provides a way to synchronously or asynchronously execute a delegate.","nodes":[{"content":"Provides a way to synchronously or asynchronously execute a delegate.","pos":[0,69]}]}],"pos":[765,835],"yaml":true},{"content":"The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.  \n  \n The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:  \n  \n1.  Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.  \n  \n2.  Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.  \n  \n> [!NOTE]\n>  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).","nodes":[{"pos":[0,452],"content":"The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.","nodes":[{"content":"The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.","pos":[0,452],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.","pos":[0,163],"source":"The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event."},{"content":"Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.","pos":[164,303]},{"content":"In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.","pos":[304,452]}]}]},{"pos":[459,555],"content":"The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> class provides two ways to invoke a process:","pos":[0,96],"source":"The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:"}]},{"pos":[565,950],"content":"Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.","nodes":[{"content":"Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.","pos":[0,385],"nodes":[{"content":"Asynchronously, by using the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> method.","pos":[0,99],"source":"Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> starts a process and then returns immediately.","pos":[100,209],"source":" <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to wait until the process started by <ph id=\"ph2\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> completes.","pos":[210,385],"source":" Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes."}]}]},{"pos":[960,1345],"content":"Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.","nodes":[{"content":"Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.","pos":[0,385],"nodes":[{"content":"Synchronously, by using the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method.","pos":[0,93],"source":"Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> starts a process, waits until it completes, and then returns.","pos":[94,213],"source":" <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when the control's main thread is different from the calling thread to marshal the call to the proper thread.","pos":[214,385],"source":" Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread."}]}]},{"pos":[1353,2172],"content":"[!NOTE]\n The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).","leadings":["","> "],"nodes":[{"content":" The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).","pos":[8,817],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> attribute applied to this class has the following <ph id=\"ph2\">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> property value: <ph id=\"ph3\">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id=\"ph4\">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.","pos":[1,359],"source":" The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).","pos":[360,567],"source":" The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser)."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> class or <bpt id=\"p1\">[</bpt>SQL Server Programming and Host Protection Attributes<ept id=\"p1\">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.","pos":[568,809],"source":" For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)."}]}]}],"pos":[846,3030],"yaml":true,"extradata":"MT"},{"content":"Asynchronously executes the delegate on the thread that created this object.","nodes":[{"pos":[0,76],"content":"Asynchronously executes the delegate on the thread that created this object.","nodes":[{"content":"Asynchronously executes the delegate on the thread that created this object.","pos":[0,76]}]}],"pos":[4518,4595],"yaml":true},{"content":"The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.  \n  \n The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.  \n  \n If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.","nodes":[{"pos":[0,178],"content":"The <ph id=\"ph1\">`method`</ph> delegate is executed on the thread that created the object, instead of the thread on which <ph id=\"ph2\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> was called.","source":"The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called."},{"pos":[185,456],"content":"The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.","nodes":[{"content":"The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.","pos":[0,271],"nodes":[{"content":"The delegate is called asynchronously, and this method returns immediately.","pos":[0,75]},{"content":"You can call this method from any thread.","pos":[76,117]},{"content":"If you need the return value from a process started with this method, call <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to get the value.","pos":[118,271],"source":" If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value."}]}]},{"pos":[463,592],"content":"If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.","nodes":[{"content":"If you need to call the delegate synchronously, use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method instead.","pos":[0,129],"source":"If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead."}]}],"pos":[4606,5205],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Delegate\"></xref> to a method that takes parameters of the same number and type that are contained in <code>args</code>.","nodes":[{"pos":[0,141],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Delegate\"&gt;&lt;/xref&gt;</ph> to a method that takes parameters of the same number and type that are contained in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Delegate\"></xref> to a method that takes parameters of the same number and type that are contained in <code>args</code>."}],"pos":[5374,5516],"yaml":true},{"content":"An array of type <xref href=\"System.Object\"></xref> to pass as arguments to the given method. This can be `null` if no arguments are needed.","nodes":[{"pos":[0,140],"content":"An array of type <xref href=\"System.Object\"></xref> to pass as arguments to the given method. This can be `null` if no arguments are needed.","nodes":[{"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to pass as arguments to the given method.","pos":[0,93],"source":"An array of type <xref href=\"System.Object\"></xref> to pass as arguments to the given method."},{"content":"This can be <ph id=\"ph1\">`null`</ph> if no arguments are needed.","pos":[94,140],"source":" This can be `null` if no arguments are needed."}]}],"pos":[5578,5719],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> interface that represents the asynchronous operation started by calling this method.","nodes":[{"pos":[0,128],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> interface that represents the asynchronous operation started by calling this method.","source":"An <xref href=\"System.IAsyncResult\"></xref> interface that represents the asynchronous operation started by calling this method."}],"pos":[5782,5911],"yaml":true},{"content":"Waits until the process started by calling <xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"></xref> completes, and then returns the value generated by the process.","nodes":[{"pos":[0,213],"content":"Waits until the process started by calling <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"&gt;&lt;/xref&gt;</ph> completes, and then returns the value generated by the process.","source":"Waits until the process started by calling <xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"></xref> completes, and then returns the value generated by the process."}],"pos":[7289,7503],"yaml":true},{"content":"This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.","nodes":[{"pos":[0,237],"content":"This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.","nodes":[{"content":"This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.","pos":[0,237],"nodes":[{"content":"This method gets the return value of the asynchronous operation represented by the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> passed by this interface.","pos":[0,135],"source":"This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface."},{"content":"If the asynchronous operation has not completed, this method will wait until the result is available.","pos":[136,237]}]}]}],"pos":[7514,7752],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> interface that represents the asynchronous operation started by calling <xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"></xref>.","nodes":[{"pos":[0,223],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> interface that represents the asynchronous operation started by calling <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.IAsyncResult\"></xref> interface that represents the asynchronous operation started by calling <xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"></xref>."}],"pos":[7906,8130],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> that represents the return value generated by the asynchronous operation.","nodes":[{"pos":[0,111],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that represents the return value generated by the asynchronous operation.","source":"An <xref href=\"System.Object\"></xref> that represents the return value generated by the asynchronous operation."}],"pos":[8187,8299],"yaml":true},{"content":"Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.","nodes":[{"pos":[0,120],"content":"Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.","nodes":[{"content":"Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.","pos":[0,120]}]}],"pos":[9711,9832],"yaml":true},{"content":"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.  \n  \n Use this method when calling a method from a different thread to marshal the call to the proper thread.","nodes":[{"pos":[0,239],"content":"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.","nodes":[{"content":"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.","pos":[0,239],"nodes":[{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, this method operates synchronously, that is, it waits until the process completes before returning.","pos":[0,170],"source":"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning."},{"content":"Exceptions raised during the call are propagated back to the caller.","pos":[171,239]}]}]},{"pos":[246,349],"content":"Use this method when calling a method from a different thread to marshal the call to the proper thread.","nodes":[{"content":"Use this method when calling a method from a different thread to marshal the call to the proper thread.","pos":[0,103]}]}],"pos":[9843,10197],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Delegate\"></xref> that contains a method to call, in the context of the thread for the control.","nodes":[{"pos":[0,116],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Delegate\"&gt;&lt;/xref&gt;</ph> that contains a method to call, in the context of the thread for the control.","source":"A <xref href=\"System.Delegate\"></xref> that contains a method to call, in the context of the thread for the control."}],"pos":[10355,10472],"yaml":true},{"content":"An array of type <xref href=\"System.Object\"></xref> that represents the arguments to pass to the given method. This can be `null` if no arguments are needed.","nodes":[{"pos":[0,157],"content":"An array of type <xref href=\"System.Object\"></xref> that represents the arguments to pass to the given method. This can be `null` if no arguments are needed.","nodes":[{"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that represents the arguments to pass to the given method.","pos":[0,110],"source":"An array of type <xref href=\"System.Object\"></xref> that represents the arguments to pass to the given method."},{"content":"This can be <ph id=\"ph1\">`null`</ph> if no arguments are needed.","pos":[111,157],"source":" This can be `null` if no arguments are needed."}]}],"pos":[10534,10692],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> that represents the return value from the delegate being invoked, or `null` if the delegate has no return value.","nodes":[{"pos":[0,150],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that represents the return value from the delegate being invoked, or <ph id=\"ph2\">`null`</ph> if the delegate has no return value.","source":"An <xref href=\"System.Object\"></xref> that represents the return value from the delegate being invoked, or `null` if the delegate has no return value."}],"pos":[10749,10900],"yaml":true},{"content":"Gets a value indicating whether the caller must call <xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"></xref> when calling an object that implements this interface.","nodes":[{"pos":[0,209],"content":"Gets a value indicating whether the caller must call <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"&gt;&lt;/xref&gt;</ph> when calling an object that implements this interface.","source":"Gets a value indicating whether the caller must call <xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"></xref> when calling an object that implements this interface."}],"pos":[12200,12410],"yaml":true},{"content":"This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.","nodes":[{"pos":[0,427],"content":"This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.","nodes":[{"content":"This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.","pos":[0,427],"nodes":[{"content":"This property determines whether the caller must call <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when making method calls to an object that implements this interface.","pos":[0,181],"source":"This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface."},{"content":"Such objects are bound to a specific thread and are not thread-safe.","pos":[182,250]},{"content":"If you are calling a method from a different thread, you must use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method to marshal the call to the proper thread.","pos":[251,427],"source":" If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread."}]}]}],"pos":[12421,12849],"yaml":true,"extradata":"MT"},{"content":"`true` if the caller must call <xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,153],"content":"<ph id=\"ph1\">`true`</ph> if the caller must call <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the caller must call <xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"></xref>; otherwise, `false`."}],"pos":[12966,13122],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.ISynchronizeInvoke\n  commentId: T:System.ComponentModel.ISynchronizeInvoke\n  id: ISynchronizeInvoke\n  children:\n  - System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\n  - System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)\n  - System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\n  - System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  langs:\n  - csharp\n  name: ISynchronizeInvoke\n  nameWithType: ISynchronizeInvoke\n  fullName: System.ComponentModel.ISynchronizeInvoke\n  type: Interface\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.Primitives\n  namespace: System.ComponentModel\n  summary: Provides a way to synchronously or asynchronously execute a delegate.\n  remarks: \"The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.  \\n  \\n The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:  \\n  \\n1.  Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.  \\n  \\n2.  Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).\"\n  syntax:\n    content: public interface ISynchronizeInvoke\n  derivedClasses:\n  - System.Windows.Forms.Control\n  implements: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\n  commentId: M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\n  id: BeginInvoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: BeginInvoke(Delegate, Object[])\n  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate, Object[])\n  fullName: ISynchronizeInvoke.BeginInvoke(Delegate, Object[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.Primitives\n  namespace: System.ComponentModel\n  summary: Asynchronously executes the delegate on the thread that created this object.\n  remarks: \"The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.  \\n  \\n The delegate is called asynchronously, and this method returns immediately. You can call this method from any thread. If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.  \\n  \\n If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.\"\n  syntax:\n    content: public IAsyncResult BeginInvoke (Delegate method, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A <xref href=\"System.Delegate\"></xref> to a method that takes parameters of the same number and type that are contained in <code>args</code>.\n    - id: args\n      type: System.Object[]\n      description: An array of type <xref href=\"System.Object\"></xref> to pass as arguments to the given method. This can be `null` if no arguments are needed.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> interface that represents the asynchronous operation started by calling this method.\n  overload: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)\n  commentId: M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)\n  id: EndInvoke(System.IAsyncResult)\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: EndInvoke(IAsyncResult)\n  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)\n  fullName: ISynchronizeInvoke.EndInvoke(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.Primitives\n  namespace: System.ComponentModel\n  summary: Waits until the process started by calling <xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"></xref> completes, and then returns the value generated by the process.\n  remarks: This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface. If the asynchronous operation has not completed, this method will wait until the result is available.\n  syntax:\n    content: public object EndInvoke (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> interface that represents the asynchronous operation started by calling <xref href=\"System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\"></xref>.\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that represents the return value generated by the asynchronous operation.\n  overload: System.ComponentModel.ISynchronizeInvoke.EndInvoke*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\n  commentId: M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\n  id: Invoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: Invoke(Delegate, Object[])\n  nameWithType: ISynchronizeInvoke.Invoke(Delegate, Object[])\n  fullName: ISynchronizeInvoke.Invoke(Delegate, Object[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.Primitives\n  namespace: System.ComponentModel\n  summary: Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.\n  remarks: \"Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning. Exceptions raised during the call are propagated back to the caller.  \\n  \\n Use this method when calling a method from a different thread to marshal the call to the proper thread.\"\n  syntax:\n    content: public object Invoke (Delegate method, object[] args);\n    parameters:\n    - id: method\n      type: System.Delegate\n      description: A <xref href=\"System.Delegate\"></xref> that contains a method to call, in the context of the thread for the control.\n    - id: args\n      type: System.Object[]\n      description: An array of type <xref href=\"System.Object\"></xref> that represents the arguments to pass to the given method. This can be `null` if no arguments are needed.\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that represents the return value from the delegate being invoked, or `null` if the delegate has no return value.\n  overload: System.ComponentModel.ISynchronizeInvoke.Invoke*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  commentId: P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  id: InvokeRequired\n  parent: System.ComponentModel.ISynchronizeInvoke\n  langs:\n  - csharp\n  name: InvokeRequired\n  nameWithType: ISynchronizeInvoke.InvokeRequired\n  fullName: ISynchronizeInvoke.InvokeRequired\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.Primitives\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the caller must call <xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"></xref> when calling an object that implements this interface.\n  remarks: This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface. Such objects are bound to a specific thread and are not thread-safe. If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.\n  syntax:\n    content: public bool InvokeRequired { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the caller must call <xref href=\"System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\"></xref>; otherwise, `false`.'\n  overload: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: BeginInvoke(Delegate, Object[])\n  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate, Object[])\n  fullName: ISynchronizeInvoke.BeginInvoke(Delegate, Object[])\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: EndInvoke(IAsyncResult)\n  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)\n  fullName: ISynchronizeInvoke.EndInvoke(IAsyncResult)\n- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: Invoke(Delegate, Object[])\n  nameWithType: ISynchronizeInvoke.Invoke(Delegate, Object[])\n  fullName: ISynchronizeInvoke.Invoke(Delegate, Object[])\n- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: InvokeRequired\n  nameWithType: ISynchronizeInvoke.InvokeRequired\n  fullName: ISynchronizeInvoke.InvokeRequired\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: BeginInvoke\n  nameWithType: ISynchronizeInvoke.BeginInvoke\n  fullName: ISynchronizeInvoke.BeginInvoke\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: EndInvoke\n  nameWithType: ISynchronizeInvoke.EndInvoke\n  fullName: ISynchronizeInvoke.EndInvoke\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n- uid: System.ComponentModel.ISynchronizeInvoke.Invoke*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: Invoke\n  nameWithType: ISynchronizeInvoke.Invoke\n  fullName: ISynchronizeInvoke.Invoke\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*\n  parent: System.ComponentModel.ISynchronizeInvoke\n  isExternal: false\n  name: InvokeRequired\n  nameWithType: ISynchronizeInvoke.InvokeRequired\n  fullName: ISynchronizeInvoke.InvokeRequired\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ISynchronizeInvoke.xml\n"}