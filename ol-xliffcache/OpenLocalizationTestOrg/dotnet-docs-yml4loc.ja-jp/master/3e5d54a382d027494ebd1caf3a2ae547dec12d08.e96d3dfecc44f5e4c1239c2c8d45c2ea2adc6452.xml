{"nodes":[{"content":"This class contains the LINQ to XML extension methods for XSD validation.","nodes":[{"pos":[0,73],"content":"This class contains the LINQ to XML extension methods for XSD validation.","nodes":[{"content":"This class contains the LINQ to XML extension methods for XSD validation.","pos":[0,73]}]}],"pos":[1558,1632],"yaml":true},{"content":"This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.  \n  \n When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset. PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>.","nodes":[{"pos":[0,106],"content":"This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.","nodes":[{"content":"This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.","pos":[0,106]}]},{"pos":[113,441],"content":"When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset. PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>.","nodes":[{"content":"When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset. PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>.","pos":[0,328],"nodes":[{"content":"When you validate an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>, you can also optionally populate the XML tree with the post-schema-validation infoset.","pos":[0,212],"source":"When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset."},{"content":"PSVI information is added as an annotation of type <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName&gt;</ph>.","pos":[213,328],"source":" PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>."}]}]}],"pos":[1643,2089],"yaml":true,"extradata":"MT"},{"content":"Gets the post-schema-validation infoset (PSVI) of a validated attribute.","nodes":[{"pos":[0,72],"content":"Gets the post-schema-validation infoset (PSVI) of a validated attribute.","nodes":[{"content":"Gets the post-schema-validation infoset (PSVI) of a validated attribute.","pos":[0,72]}]}],"pos":[6706,6779],"yaml":true},{"content":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute. For example, you can determine if the attribute came from a default attribute value in an XSD.  \n  \n You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>). You can use it to revalidate an attribute without validating an entire document.  \n  \n For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.","nodes":[{"pos":[0,237],"content":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute. For example, you can determine if the attribute came from a default attribute value in an XSD.","nodes":[{"content":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute. For example, you can determine if the attribute came from a default attribute value in an XSD.","pos":[0,237],"nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo&gt;</ph> returned by this method to determine certain characteristics of a validated attribute.","pos":[0,142],"source":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute."},{"content":"For example, you can determine if the attribute came from a default attribute value in an XSD.","pos":[143,237]}]}]},{"pos":[244,484],"content":"You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>). You can use it to revalidate an attribute without validating an entire document.","nodes":[{"content":"You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>). You can use it to revalidate an attribute without validating an entire document.","pos":[0,240],"nodes":[{"content":"You use the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A&gt;</ph> property to get a partial validation type (<ph id=\"ph2\">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph>).","pos":[0,159],"source":"You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>)."},{"content":"You can use it to revalidate an attribute without validating an entire document.","pos":[160,240]}]}]},{"pos":[491,576],"content":"For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.","nodes":[{"content":"For an example of this property, see <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph>.","pos":[0,85],"source":"For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>."}]}],"pos":[6790,7373],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that has been previously validated.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> that has been previously validated.","source":"An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that has been previously validated."}],"pos":[7590,7677],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.IXmlSchemaInfo\"></xref> that contains the post-schema-validation infoset for an <xref href=\"System.Xml.Linq.XAttribute\"></xref>.","nodes":[{"pos":[0,160],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.IXmlSchemaInfo\"&gt;&lt;/xref&gt;</ph> that contains the post-schema-validation infoset for an <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.Schema.IXmlSchemaInfo\"></xref> that contains the post-schema-validation infoset for an <xref href=\"System.Xml.Linq.XAttribute\"></xref>."}],"pos":[7753,7914],"yaml":true},{"content":"Gets the post-schema-validation infoset (PSVI) of a validated element.","nodes":[{"pos":[0,70],"content":"Gets the post-schema-validation infoset (PSVI) of a validated element.","nodes":[{"content":"Gets the post-schema-validation infoset (PSVI) of a validated element.","pos":[0,70]}]}],"pos":[9236,9307],"yaml":true},{"content":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element. For example, you can determine the dynamic schema type of the element.  \n  \n You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>). You can use it to revalidate a sub-tree with an element at its root without validating an entire document.  \n  \n For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.","nodes":[{"pos":[0,211],"content":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element. For example, you can determine the dynamic schema type of the element.","nodes":[{"content":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element. For example, you can determine the dynamic schema type of the element.","pos":[0,211],"nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo&gt;</ph> returned by this method to determine certain characteristics of a validated element.","pos":[0,140],"source":"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element."},{"content":"For example, you can determine the dynamic schema type of the element.","pos":[141,211]}]}]},{"pos":[218,480],"content":"You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>). You can use it to revalidate a sub-tree with an element at its root without validating an entire document.","nodes":[{"content":"You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>). You can use it to revalidate a sub-tree with an element at its root without validating an entire document.","pos":[0,262],"nodes":[{"content":"You use the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A&gt;</ph> property to get a partial validation type (<ph id=\"ph2\">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph>).","pos":[0,155],"source":"You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>)."},{"content":"You can use it to revalidate a sub-tree with an element at its root without validating an entire document.","pos":[156,262]}]}]},{"pos":[487,572],"content":"For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.","nodes":[{"content":"For an example of this property, see <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph>.","pos":[0,85],"source":"For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>."}]}],"pos":[9318,9897],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that has been previously validated.","nodes":[{"pos":[0,84],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> that has been previously validated.","source":"An <xref href=\"System.Xml.Linq.XElement\"></xref> that has been previously validated."}],"pos":[16552,16637],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.IXmlSchemaInfo\"></xref> that contains the post-schema-validation infoset (PSVI) for an <xref href=\"System.Xml.Linq.XElement\"></xref>.","nodes":[{"pos":[0,165],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.IXmlSchemaInfo\"&gt;&lt;/xref&gt;</ph> that contains the post-schema-validation infoset (PSVI) for an <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Xml.Schema.IXmlSchemaInfo\"></xref> that contains the post-schema-validation infoset (PSVI) for an <xref href=\"System.Xml.Linq.XElement\"></xref>."}],"pos":[16713,16879],"yaml":true},{"content":"This method validates that an <xref href=\"System.Xml.Linq.XDocument\"></xref> conforms to an XSD in an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.","nodes":[{"pos":[0,154],"content":"This method validates that an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> conforms to an XSD in an <ph id=\"ph2\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph>.","source":"This method validates that an <xref href=\"System.Xml.Linq.XDocument\"></xref> conforms to an XSD in an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>."}],"pos":[18507,18662],"yaml":true},{"content":"This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.","nodes":[{"pos":[0,152],"content":"This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.","nodes":[{"content":"This extension method validates that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> conforms to the schema content model in <ph id=\"ph2\">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph>.","pos":[0,152],"source":"This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>."}]}],"pos":[18673,18826],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> to validate.","nodes":[{"pos":[0,63],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to validate.","source":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> to validate."}],"pos":[22950,23014],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph> to validate against.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against."}],"pos":[23094,23170],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"pos":[0,189],"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.ValidationEventHandler\"&gt;&lt;/xref&gt;</ph> for an event that occurs when the reader encounters validation errors.","pos":[0,134],"source":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors."},{"content":"If <ph id=\"ph1\">`null`</ph>, throws an exception upon validation errors.","pos":[135,189],"source":" If `null`, throws an exception upon validation errors."}]}],"pos":[23275,23465],"yaml":true},{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"pos":[0,66],"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","pos":[0,66]}]}],"pos":[23668,23735],"yaml":true},{"content":"This method validates that an <xref href=\"System.Xml.Linq.XAttribute\"></xref> conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.","nodes":[{"pos":[0,216],"content":"This method validates that an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> conforms to a specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> and an <ph id=\"ph3\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph>.","source":"This method validates that an <xref href=\"System.Xml.Linq.XAttribute\"></xref> conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>."}],"pos":[25449,25666],"yaml":true},{"content":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.  \n  \n If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \n  \n To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \n  \n1.  Validate that a document conforms to a schema.  \n  \n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \n  \n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \n  \n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.","nodes":[{"pos":[0,336],"content":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.","nodes":[{"content":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.","pos":[0,336],"nodes":[{"content":"You can use this method to validate that an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> conforms to a schema.","pos":[0,99],"source":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema."},{"content":"You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.","pos":[100,230]},{"content":"You could validate the entire document, but it takes less processing time to validate just the attribute.","pos":[231,336]}]}]},{"pos":[343,496],"content":"If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors. Validation warnings will not raise an exception.","nodes":[{"content":"If you pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`validationEventHandler`</ph>, this method raises an exception upon validation errors.","pos":[0,104],"source":"If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors."},{"content":"Validation warnings will not raise an exception.","pos":[105,153]}]},{"pos":[503,666],"content":"To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","nodes":[{"content":"To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","pos":[0,163],"nodes":[{"content":"To validate an attribute, you use an instance of <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[0,90],"source":"To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>."},{"content":"You can obtain this instance in various ways.","pos":[91,136]},{"content":"An easy way is as follows:","pos":[137,163]}]}]},{"pos":[676,722],"content":"Validate that a document conforms to a schema.","nodes":[{"content":"Validate that a document conforms to a schema.","pos":[0,46]}]},{"pos":[732,858],"content":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.","nodes":[{"content":"Add the post-schema-validation infoset (PSVI) by calling the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph> extension method.","pos":[0,126],"source":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method."}]},{"pos":[868,1109],"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","nodes":[{"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","pos":[0,241],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph> extension method to retrieve an object that implements <ph id=\"ph2\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo&gt;</ph>.","pos":[0,157],"source":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>."},{"content":"From the retrieved object, you can get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[158,241],"source":" From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>."}]}]},{"pos":[1123,1277],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph>.","pos":[0,154],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>."}]},{"pos":[1291,1449],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph>.","pos":[0,158],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>."}]},{"pos":[1456,1580],"content":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.","nodes":[{"content":"After you have an instance of an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>, you can use this method to validate an attribute.","pos":[0,124],"source":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute."}]}],"pos":[25677,27276],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XAttribute\"></xref> to validate.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> to validate.","source":"The <xref href=\"System.Xml.Linq.XAttribute\"></xref> to validate."}],"pos":[32588,32653],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> that specifies the sub-tree to validate.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate."}],"pos":[32750,32849],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph> to validate against.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against."}],"pos":[32929,33005],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"pos":[0,189],"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.ValidationEventHandler\"&gt;&lt;/xref&gt;</ph> for an event that occurs when the reader encounters validation errors.","pos":[0,134],"source":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors."},{"content":"If <ph id=\"ph1\">`null`</ph>, throws an exception upon validation errors.","pos":[135,189],"source":" If `null`, throws an exception upon validation errors."}]}],"pos":[33110,33300],"yaml":true},{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"pos":[0,66],"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","pos":[0,66]}]}],"pos":[33503,33570],"yaml":true},{"content":"Validates that an <xref href=\"System.Xml.Linq.XDocument\"></xref> conforms to an XSD in an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).","nodes":[{"pos":[0,225],"content":"Validates that an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> conforms to an XSD in an <ph id=\"ph2\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).","source":"Validates that an <xref href=\"System.Xml.Linq.XDocument\"></xref> conforms to an XSD in an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI)."}],"pos":[35197,35423],"yaml":true},{"content":"This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI).  \n  \n There are two steps to populating the XML tree with the PSVI.  \n  \n1.  First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on an element or attribute in the tree.  \n  \n2.  Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.","nodes":[{"pos":[0,152],"content":"This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.","nodes":[{"content":"This extension method validates that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> conforms to the schema content model in <ph id=\"ph2\">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph>.","pos":[0,152],"source":"This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>."}]},{"pos":[159,271],"content":"If <ph id=\"ph1\">`addSchemaInfo`</ph> is <ph id=\"ph2\">`true`</ph>, this method populates the XML tree with the post-schema-validation infoset (PSVI).","source":"If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI)."},{"pos":[278,339],"content":"There are two steps to populating the XML tree with the PSVI.","nodes":[{"content":"There are two steps to populating the XML tree with the PSVI.","pos":[0,61]}]},{"pos":[349,624],"content":"First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on an element or attribute in the tree.","nodes":[{"content":"First, an annotation is added to all nodes in the tree to enable you to call <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName&gt;</ph> on an element or attribute in the tree.","pos":[0,275],"source":"First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on an element or attribute in the tree."}]},{"pos":[634,914],"content":"Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.","nodes":[{"content":"Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.","pos":[0,280],"nodes":[{"content":"Second, default elements and attributes defined in the XSD are added to the XML tree.","pos":[0,85]},{"content":"By calling one of the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.","pos":[86,280],"source":" By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute."}]}]}],"pos":[35434,36359],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> to validate.","nodes":[{"pos":[0,63],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XDocument\"&gt;&lt;/xref&gt;</ph> to validate.","source":"The <xref href=\"System.Xml.Linq.XDocument\"></xref> to validate."}],"pos":[48987,49051],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph> to validate against.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against."}],"pos":[49131,49207],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"pos":[0,189],"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.ValidationEventHandler\"&gt;&lt;/xref&gt;</ph> for an event that occurs when the reader encounters validation errors.","pos":[0,134],"source":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors."},{"content":"If <ph id=\"ph1\">`null`</ph>, throws an exception upon validation errors.","pos":[135,189],"source":" If `null`, throws an exception upon validation errors."}]}],"pos":[49312,49502],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI).","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> indicating whether to populate the post-schema-validation infoset (PSVI).","source":"A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI)."}],"pos":[49572,49684],"yaml":true},{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"pos":[0,66],"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","pos":[0,66]}]}],"pos":[49887,49954],"yaml":true},{"content":"This method validates that an <xref href=\"System.Xml.Linq.XElement\"></xref> sub-tree conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.","nodes":[{"pos":[0,223],"content":"This method validates that an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> sub-tree conforms to a specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> and an <ph id=\"ph3\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph>.","source":"This method validates that an <xref href=\"System.Xml.Linq.XElement\"></xref> sub-tree conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>."}],"pos":[51656,51880],"yaml":true},{"content":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.  \n  \n If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \n  \n To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \n  \n1.  Validate that a document conforms to a schema.  \n  \n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \n  \n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \n  \n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.","nodes":[{"pos":[0,361],"content":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.","nodes":[{"content":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.","pos":[0,361],"nodes":[{"content":"You can use this method to validate that a sub-tree (with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> at its root) conforms to a schema.","pos":[0,127],"source":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema."},{"content":"You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.","pos":[128,256]},{"content":"You could validate the entire document, but it takes less processing time to validate a just a sub-tree.","pos":[257,361]}]}]},{"pos":[368,526],"content":"If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.","nodes":[{"content":"If you pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`validationEventHandler`</ph>, then this method raises an exception upon validation errors.","pos":[0,109],"source":"If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors."},{"content":"Validation warnings will not raise an exception.","pos":[110,158]}]},{"pos":[533,694],"content":"To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","nodes":[{"content":"To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","pos":[0,161],"nodes":[{"content":"To validate a sub-tree, you use an instance of <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[0,88],"source":"To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>."},{"content":"You can obtain this instance in various ways.","pos":[89,134]},{"content":"An easy way is as follows:","pos":[135,161]}]}]},{"pos":[704,750],"content":"Validate that a document conforms to a schema.","nodes":[{"content":"Validate that a document conforms to a schema.","pos":[0,46]}]},{"pos":[760,886],"content":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.","nodes":[{"content":"Add the post-schema-validation infoset (PSVI) by calling the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph> extension method.","pos":[0,126],"source":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method."}]},{"pos":[896,1137],"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","nodes":[{"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","pos":[0,241],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph> extension method to retrieve an object that implements <ph id=\"ph2\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo&gt;</ph>.","pos":[0,157],"source":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>."},{"content":"From the retrieved object, you can get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[158,241],"source":" From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>."}]}]},{"pos":[1151,1305],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph>.","pos":[0,154],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>."}]},{"pos":[1319,1477],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph>.","pos":[0,158],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>."}]},{"pos":[1484,1607],"content":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.","nodes":[{"content":"After you have an instance of an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>, you can use this method to validate an sub-tree.","pos":[0,123],"source":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree."}]}],"pos":[51891,53517],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XElement\"></xref> to validate.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> to validate.","source":"The <xref href=\"System.Xml.Linq.XElement\"></xref> to validate."}],"pos":[59117,59180],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> that specifies the sub-tree to validate.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate."}],"pos":[59277,59376],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph> to validate against.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against."}],"pos":[59456,59532],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"pos":[0,189],"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.ValidationEventHandler\"&gt;&lt;/xref&gt;</ph> for an event that occurs when the reader encounters validation errors.","pos":[0,134],"source":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors."},{"content":"If <ph id=\"ph1\">`null`</ph>, throws an exception upon validation errors.","pos":[135,189],"source":" If `null`, throws an exception upon validation errors."}]}],"pos":[59637,59827],"yaml":true},{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"pos":[0,66],"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","pos":[0,66]}]}],"pos":[60030,60097],"yaml":true},{"content":"Validates that an <xref href=\"System.Xml.Linq.XAttribute\"></xref> conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).","nodes":[{"pos":[0,287],"content":"Validates that an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> conforms to a specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> and an <ph id=\"ph3\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).","source":"Validates that an <xref href=\"System.Xml.Linq.XAttribute\"></xref> conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI)."}],"pos":[61883,62171],"yaml":true},{"content":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.  \n  \n If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI). After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on the validated attribute. This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.  \n  \n If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \n  \n To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \n  \n1.  Validate that a document conforms to a schema.  \n  \n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \n  \n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \n  \n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.","nodes":[{"pos":[0,336],"content":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.","nodes":[{"content":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.","pos":[0,336],"nodes":[{"content":"You can use this method to validate that an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> conforms to a schema.","pos":[0,99],"source":"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema."},{"content":"You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema.","pos":[100,230]},{"content":"You could validate the entire document, but it takes less processing time to validate just the attribute.","pos":[231,336]}]}]},{"pos":[343,753],"content":"If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI). After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on the validated attribute. This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.","nodes":[{"content":"If <ph id=\"ph1\">`addSchemaInfo`</ph> is <ph id=\"ph2\">`true`</ph>, this method populates the attribute with the post-schema-validation infoset (PSVI).","pos":[0,113],"source":"If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI)."},{"content":"After you have populated the XML tree with the PSVI, you can call <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName&gt;</ph> on the validated attribute.","pos":[114,285],"source":" After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on the validated attribute."},{"content":"This is useful if you are writing code that relies on data returned by <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph>.","pos":[286,410],"source":" This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>."}]},{"pos":[760,918],"content":"If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.","nodes":[{"content":"If you pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`validationEventHandler`</ph>, then this method raises an exception upon validation errors.","pos":[0,109],"source":"If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors."},{"content":"Validation warnings will not raise an exception.","pos":[110,158]}]},{"pos":[925,1088],"content":"To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","nodes":[{"content":"To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","pos":[0,163],"nodes":[{"content":"To validate an attribute, you use an instance of <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[0,90],"source":"To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>."},{"content":"You can obtain this instance in various ways.","pos":[91,136]},{"content":"An easy way is as follows:","pos":[137,163]}]}]},{"pos":[1098,1144],"content":"Validate that a document conforms to a schema.","nodes":[{"content":"Validate that a document conforms to a schema.","pos":[0,46]}]},{"pos":[1154,1280],"content":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.","nodes":[{"content":"Add the post-schema-validation infoset (PSVI) by calling the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph> extension method.","pos":[0,126],"source":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method."}]},{"pos":[1290,1531],"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","nodes":[{"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","pos":[0,241],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph> extension method to retrieve an object that implements <ph id=\"ph2\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo&gt;</ph>.","pos":[0,157],"source":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>."},{"content":"From the retrieved object, you can get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[158,241],"source":" From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>."}]}]},{"pos":[1545,1699],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph>.","pos":[0,154],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>."}]},{"pos":[1713,1871],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph>.","pos":[0,158],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>."}]},{"pos":[1878,2002],"content":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.","nodes":[{"content":"After you have an instance of an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>, you can use this method to validate an attribute.","pos":[0,124],"source":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute."}]}],"pos":[62182,64205],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XAttribute\"></xref> to validate.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XAttribute\"&gt;&lt;/xref&gt;</ph> to validate.","source":"The <xref href=\"System.Xml.Linq.XAttribute\"></xref> to validate."}],"pos":[71935,72000],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> that specifies the sub-tree to validate.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate."}],"pos":[72097,72196],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph> to validate against.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against."}],"pos":[72276,72352],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"pos":[0,189],"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.ValidationEventHandler\"&gt;&lt;/xref&gt;</ph> for an event that occurs when the reader encounters validation errors.","pos":[0,134],"source":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors."},{"content":"If <ph id=\"ph1\">`null`</ph>, throws an exception upon validation errors.","pos":[135,189],"source":" If `null`, throws an exception upon validation errors."}]}],"pos":[72457,72647],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI).","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> indicating whether to populate the post-schema-validation infoset (PSVI).","source":"A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI)."}],"pos":[72717,72829],"yaml":true},{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"pos":[0,66],"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","pos":[0,66]}]}],"pos":[73032,73099],"yaml":true},{"content":"Validates that an <xref href=\"System.Xml.Linq.XElement\"></xref> sub-tree conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).","nodes":[{"pos":[0,294],"content":"Validates that an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> sub-tree conforms to a specified <ph id=\"ph2\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> and an <ph id=\"ph3\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).","source":"Validates that an <xref href=\"System.Xml.Linq.XElement\"></xref> sub-tree conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI)."}],"pos":[74873,75168],"yaml":true},{"content":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.  \n  \n If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI).  \n  \n There are two aspects of populating the XML tree with the PSVI.  \n  \n First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.  \n  \n Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.  \n  \n If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \n  \n To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \n  \n1.  Validate that a document conforms to a schema.  \n  \n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \n  \n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \n  \n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \n  \n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..","nodes":[{"pos":[0,377],"content":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.","nodes":[{"content":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.","pos":[0,377],"nodes":[{"content":"You can use this method to validate that a sub-tree (with an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> at the root of the sub-tree) conforms to a schema.","pos":[0,143],"source":"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema."},{"content":"You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema.","pos":[144,272]},{"content":"You could validate the entire document, but it takes less processing time to validate a just a sub-tree.","pos":[273,377]}]}]},{"pos":[384,501],"content":"If <ph id=\"ph1\">`addSchemaInfo`</ph> is <ph id=\"ph2\">`true`</ph>, then this method populates the XML tree with the post-schema-validation infoset (PSVI).","source":"If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI)."},{"pos":[508,571],"content":"There are two aspects of populating the XML tree with the PSVI.","nodes":[{"content":"There are two aspects of populating the XML tree with the PSVI.","pos":[0,63]}]},{"pos":[578,752],"content":"First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.","nodes":[{"content":"First, an annotation is added to all nodes in the tree such that you can now call <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph> on an element or attribute in the tree.","pos":[0,174],"source":"First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree."}]},{"pos":[759,1039],"content":"Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.","nodes":[{"content":"Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.","pos":[0,280],"nodes":[{"content":"Second, default elements and attributes defined in the XSD are added to the XML tree.","pos":[0,85]},{"content":"By calling one of the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.","pos":[86,280],"source":" By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute."}]}]},{"pos":[1046,1204],"content":"If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.","nodes":[{"content":"If you pass <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`validationEventHandler`</ph>, then this method raises an exception upon validation errors.","pos":[0,109],"source":"If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors."},{"content":"Validation warnings will not raise an exception.","pos":[110,158]}]},{"pos":[1211,1372],"content":"To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","nodes":[{"content":"To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:","pos":[0,161],"nodes":[{"content":"To validate a sub-tree, you use an instance of <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[0,88],"source":"To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>."},{"content":"You can obtain this instance in various ways.","pos":[89,134]},{"content":"An easy way is as follows:","pos":[135,161]}]}]},{"pos":[1382,1428],"content":"Validate that a document conforms to a schema.","nodes":[{"content":"Validate that a document conforms to a schema.","pos":[0,46]}]},{"pos":[1438,1564],"content":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.","nodes":[{"content":"Add the post-schema-validation infoset (PSVI) by calling the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.Validate%2A&gt;</ph> extension method.","pos":[0,126],"source":"Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method."}]},{"pos":[1574,1815],"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","nodes":[{"content":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.","pos":[0,241],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A&gt;</ph> extension method to retrieve an object that implements <ph id=\"ph2\">&lt;xref:System.Xml.Schema.IXmlSchemaInfo&gt;</ph>.","pos":[0,157],"source":"Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>."},{"content":"From the retrieved object, you can get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>.","pos":[158,241],"source":" From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>."}]}]},{"pos":[1829,1983],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph>.","pos":[0,154],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>."}]},{"pos":[1997,2155],"content":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.","nodes":[{"content":"If you get an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> for an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph>, the type will be <ph id=\"ph3\">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph>.","pos":[0,158],"source":"If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>."}]},{"pos":[2162,2285],"content":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..","nodes":[{"content":"After you have an instance of an <ph id=\"ph1\">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph>, you can use this method to validate a sub-tree..","pos":[0,123],"source":"After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree.."}]}],"pos":[75179,77491],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XElement\"></xref> to validate.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> to validate.","source":"The <xref href=\"System.Xml.Linq.XElement\"></xref> to validate."}],"pos":[83014,83077],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaObject\"&gt;&lt;/xref&gt;</ph> that specifies the sub-tree to validate.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate."}],"pos":[83174,83273],"yaml":true},{"content":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.XmlSchemaSet\"&gt;&lt;/xref&gt;</ph> to validate against.","source":"An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against."}],"pos":[83353,83429],"yaml":true},{"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"pos":[0,189],"content":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Schema.ValidationEventHandler\"&gt;&lt;/xref&gt;</ph> for an event that occurs when the reader encounters validation errors.","pos":[0,134],"source":"A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors."},{"content":"If <ph id=\"ph1\">`null`</ph>, throws an exception upon validation errors.","pos":[135,189],"source":" If `null`, throws an exception upon validation errors."}]}],"pos":[83534,83724],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI).","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> indicating whether to populate the post-schema-validation infoset (PSVI).","source":"A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI)."}],"pos":[83794,83906],"yaml":true},{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"pos":[0,66],"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","nodes":[{"content":"Thrown for XML Schema Definition Language (XSD) validation errors.","pos":[0,66]}]}],"pos":[84109,84176],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Schema.Extensions\n  commentId: T:System.Xml.Schema.Extensions\n  id: Extensions\n  children:\n  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)\n  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  langs:\n  - csharp\n  name: Extensions\n  nameWithType: Extensions\n  fullName: System.Xml.Schema.Extensions\n  type: Class\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: This class contains the LINQ to XML extension methods for XSD validation.\n  remarks: \"This class also contains methods to get the post-schema-validation infoset (PSVI) of a validated XML node.  \\n  \\n When you validate an <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, or <xref:System.Xml.Linq.XAttribute>, you can also optionally populate the XML tree with the post-schema-validation infoset. PSVI information is added as an annotation of type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>.\"\n  example:\n  - \"The XSD in [Sample XSD File: Customers and Orders](http://msdn.microsoft.com/library/8b05efe3-cc5e-4c7b-b322-892dbda41687) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](http://msdn.microsoft.com/library/26790c41-5976-4558-a096-d0f67bfc4d92). The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.  \\n  \\n```csharp  \\n  \\n                XmlSchemaSet schemas = new XmlSchemaSet();  \\nschemas.Add(\\\"\\\", \\\"CustomersOrders.xsd\\\");  \\n  \\nXDocument custOrd = XDocument.Load(\\\"CustomersOrders.xml\\\");  \\n  \\nConsole.WriteLine(\\\"Validating custOrd\\\");  \\nbool errors = false;  \\ncustOrd.Validate(schemas, (o, e) =>  \\n                     {  \\n                         Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                         errors = true;  \\n                     });  \\nConsole.WriteLine(\\\"custOrd {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\n// Modify the custOrd tree so that it is no longer valid.  \\ncustOrd.Root.Element(\\\"Orders\\\").Element(\\\"Order\\\").Element(\\\"CustomerID\\\").Value = \\\"AAAAA\\\";  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating custOrd\\\");  \\nerrors = false;  \\ncustOrd.Validate(schemas, (o, e) =>  \\n                     {  \\n                         Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                         errors = true;  \\n                     });  \\nConsole.WriteLine(\\\"custOrd {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", \\\"CustomersOrders.xsd\\\")  \\n  \\n    Console.WriteLine(\\\"Validating custOrd\\\")  \\n    Dim custOrd As XDocument = XDocument.Load(\\\"CustomersOrders.xml\\\")  \\n    errors = False  \\n    custOrd.Validate(schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"custOrd {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating custOrd\\\")  \\n    ' Modify the source document so that it will not validate.  \\n    custOrd.Root.Element(\\\"Orders\\\").Element(\\\"Order\\\").Element(\\\"CustomerID\\\").Value = \\\"AAAAA\\\"  \\n    errors = False  \\n    custOrd.Validate(schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"custOrd {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating custOrd  \\ncustOrd validated  \\n  \\nValidating custOrd  \\nThe key sequence 'AAAAA' in Keyref fails to refer to some key.  \\ncustOrd did not validate  \\n```\"\n  syntax:\n    content: public static class Extensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)\n  commentId: M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)\n  id: GetSchemaInfo(System.Xml.Linq.XAttribute)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: GetSchemaInfo(XAttribute)\n  nameWithType: Extensions.GetSchemaInfo(XAttribute)\n  fullName: Extensions.GetSchemaInfo(XAttribute)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: Gets the post-schema-validation infoset (PSVI) of a validated attribute.\n  remarks: \"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated attribute. For example, you can determine if the attribute came from a default attribute value in an XSD.  \\n  \\n You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaAttribute>). You can use it to revalidate an attribute without validating an entire document.  \\n  \\n For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.\"\n  syntax:\n    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XAttribute\n      description: An <xref href=\"System.Xml.Linq.XAttribute\"></xref> that has been previously validated.\n    return:\n      type: System.Xml.Schema.IXmlSchemaInfo\n      description: A <xref href=\"System.Xml.Schema.IXmlSchemaInfo\"></xref> that contains the post-schema-validation infoset for an <xref href=\"System.Xml.Linq.XAttribute\"></xref>.\n  overload: System.Xml.Schema.Extensions.GetSchemaInfo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)\n  commentId: M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)\n  id: GetSchemaInfo(System.Xml.Linq.XElement)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: GetSchemaInfo(XElement)\n  nameWithType: Extensions.GetSchemaInfo(XElement)\n  fullName: Extensions.GetSchemaInfo(XElement)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: Gets the post-schema-validation infoset (PSVI) of a validated element.\n  remarks: \"You can use the <xref:System.Xml.Schema.IXmlSchemaInfo> returned by this method to determine certain characteristics of a validated element. For example, you can determine the dynamic schema type of the element.  \\n  \\n You use the <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> property to get a partial validation type (<xref:System.Xml.Schema.XmlSchemaElement>). You can use it to revalidate a sub-tree with an element at its root without validating an entire document.  \\n  \\n For an example of this property, see <xref:System.Xml.Schema.Extensions.Validate%2A>.\"\n  example:\n  - \"The following example populates the tree with a PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \\n  \\n```csharp  \\n  \\n                static void DumpInvalidNodes(XElement el)  \\n{  \\n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \\n        Console.WriteLine(\\\"Invalid Element {0}\\\",  \\n            el.AncestorsAndSelf()  \\n            .InDocumentOrder()  \\n            .Aggregate(\\\"\\\", (s, i) => s + \\\"/\\\" + i.Name.ToString()));  \\n    foreach (XAttribute att in el.Attributes())  \\n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \\n            Console.WriteLine(\\\"Invalid Attribute {0}\\\",  \\n                att  \\n                .Parent  \\n                .AncestorsAndSelf()  \\n                .InDocumentOrder()  \\n                .Aggregate(\\\"\\\",  \\n                    (s, i) => s + \\\"/\\\" + i.Name.ToString()) + \\\"/@\\\" + att.Name.ToString()  \\n                );  \\n    foreach (XElement child in el.Elements())  \\n        DumpInvalidNodes(child);  \\n}  \\n  \\nstatic void Main(string[] args)  \\n{  \\n    string xsdMarkup =  \\n         @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n   <xsd:simpleType name='GCType'>  \\n    <xsd:restriction base='xsd:token'>  \\n     <xsd:enumeration value='AAA'/>  \\n     <xsd:enumeration value='BBB'/>  \\n    </xsd:restriction>  \\n   </xsd:simpleType>  \\n   <xsd:element name='Root'>  \\n    <xsd:complexType>  \\n     <xsd:sequence>  \\n      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \\n       <xsd:complexType>  \\n        <xsd:sequence>  \\n         <xsd:element name='GrandChild1' type='GCType'/>  \\n         <xsd:element name='GrandChild2' type='GCType'/>  \\n         <xsd:element name='GrandChild3' type='GCType'/>  \\n        </xsd:sequence>  \\n       </xsd:complexType>  \\n      </xsd:element>  \\n     </xsd:sequence>  \\n    </xsd:complexType>  \\n   </xsd:element>  \\n  </xsd:schema>\\\";  \\n  \\n    XmlSchemaSet schemas = new XmlSchemaSet();  \\n    schemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\n    XDocument doc1 = new XDocument(  \\n        new XElement(\\\"Root\\\",  \\n            new XElement(\\\"Child1\\\",  \\n                new XElement(\\\"GrandChild1\\\", \\\"AAA\\\"),  \\n                new XElement(\\\"GrandChild2\\\", \\\"ZZZ\\\"),  \\n                new XElement(\\\"GrandChild3\\\", \\\"ZZZ\\\")  \\n            )  \\n        )  \\n    );  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\");  \\n    bool errors = false;  \\n    doc1.Validate(schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    }, true);  \\n    Console.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n    DumpInvalidNodes(doc1.Root);  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \\n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \\n        Console.WriteLine(\\\"Invalid Element {0}\\\", _  \\n            el _  \\n            .AncestorsAndSelf _  \\n            .InDocumentOrder() _  \\n            .Aggregate(\\\"\\\", _  \\n                Function(ByVal s, ByVal i) s + \\\"/\\\" + i.Name.ToString()))  \\n    End If  \\n    For Each att As XAttribute In el.Attributes()  \\n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \\n            Console.WriteLine(\\\"Invalid Attribute {0}\\\", _  \\n                att _  \\n                .Parent _  \\n                .AncestorsAndSelf() _  \\n                .InDocumentOrder() _  \\n                .Aggregate(\\\"\\\", _  \\n                    Function(ByVal s, ByVal i) s + \\\"/\\\" + i.Name.ToString()) + _  \\n                    \\\"/@\\\" + att.Name.ToString())  \\n        End If  \\n    Next  \\n    For Each child As XElement In el.Elements()  \\n        DumpInvalidNodes(child)  \\n    Next  \\nEnd Sub  \\n  \\nDim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n    Dim xsdMarkup As XDocument = _  \\n    <?xml version='1.0'?>  \\n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n        <xsd:simpleType name='GCType'>  \\n            <xsd:restriction base='xsd:token'>  \\n                <xsd:enumeration value='AAA'/>  \\n                <xsd:enumeration value='BBB'/>  \\n            </xsd:restriction>  \\n        </xsd:simpleType>  \\n        <xsd:element name='Root'>  \\n            <xsd:complexType>  \\n                <xsd:sequence>  \\n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \\n                        <xsd:complexType>  \\n                            <xsd:sequence>  \\n                                <xsd:element name='GrandChild1' type='GCType'/>  \\n                                <xsd:element name='GrandChild2' type='GCType'/>  \\n                                <xsd:element name='GrandChild3' type='GCType'/>  \\n                            </xsd:sequence>  \\n                        </xsd:complexType>  \\n                    </xsd:element>  \\n                </xsd:sequence>  \\n            </xsd:complexType>  \\n        </xsd:element>  \\n    </xsd:schema>  \\n  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = _  \\n    <?xml version='1.0'?>  \\n    <Root>  \\n        <Child1>  \\n            <GrandChild1>AAA</GrandChild1>  \\n            <GrandChild2>ZZZ</GrandChild2>  \\n            <GrandChild3>ZZZ</GrandChild3>  \\n        </Child1>  \\n    </Root>  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n    DumpInvalidNodes(doc1.Root)  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1 ...  \\nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \\nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \\ndoc1 did not validate  \\nInvalid Element /Root  \\nInvalid Element /Root/Child1  \\nInvalid Element /Root/Child1/GrandChild2  \\nInvalid Element /Root/Child1/GrandChild3  \\n```\"\n  syntax:\n    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XElement\n      description: An <xref href=\"System.Xml.Linq.XElement\"></xref> that has been previously validated.\n    return:\n      type: System.Xml.Schema.IXmlSchemaInfo\n      description: A <xref href=\"System.Xml.Schema.IXmlSchemaInfo\"></xref> that contains the post-schema-validation infoset (PSVI) for an <xref href=\"System.Xml.Linq.XElement\"></xref>.\n  overload: System.Xml.Schema.Extensions.GetSchemaInfo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  commentId: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  id: Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: This method validates that an <xref href=\"System.Xml.Linq.XDocument\"></xref> conforms to an XSD in an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.\n  remarks: This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.\n  example:\n  - \"The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set. One of the documents is valid, the other is not.  \\n  \\n```csharp  \\n  \\n                string xsdMarkup =  \\n    @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n       <xsd:element name='Root'>  \\n        <xsd:complexType>  \\n         <xsd:sequence>  \\n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \\n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \\n         </xsd:sequence>  \\n        </xsd:complexType>  \\n       </xsd:element>  \\n      </xsd:schema>\\\";  \\nXmlSchemaSet schemas = new XmlSchemaSet();  \\nschemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\nXDocument doc1 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"content1\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"content1\\\")  \\n    )  \\n);  \\n  \\nXDocument doc2 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"content1\\\"),  \\n        new XElement(\\\"Child3\\\", \\\"content1\\\")  \\n    )  \\n);  \\n  \\nConsole.WriteLine(\\\"Validating doc1\\\");  \\nbool errors = false;  \\ndoc1.Validate(schemas, (o, e) =>  \\n                     {  \\n                         Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                         errors = true;  \\n                     });  \\nConsole.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating doc2\\\");  \\nerrors = false;  \\ndoc2.Validate(schemas, (o, e) =>  \\n                     {  \\n                         Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                         errors = true;  \\n                     });  \\nConsole.WriteLine(\\\"doc2 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n    Dim xsdMarkup As XDocument = _  \\n    <?xml version='1.0'?>  \\n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n        <xsd:element name='Root'>  \\n            <xsd:complexType>  \\n                <xsd:sequence>  \\n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \\n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \\n                </xsd:sequence>  \\n            </xsd:complexType>  \\n        </xsd:element>  \\n    </xsd:schema>  \\n  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = _  \\n    <?xml version='1.0'?>  \\n    <Root>  \\n        <Child1>content1</Child1>  \\n        <Child2>content2</Child2>  \\n    </Root>  \\n  \\n    Dim doc2 As XDocument = _  \\n    <?xml version='1.0'?>  \\n    <Root>  \\n        <Child1>content1</Child1>  \\n        <Child3>content1</Child3>  \\n    </Root>  \\n  \\n    Console.WriteLine(\\\"Validating doc1\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating doc2\\\")  \\n    errors = False  \\n    doc2.Validate(schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"doc2 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1  \\ndoc1 validated  \\n  \\nValidating doc2  \\nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \\ndoc2 did not validate  \\n```\"\n  syntax:\n    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XDocument\n      description: The <xref href=\"System.Xml.Linq.XDocument\"></xref> to validate.\n    - id: schemas\n      type: System.Xml.Schema.XmlSchemaSet\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.\n    - id: validationEventHandler\n      type: System.Xml.Schema.ValidationEventHandler\n      description: A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.\n  overload: System.Xml.Schema.Extensions.Validate*\n  exceptions:\n  - type: System.Xml.Schema.XmlSchemaValidationException\n    commentId: T:System.Xml.Schema.XmlSchemaValidationException\n    description: Thrown for XML Schema Definition Language (XSD) validation errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  commentId: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  id: Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: This method validates that an <xref href=\"System.Xml.Linq.XAttribute\"></xref> conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.\n  remarks: \"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.  \\n  \\n If you pass `null` for `validationEventHandler`, this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \\n  \\n To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \\n  \\n1.  Validate that a document conforms to a schema.  \\n  \\n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \\n  \\n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \\n  \\n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.\"\n  example:\n  - \"```csharp  \\n  \\n                string xsdMarkup =  \\n    @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n       <xsd:element name='Root'>  \\n        <xsd:complexType>  \\n         <xsd:simpleContent>  \\n          <xsd:extension base='xsd:string'>  \\n           <xsd:attribute name='Lang' use='required'>  \\n            <xsd:simpleType>  \\n             <xsd:restriction base='xsd:token'>  \\n              <xsd:enumeration value='C#'/>  \\n              <xsd:enumeration value='VB'/>  \\n             </xsd:restriction>  \\n            </xsd:simpleType>  \\n           </xsd:attribute>  \\n          </xsd:extension>  \\n         </xsd:simpleContent>  \\n        </xsd:complexType>  \\n       </xsd:element>  \\n      </xsd:schema>\\\";  \\n  \\nXmlSchemaSet schemas = new XmlSchemaSet();  \\nschemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\nXDocument doc1 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XAttribute(\\\"Lang\\\", \\\"C#\\\")  \\n    )  \\n);  \\n  \\nConsole.WriteLine(\\\"Validating doc1 ...\\\");  \\nbool errors = false;  \\ndoc1.Validate(schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    }, true);  \\nConsole.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating Lang attribute ...\\\");  \\nXAttribute lang = doc1.Root.Attribute(\\\"Lang\\\");  \\n  \\nerrors = false;  \\nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    });  \\nConsole.WriteLine(\\\"lang {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\n// the following makes the Lang attribute invalid according to the schema  \\nlang.Value = \\\"VC\\\";  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating Lang attribute ...\\\");  \\n  \\nerrors = false;  \\nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    });  \\nConsole.WriteLine(\\\"lang {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n    Dim xsdMarkup As XDocument = _  \\n      <?xml version='1.0'?>  \\n      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n          <xsd:element name='Root'>  \\n              <xsd:complexType>  \\n                  <xsd:simpleContent>  \\n                      <xsd:extension base='xsd:string'>  \\n                          <xsd:attribute name='Lang' use='required'>  \\n                              <xsd:simpleType>  \\n                                  <xsd:restriction base='xsd:token'>  \\n                                      <xsd:enumeration value='C#'/>  \\n                                      <xsd:enumeration value='VB'/>  \\n                                  </xsd:restriction>  \\n                              </xsd:simpleType>  \\n                          </xsd:attribute>  \\n                      </xsd:extension>  \\n                  </xsd:simpleContent>  \\n              </xsd:complexType>  \\n          </xsd:element>  \\n      </xsd:schema>  \\n  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = <?xml version='1.0'?>  \\n                            <Root Lang='C#'/>  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating Lang attribute ...\\\")  \\n    Dim lang As XAttribute = doc1.Root.Attribute(\\\"Lang\\\")  \\n  \\n    errors = False  \\n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"lang {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    ' the following makes the Lang attribute invalid according to the schema  \\n    lang.Value = \\\"VC\\\"  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating Lang attribute ...\\\")  \\n  \\n    errors = False  \\n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"lang {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1 ...  \\ndoc1 validated  \\n  \\nValidating Lang attribute ...  \\nlang validated  \\n  \\nValidating Lang attribute ...  \\nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \\nlang did not validate  \\n```\"\n  syntax:\n    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XAttribute\n      description: The <xref href=\"System.Xml.Linq.XAttribute\"></xref> to validate.\n    - id: partialValidationType\n      type: System.Xml.Schema.XmlSchemaObject\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.\n    - id: schemas\n      type: System.Xml.Schema.XmlSchemaSet\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.\n    - id: validationEventHandler\n      type: System.Xml.Schema.ValidationEventHandler\n      description: A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.\n  overload: System.Xml.Schema.Extensions.Validate*\n  exceptions:\n  - type: System.Xml.Schema.XmlSchemaValidationException\n    commentId: T:System.Xml.Schema.XmlSchemaValidationException\n    description: Thrown for XML Schema Definition Language (XSD) validation errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  commentId: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  id: Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: Validates that an <xref href=\"System.Xml.Linq.XDocument\"></xref> conforms to an XSD in an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).\n  remarks: \"This extension method validates that the <xref:System.Xml.Linq.XDocument> conforms to the schema content model in <xref:System.Xml.Schema.XmlSchemaSet>.  \\n  \\n If `addSchemaInfo` is `true`, this method populates the XML tree with the post-schema-validation infoset (PSVI).  \\n  \\n There are two steps to populating the XML tree with the PSVI.  \\n  \\n1.  First, an annotation is added to all nodes in the tree to enable you to call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> or <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on an element or attribute in the tree.  \\n  \\n2.  Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.\"\n  example:\n  - \"The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value. After successfully validating the document, the attribute with the default value is added to the XML tree. Note that the default attribute is not added to `doc2`, which does not validate against the schema.  \\n  \\n```csharp  \\n  \\n                string xsdMarkup =  \\n    @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n       <xsd:element name='Root'>  \\n        <xsd:complexType>  \\n         <xsd:sequence>  \\n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \\n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \\n           <xsd:complexType>  \\n            <xsd:simpleContent>  \\n             <xsd:extension base='xsd:string'>  \\n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \\n             </xsd:extension>  \\n            </xsd:simpleContent>  \\n           </xsd:complexType>  \\n          </xsd:element>  \\n         </xsd:sequence>  \\n        </xsd:complexType>  \\n       </xsd:element>  \\n      </xsd:schema>\\\";  \\nXmlSchemaSet schemas = new XmlSchemaSet();  \\nschemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\nXDocument doc1 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"c1\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"c2\\\")  \\n    )  \\n);  \\n  \\nXDocument doc2 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"content1\\\"),  \\n        new XElement(\\\"Child3\\\", \\\"content1\\\")  \\n    )  \\n);  \\n  \\nConsole.WriteLine(\\\"Validating doc1\\\");  \\nbool errors = false;  \\ndoc1.Validate(schemas, (o, e) =>  \\n                           {  \\n                               Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                               errors = true;  \\n                           }, true);  \\nConsole.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating doc2\\\");  \\nerrors = false;  \\ndoc2.Validate(schemas, (o, e) =>  \\n                     {  \\n                         Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                         errors = true;  \\n                     }, true);  \\nConsole.WriteLine(\\\"doc2 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Contents of doc1:\\\");  \\nConsole.WriteLine(doc1);  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Contents of doc2:\\\");  \\nConsole.WriteLine(doc2);  \\n```  \\n  \\n```vb  \\n  \\n                Dim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n    Dim xsdMarkup As XDocument = _  \\n    <?xml version='1.0'?>  \\n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n        <xsd:element name='Root'>  \\n            <xsd:complexType>  \\n                <xsd:sequence>  \\n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \\n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \\n                        <xsd:complexType>  \\n                            <xsd:simpleContent>  \\n                                <xsd:extension base='xsd:string'>  \\n                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  \\n                                </xsd:extension>  \\n                            </xsd:simpleContent>  \\n                        </xsd:complexType>  \\n                    </xsd:element>  \\n                </xsd:sequence>  \\n            </xsd:complexType>  \\n        </xsd:element>  \\n    </xsd:schema>  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = <?xml version='1.0'?>  \\n                            <Root>  \\n                                <Child1>c1</Child1>  \\n                                <Child2>c2</Child2>  \\n                            </Root>  \\n    Dim doc2 As XDocument = <?xml version='1.0'?>  \\n                            <Root>  \\n                                <Child1>content1</Child1>  \\n                                <Child3>content1</Child3>  \\n                            </Root>  \\n  \\n    Console.WriteLine(\\\"Validating doc1\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating doc2\\\")  \\n    errors = False  \\n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc2 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Contents of doc1:\\\")  \\n    Console.WriteLine(doc1)  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Contents of doc2:\\\")  \\n    Console.WriteLine(doc2)  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1  \\ndoc1 validated  \\n  \\nValidating doc2  \\nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \\ndoc2 did not validate  \\n  \\nContents of doc1:  \\n<Root>  \\n  <Child1>c1</Child1>  \\n  <Child2 Att1=\\\"Att1 Default Value\\\">c2</Child2>  \\n</Root>  \\n  \\nContents of doc2:  \\n<Root>  \\n  <Child1>content1</Child1>  \\n  <Child3>content1</Child3>  \\n</Root>  \\n```  \\n  \\n The following example populates the tree with PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \\n  \\n```csharp  \\n  \\n                static void DumpInvalidNodes(XElement el)  \\n{  \\n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \\n        Console.WriteLine(\\\"Invalid Element {0}\\\",  \\n            el.AncestorsAndSelf()  \\n            .InDocumentOrder()  \\n            .Aggregate(\\\"\\\", (s, i) => s + \\\"/\\\" + i.Name.ToString()));  \\n    foreach (XAttribute att in el.Attributes())  \\n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \\n            Console.WriteLine(\\\"Invalid Attribute {0}\\\",  \\n                att  \\n                .Parent  \\n                .AncestorsAndSelf()  \\n                .InDocumentOrder()  \\n                .Aggregate(\\\"\\\",  \\n                    (s, i) => s + \\\"/\\\" + i.Name.ToString()) + \\\"/@\\\" + att.Name.ToString()  \\n                );  \\n    foreach (XElement child in el.Elements())  \\n        DumpInvalidNodes(child);  \\n}  \\n  \\nstatic void Main(string[] args)  \\n{  \\n   string xsdMarkup =  \\n        @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n           <xsd:simpleType name='GCType'>  \\n            <xsd:restriction base='xsd:token'>  \\n             <xsd:enumeration value='AAA'/>  \\n             <xsd:enumeration value='BBB'/>  \\n            </xsd:restriction>  \\n           </xsd:simpleType>  \\n           <xsd:element name='Root'>  \\n            <xsd:complexType>  \\n             <xsd:sequence>  \\n              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \\n               <xsd:complexType>  \\n                <xsd:sequence>  \\n                 <xsd:element name='GrandChild1' type='GCType'/>  \\n                 <xsd:element name='GrandChild2' type='GCType'/>  \\n                 <xsd:element name='GrandChild3' type='GCType'/>  \\n                </xsd:sequence>  \\n               </xsd:complexType>  \\n              </xsd:element>  \\n             </xsd:sequence>  \\n            </xsd:complexType>  \\n           </xsd:element>  \\n          </xsd:schema>\\\";  \\n  \\n    XmlSchemaSet schemas = new XmlSchemaSet();  \\n    schemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\n    XDocument doc1 = new XDocument(  \\n        new XElement(\\\"Root\\\",  \\n            new XElement(\\\"Child1\\\",  \\n                new XElement(\\\"GrandChild1\\\", \\\"AAA\\\"),  \\n                new XElement(\\\"GrandChild2\\\", \\\"ZZZ\\\"),  \\n                new XElement(\\\"GrandChild3\\\", \\\"ZZZ\\\")  \\n            )  \\n        )  \\n    );  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\");  \\n    bool errors = false;  \\n    doc1.Validate(schemas, (sender, e) =>  \\n        {  \\n            Console.WriteLine(e.Message);  \\n            errors = true;  \\n        }, true);  \\n    Console.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n    DumpInvalidNodes(doc1.Root);  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \\n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \\n        Console.WriteLine(\\\"Invalid Element {0}\\\", _  \\n            el _  \\n            .AncestorsAndSelf _  \\n            .InDocumentOrder() _  \\n            .Aggregate(\\\"\\\", _  \\n                Function(ByVal s, ByVal i) s + \\\"/\\\" + i.Name.ToString()))  \\n    End If  \\n    For Each att As XAttribute In el.Attributes()  \\n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \\n            Console.WriteLine(\\\"Invalid Attribute {0}\\\", _  \\n                att _  \\n                .Parent _  \\n                .AncestorsAndSelf() _  \\n                .InDocumentOrder() _  \\n                .Aggregate(\\\"\\\", _  \\n                    Function(ByVal s, ByVal i) s + \\\"/\\\" + i.Name.ToString()) + _  \\n                    \\\"/@\\\" + att.Name.ToString())  \\n        End If  \\n    Next  \\n    For Each child As XElement In el.Elements()  \\n        DumpInvalidNodes(child)  \\n    Next  \\nEnd Sub  \\n  \\nDim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n    Dim xsdMarkup As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n            <xsd:simpleType name='GCType'>  \\n                <xsd:restriction base='xsd:token'>  \\n                    <xsd:enumeration value='AAA'/>  \\n                    <xsd:enumeration value='BBB'/>  \\n                </xsd:restriction>  \\n            </xsd:simpleType>  \\n            <xsd:element name='Root'>  \\n                <xsd:complexType>  \\n                    <xsd:sequence>  \\n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \\n                            <xsd:complexType>  \\n                                <xsd:sequence>  \\n                                    <xsd:element name='GrandChild1' type='GCType'/>  \\n                                    <xsd:element name='GrandChild2' type='GCType'/>  \\n                                    <xsd:element name='GrandChild3' type='GCType'/>  \\n                                </xsd:sequence>  \\n                            </xsd:complexType>  \\n                        </xsd:element>  \\n                    </xsd:sequence>  \\n                </xsd:complexType>  \\n            </xsd:element>  \\n        </xsd:schema>  \\n  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <Root>  \\n            <Child1>  \\n                <GrandChild1>AAA</GrandChild1>  \\n                <GrandChild2>ZZZ</GrandChild2>  \\n                <GrandChild3>ZZZ</GrandChild3>  \\n            </Child1>  \\n        </Root>  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n    DumpInvalidNodes(doc1.Root)  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1 ...  \\nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \\nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \\ndoc1 did not validate  \\nInvalid Element /Root  \\nInvalid Element /Root/Child1  \\nInvalid Element /Root/Child1/GrandChild2  \\nInvalid Element /Root/Child1/GrandChild3  \\n```\"\n  syntax:\n    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XDocument\n      description: The <xref href=\"System.Xml.Linq.XDocument\"></xref> to validate.\n    - id: schemas\n      type: System.Xml.Schema.XmlSchemaSet\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.\n    - id: validationEventHandler\n      type: System.Xml.Schema.ValidationEventHandler\n      description: A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.\n    - id: addSchemaInfo\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI).\n  overload: System.Xml.Schema.Extensions.Validate*\n  exceptions:\n  - type: System.Xml.Schema.XmlSchemaValidationException\n    commentId: T:System.Xml.Schema.XmlSchemaValidationException\n    description: Thrown for XML Schema Definition Language (XSD) validation errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  commentId: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  id: Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: This method validates that an <xref href=\"System.Xml.Linq.XElement\"></xref> sub-tree conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>.\n  remarks: \"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at its root) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.  \\n  \\n If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \\n  \\n To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \\n  \\n1.  Validate that a document conforms to a schema.  \\n  \\n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \\n  \\n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \\n  \\n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an sub-tree.\"\n  example:\n  - \"```csharp  \\n  \\n                string xsdMarkup =  \\n    @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n       <xsd:element name='Root'>  \\n        <xsd:complexType>  \\n         <xsd:sequence>  \\n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \\n           <xsd:complexType>  \\n            <xsd:sequence>  \\n             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \\n             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \\n            </xsd:sequence>  \\n           </xsd:complexType>  \\n          </xsd:element>  \\n         </xsd:sequence>  \\n        </xsd:complexType>  \\n       </xsd:element>  \\n      </xsd:schema>\\\";  \\n  \\nXmlSchemaSet schemas = new XmlSchemaSet();  \\nschemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\nXDocument doc1 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\",  \\n            new XElement(\\\"GrandChild1\\\", \\\"gc\\\"),  \\n            new XElement(\\\"GrandChild2\\\", \\\"gc\\\")  \\n        )  \\n    )  \\n);  \\n  \\nConsole.WriteLine(\\\"Validating doc1 ...\\\");  \\nbool errors = false;  \\ndoc1.Validate(schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    }, true);  \\nConsole.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating Child1 after first edit ...\\\");  \\nXElement child1 = doc1.Element(\\\"Root\\\").Element(\\\"Child1\\\");  \\nchild1.Add(new XElement(\\\"GrandChild2\\\", \\\"gc\\\"));  \\nerrors = false;  \\nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    });  \\nConsole.WriteLine(\\\"child1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\n// the following makes the Child1 element invalid according to the schema  \\nchild1.Add(new XElement(\\\"GrandChild3\\\", \\\"gc\\\"));  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating Child1 after second edit ...\\\");  \\nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    });  \\nConsole.WriteLine(\\\"child1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n  \\n    Dim xsdMarkup As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n            <xsd:element name='Root'>  \\n                <xsd:complexType>  \\n                    <xsd:sequence>  \\n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \\n                            <xsd:complexType>  \\n                                <xsd:sequence>  \\n                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \\n                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \\n                                </xsd:sequence>  \\n                            </xsd:complexType>  \\n                        </xsd:element>  \\n                    </xsd:sequence>  \\n                </xsd:complexType>  \\n            </xsd:element>  \\n        </xsd:schema>  \\n  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <Root>  \\n            <Child1>  \\n                <GrandChild1>gc</GrandChild1>  \\n                <GrandChild2>gc</GrandChild2>  \\n            </Child1>  \\n        </Root>  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating Child1 after first edit ...\\\")  \\n    Dim child1 As XElement = doc1.Element(\\\"Root\\\").Element(\\\"Child1\\\")  \\n    child1.Add(<GrandChild2>gc</GrandChild2>)  \\n    errors = False  \\n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"child1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    ' the following makes the Child1 element invalid according to the schema  \\n    child1.Add(<GrandChild3>gc</GrandChild3>)  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating Child1 after second edit ...\\\")  \\n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \\n    Console.WriteLine(\\\"child1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1 ...  \\ndoc1 validated  \\n  \\nValidating Child1 after first edit ...  \\nchild1 validated  \\n  \\nValidating Child1 after second edit ...  \\nThe element 'Child1' has invalid child element 'GrandChild3'.  \\nchild1 did not validate  \\n```\"\n  syntax:\n    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XElement\n      description: The <xref href=\"System.Xml.Linq.XElement\"></xref> to validate.\n    - id: partialValidationType\n      type: System.Xml.Schema.XmlSchemaObject\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.\n    - id: schemas\n      type: System.Xml.Schema.XmlSchemaSet\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.\n    - id: validationEventHandler\n      type: System.Xml.Schema.ValidationEventHandler\n      description: A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.\n  overload: System.Xml.Schema.Extensions.Validate*\n  exceptions:\n  - type: System.Xml.Schema.XmlSchemaValidationException\n    commentId: T:System.Xml.Schema.XmlSchemaValidationException\n    description: Thrown for XML Schema Definition Language (XSD) validation errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  commentId: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  id: Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: Validates that an <xref href=\"System.Xml.Linq.XAttribute\"></xref> conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).\n  remarks: \"You can use this method to validate that an <xref:System.Xml.Linq.XAttribute> conforms to a schema. You typically use this method when you have modified an attribute, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate just the attribute.  \\n  \\n If `addSchemaInfo` is `true`, this method populates the attribute with the post-schema-validation infoset (PSVI). After you have populated the XML tree with the PSVI, you can call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> on the validated attribute. This is useful if you are writing code that relies on data returned by <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.  \\n  \\n If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \\n  \\n To validate an attribute, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \\n  \\n1.  Validate that a document conforms to a schema.  \\n  \\n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \\n  \\n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \\n  \\n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate an attribute.\"\n  example:\n  - \"```csharp  \\n  \\n                static void DumpInvalidNodes(XElement el)  \\n{  \\n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \\n        Console.WriteLine(\\\"Invalid Element {0}\\\",  \\n            el.AncestorsAndSelf()  \\n            .InDocumentOrder()  \\n            .Aggregate(\\\"\\\", (s, i) => s + \\\"/\\\" + i.Name.ToString()));  \\n    foreach (XAttribute att in el.Attributes())  \\n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \\n            Console.WriteLine(\\\"Invalid Attribute {0}\\\",  \\n                att  \\n                .Parent  \\n                .AncestorsAndSelf()  \\n                .InDocumentOrder()  \\n                .Aggregate(\\\"\\\",  \\n                    (s, i) => s + \\\"/\\\" + i.Name.ToString()) + \\\"/@\\\" + att.Name.ToString()  \\n                );  \\n    foreach (XElement child in el.Elements())  \\n        DumpInvalidNodes(child);  \\n}  \\n  \\nstatic void Main(string[] args)  \\n{  \\n    string xsdMarkup =  \\n        @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n       <xsd:element name='Root'>  \\n        <xsd:complexType>  \\n         <xsd:simpleContent>  \\n          <xsd:extension base='xsd:string'>  \\n           <xsd:attribute name='Lang' use='required'>  \\n            <xsd:simpleType>  \\n             <xsd:restriction base='xsd:token'>  \\n              <xsd:enumeration value='C#'/>  \\n              <xsd:enumeration value='VB'/>  \\n             </xsd:restriction>  \\n            </xsd:simpleType>  \\n           </xsd:attribute>  \\n          </xsd:extension>  \\n         </xsd:simpleContent>  \\n        </xsd:complexType>  \\n       </xsd:element>  \\n      </xsd:schema>\\\";  \\n  \\n    XmlSchemaSet schemas = new XmlSchemaSet();  \\n    schemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\n    XDocument doc1 = new XDocument(  \\n        new XElement(\\\"Root\\\",  \\n            new XAttribute(\\\"Lang\\\", \\\"C#\\\")  \\n        )  \\n    );  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\");  \\n    bool errors = false;  \\n    doc1.Validate(schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    }, true);  \\n    Console.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n    DumpInvalidNodes(doc1.Root);  \\n  \\n    Console.WriteLine();  \\n    Console.WriteLine(\\\"Validating Lang attribute ...\\\");  \\n    XAttribute lang = doc1.Element(\\\"Root\\\").Attribute(\\\"Lang\\\");  \\n  \\n    errors = false;  \\n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    }, true);  \\n    Console.WriteLine(\\\"lang {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n    DumpInvalidNodes(doc1.Root);  \\n  \\n    // the following makes the Lang attribute invalid according to the schema  \\n    lang.Value = \\\"VC\\\";  \\n  \\n    Console.WriteLine();  \\n    Console.WriteLine(\\\"Validating Lang attribute ...\\\");  \\n  \\n    errors = false;  \\n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \\n    {  \\n        Console.WriteLine(e.Message);  \\n        errors = true;  \\n    }, true);  \\n    Console.WriteLine(\\\"lang {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n    DumpInvalidNodes(doc1.Root);  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \\n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \\n        Console.WriteLine(\\\"Invalid Element {0}\\\", _  \\n            el _  \\n            .AncestorsAndSelf _  \\n            .InDocumentOrder() _  \\n            .Aggregate(\\\"\\\", _  \\n                Function(ByVal s, ByVal i) s + \\\"/\\\" + i.Name.ToString()))  \\n    End If  \\n    For Each att As XAttribute In el.Attributes()  \\n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \\n            Console.WriteLine(\\\"Invalid Attribute {0}\\\", _  \\n                att _  \\n                .Parent _  \\n                .AncestorsAndSelf() _  \\n                .InDocumentOrder() _  \\n                .Aggregate(\\\"\\\", _  \\n                    Function(ByVal s, ByVal i) s + \\\"/\\\" + i.Name.ToString()) + _  \\n                    \\\"/@\\\" + att.Name.ToString())  \\n        End If  \\n    Next  \\n    For Each child As XElement In el.Elements()  \\n        DumpInvalidNodes(child)  \\n    Next  \\nEnd Sub  \\n  \\nDim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n  \\n    Dim xsdMarkup As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n            <xsd:element name='Root'>  \\n                <xsd:complexType>  \\n                    <xsd:simpleContent>  \\n                        <xsd:extension base='xsd:string'>  \\n                            <xsd:attribute name='Lang' use='required'>  \\n                                <xsd:simpleType>  \\n                                    <xsd:restriction base='xsd:token'>  \\n                                        <xsd:enumeration value='C#'/>  \\n                                        <xsd:enumeration value='VB'/>  \\n                                    </xsd:restriction>  \\n                                </xsd:simpleType>  \\n                            </xsd:attribute>  \\n                        </xsd:extension>  \\n                    </xsd:simpleContent>  \\n                </xsd:complexType>  \\n            </xsd:element>  \\n        </xsd:schema>  \\n  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = <?xml version='1.0'?>  \\n                            <Root Lang='C#'/>  \\n  \\n    Console.WriteLine(\\\"Validating doc1 ...\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n    DumpInvalidNodes(doc1.Root)  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating Lang attribute ...\\\")  \\n    Dim lang As XAttribute = doc1.Element(\\\"Root\\\").Attribute(\\\"Lang\\\")  \\n  \\n    errors = False  \\n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"lang {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n    DumpInvalidNodes(doc1.Root)  \\n  \\n    ' the following makes the Lang attribute invalid according to the schema  \\n    lang.Value = \\\"VC\\\"  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating Lang attribute ...\\\")  \\n  \\n    errors = False  \\n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"lang {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n    DumpInvalidNodes(doc1.Root)  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1 ...  \\ndoc1 validated  \\n  \\nValidating Lang attribute ...  \\nlang validated  \\n  \\nValidating Lang attribute ...  \\nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \\nlang did not validate  \\nInvalid Attribute /Root/@Lang  \\n```\"\n  syntax:\n    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XAttribute\n      description: The <xref href=\"System.Xml.Linq.XAttribute\"></xref> to validate.\n    - id: partialValidationType\n      type: System.Xml.Schema.XmlSchemaObject\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.\n    - id: schemas\n      type: System.Xml.Schema.XmlSchemaSet\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.\n    - id: validationEventHandler\n      type: System.Xml.Schema.ValidationEventHandler\n      description: A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.\n    - id: addSchemaInfo\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI).\n  overload: System.Xml.Schema.Extensions.Validate*\n  exceptions:\n  - type: System.Xml.Schema.XmlSchemaValidationException\n    commentId: T:System.Xml.Schema.XmlSchemaValidationException\n    description: Thrown for XML Schema Definition Language (XSD) validation errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  commentId: M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  id: Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  langs:\n  - csharp\n  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  type: Method\n  assemblies:\n  - System.Xml.Linq\n  - netstandard\n  - System.Xml.XDocument\n  namespace: System.Xml.Schema\n  summary: Validates that an <xref href=\"System.Xml.Linq.XElement\"></xref> sub-tree conforms to a specified <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> and an <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref>, optionally populating the XML tree with the post-schema-validation infoset (PSVI).\n  remarks: \"You can use this method to validate that a sub-tree (with an <xref:System.Xml.Linq.XElement> at the root of the sub-tree) conforms to a schema. You typically use this method when you have modified a sub-tree, and you want to make sure that it still conforms to its schema. You could validate the entire document, but it takes less processing time to validate a just a sub-tree.  \\n  \\n If `addSchemaInfo` is `true`, then this method populates the XML tree with the post-schema-validation infoset (PSVI).  \\n  \\n There are two aspects of populating the XML tree with the PSVI.  \\n  \\n First, an annotation is added to all nodes in the tree such that you can now call <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> on an element or attribute in the tree.  \\n  \\n Second, default elements and attributes defined in the XSD are added to the XML tree. By calling one of the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> methods, you can determine if a specific element or attribute was added from the XSD as a default element or attribute.  \\n  \\n If you pass `null` for `validationEventHandler`, then this method raises an exception upon validation errors. Validation warnings will not raise an exception.  \\n  \\n To validate a sub-tree, you use an instance of <xref:System.Xml.Schema.XmlSchemaObject>. You can obtain this instance in various ways. An easy way is as follows:  \\n  \\n1.  Validate that a document conforms to a schema.  \\n  \\n2.  Add the post-schema-validation infoset (PSVI) by calling the <xref:System.Xml.Schema.Extensions.Validate%2A> extension method.  \\n  \\n3.  Call the <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> extension method to retrieve an object that implements <xref:System.Xml.Schema.IXmlSchemaInfo>. From the retrieved object, you can get an <xref:System.Xml.Schema.XmlSchemaObject>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XElement>, the type will be <xref:System.Xml.Schema.XmlSchemaElement>.  \\n  \\n    -   If you get an <xref:System.Xml.Schema.XmlSchemaObject> for an <xref:System.Xml.Linq.XAttribute>, the type will be <xref:System.Xml.Schema.XmlSchemaAttribute>.  \\n  \\n After you have an instance of an <xref:System.Xml.Schema.XmlSchemaObject>, you can use this method to validate a sub-tree..\"\n  example:\n  - \"```csharp  \\n  \\n                string xsdMarkup =  \\n    @\\\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n       <xsd:element name='Root'>  \\n        <xsd:complexType>  \\n         <xsd:sequence>  \\n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \\n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \\n           <xsd:complexType>  \\n            <xsd:simpleContent>  \\n             <xsd:extension base='xsd:string'>  \\n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \\n             </xsd:extension>  \\n            </xsd:simpleContent>  \\n           </xsd:complexType>  \\n          </xsd:element>  \\n         </xsd:sequence>  \\n        </xsd:complexType>  \\n       </xsd:element>  \\n      </xsd:schema>\\\";  \\nXmlSchemaSet schemas = new XmlSchemaSet();  \\nschemas.Add(\\\"\\\", XmlReader.Create(new StringReader(xsdMarkup)));  \\n  \\nXDocument doc1 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"c1\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"c2\\\")  \\n    )  \\n);  \\n  \\nXDocument doc2 = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XElement(\\\"Child1\\\", \\\"content1\\\"),  \\n        new XElement(\\\"Child3\\\", \\\"content1\\\")  \\n    )  \\n);  \\n  \\nConsole.WriteLine(\\\"Validating doc1\\\");  \\nbool errors = false;  \\ndoc1.Validate(schemas, (o, e) =>  \\n                     {  \\n                         Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                         errors = true;  \\n                     }, true);  \\nConsole.WriteLine(\\\"doc1 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Validating doc2\\\");  \\nerrors = false;  \\ndoc2.Validate(schemas, (o, e) =>  \\n                     {  \\n                         Console.WriteLine(\\\"{0}\\\", e.Message);  \\n                         errors = true;  \\n                     }, true);  \\nConsole.WriteLine(\\\"doc2 {0}\\\", errors ? \\\"did not validate\\\" : \\\"validated\\\");  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Contents of doc1:\\\");  \\nConsole.WriteLine(doc1);  \\n  \\nConsole.WriteLine();  \\nConsole.WriteLine(\\\"Contents of doc2:\\\");  \\nConsole.WriteLine(doc2);  \\n```  \\n  \\n```vb  \\n  \\n                Dim errors As Boolean = False  \\n  \\nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \\n    Console.WriteLine(\\\"{0}\\\", e.Message)  \\n    errors = True  \\nEnd Sub  \\n  \\nSub Main()  \\n    Dim xsdMarkup As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \\n            <xsd:element name='Root'>  \\n                <xsd:complexType>  \\n                    <xsd:sequence>  \\n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \\n                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \\n                            <xsd:complexType>  \\n                                <xsd:simpleContent>  \\n                                    <xsd:extension base='xsd:string'>  \\n                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  \\n                                    </xsd:extension>  \\n                                </xsd:simpleContent>  \\n                            </xsd:complexType>  \\n                        </xsd:element>  \\n                    </xsd:sequence>  \\n                </xsd:complexType>  \\n            </xsd:element>  \\n        </xsd:schema>  \\n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \\n    schemas.Add(\\\"\\\", xsdMarkup.CreateReader)  \\n  \\n    Dim doc1 As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <Root>  \\n            <Child1>c1</Child1>  \\n            <Child2>c2</Child2>  \\n        </Root>  \\n  \\n    Dim doc2 As XDocument = _  \\n        <?xml version='1.0'?>  \\n        <Root>  \\n            <Child1>content1</Child1>  \\n            <Child3>content1</Child3>  \\n        </Root>  \\n  \\n    Console.WriteLine(\\\"Validating doc1\\\")  \\n    errors = False  \\n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc1 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Validating doc2\\\")  \\n    errors = False  \\n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \\n    Console.WriteLine(\\\"doc2 {0}\\\", IIf(errors, \\\"did not validate\\\", \\\"validated\\\"))  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Contents of doc1:\\\")  \\n    Console.WriteLine(doc1)  \\n  \\n    Console.WriteLine()  \\n    Console.WriteLine(\\\"Contents of doc2:\\\")  \\n    Console.WriteLine(doc2)  \\nEnd Sub  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\nValidating doc1  \\ndoc1 validated  \\n  \\nValidating doc2  \\nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \\ndoc2 did not validate  \\n  \\nContents of doc1:  \\n<Root>  \\n  <Child1>c1</Child1>  \\n  <Child2 Att1=\\\"Att1 Default Value\\\">c2</Child2>  \\n</Root>  \\n  \\nContents of doc2:  \\n<Root>  \\n  <Child1>content1</Child1>  \\n  <Child3>content1</Child3>  \\n</Root>  \\n```\"\n  syntax:\n    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);\n    parameters:\n    - id: source\n      type: System.Xml.Linq.XElement\n      description: The <xref href=\"System.Xml.Linq.XElement\"></xref> to validate.\n    - id: partialValidationType\n      type: System.Xml.Schema.XmlSchemaObject\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaObject\"></xref> that specifies the sub-tree to validate.\n    - id: schemas\n      type: System.Xml.Schema.XmlSchemaSet\n      description: An <xref href=\"System.Xml.Schema.XmlSchemaSet\"></xref> to validate against.\n    - id: validationEventHandler\n      type: System.Xml.Schema.ValidationEventHandler\n      description: A <xref href=\"System.Xml.Schema.ValidationEventHandler\"></xref> for an event that occurs when the reader encounters validation errors. If `null`, throws an exception upon validation errors.\n    - id: addSchemaInfo\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> indicating whether to populate the post-schema-validation infoset (PSVI).\n  overload: System.Xml.Schema.Extensions.Validate*\n  exceptions:\n  - type: System.Xml.Schema.XmlSchemaValidationException\n    commentId: T:System.Xml.Schema.XmlSchemaValidationException\n    description: Thrown for XML Schema Definition Language (XSD) validation errors.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Schema.XmlSchemaValidationException\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaValidationException\n  nameWithType: XmlSchemaValidationException\n  fullName: System.Xml.Schema.XmlSchemaValidationException\n- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: GetSchemaInfo(XAttribute)\n  nameWithType: Extensions.GetSchemaInfo(XAttribute)\n  fullName: Extensions.GetSchemaInfo(XAttribute)\n- uid: System.Xml.Schema.IXmlSchemaInfo\n  parent: System.Xml.Schema\n  isExternal: false\n  name: IXmlSchemaInfo\n  nameWithType: IXmlSchemaInfo\n  fullName: System.Xml.Schema.IXmlSchemaInfo\n- uid: System.Xml.Linq.XAttribute\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XAttribute\n  nameWithType: XAttribute\n  fullName: System.Xml.Linq.XAttribute\n- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: GetSchemaInfo(XElement)\n  nameWithType: Extensions.GetSchemaInfo(XElement)\n  fullName: Extensions.GetSchemaInfo(XElement)\n- uid: System.Xml.Linq.XElement\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XElement\n  nameWithType: XElement\n  fullName: System.Xml.Linq.XElement\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler)\n- uid: System.Xml.Linq.XDocument\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XDocument\n  nameWithType: XDocument\n  fullName: System.Xml.Linq.XDocument\n- uid: System.Xml.Schema.XmlSchemaSet\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaSet\n  nameWithType: XmlSchemaSet\n  fullName: System.Xml.Schema.XmlSchemaSet\n- uid: System.Xml.Schema.ValidationEventHandler\n  parent: System.Xml.Schema\n  isExternal: false\n  name: ValidationEventHandler\n  nameWithType: ValidationEventHandler\n  fullName: System.Xml.Schema.ValidationEventHandler\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n- uid: System.Xml.Schema.XmlSchemaObject\n  parent: System.Xml.Schema\n  isExternal: false\n  name: XmlSchemaObject\n  nameWithType: XmlSchemaObject\n  fullName: System.Xml.Schema.XmlSchemaObject\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XDocument, XmlSchemaSet, ValidationEventHandler, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler)\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XAttribute, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  nameWithType: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n  fullName: Extensions.Validate(XElement, XmlSchemaObject, XmlSchemaSet, ValidationEventHandler, Boolean)\n- uid: System.Xml.Schema.Extensions.GetSchemaInfo*\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: GetSchemaInfo\n  nameWithType: Extensions.GetSchemaInfo\n  fullName: Extensions.GetSchemaInfo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n- uid: System.Xml.Schema.Extensions.Validate*\n  parent: System.Xml.Schema.Extensions\n  isExternal: false\n  name: Validate\n  nameWithType: Extensions.Validate\n  fullName: Extensions.Validate\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/Extensions.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}