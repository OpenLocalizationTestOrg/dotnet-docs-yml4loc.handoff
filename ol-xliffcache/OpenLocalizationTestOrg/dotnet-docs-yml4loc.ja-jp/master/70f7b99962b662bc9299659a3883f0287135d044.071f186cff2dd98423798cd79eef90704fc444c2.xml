{"nodes":[{"content":"Contains a list of the schema names that the <xref href=\"System.DirectoryServices.DirectoryEntries.SchemaFilter\"></xref> property of a <xref href=\"System.DirectoryServices.DirectoryEntries\"></xref> object can use.","nodes":[{"pos":[0,213],"content":"Contains a list of the schema names that the <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.DirectoryEntries.SchemaFilter\"&gt;&lt;/xref&gt;</ph> property of a <ph id=\"ph2\">&lt;xref href=\"System.DirectoryServices.DirectoryEntries\"&gt;&lt;/xref&gt;</ph> object can use.","source":"Contains a list of the schema names that the <xref href=\"System.DirectoryServices.DirectoryEntries.SchemaFilter\"></xref> property of a <xref href=\"System.DirectoryServices.DirectoryEntries\"></xref> object can use."}],"pos":[2465,2679],"yaml":true},{"content":"Appends a specified schema name to this collection.","nodes":[{"pos":[0,51],"content":"Appends a specified schema name to this collection.","nodes":[{"content":"Appends a specified schema name to this collection.","pos":[0,51]}]}],"pos":[4460,4512],"yaml":true},{"content":"The schema name to add to this collection.","nodes":[{"pos":[0,42],"content":"The schema name to add to this collection.","nodes":[{"content":"The schema name to add to this collection.","pos":[0,42]}]}],"pos":[4643,4686],"yaml":true},{"content":"The zero-based index of the specified property value. If the object is not found, the return value is -1.","nodes":[{"pos":[0,105],"content":"The zero-based index of the specified property value. If the object is not found, the return value is -1.","nodes":[{"content":"The zero-based index of the specified property value. If the object is not found, the return value is -1.","pos":[0,105],"nodes":[{"content":"The zero-based index of the specified property value.","pos":[0,53]},{"content":"If the object is not found, the return value is -1.","pos":[54,105]}]}]}],"pos":[4742,4848],"yaml":true},{"content":"Appends a set of specified schema names to this collection.","nodes":[{"pos":[0,59],"content":"Appends a set of specified schema names to this collection.","nodes":[{"content":"Appends a set of specified schema names to this collection.","pos":[0,59]}]}],"pos":[6117,6177],"yaml":true},{"content":"A <xref href=\"System.DirectoryServices.SchemaNameCollection\"></xref> that contains the schema names to add.","nodes":[{"pos":[0,107],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SchemaNameCollection\"&gt;&lt;/xref&gt;</ph> that contains the schema names to add.","source":"A <xref href=\"System.DirectoryServices.SchemaNameCollection\"></xref> that contains the schema names to add."}],"pos":[6385,6493],"yaml":true},{"content":"Appends a set of specified schema names to this collection.","nodes":[{"pos":[0,59],"content":"Appends a set of specified schema names to this collection.","nodes":[{"content":"Appends a set of specified schema names to this collection.","pos":[0,59]}]}],"pos":[7641,7701],"yaml":true},{"content":"An array of type <xref href=\"System.String\"></xref> that contains the schema names to add.","nodes":[{"pos":[0,90],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the schema names to add.","source":"An array of type <xref href=\"System.String\"></xref> that contains the schema names to add."}],"pos":[7842,7933],"yaml":true},{"content":"Removes all objects from this collection.","nodes":[{"pos":[0,41],"content":"Removes all objects from this collection.","nodes":[{"content":"Removes all objects from this collection.","pos":[0,41]}]}],"pos":[8988,9030],"yaml":true},{"content":"Determines whether this collection contains a specified schema name.","nodes":[{"pos":[0,68],"content":"Determines whether this collection contains a specified schema name.","nodes":[{"content":"Determines whether this collection contains a specified schema name.","pos":[0,68]}]}],"pos":[10227,10296],"yaml":true},{"content":"The schema name to search for.","nodes":[{"pos":[0,30],"content":"The schema name to search for.","nodes":[{"content":"The schema name to search for.","pos":[0,30]}]}],"pos":[10433,10464],"yaml":true},{"content":"The return value is `true` if the specified property belongs to this collection; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"The return value is <ph id=\"ph1\">`true`</ph> if the specified property belongs to this collection; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"The return value is `true` if the specified property belongs to this collection; otherwise, `false`."}],"pos":[10522,10623],"yaml":true},{"content":"Copies the schema names from this collection to an array, starting at a particular index of the array.","nodes":[{"pos":[0,102],"content":"Copies the schema names from this collection to an array, starting at a particular index of the array.","nodes":[{"content":"Copies the schema names from this collection to an array, starting at a particular index of the array.","pos":[0,102]}]}],"pos":[11819,11922],"yaml":true},{"content":"An array of type <xref href=\"System.String\"></xref> that receives this collection's schema names.","nodes":[{"pos":[0,97],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that receives this collection's schema names.","source":"An array of type <xref href=\"System.String\"></xref> that receives this collection's schema names."}],"pos":[12084,12182],"yaml":true},{"content":"The zero-based array index at which to begin copying the schema names.","nodes":[{"pos":[0,70],"content":"The zero-based array index at which to begin copying the schema names.","nodes":[{"content":"The zero-based array index at which to begin copying the schema names.","pos":[0,70]}]}],"pos":[12242,12313],"yaml":true},{"content":"The <xref href=\"System.DirectoryServices.SchemaNameCollection.Count\"></xref> property gets the number of objects in this collection.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.SchemaNameCollection.Count\"&gt;&lt;/xref&gt;</ph> property gets the number of objects in this collection.","source":"The <xref href=\"System.DirectoryServices.SchemaNameCollection.Count\"></xref> property gets the number of objects in this collection."}],"pos":[13362,13495],"yaml":true},{"content":"The number of objects in this collection.","nodes":[{"pos":[0,41],"content":"The number of objects in this collection.","nodes":[{"content":"The number of objects in this collection.","pos":[0,41]}]}],"pos":[13600,13642],"yaml":true},{"content":"Returns an enumerator that you can use to iterate through this collection.","nodes":[{"pos":[0,74],"content":"Returns an enumerator that you can use to iterate through this collection.","nodes":[{"content":"Returns an enumerator that you can use to iterate through this collection.","pos":[0,74]}]}],"pos":[14742,14817],"yaml":true},{"content":"An enumerator that you can used to iterate through this collection.","nodes":[{"pos":[0,67],"content":"An enumerator that you can used to iterate through this collection.","nodes":[{"content":"An enumerator that you can used to iterate through this collection.","pos":[0,67]}]}],"pos":[14989,15057],"yaml":true},{"content":"Determines the index of a specified schema name in this collection.","nodes":[{"pos":[0,67],"content":"Determines the index of a specified schema name in this collection.","nodes":[{"content":"Determines the index of a specified schema name in this collection.","pos":[0,67]}]}],"pos":[16192,16260],"yaml":true},{"content":"The schema name to search for.","nodes":[{"pos":[0,30],"content":"The schema name to search for.","nodes":[{"content":"The schema name to search for.","pos":[0,30]}]}],"pos":[16395,16426],"yaml":true},{"content":"The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.","nodes":[{"pos":[0,108],"content":"The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.","nodes":[{"content":"The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.","pos":[0,108]}]}],"pos":[16482,16591],"yaml":true},{"content":"Inserts a schema name into this collection at a specified index.","nodes":[{"pos":[0,64],"content":"Inserts a schema name into this collection at a specified index.","nodes":[{"content":"Inserts a schema name into this collection at a specified index.","pos":[0,64]}]}],"pos":[17774,17839],"yaml":true},{"content":"If the `index` parameter equals the number of items in the collection, this method appends the value to the end of the collection.","nodes":[{"pos":[0,130],"content":"If the <ph id=\"ph1\">`index`</ph> parameter equals the number of items in the collection, this method appends the value to the end of the collection.","source":"If the `index` parameter equals the number of items in the collection, this method appends the value to the end of the collection."}],"pos":[17850,17981],"yaml":true,"extradata":"MT"},{"content":"The zero-based index into the collection at which to insert the schema name.","nodes":[{"pos":[0,76],"content":"The zero-based index into the collection at which to insert the schema name.","nodes":[{"content":"The zero-based index into the collection at which to insert the schema name.","pos":[0,76]}]}],"pos":[18126,18203],"yaml":true},{"content":"The schema name to insert into this collection.","nodes":[{"pos":[0,47],"content":"The schema name to insert into this collection.","nodes":[{"content":"The schema name to insert into this collection.","pos":[0,47]}]}],"pos":[18264,18312],"yaml":true},{"content":"Gets or sets the object that exists at a specified index.","nodes":[{"pos":[0,57],"content":"Gets or sets the object that exists at a specified index.","nodes":[{"content":"Gets or sets the object that exists at a specified index.","pos":[0,57]}]}],"pos":[19418,19476],"yaml":true},{"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class.  \n  \n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>.","nodes":[{"pos":[0,103],"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class.","nodes":[{"content":"In C#, this property is the indexer for the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.SchemaNameCollection&gt;</ph> class.","pos":[0,103],"source":"In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class."}]},{"pos":[110,396],"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>.","nodes":[{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>.","pos":[0,286],"nodes":[{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.","pos":[0,116]},{"content":"However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>.","pos":[117,286],"source":" However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>."}]}]}],"pos":[19487,19888],"yaml":true,"extradata":"MT"},{"content":"The zero-based index into the collection.","nodes":[{"pos":[0,41],"content":"The zero-based index into the collection.","nodes":[{"content":"The zero-based index into the collection.","pos":[0,41]}]}],"pos":[20031,20073],"yaml":true},{"content":"The object that exists at the specified index.","nodes":[{"pos":[0,46],"content":"The object that exists at the specified index.","nodes":[{"content":"The object that exists at the specified index.","pos":[0,46]}]}],"pos":[20130,20177],"yaml":true},{"content":"Removes a specified schema name from this collection.","nodes":[{"pos":[0,53],"content":"Removes a specified schema name from this collection.","nodes":[{"content":"Removes a specified schema name from this collection.","pos":[0,53]}]}],"pos":[21297,21351],"yaml":true},{"content":"The schema name to remove.","nodes":[{"pos":[0,26],"content":"The schema name to remove.","nodes":[{"content":"The schema name to remove.","pos":[0,26]}]}],"pos":[21486,21513],"yaml":true},{"content":"Removes the schema name that is at a specified index from this collection.","nodes":[{"pos":[0,74],"content":"Removes the schema name that is at a specified index from this collection.","nodes":[{"content":"Removes the schema name that is at a specified index from this collection.","pos":[0,74]}]}],"pos":[22641,22716],"yaml":true},{"content":"The zero-based index of the schema name to remove.","nodes":[{"pos":[0,50],"content":"The zero-based index of the schema name to remove.","nodes":[{"content":"The zero-based index of the schema name to remove.","pos":[0,50]}]}],"pos":[22849,22900],"yaml":true},{"content":"The zero-based index is either less than zero or equal to the size of the collection.","nodes":[{"pos":[0,85],"content":"The zero-based index is either less than zero or equal to the size of the collection.","nodes":[{"content":"The zero-based index is either less than zero or equal to the size of the collection.","pos":[0,85]}]}],"pos":[23090,23176],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.","nodes":[{"pos":[0,185],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to an <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at a particular <ph id=\"ph3\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> index.","source":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index."}],"pos":[24412,24598],"yaml":true},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,227],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,158],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[159,227],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[24747,24975],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[25035,25103],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[25316,25346],"yaml":true},{"content":"<code>index</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."}],"pos":[25460,25498],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,255],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}],"pos":[25592,25856],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,154],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[25956,26111],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,128],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe)."}],"pos":[27274,27403],"yaml":true},{"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```csharp  \nICollection myCollection = new ICollection();  \n  lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```","nodes":[{"pos":[0,154],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,154],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>."}]},{"pos":[161,362],"content":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","nodes":[{"content":"Most collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","pos":[0,201],"source":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection."}]},{"pos":[369,767],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[774,792],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[799,944],"content":"The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:","nodes":[{"content":"The following example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> during the entire enumeration:","pos":[0,145],"source":"The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:"}]}],"pos":[27414,28782],"yaml":true,"extradata":"MT"},{"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`."}],"pos":[28923,29052],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[30301,30415],"yaml":true},{"content":"For collections with an underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \n  \n In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \n  \n```csharp  \nICollection MyCollection =...  \n lock(MyCollection.SyncRoot) {  \n  // Some operation on the collection, which is now thread safe.  \n }  \n```  \n  \n```vb  \nDim myCollection as New ICollection()  \n SyncLock myCollection.SyncRoot  \n  ' Some operation on the collection, which is now thread safe.  \n End SyncLock  \n```  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```csharp  \nICollection myCollection = new ICollection();  \n lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```","nodes":[{"pos":[0,314],"content":"For collections with an underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.","nodes":[{"content":"For collections with an underlying store is not publicly available, the expected implementation is to return the current instance.","pos":[0,130]},{"content":"Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's <ph id=\"ph1\">`SyncRoot`</ph> property.","pos":[131,314],"source":" Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property."}]},{"pos":[321,1050],"content":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","nodes":[{"content":"Most collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespace also implement a <ph id=\"ph2\">`Synchronized`</ph> method, which provides a synchronized wrapper around the underlying collection.","pos":[0,203],"source":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection."},{"content":"However, derived classes can provide their own synchronized version of the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.","pos":[204,359],"source":" However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> of the collection, not directly on the collection.","pos":[360,514],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[515,596]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[597,729]}]},{"pos":[1057,1205],"content":"In the absence of a <ph id=\"ph1\">`Synchronized`</ph> method on a collection, the expected usage for <ph id=\"ph2\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> looks like this:","source":"In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:"},{"pos":[1543,1941],"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[1948,1966],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[1973,2118],"content":"The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:","nodes":[{"content":"The following example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> during the entire enumeration:","pos":[0,145],"source":"The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:"}]}],"pos":[30426,32983],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,108],"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[33119,33228],"yaml":true},{"content":"Adds an item to the list.","nodes":[{"pos":[0,25],"content":"Adds an item to the list.","nodes":[{"content":"Adds an item to the list.","pos":[0,25]}]}],"pos":[34472,34498],"yaml":true},{"content":"The item to add to the list.","nodes":[{"pos":[0,28],"content":"The item to add to the list.","nodes":[{"content":"The item to add to the list.","pos":[0,28]}]}],"pos":[34628,34657],"yaml":true},{"content":"The position into which the new item was inserted.","nodes":[{"pos":[0,50],"content":"The position into which the new item was inserted.","nodes":[{"content":"The position into which the new item was inserted.","pos":[0,50]}]}],"pos":[34713,34764],"yaml":true},{"content":"Determines whether the list contains a specified value.","nodes":[{"pos":[0,55],"content":"Determines whether the list contains a specified value.","nodes":[{"content":"Determines whether the list contains a specified value.","pos":[0,55]}]}],"pos":[36027,36083],"yaml":true},{"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","nodes":[{"pos":[0,327],"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","pos":[0,327],"nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.","pos":[0,154]},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","pos":[155,327]}]}]}],"pos":[36094,36422],"yaml":true,"extradata":"MT"},{"content":"The value to locate in the list.","nodes":[{"pos":[0,32],"content":"The value to locate in the list.","nodes":[{"content":"The value to locate in the list.","pos":[0,32]}]}],"pos":[36558,36591],"yaml":true},{"content":"`true` if the value is found in the list, otherwise `false`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">`true`</ph> if the value is found in the list, otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the value is found in the list, otherwise `false`."}],"pos":[36649,36712],"yaml":true},{"content":"Determines the index of a specified item in the list.","nodes":[{"pos":[0,53],"content":"Determines the index of a specified item in the list.","nodes":[{"content":"Determines the index of a specified item in the list.","pos":[0,53]}]}],"pos":[37974,38028],"yaml":true},{"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","nodes":[{"pos":[0,327],"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","pos":[0,327],"nodes":[{"content":"Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.","pos":[0,154]},{"content":"In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.","pos":[155,327]}]}]}],"pos":[38039,38367],"yaml":true,"extradata":"MT"},{"content":"The item to locate in the list.","nodes":[{"pos":[0,31],"content":"The item to locate in the list.","nodes":[{"content":"The item to locate in the list.","pos":[0,31]}]}],"pos":[38501,38533],"yaml":true},{"content":"The index of <code>value</code> if found in the list; otherwise, -1.","nodes":[{"pos":[0,68],"content":"The index of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> if found in the list; otherwise, -1.","source":"The index of <code>value</code> if found in the list; otherwise, -1."}],"pos":[38589,38658],"yaml":true},{"content":"Inserts an item to the list at the specified index.","nodes":[{"pos":[0,51],"content":"Inserts an item to the list at the specified index.","nodes":[{"content":"Inserts an item to the list at the specified index.","pos":[0,51]}]}],"pos":[39973,40025],"yaml":true},{"content":"If `index` equals the number of items in the list, then *value* is appended to the end.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.","nodes":[{"pos":[0,87],"content":"If <ph id=\"ph1\">`index`</ph> equals the number of items in the list, then <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept> is appended to the end.","source":"If `index` equals the number of items in the list, then *value* is appended to the end."},{"pos":[94,319],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[0,225],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]}]}]}],"pos":[40036,40360],"yaml":true,"extradata":"MT"},{"content":"The zero-based index at which value should be inserted.","nodes":[{"pos":[0,55],"content":"The zero-based index at which value should be inserted.","nodes":[{"content":"The zero-based index at which value should be inserted.","pos":[0,55]}]}],"pos":[40504,40560],"yaml":true},{"content":"The item to insert into the list.","nodes":[{"pos":[0,33],"content":"The item to insert into the list.","nodes":[{"content":"The item to insert into the list.","pos":[0,33]}]}],"pos":[40621,40655],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> has a fixed size.","nodes":[{"pos":[0,99],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> has a fixed size."}],"pos":[41872,41972],"yaml":true},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","nodes":[{"pos":[0,167],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.","pos":[0,167]}]}],"pos":[41983,42151],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IList\"></xref> has a fixed size; otherwise, `false`.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IList\"></xref> has a fixed size; otherwise, `false`."}],"pos":[42283,42383],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> is read-only.","nodes":[{"pos":[0,95],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> is read-only."}],"pos":[43599,43695],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]}],"pos":[43706,43836],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IList\"></xref> is read-only; otherwise, `false`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IList\"></xref> is read-only; otherwise, `false`."}],"pos":[43967,44063],"yaml":true},{"content":"Gets or sets the element at the specified index.","nodes":[{"pos":[0,48],"content":"Gets or sets the element at the specified index.","nodes":[{"content":"Gets or sets the element at the specified index.","pos":[0,48]}]}],"pos":[45305,45354],"yaml":true},{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.","nodes":[{"pos":[0,135],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[index]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`."}],"pos":[45365,45503],"yaml":true,"extradata":"MT"},{"content":"The zero-based index of the element to get or set.","nodes":[{"pos":[0,50],"content":"The zero-based index of the element to get or set.","nodes":[{"content":"The zero-based index of the element to get or set.","pos":[0,50]}]}],"pos":[45664,45715],"yaml":true},{"content":"The element at the specified index.","nodes":[{"pos":[0,35],"content":"The element at the specified index.","nodes":[{"content":"The element at the specified index.","pos":[0,35]}]}],"pos":[45772,45808],"yaml":true},{"content":"<code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is not a valid index in the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>."}],"pos":[46025,46119],"yaml":true},{"content":"The property is set and the <xref href=\"System.Collections.IList\"></xref> is read-only.","nodes":[{"pos":[0,87],"content":"The property is set and the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IList\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The property is set and the <xref href=\"System.Collections.IList\"></xref> is read-only."}],"pos":[46221,46309],"yaml":true},{"content":"Removes the first occurrence of a specific <code>value</code> from the list.","nodes":[{"pos":[0,76],"content":"Removes the first occurrence of a specific <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> from the list.","source":"Removes the first occurrence of a specific <code>value</code> from the list."}],"pos":[47455,47532],"yaml":true},{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.","nodes":[{"pos":[0,225],"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.","nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[0,225],"nodes":[{"content":"In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.","pos":[0,134]},{"content":"If the collection is indexed, the indexes of the elements that are moved are also updated.","pos":[135,225]}]}]}],"pos":[47543,47769],"yaml":true,"extradata":"MT"},{"content":"The <code>value</code> to remove from the list.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to remove from the list.","source":"The <code>value</code> to remove from the list."}],"pos":[47903,47951],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.SchemaNameCollection\n  commentId: T:System.DirectoryServices.SchemaNameCollection\n  id: SchemaNameCollection\n  children:\n  - System.DirectoryServices.SchemaNameCollection.Add(System.String)\n  - System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)\n  - System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])\n  - System.DirectoryServices.SchemaNameCollection.Clear\n  - System.DirectoryServices.SchemaNameCollection.Contains(System.String)\n  - System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)\n  - System.DirectoryServices.SchemaNameCollection.Count\n  - System.DirectoryServices.SchemaNameCollection.GetEnumerator\n  - System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)\n  - System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)\n  - System.DirectoryServices.SchemaNameCollection.Item(System.Int32)\n  - System.DirectoryServices.SchemaNameCollection.Remove(System.String)\n  - System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)\n  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: SchemaNameCollection\n  nameWithType: SchemaNameCollection\n  fullName: System.DirectoryServices.SchemaNameCollection\n  type: Class\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Contains a list of the schema names that the <xref href=\"System.DirectoryServices.DirectoryEntries.SchemaFilter\"></xref> property of a <xref href=\"System.DirectoryServices.DirectoryEntries\"></xref> object can use.\n  syntax:\n    content: 'public class SchemaNameCollection : System.Collections.IList'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.Add(System.String)\n  id: Add(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: Add(String)\n  nameWithType: SchemaNameCollection.Add(String)\n  fullName: SchemaNameCollection.Add(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Appends a specified schema name to this collection.\n  syntax:\n    content: public int Add (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The schema name to add to this collection.\n    return:\n      type: System.Int32\n      description: The zero-based index of the specified property value. If the object is not found, the return value is -1.\n  overload: System.DirectoryServices.SchemaNameCollection.Add*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)\n  id: AddRange(System.DirectoryServices.SchemaNameCollection)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: AddRange(SchemaNameCollection)\n  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)\n  fullName: SchemaNameCollection.AddRange(SchemaNameCollection)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Appends a set of specified schema names to this collection.\n  syntax:\n    content: public void AddRange (System.DirectoryServices.SchemaNameCollection value);\n    parameters:\n    - id: value\n      type: System.DirectoryServices.SchemaNameCollection\n      description: A <xref href=\"System.DirectoryServices.SchemaNameCollection\"></xref> that contains the schema names to add.\n  overload: System.DirectoryServices.SchemaNameCollection.AddRange*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])\n  commentId: M:System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])\n  id: AddRange(System.String[])\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: AddRange(String[])\n  nameWithType: SchemaNameCollection.AddRange(String[])\n  fullName: SchemaNameCollection.AddRange(String[])\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Appends a set of specified schema names to this collection.\n  syntax:\n    content: public void AddRange (string[] value);\n    parameters:\n    - id: value\n      type: System.String[]\n      description: An array of type <xref href=\"System.String\"></xref> that contains the schema names to add.\n  overload: System.DirectoryServices.SchemaNameCollection.AddRange*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.Clear\n  commentId: M:System.DirectoryServices.SchemaNameCollection.Clear\n  id: Clear\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: SchemaNameCollection.Clear()\n  fullName: SchemaNameCollection.Clear()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes all objects from this collection.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.DirectoryServices.SchemaNameCollection.Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: SchemaNameCollection.Contains(String)\n  fullName: SchemaNameCollection.Contains(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines whether this collection contains a specified schema name.\n  syntax:\n    content: public bool Contains (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The schema name to search for.\n    return:\n      type: System.Boolean\n      description: The return value is `true` if the specified property belongs to this collection; otherwise, `false`.\n  overload: System.DirectoryServices.SchemaNameCollection.Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)\n  id: CopyTo(System.String[],System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: CopyTo(String[], Int32)\n  nameWithType: SchemaNameCollection.CopyTo(String[], Int32)\n  fullName: SchemaNameCollection.CopyTo(String[], Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the schema names from this collection to an array, starting at a particular index of the array.\n  syntax:\n    content: public void CopyTo (string[] stringArray, int index);\n    parameters:\n    - id: stringArray\n      type: System.String[]\n      description: An array of type <xref href=\"System.String\"></xref> that receives this collection's schema names.\n    - id: index\n      type: System.Int32\n      description: The zero-based array index at which to begin copying the schema names.\n  overload: System.DirectoryServices.SchemaNameCollection.CopyTo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.Count\n  commentId: P:System.DirectoryServices.SchemaNameCollection.Count\n  id: Count\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SchemaNameCollection.Count\n  fullName: SchemaNameCollection.Count\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: The <xref href=\"System.DirectoryServices.SchemaNameCollection.Count\"></xref> property gets the number of objects in this collection.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of objects in this collection.\n  overload: System.DirectoryServices.SchemaNameCollection.Count*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator\n  commentId: M:System.DirectoryServices.SchemaNameCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: SchemaNameCollection.GetEnumerator()\n  fullName: SchemaNameCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an enumerator that you can use to iterate through this collection.\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An enumerator that you can used to iterate through this collection.\n  overload: System.DirectoryServices.SchemaNameCollection.GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)\n  id: IndexOf(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IndexOf(String)\n  nameWithType: SchemaNameCollection.IndexOf(String)\n  fullName: SchemaNameCollection.IndexOf(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines the index of a specified schema name in this collection.\n  syntax:\n    content: public int IndexOf (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The schema name to search for.\n    return:\n      type: System.Int32\n      description: The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.\n  overload: System.DirectoryServices.SchemaNameCollection.IndexOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)\n  id: Insert(System.Int32,System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: Insert(Int32, String)\n  nameWithType: SchemaNameCollection.Insert(Int32, String)\n  fullName: SchemaNameCollection.Insert(Int32, String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Inserts a schema name into this collection at a specified index.\n  remarks: If the `index` parameter equals the number of items in the collection, this method appends the value to the end of the collection.\n  syntax:\n    content: public void Insert (int index, string value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index into the collection at which to insert the schema name.\n    - id: value\n      type: System.String\n      description: The schema name to insert into this collection.\n  overload: System.DirectoryServices.SchemaNameCollection.Insert*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)\n  commentId: P:System.DirectoryServices.SchemaNameCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: SchemaNameCollection.Item(Int32)\n  fullName: SchemaNameCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets the object that exists at a specified index.\n  remarks: \"In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class.  \\n  \\n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>.\"\n  syntax:\n    content: public string this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index into the collection.\n    return:\n      type: System.String\n      description: The object that exists at the specified index.\n  overload: System.DirectoryServices.SchemaNameCollection.Item*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: SchemaNameCollection.Remove(String)\n  fullName: SchemaNameCollection.Remove(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes a specified schema name from this collection.\n  syntax:\n    content: public void Remove (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The schema name to remove.\n  overload: System.DirectoryServices.SchemaNameCollection.Remove*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: SchemaNameCollection.RemoveAt(Int32)\n  fullName: SchemaNameCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes the schema name that is at a specified index from this collection.\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the schema name to remove.\n  overload: System.DirectoryServices.SchemaNameCollection.RemoveAt*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The zero-based index is either less than zero or equal to the size of the collection.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SchemaNameCollection.ICollection.CopyTo(Array, Int32)\n  fullName: SchemaNameCollection.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: SchemaNameCollection.ICollection.IsSynchronized\n  fullName: SchemaNameCollection.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```csharp  \\nICollection myCollection = new ICollection();  \\n  lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.'\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: SchemaNameCollection.ICollection.SyncRoot\n  fullName: SchemaNameCollection.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  remarks: \"For collections with an underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \\n  \\n In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \\n  \\n```csharp  \\nICollection MyCollection =...  \\n lock(MyCollection.SyncRoot) {  \\n  // Some operation on the collection, which is now thread safe.  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection as New ICollection()  \\n SyncLock myCollection.SyncRoot  \\n  ' Some operation on the collection, which is now thread safe.  \\n End SyncLock  \\n```  \\n  \\n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```csharp  \\nICollection myCollection = new ICollection();  \\n lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.Add(Object)\n  nameWithType: SchemaNameCollection.IList.Add(Object)\n  fullName: SchemaNameCollection.IList.Add(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Adds an item to the list.\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The item to add to the list.\n    return:\n      type: System.Int32\n      description: The position into which the new item was inserted.\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.Contains(Object)\n  nameWithType: SchemaNameCollection.IList.Contains(Object)\n  fullName: SchemaNameCollection.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines whether the list contains a specified value.\n  remarks: Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The value to locate in the list.\n    return:\n      type: System.Boolean\n      description: '`true` if the value is found in the list, otherwise `false`.'\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.IndexOf(Object)\n  nameWithType: SchemaNameCollection.IList.IndexOf(Object)\n  fullName: SchemaNameCollection.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines the index of a specified item in the list.\n  remarks: Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The item to locate in the list.\n    return:\n      type: System.Int32\n      description: The index of <code>value</code> if found in the list; otherwise, -1.\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.Insert(Int32, Object)\n  nameWithType: SchemaNameCollection.IList.Insert(Int32, Object)\n  fullName: SchemaNameCollection.IList.Insert(Int32, Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Inserts an item to the list at the specified index.\n  remarks: \"If `index` equals the number of items in the list, then *value* is appended to the end.  \\n  \\n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.\"\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index at which value should be inserted.\n    - id: value\n      type: System.Object\n      description: The item to insert into the list.\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.IsFixedSize\n  nameWithType: SchemaNameCollection.IList.IsFixedSize\n  fullName: SchemaNameCollection.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> has a fixed size.\n  remarks: A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IList\"></xref> has a fixed size; otherwise, `false`.'\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly\n  commentId: P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.IsReadOnly\n  nameWithType: SchemaNameCollection.IList.IsReadOnly\n  fullName: SchemaNameCollection.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IList\"></xref> is read-only.\n  remarks: A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IList\"></xref> is read-only; otherwise, `false`.'\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.Item(Int32)\n  nameWithType: SchemaNameCollection.IList.Item(Int32)\n  fullName: SchemaNameCollection.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets the element at the specified index.\n  remarks: 'This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.'\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to get or set.\n    return:\n      type: System.Object\n      description: The element at the specified index.\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is not a valid index in the <xref href=\"System.Collections.IList\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The property is set and the <xref href=\"System.Collections.IList\"></xref> is read-only.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.SchemaNameCollection\n  langs:\n  - csharp\n  name: IList.Remove(Object)\n  nameWithType: SchemaNameCollection.IList.Remove(Object)\n  fullName: SchemaNameCollection.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes the first occurrence of a specific <code>value</code> from the list.\n  remarks: In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The <code>value</code> to remove from the list.\n  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Add(String)\n  nameWithType: SchemaNameCollection.Add(String)\n  fullName: SchemaNameCollection.Add(String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: AddRange(SchemaNameCollection)\n  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)\n  fullName: SchemaNameCollection.AddRange(SchemaNameCollection)\n- uid: System.DirectoryServices.SchemaNameCollection\n  parent: System.DirectoryServices\n  isExternal: false\n  name: SchemaNameCollection\n  nameWithType: SchemaNameCollection\n  fullName: System.DirectoryServices.SchemaNameCollection\n- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: AddRange(String[])\n  nameWithType: SchemaNameCollection.AddRange(String[])\n  fullName: SchemaNameCollection.AddRange(String[])\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.DirectoryServices.SchemaNameCollection.Clear\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: SchemaNameCollection.Clear()\n  fullName: SchemaNameCollection.Clear()\n- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Contains(String)\n  nameWithType: SchemaNameCollection.Contains(String)\n  fullName: SchemaNameCollection.Contains(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: CopyTo(String[], Int32)\n  nameWithType: SchemaNameCollection.CopyTo(String[], Int32)\n  fullName: SchemaNameCollection.CopyTo(String[], Int32)\n- uid: System.DirectoryServices.SchemaNameCollection.Count\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Count\n  nameWithType: SchemaNameCollection.Count\n  fullName: SchemaNameCollection.Count\n- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: SchemaNameCollection.GetEnumerator()\n  fullName: SchemaNameCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IndexOf(String)\n  nameWithType: SchemaNameCollection.IndexOf(String)\n  fullName: SchemaNameCollection.IndexOf(String)\n- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Insert(Int32, String)\n  nameWithType: SchemaNameCollection.Insert(Int32, String)\n  fullName: SchemaNameCollection.Insert(Int32, String)\n- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: SchemaNameCollection.Item(Int32)\n  fullName: SchemaNameCollection.Item(Int32)\n- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Remove(String)\n  nameWithType: SchemaNameCollection.Remove(String)\n  fullName: SchemaNameCollection.Remove(String)\n- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: SchemaNameCollection.RemoveAt(Int32)\n  fullName: SchemaNameCollection.RemoveAt(Int32)\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: SchemaNameCollection.ICollection.CopyTo(Array, Int32)\n  fullName: SchemaNameCollection.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: SchemaNameCollection.ICollection.IsSynchronized\n  fullName: SchemaNameCollection.ICollection.IsSynchronized\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: SchemaNameCollection.ICollection.SyncRoot\n  fullName: SchemaNameCollection.ICollection.SyncRoot\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.Add(Object)\n  nameWithType: SchemaNameCollection.IList.Add(Object)\n  fullName: SchemaNameCollection.IList.Add(Object)\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.Contains(Object)\n  nameWithType: SchemaNameCollection.IList.Contains(Object)\n  fullName: SchemaNameCollection.IList.Contains(Object)\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.IndexOf(Object)\n  nameWithType: SchemaNameCollection.IList.IndexOf(Object)\n  fullName: SchemaNameCollection.IList.IndexOf(Object)\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.Insert(Int32, Object)\n  nameWithType: SchemaNameCollection.IList.Insert(Int32, Object)\n  fullName: SchemaNameCollection.IList.Insert(Int32, Object)\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.IsFixedSize\n  nameWithType: SchemaNameCollection.IList.IsFixedSize\n  fullName: SchemaNameCollection.IList.IsFixedSize\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.IsReadOnly\n  nameWithType: SchemaNameCollection.IList.IsReadOnly\n  fullName: SchemaNameCollection.IList.IsReadOnly\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.Item(Int32)\n  nameWithType: SchemaNameCollection.IList.Item(Int32)\n  fullName: SchemaNameCollection.IList.Item(Int32)\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IList.Remove(Object)\n  nameWithType: SchemaNameCollection.IList.Remove(Object)\n  fullName: SchemaNameCollection.IList.Remove(Object)\n- uid: System.DirectoryServices.SchemaNameCollection.Add*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Add\n  nameWithType: SchemaNameCollection.Add\n  fullName: SchemaNameCollection.Add\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.AddRange*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: AddRange\n  nameWithType: SchemaNameCollection.AddRange\n  fullName: SchemaNameCollection.AddRange\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.Clear*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Clear\n  nameWithType: SchemaNameCollection.Clear\n  fullName: SchemaNameCollection.Clear\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.Contains*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Contains\n  nameWithType: SchemaNameCollection.Contains\n  fullName: SchemaNameCollection.Contains\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.CopyTo*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: SchemaNameCollection.CopyTo\n  fullName: SchemaNameCollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.Count*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Count\n  nameWithType: SchemaNameCollection.Count\n  fullName: SchemaNameCollection.Count\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: SchemaNameCollection.GetEnumerator\n  fullName: SchemaNameCollection.GetEnumerator\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.IndexOf*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: IndexOf\n  nameWithType: SchemaNameCollection.IndexOf\n  fullName: SchemaNameCollection.IndexOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.Insert*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Insert\n  nameWithType: SchemaNameCollection.Insert\n  fullName: SchemaNameCollection.Insert\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.Item*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Item\n  nameWithType: SchemaNameCollection.Item\n  fullName: SchemaNameCollection.Item\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.Remove*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: Remove\n  nameWithType: SchemaNameCollection.Remove\n  fullName: SchemaNameCollection.Remove\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: RemoveAt\n  nameWithType: SchemaNameCollection.RemoveAt\n  fullName: SchemaNameCollection.RemoveAt\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo\n  fullName: SchemaNameCollection.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized\n  fullName: SchemaNameCollection.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot\n  fullName: SchemaNameCollection.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.Add\n  nameWithType: SchemaNameCollection.System.Collections.IList.Add\n  fullName: SchemaNameCollection.System.Collections.IList.Add\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.Contains\n  nameWithType: SchemaNameCollection.System.Collections.IList.Contains\n  fullName: SchemaNameCollection.System.Collections.IList.Contains\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf\n  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf\n  fullName: SchemaNameCollection.System.Collections.IList.IndexOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.Insert\n  nameWithType: SchemaNameCollection.System.Collections.IList.Insert\n  fullName: SchemaNameCollection.System.Collections.IList.Insert\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize\n  fullName: SchemaNameCollection.System.Collections.IList.IsFixedSize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly\n  fullName: SchemaNameCollection.System.Collections.IList.IsReadOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.Item\n  nameWithType: SchemaNameCollection.System.Collections.IList.Item\n  fullName: SchemaNameCollection.System.Collections.IList.Item\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*\n  parent: System.DirectoryServices.SchemaNameCollection\n  isExternal: false\n  name: System.Collections.IList.Remove\n  nameWithType: SchemaNameCollection.System.Collections.IList.Remove\n  fullName: SchemaNameCollection.System.Collections.IList.Remove\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/SchemaNameCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n"}