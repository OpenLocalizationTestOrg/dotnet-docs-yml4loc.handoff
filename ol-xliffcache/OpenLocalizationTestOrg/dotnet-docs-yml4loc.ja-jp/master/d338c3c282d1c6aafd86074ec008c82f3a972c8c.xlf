<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d338c3c282d1c6aafd86074ec008c82f3a972c8c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.ComponentResourceKey.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55e97ff63a5d35f677a75db88b896422cb502de9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa37284f33db8ea56ad2637a2dcbf23aed387fd8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class implements an object type that is useful for creating keys that are based on types in assemblies plus an identifier.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because you define or reference the type, you do not need to request a specific <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, and more than one set of resources can exist in the assembly, each differentiated by the type of their <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are two ways to define a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want an easily accessible key, you can define a static property on your control class code that returns a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>, constructed with a <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> that exists in the external resource assembly, and a <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The key can be used for defining alternate default styles for controls in an assembly, by swapping the original external resource assembly for a custom one.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also define a named resource part within a larger control style or template to expose a customization entry point.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is particularly useful if you are defining a theme resource dictionary for your control.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also use the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> in verbose syntax directly to create a loose instance of the key.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful if you want to declare private resources from other assemblies that are less discoverable to customize.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default constructor is not generally used, because a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> value and <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value are required for proper initialization.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default constructor exists primarily to support <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in named parameter form.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a <ph id="ph1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;&lt;/xref&gt;</ph> , specifying the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that defines the key, and an object to use as an additional resource identifier.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor exist for two scenarios, with the first scenario being the most important:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Supports creating a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> that is then exposed as a public static field on a custom control class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This simplifies a control's access to its own defined resources in the template through <ph id="ph1">`{x:Static}`</ph> usages for template property values.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Supports <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept> XAML usage in positional parameter form, which is one technique available for third parties that reference a component resource.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type that defines the resource key.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A unique identifier to differentiate this <ph id="ph1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;&lt;/xref&gt;</ph> from others associated with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">typeInTargetAssembly</ph><ept id="p1">&lt;/code&gt;</ept> type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The retrieved assembly, as a reflection class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Determines whether the provided object is equal to the current <ph id="ph1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two keys are equal if they both have the same values for all their immediate settable properties (<ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Object to compare with the current <ph id="ph1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the objects are equal; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns a hash code for this <ph id="ph1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A signed 32-bit integer value.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets or sets a unique identifier to differentiate this key from others associated with this type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the string used for a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> value conforms to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A unique identifier.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Typically this is a string.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the string representation of a <ph id="ph1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The string representation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that defines the resource key.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/docs/framework/wpf/advanced/componentresourcekey-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> element is used by custom components to define keys for resources that are accessed from external assemblies, based on targeting an assembly that contains the type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom components often define new types which must be in the assembly where the resource is located.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally these types have no other implementation, the types only exist in order to satisfy the lookup requirements of a <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The type that defines the resource key.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>