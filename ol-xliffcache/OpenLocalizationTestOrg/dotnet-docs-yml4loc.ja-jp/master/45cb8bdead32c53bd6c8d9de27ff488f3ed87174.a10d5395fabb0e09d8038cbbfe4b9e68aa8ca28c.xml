{"nodes":[{"content":"Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.","nodes":[{"pos":[0,110],"content":"Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.","nodes":[{"content":"Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.","pos":[0,110]}]}],"pos":[1093,1204],"yaml":true},{"content":"Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>.","nodes":[{"pos":[0,171],"content":"Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>.","nodes":[{"content":"Asymmetric signature deformatters verify the digital signatures that are created using implementations of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter&gt;</ph>.","pos":[0,171],"source":"Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>."}]}],"pos":[1215,1387],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref>.","nodes":[{"pos":[0,111],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref>."}],"pos":[3453,3565],"yaml":true},{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \n  \n Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","nodes":[{"pos":[0,115],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","pos":[0,115],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]}]}]},{"pos":[122,469],"content":"Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","nodes":[{"content":"Use implementations of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A&gt;</ph> to set the key and hash algorithm before calling an implementation of <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A&gt;</ph>.","pos":[0,347],"source":"Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."}]}],"pos":[3576,4050],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, sets the hash algorithm to use for verifying the signature.","nodes":[{"pos":[0,95],"content":"When overridden in a derived class, sets the hash algorithm to use for verifying the signature.","nodes":[{"content":"When overridden in a derived class, sets the hash algorithm to use for verifying the signature.","pos":[0,95]}]}],"pos":[5648,5744],"yaml":true},{"content":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","nodes":[{"pos":[0,152],"content":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","nodes":[{"content":"You must set a hash algorithm before calling an implementation of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A&gt;</ph>.","pos":[0,152],"source":"You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."}]}],"pos":[5755,5908],"yaml":true,"extradata":"MT"},{"content":"The name of the hash algorithm to use for verifying the signature.","nodes":[{"pos":[0,66],"content":"The name of the hash algorithm to use for verifying the signature.","nodes":[{"content":"The name of the hash algorithm to use for verifying the signature.","pos":[0,66]}]}],"pos":[6066,6133],"yaml":true},{"content":"When overridden in a derived class, sets the public key to use for verifying the signature.","nodes":[{"pos":[0,91],"content":"When overridden in a derived class, sets the public key to use for verifying the signature.","nodes":[{"content":"When overridden in a derived class, sets the public key to use for verifying the signature.","pos":[0,91]}]}],"pos":[7739,7831],"yaml":true},{"content":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","nodes":[{"pos":[0,141],"content":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.","nodes":[{"content":"You must set a key before calling an implementation of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A&gt;</ph>.","pos":[0,141],"source":"You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>."}]}],"pos":[7842,7984],"yaml":true,"extradata":"MT"},{"content":"The instance of an implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that holds the public key.","nodes":[{"pos":[0,133],"content":"The instance of an implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"&gt;&lt;/xref&gt;</ph> that holds the public key.","source":"The instance of an implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that holds the public key."}],"pos":[8201,8335],"yaml":true},{"content":"When overridden in a derived class, verifies the signature for the specified data.","nodes":[{"pos":[0,82],"content":"When overridden in a derived class, verifies the signature for the specified data.","nodes":[{"content":"When overridden in a derived class, verifies the signature for the specified data.","pos":[0,82]}]}],"pos":[9907,9990],"yaml":true},{"content":"You must specify a public key and a hash algorithm before calling this method.","nodes":[{"pos":[0,78],"content":"You must specify a public key and a hash algorithm before calling this method.","nodes":[{"content":"You must specify a public key and a hash algorithm before calling this method.","pos":[0,78]}]}],"pos":[10001,10080],"yaml":true,"extradata":"MT"},{"content":"The data signed with <code>rgbSignature</code>.","nodes":[{"pos":[0,47],"content":"The data signed with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The data signed with <code>rgbSignature</code>."}],"pos":[10258,10306],"yaml":true},{"content":"The signature to be verified for <code>rgbHash</code>.","nodes":[{"pos":[0,54],"content":"The signature to be verified for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The signature to be verified for <code>rgbHash</code>."}],"pos":[10374,10429],"yaml":true},{"content":"`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.","nodes":[{"pos":[0,154],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> matches the signature computed using the specified hash algorithm and key on <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">rgbHash</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`."}],"pos":[10487,10644],"yaml":true},{"content":"Verifies the signature from the specified hash value.","nodes":[{"pos":[0,53],"content":"Verifies the signature from the specified hash value.","nodes":[{"content":"Verifies the signature from the specified hash value.","pos":[0,53]}]}],"pos":[12333,12387],"yaml":true},{"content":"This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.","nodes":[{"pos":[0,112],"content":"This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.","nodes":[{"content":"This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.","pos":[0,112]}]}],"pos":[12398,12511],"yaml":true,"extradata":"MT"},{"content":"The hash algorithm to use to verify the signature.","nodes":[{"pos":[0,50],"content":"The hash algorithm to use to verify the signature.","nodes":[{"content":"The hash algorithm to use to verify the signature.","pos":[0,50]}]}],"pos":[12747,12798],"yaml":true},{"content":"The signature to be verified.","nodes":[{"pos":[0,29],"content":"The signature to be verified.","nodes":[{"content":"The signature to be verified.","pos":[0,29]}]}],"pos":[12866,12896],"yaml":true},{"content":"`true` if the signature is valid for the hash; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the signature is valid for the hash; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature is valid for the hash; otherwise, `false`."}],"pos":[12954,13023],"yaml":true},{"content":"The <code>hash</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hash</code> parameter is `null`."}],"pos":[13228,13271],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  commentId: T:System.Security.Cryptography.AsymmetricSignatureDeformatter\n  id: AsymmetricSignatureDeformatter\n  children:\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  langs:\n  - csharp\n  name: AsymmetricSignatureDeformatter\n  nameWithType: AsymmetricSignatureDeformatter\n  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Represents the abstract base class from which all implementations of asymmetric signature deformatters derive.\n  remarks: Asymmetric signature deformatters verify the digital signatures that are created using implementations of <xref:System.Security.Cryptography.AsymmetricSignatureFormatter>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class AsymmetricSignatureDeformatter\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Security.Cryptography.DSASignatureDeformatter\n  - System.Security.Cryptography.RSAPKCS1SignatureDeformatter\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: AsymmetricSignatureDeformatter()\n  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n  fullName: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of <xref href=\"System.Security.Cryptography.AsymmetricSignatureDeformatter\"></xref>.\n  remarks: \"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \\n  \\n Use implementations of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey%2A> and <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm%2A> to set the key and hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.\"\n  syntax:\n    content: protected AsymmetricSignatureDeformatter ();\n    parameters: []\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)\n  id: SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n  fullName: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the hash algorithm to use for verifying the signature.\n  remarks: You must set a hash algorithm before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.\n  syntax:\n    content: public abstract void SetHashAlgorithm (string strName);\n    parameters:\n    - id: strName\n      type: System.String\n      description: The name of the hash algorithm to use for verifying the signature.\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n  fullName: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, sets the public key to use for verifying the signature.\n  remarks: You must set a key before calling an implementation of <xref:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature%2A>.\n  syntax:\n    content: public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The instance of an implementation of <xref href=\"System.Security.Cryptography.AsymmetricAlgorithm\"></xref> that holds the public key.\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])\n  fullName: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: When overridden in a derived class, verifies the signature for the specified data.\n  remarks: You must specify a public key and a hash algorithm before calling this method.\n  syntax:\n    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data signed with <code>rgbSignature</code>.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature to be verified for <code>rgbHash</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.'\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  commentId: M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  id: VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  langs:\n  - csharp\n  name: VerifySignature(HashAlgorithm, Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])\n  fullName: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Verifies the signature from the specified hash value.\n  remarks: This method sets the hash algorithm to be used before verifying the signature of the input hash algorithm value.\n  syntax:\n    content: public virtual bool VerifySignature (System.Security.Cryptography.HashAlgorithm hash, byte[] rgbSignature);\n    parameters:\n    - id: hash\n      type: System.Security.Cryptography.HashAlgorithm\n      description: The hash algorithm to use to verify the signature.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature is valid for the hash; otherwise, `false`.'\n  overload: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hash</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: AsymmetricSignatureDeformatter()\n  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n  fullName: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter()\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetHashAlgorithm(String)\n  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n  fullName: AsymmetricSignatureDeformatter.SetHashAlgorithm(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n  fullName: AsymmetricSignatureDeformatter.SetKey(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])\n  fullName: AsymmetricSignatureDeformatter.VerifySignature(Byte[], Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: VerifySignature(HashAlgorithm, Byte[])\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])\n  fullName: AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: AsymmetricSignatureDeformatter\n  nameWithType: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter\n  fullName: AsymmetricSignatureDeformatter.AsymmetricSignatureDeformatter\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetHashAlgorithm\n  nameWithType: AsymmetricSignatureDeformatter.SetHashAlgorithm\n  fullName: AsymmetricSignatureDeformatter.SetHashAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: SetKey\n  nameWithType: AsymmetricSignatureDeformatter.SetKey\n  fullName: AsymmetricSignatureDeformatter.SetKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature*\n  parent: System.Security.Cryptography.AsymmetricSignatureDeformatter\n  isExternal: false\n  name: VerifySignature\n  nameWithType: AsymmetricSignatureDeformatter.VerifySignature\n  fullName: AsymmetricSignatureDeformatter.VerifySignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/AsymmetricSignatureDeformatter.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}