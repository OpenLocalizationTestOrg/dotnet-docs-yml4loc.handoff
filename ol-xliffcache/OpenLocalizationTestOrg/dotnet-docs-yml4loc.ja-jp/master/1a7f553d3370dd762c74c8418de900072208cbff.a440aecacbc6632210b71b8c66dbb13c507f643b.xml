{"nodes":[{"content":"Specifies the garbage collection settings for the current process.","nodes":[{"pos":[0,66],"content":"Specifies the garbage collection settings for the current process.","nodes":[{"content":"Specifies the garbage collection settings for the current process.","pos":[0,66]}]}],"pos":[501,568],"yaml":true},{"content":"Use the <xref:System.Runtime.GCSettings.IsServerGC%2A> property to determine whether server garbage collection is enabled for the current process.","nodes":[{"pos":[0,146],"content":"Use the <xref:System.Runtime.GCSettings.IsServerGC%2A> property to determine whether server garbage collection is enabled for the current process.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Runtime.GCSettings.IsServerGC%2A&gt;</ph> property to determine whether server garbage collection is enabled for the current process.","pos":[0,146],"source":"Use the <xref:System.Runtime.GCSettings.IsServerGC%2A> property to determine whether server garbage collection is enabled for the current process."}]}],"pos":[579,726],"yaml":true,"extradata":"MT"},{"content":"Gets a value that indicates whether server garbage collection is enabled.","nodes":[{"pos":[0,73],"content":"Gets a value that indicates whether server garbage collection is enabled.","nodes":[{"content":"Gets a value that indicates whether server garbage collection is enabled.","pos":[0,73]}]}],"pos":[2568,2642],"yaml":true},{"content":"For information about server garbage collection, see the \"Workstation and Server Garbage Collection\" section in [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md).  \n  \n If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection). Server garbage collection is available only on multiprocessor computers.  \n  \n An unmanaged host can request server garbage collection, and the host request overrides configuration file settings. If the host does not specify the type of garbage collection, you can use a configuration file setting to specify server garbage collection. This setting is valid only in the application configuration file, not in the machine configuration file (see [Configuring Apps](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)). The following example shows the contents of a sample application configuration file that enables server garbage collection.  \n  \n```  \n<configuration>  \n  <runtime>  \n    <gcServer enabled=\"true\" />  \n  </runtime>  \n</configuration>  \n```","nodes":[{"pos":[0,201],"content":"For information about server garbage collection, see the \"Workstation and Server Garbage Collection\" section in <bpt id=\"p1\">[</bpt>Fundamentals of Garbage Collection<ept id=\"p1\">](~/docs/standard/garbage-collection/fundamentals.md)</ept>.","source":"For information about server garbage collection, see the \"Workstation and Server Garbage Collection\" section in [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md)."},{"pos":[208,410],"content":"If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection). Server garbage collection is available only on multiprocessor computers.","nodes":[{"content":"If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection). Server garbage collection is available only on multiprocessor computers.","pos":[0,202],"nodes":[{"content":"If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection).","pos":[0,129]},{"content":"Server garbage collection is available only on multiprocessor computers.","pos":[130,202]}]}]},{"pos":[417,999],"content":"An unmanaged host can request server garbage collection, and the host request overrides configuration file settings. If the host does not specify the type of garbage collection, you can use a configuration file setting to specify server garbage collection. This setting is valid only in the application configuration file, not in the machine configuration file (see [Configuring Apps](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)). The following example shows the contents of a sample application configuration file that enables server garbage collection.","nodes":[{"content":"An unmanaged host can request server garbage collection, and the host request overrides configuration file settings.","pos":[0,116]},{"content":"If the host does not specify the type of garbage collection, you can use a configuration file setting to specify server garbage collection.","pos":[117,256]},{"content":"This setting is valid only in the application configuration file, not in the machine configuration file (see <bpt id=\"p1\">[</bpt>Configuring Apps<ept id=\"p1\">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>).","pos":[257,458],"source":" This setting is valid only in the application configuration file, not in the machine configuration file (see [Configuring Apps](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f))."},{"content":"The following example shows the contents of a sample application configuration file that enables server garbage collection.","pos":[459,582]}]}],"pos":[2653,3786],"yaml":true,"extradata":"MT"},{"content":"`true` if server garbage collection is enabled; otherwise, `false`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if server garbage collection is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if server garbage collection is enabled; otherwise, `false`."}],"pos":[4281,4351],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH).","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,181],"content":"Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH).","nodes":[{"content":"Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH).","pos":[0,116]}]}],"pos":[5976,6162],"yaml":true},{"content":"The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes. Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects. However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance. In this case, it is possible to use the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to compact rather than simply sweep the LOH during a garbage collection.  \n  \n The default value of the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, which indicates that the LOH is not compacted during garbage collections. If you assign the property a value of <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  Background garbage collections are not blocking. This means that, if you set the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, any background generation 2 collections that occur subsequently do not compact the LOH. Only the first blocking generation 2 collection compacts the LOH.  \n  \n After the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time. You can compact the LOH immediately by using code like the following:  \n  \n [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]\n [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]","nodes":[{"pos":[0,741],"content":"The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes. Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects. However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance. In this case, it is possible to use the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to compact rather than simply sweep the LOH during a garbage collection.","nodes":[{"content":"The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes. Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects. However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance. In this case, it is possible to use the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to compact rather than simply sweep the LOH during a garbage collection.","pos":[0,741],"nodes":[{"content":"The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes.","pos":[0,109]},{"content":"Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects.","pos":[110,413]},{"content":"However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance.","pos":[414,553]},{"content":"In this case, it is possible to use the <ph id=\"ph1\">&lt;xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A&gt;</ph> property to compact rather than simply sweep the LOH during a garbage collection.","pos":[554,741],"source":" In this case, it is possible to use the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to compact rather than simply sweep the LOH during a garbage collection."}]}]},{"pos":[748,1308],"content":"The default value of the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, which indicates that the LOH is not compacted during garbage collections. If you assign the property a value of <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>.","nodes":[{"content":"The default value of the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, which indicates that the LOH is not compacted during garbage collections. If you assign the property a value of <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>.","pos":[0,560],"nodes":[{"content":"The default value of the <ph id=\"ph1\">&lt;xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A&gt;</ph> property is <ph id=\"ph2\">&lt;xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName&gt;</ph>, which indicates that the LOH is not compacted during garbage collections.","pos":[0,256],"source":"The default value of the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, which indicates that the LOH is not compacted during garbage collections."},{"content":"If you assign the property a value of <ph id=\"ph1\">&lt;xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName&gt;</ph>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <ph id=\"ph2\">&lt;xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName&gt;</ph>.","pos":[257,560],"source":" If you assign the property a value of <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>."}]}]},{"pos":[1316,1719],"content":"[!NOTE]\n Background garbage collections are not blocking. This means that, if you set the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, any background generation 2 collections that occur subsequently do not compact the LOH. Only the first blocking generation 2 collection compacts the LOH.","leadings":["","> "],"nodes":[{"content":" Background garbage collections are not blocking. This means that, if you set the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, any background generation 2 collections that occur subsequently do not compact the LOH. Only the first blocking generation 2 collection compacts the LOH.","pos":[8,401],"nodes":[{"content":"Background garbage collections are not blocking.","pos":[1,49]},{"content":"This means that, if you set the <ph id=\"ph1\">&lt;xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A&gt;</ph> property to <ph id=\"ph2\">&lt;xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName&gt;</ph>, any background generation 2 collections that occur subsequently do not compact the LOH.","pos":[50,327],"source":" This means that, if you set the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, any background generation 2 collections that occur subsequently do not compact the LOH."},{"content":"Only the first blocking generation 2 collection compacts the LOH.","pos":[328,393]}]}]},{"pos":[1726,2080],"content":"After the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time. You can compact the LOH immediately by using code like the following:","nodes":[{"content":"After the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time. You can compact the LOH immediately by using code like the following:","pos":[0,354],"nodes":[{"content":"After the <ph id=\"ph1\">&lt;xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName&gt;</ph>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time.","pos":[0,284],"source":"After the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time."},{"content":"You can compact the LOH immediately by using code like the following:","pos":[285,354]}]}]},{"pos":[2087,2382],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Runtime.GCSettings#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Runtime.GCSettings#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]\n [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]"}],"pos":[6173,8568],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.","nodes":[{"pos":[0,105],"content":"One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.","nodes":[{"content":"One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.","pos":[0,105]}]}],"pos":[9171,9277],"yaml":true},{"content":"Gets or sets the current latency mode for garbage collection.","nodes":[{"pos":[0,61],"content":"Gets or sets the current latency mode for garbage collection.","nodes":[{"content":"Gets or sets the current latency mode for garbage collection.","pos":[0,61]}]}],"pos":[10851,10913],"yaml":true},{"content":"You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCLatencyMode> to <xref:System.Runtime.GCLatencyMode.LowLatency> during critical operations. After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory.  \n  \n Ordinarily, you set the value of the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to define the garbage collector's latency mode. However, you cannot set the no GC region latency mode by assigning the <xref:System.Runtime.GCLatencyMode?displayProperty=fullName> enumeration value to the <xref:System.Runtime.GCSettings.LatencyMode%2A> property. Instead, you call the <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName> method to begin the no GC region latency mode, and you call the <xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName> to end it.  \n  \n See [Latency Modes](~/docs/standard/garbage-collection/latency.md) for a discussion of how the runtime configuration settings for garbage collection affect the default value of the <xref:System.Runtime.GCLatencyMode> enumeration.","nodes":[{"pos":[0,339],"content":"You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCLatencyMode> to <xref:System.Runtime.GCLatencyMode.LowLatency> during critical operations. After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory.","nodes":[{"content":"You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCLatencyMode> to <xref:System.Runtime.GCLatencyMode.LowLatency> during critical operations. After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory.","pos":[0,339],"nodes":[{"content":"You can reduce the level of intrusiveness of garbage collection in your application by setting the <ph id=\"ph1\">&lt;xref:System.Runtime.GCLatencyMode&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Runtime.GCLatencyMode.LowLatency&gt;</ph> during critical operations.","pos":[0,212],"source":"You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCLatencyMode> to <xref:System.Runtime.GCLatencyMode.LowLatency> during critical operations."},{"content":"After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory.","pos":[213,339]}]}]},{"pos":[346,922],"content":"Ordinarily, you set the value of the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to define the garbage collector's latency mode. However, you cannot set the no GC region latency mode by assigning the <xref:System.Runtime.GCLatencyMode?displayProperty=fullName> enumeration value to the <xref:System.Runtime.GCSettings.LatencyMode%2A> property. Instead, you call the <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName> method to begin the no GC region latency mode, and you call the <xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName> to end it.","nodes":[{"content":"Ordinarily, you set the value of the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to define the garbage collector's latency mode. However, you cannot set the no GC region latency mode by assigning the <xref:System.Runtime.GCLatencyMode?displayProperty=fullName> enumeration value to the <xref:System.Runtime.GCSettings.LatencyMode%2A> property. Instead, you call the <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName> method to begin the no GC region latency mode, and you call the <xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName> to end it.","pos":[0,576],"nodes":[{"content":"Ordinarily, you set the value of the <ph id=\"ph1\">&lt;xref:System.Runtime.GCSettings.LatencyMode%2A&gt;</ph> property to define the garbage collector's latency mode.","pos":[0,141],"source":"Ordinarily, you set the value of the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to define the garbage collector's latency mode."},{"content":"However, you cannot set the no GC region latency mode by assigning the <ph id=\"ph1\">&lt;xref:System.Runtime.GCLatencyMode?displayProperty=fullName&gt;</ph> enumeration value to the <ph id=\"ph2\">&lt;xref:System.Runtime.GCSettings.LatencyMode%2A&gt;</ph> property.","pos":[142,356],"source":" However, you cannot set the no GC region latency mode by assigning the <xref:System.Runtime.GCLatencyMode?displayProperty=fullName> enumeration value to the <xref:System.Runtime.GCSettings.LatencyMode%2A> property."},{"content":"Instead, you call the <ph id=\"ph1\">&lt;xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName&gt;</ph> method to begin the no GC region latency mode, and you call the <ph id=\"ph2\">&lt;xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName&gt;</ph> to end it.","pos":[357,576],"source":" Instead, you call the <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName> method to begin the no GC region latency mode, and you call the <xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName> to end it."}]}]},{"pos":[929,1158],"content":"See <bpt id=\"p1\">[</bpt>Latency Modes<ept id=\"p1\">](~/docs/standard/garbage-collection/latency.md)</ept> for a discussion of how the runtime configuration settings for garbage collection affect the default value of the <ph id=\"ph1\">&lt;xref:System.Runtime.GCLatencyMode&gt;</ph> enumeration.","source":"See [Latency Modes](~/docs/standard/garbage-collection/latency.md) for a discussion of how the runtime configuration settings for garbage collection affect the default value of the <xref:System.Runtime.GCLatencyMode> enumeration."}],"pos":[10924,12089],"yaml":true,"extradata":"MT"},{"content":"One of the enumeration values that specifies the latency mode.","nodes":[{"pos":[0,62],"content":"One of the enumeration values that specifies the latency mode.","nodes":[{"content":"One of the enumeration values that specifies the latency mode.","pos":[0,62]}]}],"pos":[12638,12701],"yaml":true},{"content":"The <xref href=\"System.Runtime.GCSettings.LatencyMode\"></xref> property is being set to an invalid value.  \n  \n -or-  \n  \n The <xref href=\"System.Runtime.GCSettings.LatencyMode\"></xref> property cannot be set to <xref href=\"System.Runtime.GCLatencyMode.NoGCRegion\"></xref>.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.GCSettings.LatencyMode\"&gt;&lt;/xref&gt;</ph> property is being set to an invalid value.","source":"The <xref href=\"System.Runtime.GCSettings.LatencyMode\"></xref> property is being set to an invalid value."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,273],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.GCSettings.LatencyMode\"&gt;&lt;/xref&gt;</ph> property cannot be set to <ph id=\"ph2\">&lt;xref href=\"System.Runtime.GCLatencyMode.NoGCRegion\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Runtime.GCSettings.LatencyMode\"></xref> property cannot be set to <xref href=\"System.Runtime.GCLatencyMode.NoGCRegion\"></xref>."}],"pos":[12880,13166],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.GCSettings\n  commentId: T:System.Runtime.GCSettings\n  id: GCSettings\n  children:\n  - System.Runtime.GCSettings.IsServerGC\n  - System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  - System.Runtime.GCSettings.LatencyMode\n  langs:\n  - csharp\n  name: GCSettings\n  nameWithType: GCSettings\n  fullName: System.Runtime.GCSettings\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime\n  summary: Specifies the garbage collection settings for the current process.\n  remarks: Use the <xref:System.Runtime.GCSettings.IsServerGC%2A> property to determine whether server garbage collection is enabled for the current process.\n  syntax:\n    content: public static class GCSettings\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.GCSettings.IsServerGC\n  commentId: P:System.Runtime.GCSettings.IsServerGC\n  id: IsServerGC\n  parent: System.Runtime.GCSettings\n  langs:\n  - csharp\n  name: IsServerGC\n  nameWithType: GCSettings.IsServerGC\n  fullName: GCSettings.IsServerGC\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime\n  summary: Gets a value that indicates whether server garbage collection is enabled.\n  remarks: \"For information about server garbage collection, see the \\\"Workstation and Server Garbage Collection\\\" section in [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md).  \\n  \\n If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection). Server garbage collection is available only on multiprocessor computers.  \\n  \\n An unmanaged host can request server garbage collection, and the host request overrides configuration file settings. If the host does not specify the type of garbage collection, you can use a configuration file setting to specify server garbage collection. This setting is valid only in the application configuration file, not in the machine configuration file (see [Configuring Apps](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)). The following example shows the contents of a sample application configuration file that enables server garbage collection.  \\n  \\n```  \\n<configuration>  \\n  <runtime>  \\n    <gcServer enabled=\\\"true\\\" />  \\n  </runtime>  \\n</configuration>  \\n```\"\n  example:\n  - \"The following example indicates whether the host computer is using server or workstation garbage collection.  \\n  \\n [!code-csharp[Environment.IsServerGC#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.IsServerGC/CS/isg.cs#1)]\\n [!code-vb[Environment.IsServerGC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.IsServerGC/VB/isg.vb#1)]\"\n  syntax:\n    content: public static bool IsServerGC { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if server garbage collection is enabled; otherwise, `false`.'\n  overload: System.Runtime.GCSettings.IsServerGC*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  commentId: P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  id: LargeObjectHeapCompactionMode\n  parent: System.Runtime.GCSettings\n  langs:\n  - csharp\n  name: LargeObjectHeapCompactionMode\n  nameWithType: GCSettings.LargeObjectHeapCompactionMode\n  fullName: GCSettings.LargeObjectHeapCompactionMode\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH).\"\n  remarks: \"The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes. Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects. However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance. In this case, it is possible to use the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to compact rather than simply sweep the LOH during a garbage collection.  \\n  \\n The default value of the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, which indicates that the LOH is not compacted during garbage collections. If you assign the property a value of <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  Background garbage collections are not blocking. This means that, if you set the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, any background generation 2 collections that occur subsequently do not compact the LOH. Only the first blocking generation 2 collection compacts the LOH.  \\n  \\n After the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode?displayProperty=fullName>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time. You can compact the LOH immediately by using code like the following:  \\n  \\n [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]\\n [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]\"\n  syntax:\n    content: >-\n      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      [set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      public static System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get; set; }\n    return:\n      type: System.Runtime.GCLargeObjectHeapCompactionMode\n      description: One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH.\n  overload: System.Runtime.GCSettings.LargeObjectHeapCompactionMode*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  - type: 'set: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.GCSettings.LatencyMode\n  commentId: P:System.Runtime.GCSettings.LatencyMode\n  id: LatencyMode\n  parent: System.Runtime.GCSettings\n  langs:\n  - csharp\n  name: LatencyMode\n  nameWithType: GCSettings.LatencyMode\n  fullName: GCSettings.LatencyMode\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime\n  summary: Gets or sets the current latency mode for garbage collection.\n  remarks: \"You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCLatencyMode> to <xref:System.Runtime.GCLatencyMode.LowLatency> during critical operations. After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory.  \\n  \\n Ordinarily, you set the value of the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to define the garbage collector's latency mode. However, you cannot set the no GC region latency mode by assigning the <xref:System.Runtime.GCLatencyMode?displayProperty=fullName> enumeration value to the <xref:System.Runtime.GCSettings.LatencyMode%2A> property. Instead, you call the <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=fullName> method to begin the no GC region latency mode, and you call the <xref:System.GC.EndNoGCRegion%2A?displayProperty=fullName> to end it.  \\n  \\n See [Latency Modes](~/docs/standard/garbage-collection/latency.md) for a discussion of how the runtime configuration settings for garbage collection affect the default value of the <xref:System.Runtime.GCLatencyMode> enumeration.\"\n  syntax:\n    content: >-\n      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      [set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      public static System.Runtime.GCLatencyMode LatencyMode { get; set; }\n    return:\n      type: System.Runtime.GCLatencyMode\n      description: One of the enumeration values that specifies the latency mode.\n  overload: System.Runtime.GCSettings.LatencyMode*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <xref href=\\\"System.Runtime.GCSettings.LatencyMode\\\"></xref> property is being set to an invalid value.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Runtime.GCSettings.LatencyMode\\\"></xref> property cannot be set to <xref href=\\\"System.Runtime.GCLatencyMode.NoGCRegion\\\"></xref>.\"\n  attributes:\n  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  - type: 'set: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Runtime.GCSettings.IsServerGC\n  parent: System.Runtime.GCSettings\n  isExternal: false\n  name: IsServerGC\n  nameWithType: GCSettings.IsServerGC\n  fullName: GCSettings.IsServerGC\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode\n  parent: System.Runtime.GCSettings\n  isExternal: false\n  name: LargeObjectHeapCompactionMode\n  nameWithType: GCSettings.LargeObjectHeapCompactionMode\n  fullName: GCSettings.LargeObjectHeapCompactionMode\n- uid: System.Runtime.GCLargeObjectHeapCompactionMode\n  parent: System.Runtime\n  isExternal: false\n  name: GCLargeObjectHeapCompactionMode\n  nameWithType: GCLargeObjectHeapCompactionMode\n  fullName: System.Runtime.GCLargeObjectHeapCompactionMode\n- uid: System.Runtime.GCSettings.LatencyMode\n  parent: System.Runtime.GCSettings\n  isExternal: false\n  name: LatencyMode\n  nameWithType: GCSettings.LatencyMode\n  fullName: GCSettings.LatencyMode\n- uid: System.Runtime.GCLatencyMode\n  parent: System.Runtime\n  isExternal: false\n  name: GCLatencyMode\n  nameWithType: GCLatencyMode\n  fullName: System.Runtime.GCLatencyMode\n- uid: System.Runtime.GCSettings.IsServerGC*\n  parent: System.Runtime.GCSettings\n  isExternal: false\n  name: IsServerGC\n  nameWithType: GCSettings.IsServerGC\n  fullName: GCSettings.IsServerGC\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml\n- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode*\n  parent: System.Runtime.GCSettings\n  isExternal: false\n  name: LargeObjectHeapCompactionMode\n  nameWithType: GCSettings.LargeObjectHeapCompactionMode\n  fullName: GCSettings.LargeObjectHeapCompactionMode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml\n- uid: System.Runtime.GCSettings.LatencyMode*\n  parent: System.Runtime.GCSettings\n  isExternal: false\n  name: LatencyMode\n  nameWithType: GCSettings.LatencyMode\n  fullName: GCSettings.LatencyMode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime/GCSettings.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}