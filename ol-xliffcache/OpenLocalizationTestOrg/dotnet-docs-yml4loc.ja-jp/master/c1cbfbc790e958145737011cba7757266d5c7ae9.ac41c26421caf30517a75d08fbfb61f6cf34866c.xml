{"nodes":[{"content":"Provides User Datagram Protocol (UDP) network services.","nodes":[{"pos":[0,55],"content":"Provides User Datagram Protocol (UDP) network services.","nodes":[{"content":"Provides User Datagram Protocol (UDP) network services.","pos":[0,55]}]}],"pos":[3347,3403],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the <xref:System.Net.Sockets.UdpClient> class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the <xref:System.Net.Sockets.UdpClient> class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception.  \n  \n <xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group.","nodes":[{"pos":[0,402],"content":"The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:","nodes":[{"content":"The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:","pos":[0,402],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode.","pos":[0,154],"source":"The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode."},{"content":"Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data.","pos":[155,297]},{"content":"You do, however, have the option of establishing a default remote host in one of the following two ways:","pos":[298,402]}]}]},{"pos":[412,537],"content":"Create an instance of the <xref:System.Net.Sockets.UdpClient> class using the remote host name and port number as parameters.","nodes":[{"content":"Create an instance of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> class using the remote host name and port number as parameters.","pos":[0,125],"source":"Create an instance of the <xref:System.Net.Sockets.UdpClient> class using the remote host name and port number as parameters."}]},{"pos":[547,687],"content":"Create an instance of the <xref:System.Net.Sockets.UdpClient> class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.","nodes":[{"content":"Create an instance of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> class and then call the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[0,140],"source":"Create an instance of the <xref:System.Net.Sockets.UdpClient> class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."}]},{"pos":[694,911],"content":"You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.","nodes":[{"content":"You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.","pos":[0,217],"nodes":[{"content":"You can use any of the send methods provided in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to send data to a remote device.","pos":[0,120],"source":"You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method to receive data from remote hosts.","pos":[121,217],"source":" Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts."}]}]},{"pos":[919,1160],"content":"[!NOTE]\n Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception.","leadings":["","> "],"nodes":[{"content":" Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception.","pos":[8,239],"nodes":[{"content":"Do not call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> using a host name or <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint&gt;</ph> if you have already specified a default remote host.","pos":[1,159],"source":" Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host."},{"content":"If you do, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> will throw an exception.","pos":[160,231],"source":" If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception."}]}]},{"pos":[1167,1562],"content":"<xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group.","nodes":[{"content":"<xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group.","pos":[0,395],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> methods also allow you to send and receive multicast datagrams.","pos":[0,99],"source":"<xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method to subscribe a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to a multicast group.","pos":[100,245],"source":" Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method to unsubscribe a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> from a multicast group.","pos":[246,395],"source":" Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group."}]}]}],"pos":[3414,4990],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class."}],"pos":[7521,7612],"yaml":true},{"content":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.","nodes":[{"pos":[0,376],"content":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","nodes":[{"content":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","pos":[0,376],"nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number.","pos":[0,176],"source":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number."},{"content":"If this constructor is used, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","pos":[177,376],"source":" If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target."}]}]},{"pos":[384,732],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,346],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,338]}]}]},{"pos":[739,890],"content":"This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.","nodes":[{"content":"This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.","pos":[0,151],"nodes":[{"content":"This constructor is not suitable for joining a multicast group because it does not perform socket binding.","pos":[0,106]},{"content":"Also, it works only with IPv4 address types.","pos":[107,151]}]}]}],"pos":[7623,8521],"yaml":true,"extradata":"MT"},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[9483,9528],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided.","nodes":[{"pos":[0,137],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> class and binds it to the local port number provided.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided."}],"pos":[10818,10956],"yaml":true},{"content":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n This constructor works only with IPv4 address types.","nodes":[{"pos":[0,582],"content":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","nodes":[{"content":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","pos":[0,582],"nodes":[{"content":"This constructor creates an underlying <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and binds it to the port number from which you intend to communicate.","pos":[0,141],"source":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate."},{"content":"Use this constructor if you are only interested in setting the local port number.","pos":[142,223]},{"content":"The underlying service provider will assign the local IP address.","pos":[224,289]},{"content":"If you pass 0 to the constructor, the underlying service provider will assign a port number.","pos":[290,382]},{"content":"If this constructor is used, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.","pos":[383,582],"source":" If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target."}]}]},{"pos":[590,938],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,346],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,338]}]}]},{"pos":[945,997],"content":"This constructor works only with IPv4 address types.","nodes":[{"content":"This constructor works only with IPv4 address types.","pos":[0,52]}]}],"pos":[10967,11972],"yaml":true,"extradata":"MT"},{"content":"The local port number from which you intend to communicate.","nodes":[{"pos":[0,59],"content":"The local port number from which you intend to communicate.","nodes":[{"content":"The local port number from which you intend to communicate.","pos":[0,59]}]}],"pos":[12813,12873],"yaml":true},{"content":"The <code>port</code> parameter is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\"></xref>.","nodes":[{"pos":[0,163],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">port</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>port</code> parameter is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\"></xref>."}],"pos":[13049,13213],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[13327,13372],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the specified local endpoint.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> class and binds it to the specified local endpoint.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the specified local endpoint."}],"pos":[14704,14840],"yaml":true},{"content":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.  \n  \n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,528],"content":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.","nodes":[{"content":"This constructor creates a new <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> and binds it to the <ph id=\"ph2\">&lt;xref:System.Net.IPEndPoint&gt;</ph> specified by the <ph id=\"ph3\">`localEP`</ph> parameter.","pos":[0,153],"source":"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter."},{"content":"Before you call this constructor, you must create an <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the IP address and port number from which you intend to send and receive data.","pos":[154,320],"source":" Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data."},{"content":"You do not need to specify a local IP address and port number for sending and receiving data.","pos":[321,414]},{"content":"If you do not, the underlying service provider will assign the most appropriate local IP address and port number.","pos":[415,528]}]},{"pos":[535,777],"content":"If this constructor is used, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with the address family specified by the <ph id=\"ph2\">`localEP`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.","source":"If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family."},{"pos":[785,1133],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,346],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,338]}]}]}],"pos":[14851,15992],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.IPEndPoint\"></xref> that respresents the local endpoint to which you bind the UDP connection.","nodes":[{"pos":[0,119],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPEndPoint\"&gt;&lt;/xref&gt;</ph> that respresents the local endpoint to which you bind the UDP connection.","source":"An <xref href=\"System.Net.IPEndPoint\"></xref> that respresents the local endpoint to which you bind the UDP connection."}],"pos":[16867,16987],"yaml":true},{"content":"<code>localEP</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;localEP&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>localEP</code> is `null`."}],"pos":[17151,17183],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[17297,17342],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class."}],"pos":[18716,18807],"yaml":true},{"content":"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.  \n  \n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n The <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> is not suitable for joining a multicast group because it does not perform socket binding.","nodes":[{"pos":[0,404],"content":"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.","nodes":[{"content":"The <ph id=\"ph1\">`family`</ph> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.","pos":[0,125],"source":"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address."},{"content":"To use an IPv4 address, pass the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.AddressFamily.InterNetwork&gt;</ph> value.","pos":[126,218],"source":" To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value."},{"content":"To use an IPv6 address, pass the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.AddressFamily.InterNetworkV6&gt;</ph> value.","pos":[219,313],"source":" To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value."},{"content":"Passing any other value will cause the method to throw an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[314,404],"source":" Passing any other value will cause the method to throw an <xref:System.ArgumentException>."}]},{"pos":[411,652],"content":"If this constructor is used, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with the address family specified by the <ph id=\"ph2\">`family`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.","source":"If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family."},{"pos":[660,1008],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,346],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,338]}]}]},{"pos":[1015,1215],"content":"The <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> is not suitable for joining a multicast group because it does not perform socket binding.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt;</ph> is not suitable for joining a multicast group because it does not perform socket binding.","pos":[0,200],"source":"The <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> is not suitable for joining a multicast group because it does not perform socket binding."}]}],"pos":[18818,20043],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> values that specifies the addressing scheme of the socket.","nodes":[{"pos":[0,123],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> values that specifies the addressing scheme of the socket.","source":"One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> values that specifies the addressing scheme of the socket."}],"pos":[20223,20347],"yaml":true},{"content":"<code>family</code> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>.","nodes":[{"pos":[0,166],"content":"<ph id=\"ph1\">&lt;code&gt;family&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph>.","source":"<code>family</code> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>."}],"pos":[20503,20670],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[20784,20829],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided.","nodes":[{"pos":[0,137],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> class and binds it to the local port number provided.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided."}],"pos":[22263,22401],"yaml":true},{"content":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.  \n  \n The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.  \n  \n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,141],"content":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.","nodes":[{"content":"This constructor creates an underlying <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and binds it to the port number from which you intend to communicate.","pos":[0,141],"source":"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate."}]},{"pos":[148,552],"content":"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.","nodes":[{"content":"The <ph id=\"ph1\">`family`</ph> parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.","pos":[0,125],"source":"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address."},{"content":"To use an IPv4 address, pass the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.AddressFamily.InterNetwork&gt;</ph> value.","pos":[126,218],"source":" To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value."},{"content":"To use an IPv6 address, pass the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.AddressFamily.InterNetworkV6&gt;</ph> value.","pos":[219,313],"source":" To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value."},{"content":"Passing any other value will cause the method to throw an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[314,404],"source":" Passing any other value will cause the method to throw an <xref:System.ArgumentException>."}]},{"pos":[559,800],"content":"If this constructor is used, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance is set with the address family specified by the <ph id=\"ph2\">`family`</ph> parameter  that cannot be changed or overwritten by a connect method call with a different address family.","source":"If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family."},{"pos":[808,1148],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,338],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,330]}]}]}],"pos":[22412,23570],"yaml":true,"extradata":"MT"},{"content":"The port on which to listen for incoming connection attempts.","nodes":[{"pos":[0,61],"content":"The port on which to listen for incoming connection attempts.","nodes":[{"content":"The port on which to listen for incoming connection attempts.","pos":[0,61]}]}],"pos":[24420,24482],"yaml":true},{"content":"One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> values that specifies the addressing scheme of the socket.","nodes":[{"pos":[0,123],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> values that specifies the addressing scheme of the socket.","source":"One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> values that specifies the addressing scheme of the socket."}],"pos":[24563,24687],"yaml":true},{"content":"<code>family</code> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>.","nodes":[{"pos":[0,166],"content":"<ph id=\"ph1\">&lt;code&gt;family&lt;/code&gt;</ph> is not <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph>.","source":"<code>family</code> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>."}],"pos":[24843,25010],"yaml":true},{"content":"<code>port</code> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\"></xref>.","nodes":[{"pos":[0,149],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph> or less than <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph>.","source":"<code>port</code> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\"></xref>."}],"pos":[25124,25274],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[25388,25433],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and establishes a default remote host.","nodes":[{"pos":[0,128],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> class and establishes a default remote host.","source":"Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and establishes a default remote host."}],"pos":[26789,26918],"yaml":true},{"content":"This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters. Establishing a default remote host is optional. If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. Specifying a default remote host limits you to that host only. You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,656],"content":"This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters. Establishing a default remote host is optional. If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. Specifying a default remote host limits you to that host only. You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.","nodes":[{"content":"This constructor initializes a new <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> and establishes a remote host using the <ph id=\"ph2\">`hostname`</ph> and <ph id=\"ph3\">`port`</ph> parameters.","pos":[0,144],"source":"This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters."},{"content":"Establishing a default remote host is optional.","pos":[145,192]},{"content":"If you use this constructor, you do not have to specify a remote host in each call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[193,334],"source":" If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"Specifying a default remote host limits you to that host only.","pos":[335,397]},{"content":"You can change the default remote host at any time by calling the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[398,518],"source":" You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you want to specify a remote host in your call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, do not use this constructor.","pos":[519,656],"source":" If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor."}]},{"pos":[664,1012],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,346],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,338]}]}]}],"pos":[26929,27947],"yaml":true,"extradata":"MT"},{"content":"The name of the remote DNS host to which you intend to connect.","nodes":[{"pos":[0,63],"content":"The name of the remote DNS host to which you intend to connect.","nodes":[{"content":"The name of the remote DNS host to which you intend to connect.","pos":[0,63]}]}],"pos":[28822,28886],"yaml":true},{"content":"The remote port number to which you intend to connect.","nodes":[{"pos":[0,54],"content":"The remote port number to which you intend to connect.","nodes":[{"content":"The remote port number to which you intend to connect.","pos":[0,54]}]}],"pos":[28945,29000],"yaml":true},{"content":"<code>hostname</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;hostname&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostname</code> is `null`."}],"pos":[29164,29197],"yaml":true},{"content":"<code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"<code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[29311,29451],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[29565,29610],"yaml":true},{"content":"Gets or sets a value indicating whether a default remote host has been established.","nodes":[{"pos":[0,83],"content":"Gets or sets a value indicating whether a default remote host has been established.","nodes":[{"content":"Gets or sets a value indicating whether a default remote host has been established.","pos":[0,83]}]}],"pos":[30642,30726],"yaml":true},{"content":"Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.","nodes":[{"pos":[0,426],"content":"Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.","nodes":[{"content":"Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.","pos":[0,426],"nodes":[{"content":"Classes deriving from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> can use this property to determine if a default remote host has been established.","pos":[0,139],"source":"Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established."},{"content":"You can establish a default remote host by using the appropriate constructor or by calling the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[140,289],"source":" You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do establish a default remote host, you cannot specify a remote host in your call to <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph>.","pos":[290,426],"source":" If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>."}]}]}],"pos":[30737,31164],"yaml":true,"extradata":"MT"},{"content":"`true` if a connection is active; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if a connection is active; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if a connection is active; otherwise, `false`."}],"pos":[31281,31337],"yaml":true},{"content":"Enables or disables Network Address Translation (NAT) traversal on a <xref href=\"System.Net.Sockets.UdpClient\"></xref> instance.","nodes":[{"pos":[0,128],"content":"Enables or disables Network Address Translation (NAT) traversal on a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"Enables or disables Network Address Translation (NAT) traversal on a <xref href=\"System.Net.Sockets.UdpClient\"></xref> instance."}],"pos":[32758,32887],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.  \n  \n When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.  \n  \n When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>. This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.  \n  \n A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","nodes":[{"pos":[0,233],"content":"The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.","nodes":[{"content":"The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.","pos":[0,233],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A&gt;</ph> method is used to enable or disable NAT traversal for a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance.","pos":[0,162],"source":"The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance."},{"content":"NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.","pos":[163,233]}]}]},{"pos":[240,536],"content":"When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.","nodes":[{"content":"When the <ph id=\"ph1\">`allowed`</ph> parameter is false, the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>.","pos":[0,205],"source":"When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>."},{"content":"This explicitly disables NAT traversal for a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> instance.","pos":[206,296],"source":" This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance."}]},{"pos":[543,868],"content":"When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>. This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.","nodes":[{"content":"When the <ph id=\"ph1\">`allowed`</ph> parameter is true, the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>.","pos":[0,202],"source":"When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>."},{"content":"This may allow NAT traversal for a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> depending on firewall rules in place on the system.","pos":[203,325],"source":" This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system."}]},{"pos":[875,1072],"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","nodes":[{"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","pos":[0,197],"nodes":[{"content":"A Teredo address is an IPv6 address with the prefix of 2001::/32.","pos":[0,65]},{"content":"Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.","pos":[66,197]}]}]}],"pos":[32898,33979],"yaml":true,"extradata":"MT"},{"content":"A Boolean value that specifies whether to enable or disable NAT traversal.","nodes":[{"pos":[0,74],"content":"A Boolean value that specifies whether to enable or disable NAT traversal.","nodes":[{"content":"A Boolean value that specifies whether to enable or disable NAT traversal.","pos":[0,74]}]}],"pos":[34128,34203],"yaml":true},{"content":"Gets the amount of data received from the network that is available to read.","nodes":[{"pos":[0,76],"content":"Gets the amount of data received from the network that is available to read.","nodes":[{"content":"Gets the amount of data received from the network that is available to read.","pos":[0,76]}]}],"pos":[35330,35407],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0.  \n  \n If the remote host shuts down or closes the connection, the <xref:System.Net.Sockets.UdpClient.Available%2A> property throws a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error.","nodes":[{"pos":[0,333],"content":"The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0.","nodes":[{"content":"The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0.","pos":[0,333],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Available%2A&gt;</ph> property is used to determine the amount of data queued in the network buffer for reading.","pos":[0,143],"source":"The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading."},{"content":"If data is available, call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> to get the data.","pos":[144,235],"source":" If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data."},{"content":"If no data is available, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Available%2A&gt;</ph> property returns 0.","pos":[236,333],"source":" If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0."}]}]},{"pos":[340,509],"content":"If the remote host shuts down or closes the connection, the <xref:System.Net.Sockets.UdpClient.Available%2A> property throws a <xref:System.Net.Sockets.SocketException>.","nodes":[{"content":"If the remote host shuts down or closes the connection, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Available%2A&gt;</ph> property throws a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[0,169],"source":"If the remote host shuts down or closes the connection, the <xref:System.Net.Sockets.UdpClient.Available%2A> property throws a <xref:System.Net.Sockets.SocketException>."}]},{"pos":[517,913],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept>/ for a detailed description of the error.","pos":[9,394],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error."}]}],"pos":[35418,36339],"yaml":true,"extradata":"MT"},{"content":"The number of bytes of data received from the network.","nodes":[{"pos":[0,54],"content":"The number of bytes of data received from the network.","nodes":[{"content":"The number of bytes of data received from the network.","pos":[0,54]}]}],"pos":[36868,36923],"yaml":true},{"content":"An error occurred while attempting to access the socket.","nodes":[{"pos":[0,56],"content":"An error occurred while attempting to access the socket.","nodes":[{"content":"An error occurred while attempting to access the socket.","pos":[0,56]}]}],"pos":[37103,37160],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,67],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[37266,37334],"yaml":true},{"content":"Receives a datagram from a remote host asynchronously.","nodes":[{"pos":[0,54],"content":"Receives a datagram from a remote host asynchronously.","nodes":[{"content":"Receives a datagram from a remote host asynchronously.","pos":[0,54]}]}],"pos":[38761,38816],"yaml":true},{"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"pos":[0,237],"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.BeginReceive%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.EndReceive%2A&gt;</ph> method.","pos":[0,169],"source":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[170,237],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[244,408],"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.","pos":[0,164],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method.","pos":[60,164],"source":" To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method."}]}]},{"pos":[415,634],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}],"pos":[38827,39468],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[40103,40226],"yaml":true},{"content":"A user-defined object that contains information about the receive operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,175],"content":"A user-defined object that contains information about the receive operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the receive operation.","pos":[0,76]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[77,175],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[40287,40463],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous receive.","nodes":[{"pos":[0,92],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object that references the asynchronous receive.","source":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous receive."}],"pos":[40526,40619],"yaml":true},{"content":"Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.","nodes":[{"pos":[0,112],"content":"Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.","nodes":[{"content":"Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.","pos":[0,112],"nodes":[{"content":"Sends a datagram to a destination asynchronously.","pos":[0,49]},{"content":"The destination is specified by the host name and port number.","pos":[50,112]}]}]}],"pos":[42168,42281],"yaml":true},{"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"pos":[0,231],"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.BeginSend%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt;</ph> method.","pos":[0,163],"source":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[164,231],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[238,416],"content":"This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.","pos":[0,178],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads.","pos":[60,178],"source":" To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads."}]}]},{"pos":[423,642],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}],"pos":[42292,42941],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array that contains the data to be sent.","nodes":[{"pos":[0,75],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array that contains the data to be sent.","source":"A <xref href=\"System.Byte\"></xref> array that contains the data to be sent."}],"pos":[43899,43975],"yaml":true},{"content":"The number of bytes to send.","nodes":[{"pos":[0,28],"content":"The number of bytes to send.","nodes":[{"content":"The number of bytes to send.","pos":[0,28]}]}],"pos":[44035,44064],"yaml":true},{"content":"The destination host.","nodes":[{"pos":[0,21],"content":"The destination host.","nodes":[{"content":"The destination host.","pos":[0,21]}]}],"pos":[44128,44150],"yaml":true},{"content":"The destination port number.","nodes":[{"pos":[0,28],"content":"The destination port number.","nodes":[{"content":"The destination port number.","pos":[0,28]}]}],"pos":[44209,44238],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[44316,44439],"yaml":true},{"content":"A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,172],"content":"A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the send operation.","pos":[0,73]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[74,172],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[44500,44673],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object that references the asynchronous send.","source":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send."}],"pos":[44736,44826],"yaml":true},{"content":"Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <xref href=\"System.Net.Sockets.UdpClient.Connect*\"></xref>.","nodes":[{"pos":[0,163],"content":"Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <xref href=\"System.Net.Sockets.UdpClient.Connect*\"></xref>.","nodes":[{"content":"Sends a datagram to a remote host asynchronously.","pos":[0,49]},{"content":"The destination was specified previously by a call to <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient.Connect*\"&gt;&lt;/xref&gt;</ph>.","pos":[50,163],"source":" The destination was specified previously by a call to <xref href=\"System.Net.Sockets.UdpClient.Connect*\"></xref>."}]}],"pos":[46246,46410],"yaml":true},{"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"pos":[0,231],"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.BeginSend%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt;</ph> method.","pos":[0,163],"source":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[164,231],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[238,414],"content":"This method does not block until the operation completes. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.","nodes":[{"content":"This method does not block until the operation completes. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.","pos":[0,176],"nodes":[{"content":"This method does not block until the operation completes.","pos":[0,57]},{"content":"To block until the operation is complete, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads.","pos":[58,176],"source":" To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads."}]}]},{"pos":[421,640],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}],"pos":[46421,47068],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array that contains the data to be sent.","nodes":[{"pos":[0,75],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array that contains the data to be sent.","source":"A <xref href=\"System.Byte\"></xref> array that contains the data to be sent."}],"pos":[47999,48075],"yaml":true},{"content":"The number of bytes to send.","nodes":[{"pos":[0,28],"content":"The number of bytes to send.","nodes":[{"content":"The number of bytes to send.","pos":[0,28]}]}],"pos":[48135,48164],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[48242,48365],"yaml":true},{"content":"A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,172],"content":"A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the send operation.","pos":[0,73]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[74,172],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[48426,48599],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object that references the asynchronous send.","source":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send."}],"pos":[48662,48752],"yaml":true},{"content":"Sends a datagram to a destination asynchronously. The destination is specified by a <xref href=\"System.Net.EndPoint\"></xref>.","nodes":[{"pos":[0,125],"content":"Sends a datagram to a destination asynchronously. The destination is specified by a <xref href=\"System.Net.EndPoint\"></xref>.","nodes":[{"content":"Sends a datagram to a destination asynchronously.","pos":[0,49]},{"content":"The destination is specified by a <ph id=\"ph1\">&lt;xref href=\"System.Net.EndPoint\"&gt;&lt;/xref&gt;</ph>.","pos":[50,125],"source":" The destination is specified by a <xref href=\"System.Net.EndPoint\"></xref>."}]}],"pos":[50274,50400],"yaml":true},{"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"pos":[0,231],"content":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.BeginSend%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.EndSend%2A&gt;</ph> method.","pos":[0,163],"source":"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[164,231],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[238,416],"content":"This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.","pos":[0,178],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use one of the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads.","pos":[60,178],"source":" To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads."}]}]},{"pos":[423,642],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}],"pos":[50411,51060],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array that contains the data to be sent.","nodes":[{"pos":[0,75],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array that contains the data to be sent.","source":"A <xref href=\"System.Byte\"></xref> array that contains the data to be sent."}],"pos":[52023,52099],"yaml":true},{"content":"The number of bytes to send.","nodes":[{"pos":[0,28],"content":"The number of bytes to send.","nodes":[{"content":"The number of bytes to send.","pos":[0,28]}]}],"pos":[52159,52188],"yaml":true},{"content":"The <xref href=\"System.Net.EndPoint\"></xref> that represents the destination for the data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.EndPoint\"&gt;&lt;/xref&gt;</ph> that represents the destination for the data.","source":"The <xref href=\"System.Net.EndPoint\"></xref> that represents the destination for the data."}],"pos":[52260,52351],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[52429,52552],"yaml":true},{"content":"A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,172],"content":"A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the send operation.","pos":[0,73]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[74,172],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[52613,52786],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object that references the asynchronous send.","source":"An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send."}],"pos":[52849,52939],"yaml":true},{"content":"Gets or sets the underlying network <xref href=\"System.Net.Sockets.Socket\"></xref>.","nodes":[{"pos":[0,83],"content":"Gets or sets the underlying network <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the underlying network <xref href=\"System.Net.Sockets.Socket\"></xref>."}],"pos":[54040,54124],"yaml":true},{"content":"<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","nodes":[{"pos":[0,779],"content":"<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","nodes":[{"content":"<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.","pos":[0,779],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> creates a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> used to send and receive data over a network.","pos":[0,124],"source":"<xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network."},{"content":"Classes deriving from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> can use this property to get or set this <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.","pos":[125,257],"source":" Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>."},{"content":"Use the underlying <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned from <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> if you require access beyond that which <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> provides.","pos":[258,455],"source":" Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides."},{"content":"You can also use <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> to set the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to an existing <ph id=\"ph3\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.","pos":[456,622],"source":" You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>."},{"content":"This is useful if you want to take advantage of the simplicity of <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> using a pre-existing <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.","pos":[623,779],"source":" This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>."}]}]}],"pos":[54135,54915],"yaml":true,"extradata":"MT"},{"content":"The underlying Network <xref href=\"System.Net.Sockets.Socket\"></xref>.","nodes":[{"pos":[0,70],"content":"The underlying Network <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph>.","source":"The underlying Network <xref href=\"System.Net.Sockets.Socket\"></xref>."}],"pos":[55860,55931],"yaml":true},{"content":"Closes the UDP connection.","nodes":[{"pos":[0,26],"content":"Closes the UDP connection.","nodes":[{"content":"Closes the UDP connection.","pos":[0,26]}]}],"pos":[57211,57238],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Close%2A> disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,211],"content":"The <xref:System.Net.Sockets.UdpClient.Close%2A> disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Close%2A&gt;</ph> disables the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and releases all managed and unmanaged resources associated with the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>.","pos":[0,211],"source":"The <xref:System.Net.Sockets.UdpClient.Close%2A> disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>."}]},{"pos":[219,567],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,346],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,338]}]}]}],"pos":[57249,57822],"yaml":true,"extradata":"MT"},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[58798,58843],"yaml":true},{"content":"Establishes a default remote host using the specified network endpoint.","nodes":[{"pos":[0,71],"content":"Establishes a default remote host using the specified network endpoint.","nodes":[{"content":"Establishes a default remote host using the specified network endpoint.","pos":[0,71]}]}],"pos":[59984,60056],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \n  \n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \n  \n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \n  \n> [!NOTE]\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","nodes":[{"pos":[0,277],"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method establishes a default remote host using the value specified in the <ph id=\"ph2\">`endPoint`</ph> parameter.","pos":[0,146],"source":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter."},{"content":"Once established, you do not have to specify a remote host in each call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[147,277],"source":" Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."}]},{"pos":[284,1216],"content":"Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"content":"Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,932],"nodes":[{"content":"Establishing a default remote host is optional.","pos":[0,47]},{"content":"Specifying a default remote host limits you to that host only.","pos":[48,110]},{"content":"If you want to send datagrams to a different remote host, you must make another call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method or create another <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> without a default remote host.","pos":[111,341],"source":" If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host."},{"content":"If you have established a default remote host and you also provide a remote host in your call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> will throw a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[342,594],"source":" If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[595,773],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[774,932]}]}]},{"pos":[1223,1704],"content":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.","nodes":[{"content":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.","pos":[0,481],"nodes":[{"content":"If you call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.Connect%2A&gt;</ph> method, any datagrams that arrive from an address other than the specified default will be discarded.","pos":[0,161],"source":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded."},{"content":"You cannot set the default remote host to a broadcast address using this method unless you inherit from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>, use the Client method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.","pos":[162,481],"source":" You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."}]}]},{"pos":[1711,2087],"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.","nodes":[{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.","pos":[0,376],"nodes":[{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt;</ph> in your call to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[0,232],"source":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"If your application requires greater control over broadcast addresses, you can also revert to using the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.","pos":[233,376],"source":" If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class."}]}]},{"pos":[2095,2339],"content":"[!NOTE]\n Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","leadings":["","> "],"nodes":[{"content":" Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","pos":[8,242],"nodes":[{"content":"Since the UDP protocol is connectionless, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method does not block.","pos":[1,116],"source":" Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block."},{"content":"Do not call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method if you intend to receive multicasted datagrams.","pos":[117,234],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams."}]}]}],"pos":[60067,62418],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.IPEndPoint\"></xref> that specifies the network endpoint to which you intend to send data.","nodes":[{"pos":[0,115],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPEndPoint\"&gt;&lt;/xref&gt;</ph> that specifies the network endpoint to which you intend to send data.","source":"An <xref href=\"System.Net.IPEndPoint\"></xref> that specifies the network endpoint to which you intend to send data."}],"pos":[63259,63375],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[63553,63598],"yaml":true},{"content":"<code>endPoint</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;endPoint&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>endPoint</code> is `null`."}],"pos":[63700,63733],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[63839,63904],"yaml":true},{"content":"Establishes a default remote host using the specified IP address and port number.","nodes":[{"pos":[0,81],"content":"Establishes a default remote host using the specified IP address and port number.","nodes":[{"content":"Establishes a default remote host using the specified IP address and port number.","pos":[0,81]}]}],"pos":[65099,65181],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \n  \n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \n  \n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \n  \n> [!NOTE]\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","nodes":[{"pos":[0,286],"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method establishes a default remote host using the values specified in the <ph id=\"ph2\">`addr`</ph> and <ph id=\"ph3\">`port`</ph> parameters.","pos":[0,155],"source":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters."},{"content":"Once established, you do not have to specify a remote host in each call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[156,286],"source":" Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."}]},{"pos":[293,1225],"content":"Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"content":"Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,932],"nodes":[{"content":"Establishing a default remote host is optional.","pos":[0,47]},{"content":"Specifying a default remote host limits you to that host only.","pos":[48,110]},{"content":"If you want to send datagrams to a different remote host, you must make another call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method or create another <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> without a default remote host.","pos":[111,341],"source":" If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host."},{"content":"If you have established a default remote host and you also provide a remote host in your call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> will throw a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[342,594],"source":" If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[595,773],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[774,932]}]}]},{"pos":[1232,1713],"content":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.","nodes":[{"content":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.","pos":[0,481],"nodes":[{"content":"If you call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.Connect%2A&gt;</ph> method, any datagrams that arrive from an address other than the specified default will be discarded.","pos":[0,161],"source":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded."},{"content":"You cannot set the default remote host to a broadcast address using this method unless you inherit from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>, use the client method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.","pos":[162,481],"source":" You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."}]}]},{"pos":[1720,2096],"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.","nodes":[{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.","pos":[0,376],"nodes":[{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt;</ph> in your call to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[0,232],"source":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"If your application requires greater control over broadcast addresses, you can also revert to using the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.","pos":[233,376],"source":" If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class."}]}]},{"pos":[2104,2348],"content":"[!NOTE]\n Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","leadings":["","> "],"nodes":[{"content":" Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","pos":[8,242],"nodes":[{"content":"Since the UDP protocol is connectionless, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method does not block.","pos":[1,116],"source":" Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block."},{"content":"Do not call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method if you intend to receive multicasted datagrams.","pos":[117,234],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams."}]}]}],"pos":[65192,67552],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> of the remote host to which you intend to send data.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the remote host to which you intend to send data.","source":"The <xref href=\"System.Net.IPAddress\"></xref> of the remote host to which you intend to send data."}],"pos":[68386,68485],"yaml":true},{"content":"The port number to which you intend send data.","nodes":[{"pos":[0,46],"content":"The port number to which you intend send data.","nodes":[{"content":"The port number to which you intend send data.","pos":[0,46]}]}],"pos":[68544,68591],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[68761,68822],"yaml":true},{"content":"<code>addr</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;addr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>addr</code> is `null`."}],"pos":[68924,68953],"yaml":true},{"content":"<code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"<code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[69067,69207],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[69321,69366],"yaml":true},{"content":"Establishes a default remote host using the specified host name and port number.","nodes":[{"pos":[0,80],"content":"Establishes a default remote host using the specified host name and port number.","nodes":[{"content":"Establishes a default remote host using the specified host name and port number.","pos":[0,80]}]}],"pos":[70531,70612],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `port` and `hostname` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \n  \n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.  \n  \n If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \n  \n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \n  \n> [!NOTE]\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","nodes":[{"pos":[0,290],"content":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `port` and `hostname` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method establishes a default remote host using the values specified in the <ph id=\"ph2\">`port`</ph> and <ph id=\"ph3\">`hostname`</ph> parameters.","pos":[0,159],"source":"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `port` and `hostname` parameters."},{"content":"Once established, you do not have to specify a remote host in each call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[160,290],"source":" Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."}]},{"pos":[297,638],"content":"Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.","nodes":[{"content":"Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.","pos":[0,341],"nodes":[{"content":"Establishing a default remote host is optional.","pos":[0,47]},{"content":"Specifying a default remote host limits you to that host only.","pos":[48,110]},{"content":"If you want to send datagrams to a different remote host, you must make another call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method or create another <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> without a default remote host.","pos":[111,341],"source":" If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host."}]}]},{"pos":[645,1235],"content":"If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"content":"If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,590],"nodes":[{"content":"If you have established a default remote host and you also provide a remote host in your call to the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> will throw a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[0,252],"source":"If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[253,431],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[432,590]}]}]},{"pos":[1242,1723],"content":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.","nodes":[{"content":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.","pos":[0,481],"nodes":[{"content":"If you call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.Connect%2A&gt;</ph> method, any datagrams that arrive from an address other than the specified default will be discarded.","pos":[0,161],"source":"If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded."},{"content":"You cannot set the default remote host to a broadcast address using this method unless you inherit from <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph>, use the client method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.","pos":[162,481],"source":" You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."}]}]},{"pos":[1730,2106],"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.","nodes":[{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.","pos":[0,376],"nodes":[{"content":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <ph id=\"ph1\">&lt;xref:System.Net.IPAddress.Broadcast?displayProperty=fullName&gt;</ph> in your call to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[0,232],"source":"You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method."},{"content":"If your application requires greater control over broadcast addresses, you can also revert to using the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.","pos":[233,376],"source":" If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class."}]}]},{"pos":[2114,2358],"content":"[!NOTE]\n Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","leadings":["","> "],"nodes":[{"content":" Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.","pos":[8,242],"nodes":[{"content":"Since the UDP protocol is connectionless, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method does not block.","pos":[1,116],"source":" Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block."},{"content":"Do not call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method if you intend to receive multicasted datagrams.","pos":[117,234],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams."}]}]}],"pos":[70623,72995],"yaml":true,"extradata":"MT"},{"content":"The DNS name of the remote host to which you intend send data.","nodes":[{"pos":[0,62],"content":"The DNS name of the remote host to which you intend send data.","nodes":[{"content":"The DNS name of the remote host to which you intend send data.","pos":[0,62]}]}],"pos":[73814,73877],"yaml":true},{"content":"The port number on the remote host to which you intend to send data.","nodes":[{"pos":[0,68],"content":"The port number on the remote host to which you intend to send data.","nodes":[{"content":"The port number on the remote host to which you intend to send data.","pos":[0,68]}]}],"pos":[73936,74005],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[74175,74240],"yaml":true},{"content":"<code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">&lt;code&gt;port&lt;/code&gt;</ph> is not between <ph id=\"ph2\">&lt;xref href=\"System.Net.IPEndPoint.MinPort\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Net.IPEndPoint.MaxPort\"&gt;&lt;/xref&gt;</ph>.","source":"<code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>."}],"pos":[74354,74494],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[74608,74653],"yaml":true},{"content":"Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.","nodes":[{"pos":[0,107],"content":"Releases the managed and unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph>.","source":"Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>."}],"pos":[75695,75803],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,141],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref> and optionally releases the managed resources."}],"pos":[77097,77239],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,293],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[300,530],"content":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> references.","pos":[0,160],"source":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[161,230],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[77250,77785],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[77939,78042],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows Internet Protocol (IP) datagrams to be fragmented.","nodes":[{"pos":[0,191],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that specifies whether the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> allows Internet Protocol (IP) datagrams to be fragmented.","source":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows Internet Protocol (IP) datagrams to be fragmented."}],"pos":[79361,79553],"yaml":true},{"content":"Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.","nodes":[{"pos":[0,432],"content":"Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.","nodes":[{"content":"Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.","pos":[0,432],"nodes":[{"content":"Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.","pos":[0,115]},{"content":"Datagrams may be fragmented by the sending host or by an intermediate router.","pos":[116,193]},{"content":"If a datagram must be fragmented, and the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket.DontFragment%2A&gt;</ph> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.","pos":[194,432],"source":" If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram."}]}]}],"pos":[79564,79997],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows datagram fragmentation; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,137],"content":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows datagram fragmentation; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> allows datagram fragmentation; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,114],"source":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows datagram fragmentation; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[115,137],"source":" The default is `true`."}]}],"pos":[80537,80677],"yaml":true},{"content":"This property can be set only for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag.","nodes":[{"pos":[0,208],"content":"This property can be set only for sockets that use the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"&gt;&lt;/xref&gt;</ph> flag or the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"&gt;&lt;/xref&gt;</ph> flag.","source":"This property can be set only for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag."}],"pos":[80848,81057],"yaml":true},{"content":"Leaves a multicast group.","nodes":[{"pos":[0,25],"content":"Leaves a multicast group.","nodes":[{"content":"Leaves a multicast group.","pos":[0,25]}]}],"pos":[82502,82528],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,588],"content":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.","nodes":[{"content":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.","pos":[0,588],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method withdraws the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> from the multicast group identified by the specified <ph id=\"ph3\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[0,200],"source":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>."},{"content":"After calling the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method, the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.","pos":[201,451],"source":" After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group."},{"content":"After a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> withdraws from the group, it will no longer be able to receive datagrams sent to that group.","pos":[452,588],"source":" After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group."}]}]},{"pos":[596,958],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,360],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> property to obtain the specific error code.","pos":[1,192],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code."},{"content":"After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[193,352]}]}]}],"pos":[82539,83503],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to leave.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the multicast group to leave.","source":"The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to leave."}],"pos":[84397,84476],"yaml":true},{"content":"The local address of the multicast group to leave.","nodes":[{"pos":[0,50],"content":"The local address of the multicast group to leave.","nodes":[{"content":"The local address of the multicast group to leave.","pos":[0,50]}]}],"pos":[84538,84589],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[84770,84849],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[84963,85008],"yaml":true},{"content":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.","nodes":[{"pos":[0,151],"content":"The IP address is not compatible with the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.","source":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket."}],"pos":[85102,85254],"yaml":true},{"content":"<code>multicastAddr</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>multicastAddr</code> is `null`."}],"pos":[85356,85394],"yaml":true},{"content":"Leaves a multicast group.","nodes":[{"pos":[0,25],"content":"Leaves a multicast group.","nodes":[{"content":"Leaves a multicast group.","pos":[0,25]}]}],"pos":[86779,86805],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,588],"content":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.","nodes":[{"content":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.","pos":[0,588],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method withdraws the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> from the multicast group identified by the specified <ph id=\"ph3\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[0,200],"source":"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>."},{"content":"After calling the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method, the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.","pos":[201,451],"source":" After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group."},{"content":"After a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> withdraws from the group, it will no longer be able to receive datagrams sent to that group.","pos":[452,588],"source":" After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group."}]}]},{"pos":[596,944],"content":"[!NOTE]\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,346],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[1,179],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[180,338]}]}]}],"pos":[86816,87766],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to leave.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the multicast group to leave.","source":"The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to leave."}],"pos":[88642,88721],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[88902,88981],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[89095,89140],"yaml":true},{"content":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.","nodes":[{"pos":[0,151],"content":"The IP address is not compatible with the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.","source":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket."}],"pos":[89234,89386],"yaml":true},{"content":"<code>multicastAddr</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>multicastAddr</code> is `null`."}],"pos":[89488,89526],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> may send or receive broadcast packets.","nodes":[{"pos":[0,172],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that specifies whether the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> may send or receive broadcast packets.","source":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> may send or receive broadcast packets."}],"pos":[90796,90969],"yaml":true},{"content":"Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.","nodes":[{"pos":[0,488],"content":"Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.","nodes":[{"content":"Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.","pos":[0,488],"nodes":[{"content":"Broadcasting is limited to a specific subnet.","pos":[0,45]},{"content":"You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.","pos":[46,277]},{"content":"For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.","pos":[278,488]}]}]}],"pos":[90980,91469],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows broadcast packets; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,133],"content":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows broadcast packets; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> allows broadcast packets; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,109],"source":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows broadcast packets; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[110,133],"source":" The default is `false`."}]}],"pos":[92018,92154],"yaml":true},{"content":"Ends a pending asynchronous receive.","nodes":[{"pos":[0,36],"content":"Ends a pending asynchronous receive.","nodes":[{"content":"Ends a pending asynchronous receive.","pos":[0,36]}]}],"pos":[93677,93714],"yaml":true},{"content":"This method blocks until the operation is complete.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.","nodes":[{"pos":[0,51],"content":"This method blocks until the operation is complete.","nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]}]},{"pos":[58,161],"content":"To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.","nodes":[{"content":"To perform this operation synchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method.","pos":[0,103],"source":"To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method."}]}],"pos":[93725,93891],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"></xref>.","nodes":[{"pos":[0,172],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object returned by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"></xref>."}],"pos":[94540,94713],"yaml":true},{"content":"The specified remote endpoint.","nodes":[{"pos":[0,30],"content":"The specified remote endpoint.","nodes":[{"content":"The specified remote endpoint.","pos":[0,30]}]}],"pos":[94785,94816],"yaml":true},{"content":"If successful, the number of bytes received. If unsuccessful, this method returns 0.","nodes":[{"pos":[0,84],"content":"If successful, the number of bytes received. If unsuccessful, this method returns 0.","nodes":[{"content":"If successful, the number of bytes received. If unsuccessful, this method returns 0.","pos":[0,84],"nodes":[{"content":"If successful, the number of bytes received.","pos":[0,44]},{"content":"If unsuccessful, this method returns 0.","pos":[45,84]}]}]}],"pos":[94873,94958],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[95127,95163],"yaml":true},{"content":"<code>asyncResult</code> was not returned by a call to the <xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"></xref> method.","nodes":[{"pos":[0,165],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not returned by a call to the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>asyncResult</code> was not returned by a call to the <xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"></xref> method."}],"pos":[95257,95423],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\"></xref> was previously called for the asynchronous read.","nodes":[{"pos":[0,153],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\"&gt;&lt;/xref&gt;</ph> was previously called for the asynchronous read.","source":"<xref href=\"System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\"></xref> was previously called for the asynchronous read."}],"pos":[95533,95687],"yaml":true},{"content":"An error occurred when attempting to access the underlying <xref href=\"System.Net.Sockets.Socket\"></xref>.","nodes":[{"pos":[0,106],"content":"An error occurred when attempting to access the underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph>.","source":"An error occurred when attempting to access the underlying <xref href=\"System.Net.Sockets.Socket\"></xref>."}],"pos":[95801,95908],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[96014,96093],"yaml":true},{"content":"Ends a pending asynchronous send.","nodes":[{"pos":[0,33],"content":"Ends a pending asynchronous send.","nodes":[{"content":"Ends a pending asynchronous send.","pos":[0,33]}]}],"pos":[97234,97268],"yaml":true},{"content":"This method blocks until the operation is complete.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.","nodes":[{"pos":[0,51],"content":"This method blocks until the operation is complete.","nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]}]},{"pos":[58,158],"content":"To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.","nodes":[{"content":"To perform this operation synchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method.","pos":[0,100],"source":"To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method."}]}],"pos":[97279,97442],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.UdpClient.BeginSend*\"></xref>.","nodes":[{"pos":[0,134],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object returned by a call to <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient.BeginSend*\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.UdpClient.BeginSend*\"></xref>."}],"pos":[98045,98180],"yaml":true},{"content":"If successful, the number of bytes sent to the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.","nodes":[{"pos":[0,97],"content":"If successful, the number of bytes sent to the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph>.","source":"If successful, the number of bytes sent to the <xref href=\"System.Net.Sockets.UdpClient\"></xref>."}],"pos":[98236,98334],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[98500,98536],"yaml":true},{"content":"<code>asyncResult</code> was not returned by a call to the <xref href=\"System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)\"></xref> method.","nodes":[{"pos":[0,230],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> was not returned by a call to the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"<code>asyncResult</code> was not returned by a call to the <xref href=\"System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)\"></xref> method."}],"pos":[98630,98861],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.Socket.EndSend(System.IAsyncResult)\"></xref> was previously called for the asynchronous read.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket.EndSend(System.IAsyncResult)\"&gt;&lt;/xref&gt;</ph> was previously called for the asynchronous read.","source":"<xref href=\"System.Net.Sockets.Socket.EndSend(System.IAsyncResult)\"></xref> was previously called for the asynchronous read."}],"pos":[98971,99096],"yaml":true},{"content":"An error occurred when attempting to access the underlying socket.","nodes":[{"pos":[0,66],"content":"An error occurred when attempting to access the underlying socket.","nodes":[{"content":"An error occurred when attempting to access the underlying socket.","pos":[0,66]}]}],"pos":[99210,99277],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[99383,99462],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a port.","nodes":[{"pos":[0,171],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that specifies whether the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> allows only one client to use a port.","source":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a port."}],"pos":[100572,100744],"yaml":true},{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.  \n  \n This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property","nodes":[{"pos":[0,290],"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.","nodes":[{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.","pos":[0,290],"nodes":[{"content":"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.","pos":[0,150]},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A&gt;</ph> property to prevent multiple clients from using a specific port.","pos":[151,290],"source":" You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port."}]}]},{"pos":[297,971],"content":"This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property","nodes":[{"content":"This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property","pos":[0,674],"nodes":[{"content":"This property must be set before the underlying socket is bound to a client port.","pos":[0,81]},{"content":"If you call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <ph id=\"ph5\">&lt;xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A&gt;</ph> property","pos":[82,674],"source":" If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property"}]}]}],"pos":[100755,101731],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions.","nodes":[{"pos":[0,253],"content":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> allows only one client to use a specific port; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,130],"source":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a specific port; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <ph id=\"ph2\">`false`</ph> for all other versions.","pos":[131,253],"source":" The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions."}]}],"pos":[102336,102592],"yaml":true},{"content":"An error occurred when attempting to access the underlying socket.","nodes":[{"pos":[0,66],"content":"An error occurred when attempting to access the underlying socket.","nodes":[{"content":"An error occurred when attempting to access the underlying socket.","pos":[0,66]}]}],"pos":[102782,102849],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[102955,103034],"yaml":true},{"content":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.","nodes":[{"pos":[0,78],"content":"Adds a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> to a multicast group.","source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group."}],"pos":[105123,105202],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.  \n  \n> [!NOTE]\n>  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  \n  \n Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.  \n  \n To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.  \n  \n> [!NOTE]\n>  In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.  \n  \n> [!NOTE]\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","nodes":[{"pos":[0,1254],"content":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.","nodes":[{"content":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.","pos":[0,1254],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method subscribes the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to a multicast group using the specified <ph id=\"ph3\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[0,189],"source":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>."},{"content":"After calling the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method, the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.","pos":[190,439],"source":" After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group."},{"content":"The multicast address range is 224.0.0.0 to 239.255.255.255.","pos":[440,500]},{"content":"If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> will throw a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[501,709],"source":" If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[710,888],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[889,1047]},{"content":"Once the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[1048,1254],"source":" Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>."}]}]},{"pos":[1262,1752],"content":"[!NOTE]\n You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.","leadings":["","> "],"nodes":[{"content":" You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.","pos":[8,488],"nodes":[{"content":"You must create the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams.","pos":[1,155],"source":" You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams."},{"content":"Do not call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method, or the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will not work.","pos":[156,388],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work."},{"content":"You do not need to belong to a multicast group to send datagrams to a multicast IP address.","pos":[389,480]}]}]},{"pos":[1759,1944],"content":"Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.","nodes":[{"content":"Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.","pos":[0,185],"nodes":[{"content":"Before joining a multicast group, make sure the socket is bound to the port or endpoint.","pos":[0,88]},{"content":"You do that by calling one of the constructors that accept a port or an endpoint as a parameter.","pos":[89,185]}]}]},{"pos":[1951,2161],"content":"To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.","nodes":[{"content":"To stop receiving multicasted datagrams, call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method and provide the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph> of the group from which you would like to withdraw.","pos":[0,210],"source":"To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw."}]},{"pos":[2169,2297],"content":"[!NOTE]\n In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.","leadings":["","> "],"nodes":[{"content":" In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.","pos":[8,126],"nodes":[{"content":"In the IPv6 case, there are several multicast address ranges you can choose from.","pos":[1,82]},{"content":"Please, refer to the IETF RFC 2375.","pos":[83,118]}]}]},{"pos":[2305,2635],"content":"[!NOTE]\n You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","leadings":["","> "],"nodes":[{"content":"You cannot call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt;</ph> constructor).","pos":[9,328],"source":" You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."}]}],"pos":[105213,107864],"yaml":true,"extradata":"MT"},{"content":"The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join.","nodes":[{"pos":[0,86],"content":"The multicast <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the group you want to join.","source":"The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join."}],"pos":[108745,108832],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[109013,109092],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[109206,109251],"yaml":true},{"content":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.","nodes":[{"pos":[0,151],"content":"The IP address is not compatible with the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.","source":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket."}],"pos":[109345,109497],"yaml":true},{"content":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.","nodes":[{"pos":[0,78],"content":"Adds a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> to a multicast group.","source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group."}],"pos":[110942,111021],"yaml":true},{"content":"Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  \n  \n The `infindex` parameter is used to identify a hardware interface on the same link.  \n  \n> [!NOTE]\n>  There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.  \n  \n> [!NOTE]\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor).","nodes":[{"pos":[0,186],"content":"Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","nodes":[{"content":"Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","pos":[0,186],"nodes":[{"content":"Before joining a multicast group, be sure the socket is bound to the port or endpoint.","pos":[0,86]},{"content":"You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","pos":[87,186]}]}]},{"pos":[193,276],"content":"The <ph id=\"ph1\">`infindex`</ph> parameter is used to identify a hardware interface on the same link.","source":"The `infindex` parameter is used to identify a hardware interface on the same link."},{"pos":[284,381],"content":"[!NOTE]\n There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.","leadings":["","> "],"nodes":[{"content":" There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.","pos":[8,95],"nodes":[{"content":"There are several multicast address ranges to choose from.","pos":[1,59]},{"content":"Refer to the IETF RFC 2375.","pos":[60,87]}]}]},{"pos":[389,769],"content":"[!NOTE]\n You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor).","leadings":["","> "],"nodes":[{"content":"You cannot call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName&gt;</ph> constructor).","pos":[9,378],"source":" You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor)."}]}],"pos":[111032,111812],"yaml":true,"extradata":"MT"},{"content":"The interface index associated with the local IP address on which to join the multicast group.","nodes":[{"pos":[0,94],"content":"The interface index associated with the local IP address on which to join the multicast group.","nodes":[{"content":"The interface index associated with the local IP address on which to join the multicast group.","pos":[0,94]}]}],"pos":[112591,112686],"yaml":true},{"content":"The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join.","nodes":[{"pos":[0,86],"content":"The multicast <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the group you want to join.","source":"The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join."}],"pos":[112762,112849],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[113030,113109],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[113223,113268],"yaml":true},{"content":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group with the specified Time to Live (TTL).","nodes":[{"pos":[0,116],"content":"Adds a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> to a multicast group with the specified Time to Live (TTL).","source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group with the specified Time to Live (TTL)."}],"pos":[114713,114830],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.  \n  \n> [!NOTE]\n>  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  \n  \n Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.  \n  \n To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.  \n  \n> [!NOTE]\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","nodes":[{"pos":[0,1379],"content":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method subscribes the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> to a multicast group using the specified <ph id=\"ph3\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[0,189],"source":"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>."},{"content":"After calling the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method, the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.","pos":[190,439],"source":" After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group."},{"content":"The multicast address range is 224.0.0.0 to 239.255.255.255.","pos":[440,500]},{"content":"If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> will throw a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[501,709],"source":" If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[710,888],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[889,1047]},{"content":"The <ph id=\"ph1\">`timeToLive`</ph> parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded.","pos":[1048,1172],"source":" The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded."},{"content":"Once the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[1173,1379],"source":" Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>."}]},{"pos":[1387,1835],"content":"[!NOTE]\n You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.","leadings":["","> "],"nodes":[{"content":" You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.","pos":[8,446],"nodes":[{"content":"You must create the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> using the multicast port number otherwise you will not be able to receive multicasted datagrams.","pos":[1,153],"source":" You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams."},{"content":"Do not call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> method or the receive method will not work.","pos":[154,346],"source":" Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work."},{"content":"You do not need to belong to a multicast group to send datagrams to a multicast IP address.","pos":[347,438]}]}]},{"pos":[1842,2024],"content":"Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.","nodes":[{"content":"Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.","pos":[0,182],"nodes":[{"content":"Before joining a multicast group make sure the socket is bound to the port or endpoint.","pos":[0,87]},{"content":"You do that by calling one of the constructors that accept as parameter a port or an endpoint.","pos":[88,182]}]}]},{"pos":[2031,2241],"content":"To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.","nodes":[{"content":"To stop receiving multicasted datagrams, call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A&gt;</ph> method and provide the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph> of the group from which you would like to withdraw.","pos":[0,210],"source":"To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw."}]},{"pos":[2249,2579],"content":"[!NOTE]\n You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","leadings":["","> "],"nodes":[{"content":"You cannot call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt;</ph> constructor).","pos":[9,328],"source":" You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."}]}],"pos":[114841,117433],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to join.","nodes":[{"pos":[0,77],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the multicast group to join.","source":"The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to join."}],"pos":[118373,118451],"yaml":true},{"content":"The Time to Live (TTL), measured in router hops.","nodes":[{"pos":[0,48],"content":"The Time to Live (TTL), measured in router hops.","nodes":[{"content":"The Time to Live (TTL), measured in router hops.","pos":[0,48]}]}],"pos":[118516,118565],"yaml":true},{"content":"The TTL provided is not between 0 and 255","nodes":[{"pos":[0,41],"content":"The TTL provided is not between 0 and 255","nodes":[{"content":"The TTL provided is not between 0 and 255","pos":[0,41]}]}],"pos":[118754,118796],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[118902,118981],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[119095,119140],"yaml":true},{"content":"<code>multicastAddr</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;multicastAddr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>multicastAddr</code> is `null`."}],"pos":[119242,119280],"yaml":true},{"content":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.","nodes":[{"pos":[0,151],"content":"The IP address is not compatible with the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.AddressFamily\"&gt;&lt;/xref&gt;</ph> value that defines the addressing scheme of the socket.","source":"The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket."}],"pos":[119374,119526],"yaml":true},{"content":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.","nodes":[{"pos":[0,78],"content":"Adds a <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> to a multicast group.","source":"Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group."}],"pos":[121007,121086],"yaml":true},{"content":"Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  \n  \n> [!NOTE]\n>  There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.  \n  \n> [!NOTE]\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","nodes":[{"pos":[0,192],"content":"Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","nodes":[{"content":"Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","pos":[0,192],"nodes":[{"content":"Before you join a multicast group, be sure that the socket is bound to the port or endpoint.","pos":[0,92]},{"content":"You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.","pos":[93,192]}]}]},{"pos":[200,309],"content":"[!NOTE]\n There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.","leadings":["","> "],"nodes":[{"content":" There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.","pos":[8,107],"nodes":[{"content":"There are several multicast address ranges to choose from.","pos":[1,59]},{"content":"You can find them in the IETF RFC 2375.","pos":[60,99]}]}]},{"pos":[317,647],"content":"[!NOTE]\n You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).","leadings":["","> "],"nodes":[{"content":"You cannot call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A&gt;</ph> on a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> constructed without a specific local port (that is, using the <ph id=\"ph3\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29&gt;</ph> constructor).","pos":[9,328],"source":" You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor)."}]}],"pos":[121097,121753],"yaml":true,"extradata":"MT"},{"content":"The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join.","nodes":[{"pos":[0,86],"content":"The multicast <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> of the group you want to join.","source":"The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join."}],"pos":[122399,122486],"yaml":true},{"content":"The local <xref href=\"System.Net.IPAddress\"></xref>.","nodes":[{"pos":[0,52],"content":"The local <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph>.","source":"The local <xref href=\"System.Net.IPAddress\"></xref>."}],"pos":[122561,122614],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[122795,122874],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[122988,123033],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether outgoing multicast packets are delivered to the sending application.","nodes":[{"pos":[0,148],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that specifies whether outgoing multicast packets are delivered to the sending application.","source":"Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether outgoing multicast packets are delivered to the sending application."}],"pos":[124315,124464],"yaml":true},{"content":"Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.","nodes":[{"pos":[0,241],"content":"Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.","nodes":[{"content":"Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.","pos":[0,241],"nodes":[{"content":"Multicast is a scalable method for many-to-many communication on the Internet.","pos":[0,78]},{"content":"If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.","pos":[79,241]}]}]}],"pos":[124475,124717],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> receives outgoing multicast packets; otherwise, `false`.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> receives outgoing multicast packets; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> receives outgoing multicast packets; otherwise, `false`."}],"pos":[125270,125393],"yaml":true},{"content":"Returns a UDP datagram that was sent by a remote host.","nodes":[{"pos":[0,54],"content":"Returns a UDP datagram that was sent by a remote host.","nodes":[{"content":"Returns a UDP datagram that was sent by a remote host.","pos":[0,54]}]}],"pos":[126798,126853],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Receive%2A> method will block until a datagram arrives from a remote host. When data is available, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will read the first enqueued datagram and return the data portion as a byte array. This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.  \n  \n If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only. All other datagrams will be discarded.  \n  \n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","nodes":[{"pos":[0,393],"content":"The <xref:System.Net.Sockets.UdpClient.Receive%2A> method will block until a datagram arrives from a remote host. When data is available, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will read the first enqueued datagram and return the data portion as a byte array. This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will block until a datagram arrives from a remote host.","pos":[0,113],"source":"The <xref:System.Net.Sockets.UdpClient.Receive%2A> method will block until a datagram arrives from a remote host."},{"content":"When data is available, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will read the first enqueued datagram and return the data portion as a byte array.","pos":[114,278],"source":" When data is available, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will read the first enqueued datagram and return the data portion as a byte array."},{"content":"This method populates the <ph id=\"ph1\">`remoteEP`</ph> parameter with the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress&gt;</ph> and port number of the sender.","pos":[279,393],"source":" This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender."}]},{"pos":[400,638],"content":"If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only. All other datagrams will be discarded.","nodes":[{"content":"If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only. All other datagrams will be discarded.","pos":[0,238],"nodes":[{"content":"If you specify a default remote host in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method, the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method will accept datagrams from that host only.","pos":[0,199],"source":"If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only."},{"content":"All other datagrams will be discarded.","pos":[200,238]}]}]},{"pos":[645,982],"content":"If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"content":"If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,337],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[0,178],"source":"If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[179,337]}]}]},{"pos":[990,1312],"content":"[!NOTE]\n If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","leadings":["","> "],"nodes":[{"content":" If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","pos":[8,320],"nodes":[{"content":"If you intend to receive multicasted datagrams, do not call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Receive%2A&gt;</ph> method.","pos":[1,194],"source":" If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> you use to receive datagrams must be created using the multicast port number.","pos":[195,312],"source":" The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number."}]}]}],"pos":[126864,128186],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the remote host from which the data was sent.","nodes":[{"pos":[0,107],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPEndPoint\"&gt;&lt;/xref&gt;</ph> that represents the remote host from which the data was sent.","source":"An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the remote host from which the data was sent."}],"pos":[129288,129396],"yaml":true},{"content":"An array of type <xref href=\"System.Byte\"></xref> that contains datagram data.","nodes":[{"pos":[0,78],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains datagram data.","source":"An array of type <xref href=\"System.Byte\"></xref> that contains datagram data."}],"pos":[129453,129532],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[129702,129781],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[129895,129940],"yaml":true},{"content":"Returns a UDP datagram asynchronously that was sent by a remote host.","nodes":[{"pos":[0,69],"content":"Returns a UDP datagram asynchronously that was sent by a remote host.","nodes":[{"content":"Returns a UDP datagram asynchronously that was sent by a remote host.","pos":[0,69]}]}],"pos":[131012,131082],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.  \n  \n If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only. All other datagrams will be discarded.  \n  \n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!WARNING]\n>  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","nodes":[{"pos":[0,144],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.","pos":[0,144],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>&gt; object will complete after the UDP packet has been received.","pos":[31,144],"source":" The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received."}]}]},{"pos":[151,343],"content":"If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only. All other datagrams will be discarded.","nodes":[{"content":"If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only. All other datagrams will be discarded.","pos":[0,192],"nodes":[{"content":"If you specify a default remote host in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method, this method will accept datagrams from that host only.","pos":[0,153],"source":"If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only."},{"content":"All other datagrams will be discarded.","pos":[154,192]}]}]},{"pos":[350,687],"content":"If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"content":"If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,337],"nodes":[{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[0,178],"source":"If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[179,337]}]}]},{"pos":[695,974],"content":"[!WARNING]\n If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","leadings":["","> "],"nodes":[{"content":" If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.","pos":[11,277],"nodes":[{"content":"If you intend to receive multicasted datagrams, do not call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method prior to calling this method.","pos":[1,148],"source":" If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient&gt;</ph> you use to receive datagrams must be created using the multicast port number.","pos":[149,266],"source":" The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number."}]}]}],"pos":[131093,132077],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,122],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[132316,132445],"yaml":true},{"content":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.","nodes":[{"pos":[0,78],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.Socket\"&gt;&lt;/xref&gt;</ph> has been closed.","source":"The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed."}],"pos":[132620,132699],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[132813,132858],"yaml":true},{"content":"Sends a UDP datagram to a remote host.","nodes":[{"pos":[0,38],"content":"Sends a UDP datagram to a remote host.","nodes":[{"content":"Sends a UDP datagram to a remote host.","pos":[0,38]}]}],"pos":[134189,134228],"yaml":true},{"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.","nodes":[{"pos":[0,704],"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,704],"nodes":[{"content":"This overload sends datagrams to the remote host established in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method and returns the number of bytes sent.","pos":[0,159],"source":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent."},{"content":"If you do not call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> before calling this overload, the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method will throw a <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[160,366],"source":" If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[367,545],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[546,704]}]}]},{"pos":[711,1004],"content":"If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.","nodes":[{"content":"If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.","pos":[0,293],"nodes":[{"content":"If you want to send datagrams to a different remote host, you must call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method and specify the desired remote host.","pos":[0,166],"source":"If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host."},{"content":"Use either of the other <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method overloads to send datagrams to a broadcast address.","pos":[167,293],"source":" Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address."}]}]}],"pos":[134239,135248],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.","nodes":[{"pos":[0,139],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.","source":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes."}],"pos":[136140,136280],"yaml":true},{"content":"The number of bytes in the datagram.","nodes":[{"pos":[0,36],"content":"The number of bytes in the datagram.","nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]}],"pos":[136340,136377],"yaml":true},{"content":"The number of bytes sent.","nodes":[{"pos":[0,25],"content":"The number of bytes sent.","nodes":[{"content":"The number of bytes sent.","pos":[0,25]}]}],"pos":[136433,136459],"yaml":true},{"content":"<code>dgram</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dgram</code> is `null`."}],"pos":[136622,136652],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> has already established a default remote host.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."}],"pos":[136762,136863],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[136969,137034],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[137148,137193],"yaml":true},{"content":"Sends a UDP datagram to the host at the specified remote endpoint.","nodes":[{"pos":[0,66],"content":"Sends a UDP datagram to the host at the specified remote endpoint.","nodes":[{"content":"Sends a UDP datagram to the host at the specified remote endpoint.","pos":[0,66]}]}],"pos":[138442,138509],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to the <xref:System.Net.Sockets.UdpClient.Send%2A> method as the `endPoint` parameter.  \n  \n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \n  \n> [!NOTE]\n>  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,732],"content":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to the <xref:System.Net.Sockets.UdpClient.Send%2A> method as the `endPoint` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent.","pos":[0,147],"source":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent."},{"content":"Before calling this overload, you must first create an <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the IP address and port number of the remote host to which your datagrams will be delivered.","pos":[148,330],"source":" Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered."},{"content":"You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint&gt;</ph>.","pos":[331,579],"source":" You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>."},{"content":"After you have created this <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph>, pass it to the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method as the <ph id=\"ph3\">`endPoint`</ph> parameter.","pos":[580,732],"source":" After you have created this <xref:System.Net.IPEndPoint>, pass it to the <xref:System.Net.Sockets.UdpClient.Send%2A> method as the `endPoint` parameter."}]},{"pos":[739,1091],"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","pos":[0,352],"nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.","pos":[0,279],"source":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.","pos":[280,352],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."}]}]},{"pos":[1099,1733],"content":"[!NOTE]\n Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,632],"nodes":[{"content":"Do not provide an <ph id=\"ph1\">`endPoint`</ph> parameter to this method if you have already established a remote host with the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[1,164],"source":" Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method will throw a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[165,286],"source":" If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[287,465],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[466,624]}]}]}],"pos":[138520,140261],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send, represented as an array of bytes.","nodes":[{"pos":[0,140],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send, represented as an array of bytes.","source":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send, represented as an array of bytes."}],"pos":[141186,141327],"yaml":true},{"content":"The number of bytes in the datagram.","nodes":[{"pos":[0,36],"content":"The number of bytes in the datagram.","nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]}],"pos":[141387,141424],"yaml":true},{"content":"An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the host and port to which to send the datagram.","nodes":[{"pos":[0,110],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPEndPoint\"&gt;&lt;/xref&gt;</ph> that represents the host and port to which to send the datagram.","source":"An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the host and port to which to send the datagram."}],"pos":[141496,141607],"yaml":true},{"content":"The number of bytes sent.","nodes":[{"pos":[0,25],"content":"The number of bytes sent.","nodes":[{"content":"The number of bytes sent.","pos":[0,25]}]}],"pos":[141663,141689],"yaml":true},{"content":"<code>dgram</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dgram</code> is `null`."}],"pos":[141852,141882],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> has already established a default remote host.","source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."}],"pos":[141992,142089],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[142195,142256],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[142370,142415],"yaml":true},{"content":"Sends a UDP datagram to a specified port on a specified remote host.","nodes":[{"pos":[0,68],"content":"Sends a UDP datagram to a specified port on a specified remote host.","nodes":[{"content":"Sends a UDP datagram to a specified port on a specified remote host.","pos":[0,68]}]}],"pos":[143688,143757],"yaml":true},{"content":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent. You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value.  \n  \n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \n  \n> [!NOTE]\n>  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,309],"content":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent. You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method sends datagrams to the values specified by the <ph id=\"ph2\">`hostname`</ph> and <ph id=\"ph3\">`port`</ph> parameters and returns the number of bytes successfully sent.","pos":[0,185],"source":"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent."},{"content":"You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the <ph id=\"ph1\">`hostname`</ph> parameter value.","pos":[186,309],"source":" You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value."}]},{"pos":[316,668],"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","pos":[0,352],"nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.","pos":[0,279],"source":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.","pos":[280,352],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."}]}]},{"pos":[676,1313],"content":"[!NOTE]\n Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[8,635],"nodes":[{"content":"Do not provide a host name or port number to this method if you have already established a remote host with the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[1,167],"source":" Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Send%2A&gt;</ph> method will throw a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[168,289],"source":" If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[290,468],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[469,627]}]}]}],"pos":[143768,145091],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.","nodes":[{"pos":[0,139],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.","source":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes."}],"pos":[146010,146150],"yaml":true},{"content":"The number of bytes in the datagram.","nodes":[{"pos":[0,36],"content":"The number of bytes in the datagram.","nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]}],"pos":[146210,146247],"yaml":true},{"content":"The name of the remote host to which you intend to send the datagram.","nodes":[{"pos":[0,69],"content":"The name of the remote host to which you intend to send the datagram.","nodes":[{"content":"The name of the remote host to which you intend to send the datagram.","pos":[0,69]}]}],"pos":[146311,146381],"yaml":true},{"content":"The remote port number with which you intend to communicate.","nodes":[{"pos":[0,60],"content":"The remote port number with which you intend to communicate.","nodes":[{"content":"The remote port number with which you intend to communicate.","pos":[0,60]}]}],"pos":[146440,146501],"yaml":true},{"content":"The number of bytes sent.","nodes":[{"pos":[0,25],"content":"The number of bytes sent.","nodes":[{"content":"The number of bytes sent.","pos":[0,25]}]}],"pos":[146557,146583],"yaml":true},{"content":"<code>dgram</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dgram</code> is `null`."}],"pos":[146746,146776],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> has already established a default remote host.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."}],"pos":[146886,146987],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[147093,147158],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[147272,147317],"yaml":true},{"content":"Sends a UDP datagram asynchronously to a remote host.","nodes":[{"pos":[0,53],"content":"Sends a UDP datagram asynchronously to a remote host.","nodes":[{"content":"Sends a UDP datagram asynchronously to a remote host.","pos":[0,53]}]}],"pos":[148494,148548],"yaml":true},{"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.","nodes":[{"pos":[0,623],"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"content":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[0,623],"nodes":[{"content":"This overload sends datagrams to the remote host established in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[0,122],"source":"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do not call <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> before calling this overload, the method will throw a <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[123,285],"source":" If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[286,464],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[465,623]}]}]},{"pos":[630,928],"content":"If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.","nodes":[{"content":"If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.","pos":[0,298],"nodes":[{"content":"If you want to send datagrams to a different remote host, you must call the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method and specify the desired remote host.","pos":[0,166],"source":"If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host."},{"content":"Use either of the other <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.SendAsync%2A&gt;</ph> method overloads to send datagrams to a broadcast address.","pos":[167,298],"source":" Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address."}]}]}],"pos":[148559,149492],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.","nodes":[{"pos":[0,139],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.","source":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes."}],"pos":[149675,149815],"yaml":true},{"content":"The number of bytes in the datagram.","nodes":[{"pos":[0,36],"content":"The number of bytes in the datagram.","nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]}],"pos":[149875,149912],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[149997,150057],"yaml":true},{"content":"<code>dgram</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dgram</code> is `null`."}],"pos":[150225,150255],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> has already established a default remote host.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."}],"pos":[150365,150466],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[150572,150637],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[150751,150796],"yaml":true},{"content":"Sends a UDP datagram asynchronously to a remote host.","nodes":[{"pos":[0,53],"content":"Sends a UDP datagram asynchronously to a remote host.","nodes":[{"content":"Sends a UDP datagram asynchronously to a remote host.","pos":[0,53]}]}],"pos":[152075,152129],"yaml":true},{"content":"This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.  \n  \n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \n  \n> [!WARNING]\n>  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,596],"content":"This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.","nodes":[{"content":"This method sends datagrams to the specified endpoint.","pos":[0,54]},{"content":"Before calling this overload, you must first create an <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the IP address and port number of the remote host to which your datagrams will be delivered.","pos":[55,237],"source":" Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered."},{"content":"You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Net.IPEndPoint&gt;</ph>.","pos":[238,486],"source":" You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>."},{"content":"After you have created this <ph id=\"ph1\">&lt;xref:System.Net.IPEndPoint&gt;</ph>, pass it to this method as the <ph id=\"ph2\">`endPoint`</ph> parameter.","pos":[487,596],"source":" After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter."}]},{"pos":[603,955],"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","pos":[0,352],"nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.","pos":[0,279],"source":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.","pos":[280,352],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."}]}]},{"pos":[963,1557],"content":"[!WARNING]\n Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[11,592],"nodes":[{"content":"Do not provide an <ph id=\"ph1\">`endPoint`</ph> parameter to this method if you have already established a remote host with the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[1,164],"source":" Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, this method will throw a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[165,243],"source":" If you do, this method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[244,422],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[423,581]}]}]}],"pos":[152140,153705],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.","nodes":[{"pos":[0,139],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.","source":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes."}],"pos":[153920,154060],"yaml":true},{"content":"The number of bytes in the datagram.","nodes":[{"pos":[0,36],"content":"The number of bytes in the datagram.","nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]}],"pos":[154120,154157],"yaml":true},{"content":"An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the host and port to which to send the datagram.","nodes":[{"pos":[0,110],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPEndPoint\"&gt;&lt;/xref&gt;</ph> that represents the host and port to which to send the datagram.","source":"An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the host and port to which to send the datagram."}],"pos":[154229,154340],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[154425,154485],"yaml":true},{"content":"<code>dgram</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dgram</code> is `null`."}],"pos":[154653,154683],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> has already established a default remote host.","source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."}],"pos":[154793,154890],"yaml":true},{"content":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"<xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[154996,155057],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[155171,155216],"yaml":true},{"content":"Sends a UDP datagram asynchronously to a remote host.","nodes":[{"pos":[0,53],"content":"Sends a UDP datagram asynchronously to a remote host.","nodes":[{"content":"Sends a UDP datagram asynchronously to a remote host.","pos":[0,53]}]}],"pos":[156703,156757],"yaml":true},{"content":"This method sends datagrams to the values specified by the `hostname` and `port` parameters. You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value.  \n  \n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \n  \n> [!WARNING]\n>  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","nodes":[{"pos":[0,216],"content":"This method sends datagrams to the values specified by the `hostname` and `port` parameters. You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value.","nodes":[{"content":"This method sends datagrams to the values specified by the <ph id=\"ph1\">`hostname`</ph> and <ph id=\"ph2\">`port`</ph> parameters.","pos":[0,92],"source":"This method sends datagrams to the values specified by the `hostname` and `port` parameters."},{"content":"You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the <ph id=\"ph1\">`hostname`</ph> parameter value.","pos":[93,216],"source":" You can send datagrams to the default broadcast address by specifying \"255.255.255.255\" for the `hostname` parameter value."}]},{"pos":[223,575],"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.","pos":[0,352],"nodes":[{"content":"If you want to send datagrams to any other broadcast address, use the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Client%2A&gt;</ph> method to obtain the underlying <ph id=\"ph2\">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and set the socket option to <ph id=\"ph3\">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph>.","pos":[0,279],"source":"If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>."},{"content":"You can also revert to using the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class.","pos":[280,352],"source":" You can also revert to using the <xref:System.Net.Sockets.Socket> class."}]}]},{"pos":[583,1180],"content":"[!WARNING]\n Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","leadings":["","> "],"nodes":[{"content":" Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[11,595],"nodes":[{"content":"Do not provide a host name or port number to this method if you have already established a remote host with the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.UdpClient.Connect%2A&gt;</ph> method.","pos":[1,167],"source":" Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method."},{"content":"If you do, this method will throw a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.","pos":[168,246],"source":" If you do, this method will throw a <xref:System.Net.Sockets.SocketException>."},{"content":"If you receive a <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;</ph> to obtain the specific error code.","pos":[247,425],"source":" If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code."},{"content":"Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.","pos":[426,584]}]}]}],"pos":[156768,157958],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.","nodes":[{"pos":[0,139],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that specifies the UDP datagram that you intend to send represented as an array of bytes.","source":"An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes."}],"pos":[158168,158308],"yaml":true},{"content":"The number of bytes in the datagram.","nodes":[{"pos":[0,36],"content":"The number of bytes in the datagram.","nodes":[{"content":"The number of bytes in the datagram.","pos":[0,36]}]}],"pos":[158368,158405],"yaml":true},{"content":"The name of the remote host to which you intend to send the datagram.","nodes":[{"pos":[0,69],"content":"The name of the remote host to which you intend to send the datagram.","nodes":[{"content":"The name of the remote host to which you intend to send the datagram.","pos":[0,69]}]}],"pos":[158469,158539],"yaml":true},{"content":"The remote port number with which you intend to communicate.","nodes":[{"pos":[0,60],"content":"The remote port number with which you intend to communicate.","nodes":[{"content":"The remote port number with which you intend to communicate.","pos":[0,60]}]}],"pos":[158598,158659],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[158744,158804],"yaml":true},{"content":"<code>dgram</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;dgram&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>dgram</code> is `null`."}],"pos":[158972,159002],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> has already established a default remote host.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host."}],"pos":[159112,159213],"yaml":true},{"content":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.","nodes":[{"pos":[0,64],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph> is closed.","source":"The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed."}],"pos":[159319,159384],"yaml":true},{"content":"An error occurred when accessing the socket.","nodes":[{"pos":[0,44],"content":"An error occurred when accessing the socket.","nodes":[{"content":"An error occurred when accessing the socket.","pos":[0,44]}]}],"pos":[159498,159543],"yaml":true},{"content":"Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.","nodes":[{"pos":[0,161],"content":"Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Sockets.UdpClient\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>."}],"pos":[160741,160903],"yaml":true},{"content":"The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.","nodes":[{"pos":[0,217],"content":"The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.","nodes":[{"content":"The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.","pos":[0,217]}]}],"pos":[160914,161132],"yaml":true,"extradata":"MT"},{"content":"The TTL value.","nodes":[{"pos":[0,14],"content":"The TTL value.","nodes":[{"content":"The TTL value.","pos":[0,14]}]}],"pos":[161656,161671],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Sockets.UdpClient\n  commentId: T:System.Net.Sockets.UdpClient\n  id: UdpClient\n  children:\n  - System.Net.Sockets.UdpClient.#ctor\n  - System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.Active\n  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  - System.Net.Sockets.UdpClient.Available\n  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  - System.Net.Sockets.UdpClient.Client\n  - System.Net.Sockets.UdpClient.Close\n  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.Dispose\n  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  - System.Net.Sockets.UdpClient.DontFragment\n  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.EnableBroadcast\n  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)\n  - System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  - System.Net.Sockets.UdpClient.Finalize\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  - System.Net.Sockets.UdpClient.MulticastLoopback\n  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\n  - System.Net.Sockets.UdpClient.ReceiveAsync\n  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)\n  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  - System.Net.Sockets.UdpClient.Ttl\n  - System.Net.Sockets.UdpClient.System#IDisposable#Dispose\n  langs:\n  - csharp\n  name: UdpClient\n  nameWithType: UdpClient\n  fullName: System.Net.Sockets.UdpClient\n  type: Class\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Provides User Datagram Protocol (UDP) network services.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \\n  \\n-   Create an instance of the <xref:System.Net.Sockets.UdpClient> class using the remote host name and port number as parameters.  \\n  \\n-   Create an instance of the <xref:System.Net.Sockets.UdpClient> class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \\n  \\n You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \\n  \\n> [!NOTE]\\n>  Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception.  \\n  \\n <xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group.\"\n  example:\n  - \"The following example establishes a <xref:System.Net.Sockets.UdpClient> connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \\n  \\n [!code-cpp[Classic UdpClientExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClientExample/CPP/source.cpp#1)]\\n [!code-csharp[Classic UdpClientExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClientExample/CS/source.cs#1)]\\n [!code-vb[Classic UdpClientExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClientExample/VB/source.vb#1)]\"\n  syntax:\n    content: 'public class UdpClient : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.#ctor\n  commentId: M:System.Net.Sockets.UdpClient.#ctor\n  id: '#ctor'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient()\n  nameWithType: UdpClient.UdpClient()\n  fullName: UdpClient.UdpClient()\n  type: Constructor\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class.\n  remarks: \"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n This constructor is not suitable for joining a multicast group because it does not perform socket binding. Also, it works only with IPv4 address types.\"\n  example:\n  - \"The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]\"\n  syntax:\n    content: public UdpClient ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(Int32)\n  nameWithType: UdpClient.UdpClient(Int32)\n  fullName: UdpClient.UdpClient(Int32)\n  type: Constructor\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided.\n  remarks: \"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate. Use this constructor if you are only interested in setting the local port number. The underlying service provider will assign the local IP address. If you pass 0 to the constructor, the underlying service provider will assign a port number. If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n This constructor works only with IPv4 address types.\"\n  example:\n  - \"The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#1)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#1)]\"\n  syntax:\n    content: public UdpClient (int port);\n    parameters:\n    - id: port\n      type: System.Int32\n      description: The local port number from which you intend to communicate.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>port</code> parameter is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  id: '#ctor(System.Net.IPEndPoint)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(IPEndPoint)\n  nameWithType: UdpClient.UdpClient(IPEndPoint)\n  fullName: UdpClient.UdpClient(IPEndPoint)\n  type: Constructor\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the specified local endpoint.\n  remarks: \"This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number for sending and receiving data. If you do not, the underlying service provider will assign the most appropriate local IP address and port number.  \\n  \\n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]\"\n  syntax:\n    content: public UdpClient (System.Net.IPEndPoint localEP);\n    parameters:\n    - id: localEP\n      type: System.Net.IPEndPoint\n      description: An <xref href=\"System.Net.IPEndPoint\"></xref> that respresents the local endpoint to which you bind the UDP connection.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>localEP</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(AddressFamily)\n  nameWithType: UdpClient.UdpClient(AddressFamily)\n  fullName: UdpClient.UdpClient(AddressFamily)\n  type: Constructor\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class.\n  remarks: \"The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.  \\n  \\n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n The <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> is not suitable for joining a multicast group because it does not perform socket binding.\"\n  syntax:\n    content: public UdpClient (System.Net.Sockets.AddressFamily family);\n    parameters:\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> values that specifies the addressing scheme of the socket.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>family</code> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(Int32, AddressFamily)\n  nameWithType: UdpClient.UdpClient(Int32, AddressFamily)\n  fullName: UdpClient.UdpClient(Int32, AddressFamily)\n  type: Constructor\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and binds it to the local port number provided.\n  remarks: \"This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.  \\n  \\n The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address. To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value. To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value. Passing any other value will cause the method to throw an <xref:System.ArgumentException>.  \\n  \\n If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following code example shows how to create a UDP client to use in a multicast group.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#3)]\\n [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#3)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#3)]\"\n  syntax:\n    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);\n    parameters:\n    - id: port\n      type: System.Int32\n      description: The port on which to listen for incoming connection attempts.\n    - id: family\n      type: System.Net.Sockets.AddressFamily\n      description: One of the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> values that specifies the addressing scheme of the socket.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>family</code> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: UdpClient(String, Int32)\n  nameWithType: UdpClient.UdpClient(String, Int32)\n  fullName: UdpClient.UdpClient(String, Int32)\n  type: Constructor\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\"></xref> class and establishes a default remote host.\n  remarks: \"This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters. Establishing a default remote host is optional. If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. Specifying a default remote host limits you to that host only. You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]\"\n  syntax:\n    content: public UdpClient (string hostname, int port);\n    parameters:\n    - id: hostname\n      type: System.String\n      description: The name of the remote DNS host to which you intend to connect.\n    - id: port\n      type: System.Int32\n      description: The remote port number to which you intend to connect.\n  overload: System.Net.Sockets.UdpClient.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostname</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Active\n  commentId: P:System.Net.Sockets.UdpClient.Active\n  id: Active\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Active\n  nameWithType: UdpClient.Active\n  fullName: UdpClient.Active\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a value indicating whether a default remote host has been established.\n  remarks: Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established. You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.\n  syntax:\n    content: protected bool Active { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if a connection is active; otherwise, `false`.'\n  overload: System.Net.Sockets.UdpClient.Active*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  commentId: M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  id: AllowNatTraversal(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: AllowNatTraversal(Boolean)\n  nameWithType: UdpClient.AllowNatTraversal(Boolean)\n  fullName: UdpClient.AllowNatTraversal(Boolean)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Enables or disables Network Address Translation (NAT) traversal on a <xref href=\"System.Net.Sockets.UdpClient\"></xref> instance.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.  \\n  \\n When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>. This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.  \\n  \\n When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>. This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.  \\n  \\n A Teredo address is an IPv6 address with the prefix of 2001::/32. Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.\"\n  syntax:\n    content: public void AllowNatTraversal (bool allowed);\n    parameters:\n    - id: allowed\n      type: System.Boolean\n      description: A Boolean value that specifies whether to enable or disable NAT traversal.\n  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Available\n  commentId: P:System.Net.Sockets.UdpClient.Available\n  id: Available\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Available\n  nameWithType: UdpClient.Available\n  fullName: UdpClient.Available\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets the amount of data received from the network that is available to read.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0.  \\n  \\n If the remote host shuts down or closes the connection, the <xref:System.Net.Sockets.UdpClient.Available%2A> property throws a <xref:System.Net.Sockets.SocketException>.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Available%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#1)]\\n [!code-csharp[System.Net.Sockets.UdpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#1)]\"\n  syntax:\n    content: public int Available { get; }\n    return:\n      type: System.Int32\n      description: The number of bytes of data received from the network.\n  overload: System.Net.Sockets.UdpClient.Available*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred while attempting to access the socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\n  id: BeginReceive(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginReceive(AsyncCallback, Object)\n  nameWithType: UdpClient.BeginReceive(AsyncCallback, Object)\n  fullName: UdpClient.BeginReceive(AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Receives a datagram from a remote host asynchronously.\n  remarks: \"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> to asynchronously receive a server response.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]\"\n  syntax:\n    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);\n    parameters:\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the receive operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous receive.\n  overload: System.Net.Sockets.UdpClient.BeginReceive*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginSend(Byte[], Int32, String, Int32, AsyncCallback, Object)\n  nameWithType: UdpClient.BeginSend(Byte[], Int32, String, Int32, AsyncCallback, Object)\n  fullName: UdpClient.BeginSend(Byte[], Int32, String, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Sends a datagram to a destination asynchronously. The destination is specified by the host name and port number.\n  remarks: \"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#5)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#5)]\"\n  syntax:\n    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array that contains the data to be sent.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes to send.\n    - id: hostname\n      type: System.String\n      description: The destination host.\n    - id: port\n      type: System.Int32\n      description: The destination port number.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send.\n  overload: System.Net.Sockets.UdpClient.BeginSend*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginSend(Byte[], Int32, AsyncCallback, Object)\n  nameWithType: UdpClient.BeginSend(Byte[], Int32, AsyncCallback, Object)\n  fullName: UdpClient.BeginSend(Byte[], Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Sends a datagram to a remote host asynchronously. The destination was specified previously by a call to <xref href=\"System.Net.Sockets.UdpClient.Connect*\"></xref>.\n  remarks: \"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation completes. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#3)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#3)]\"\n  syntax:\n    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array that contains the data to be sent.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes to send.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send.\n  overload: System.Net.Sockets.UdpClient.BeginSend*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: BeginSend(Byte[], Int32, IPEndPoint, AsyncCallback, Object)\n  nameWithType: UdpClient.BeginSend(Byte[], Int32, IPEndPoint, AsyncCallback, Object)\n  fullName: UdpClient.BeginSend(Byte[], Int32, IPEndPoint, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Sends a datagram to a destination asynchronously. The destination is specified by a <xref href=\"System.Net.EndPoint\"></xref>.\n  remarks: \"The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#4)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#4)]\"\n  syntax:\n    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array that contains the data to be sent.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes to send.\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: The <xref href=\"System.Net.EndPoint\"></xref> that represents the destination for the data.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the send operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object that references the asynchronous send.\n  overload: System.Net.Sockets.UdpClient.BeginSend*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Client\n  commentId: P:System.Net.Sockets.UdpClient.Client\n  id: Client\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Client\n  nameWithType: UdpClient.Client\n  fullName: UdpClient.Client\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets the underlying network <xref href=\"System.Net.Sockets.Socket\"></xref>.\n  remarks: <xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides. You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.\n  example:\n  - \"The following example demonstrates the use of the <xref:System.Net.Sockets.UdpClient.Client%2A> property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \\n  \\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CPP/source.cpp#1)]\\n [!code-csharp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CS/source.cs#1)]\\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Net.Sockets.Socket Client { get; set; }\n    return:\n      type: System.Net.Sockets.Socket\n      description: The underlying Network <xref href=\"System.Net.Sockets.Socket\"></xref>.\n  overload: System.Net.Sockets.UdpClient.Client*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Close\n  commentId: M:System.Net.Sockets.UdpClient.Close\n  id: Close\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: UdpClient.Close()\n  fullName: UdpClient.Close()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Closes the UDP connection.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Close%2A> disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the <xref:System.Net.Sockets.UdpClient.Close%2A> method.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.Close*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)\n  id: Connect(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Connect(IPEndPoint)\n  nameWithType: UdpClient.Connect(IPEndPoint)\n  fullName: UdpClient.Connect(IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Establishes a default remote host using the specified network endpoint.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \\n  \\n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \\n  \\n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.\"\n  example:\n  - \"The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]\"\n  syntax:\n    content: public void Connect (System.Net.IPEndPoint endPoint);\n    parameters:\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: An <xref href=\"System.Net.IPEndPoint\"></xref> that specifies the network endpoint to which you intend to send data.\n  overload: System.Net.Sockets.UdpClient.Connect*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>endPoint</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)\n  id: Connect(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Connect(IPAddress, Int32)\n  nameWithType: UdpClient.Connect(IPAddress, Int32)\n  fullName: UdpClient.Connect(IPAddress, Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Establishes a default remote host using the specified IP address and port number.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \\n  \\n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host. If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \\n  \\n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.\"\n  example:\n  - \"The following example uses an IP address and port number to connect with a remote host.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]\"\n  syntax:\n    content: public void Connect (System.Net.IPAddress addr, int port);\n    parameters:\n    - id: addr\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> of the remote host to which you intend to send data.\n    - id: port\n      type: System.Int32\n      description: The port number to which you intend send data.\n  overload: System.Net.Sockets.UdpClient.Connect*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>addr</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  id: Connect(System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Connect(String, Int32)\n  nameWithType: UdpClient.Connect(String, Int32)\n  fullName: UdpClient.Connect(String, Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Establishes a default remote host using the specified host name and port number.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `port` and `hostname` parameters. Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.  \\n  \\n Establishing a default remote host is optional. Specifying a default remote host limits you to that host only. If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.  \\n  \\n If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded. You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.  \\n  \\n You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method. If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.\"\n  example:\n  - \"The following example uses the host name and port number to connect to a remote host.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]\"\n  syntax:\n    content: public void Connect (string hostname, int port);\n    parameters:\n    - id: hostname\n      type: System.String\n      description: The DNS name of the remote host to which you intend send data.\n    - id: port\n      type: System.Int32\n      description: The port number on the remote host to which you intend to send data.\n  overload: System.Net.Sockets.UdpClient.Connect*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>port</code> is not between <xref href=\"System.Net.IPEndPoint.MinPort\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\"></xref>.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Dispose\n  commentId: M:System.Net.Sockets.UdpClient.Dispose\n  id: Dispose\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: UdpClient.Dispose()\n  fullName: UdpClient.Dispose()\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  commentId: M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: UdpClient.Dispose(Boolean)\n  fullName: UdpClient.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Net.Sockets.UdpClient.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.DontFragment\n  commentId: P:System.Net.Sockets.UdpClient.DontFragment\n  id: DontFragment\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: DontFragment\n  nameWithType: UdpClient.DontFragment\n  fullName: UdpClient.DontFragment\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows Internet Protocol (IP) datagrams to be fragmented.\n  remarks: Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host or by an intermediate router. If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#2)]\\n [!code-csharp[System.Net.Sockets.UdpClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#2)]\"\n  syntax:\n    content: public bool DontFragment { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows datagram fragmentation; otherwise, `false`. The default is `true`.'\n  overload: System.Net.Sockets.UdpClient.DontFragment*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This property can be set only for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\"></xref> flag.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: DropMulticastGroup(IPAddress, Int32)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress, Int32)\n  fullName: UdpClient.DropMulticastGroup(IPAddress, Int32)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Leaves a multicast group.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following code example demonstrates how to drop a multicast group by providing a multicast address.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]\\n [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]\"\n  syntax:\n    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to leave.\n    - id: ifindex\n      type: System.Int32\n      description: The local address of the multicast group to leave.\n  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>multicastAddr</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  id: DropMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: DropMulticastGroup(IPAddress)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress)\n  fullName: UdpClient.DropMulticastGroup(IPAddress)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Leaves a multicast group.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group. After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.  \\n  \\n> [!NOTE]\\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates how to drop a multicast group by providing a multicast address.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]\\n [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]\"\n  syntax:\n    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to leave.\n  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>multicastAddr</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.EnableBroadcast\n  commentId: P:System.Net.Sockets.UdpClient.EnableBroadcast\n  id: EnableBroadcast\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: EnableBroadcast\n  nameWithType: UdpClient.EnableBroadcast\n  fullName: UdpClient.EnableBroadcast\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> may send or receive broadcast packets.\n  remarks: Broadcasting is limited to a specific subnet. You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#3)]\\n [!code-csharp[System.Net.Sockets.UdpClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#3)]\"\n  syntax:\n    content: public bool EnableBroadcast { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows broadcast packets; otherwise, `false`. The default is `false`.'\n  overload: System.Net.Sockets.UdpClient.EnableBroadcast*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  commentId: M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: EndReceive(IAsyncResult, IPEndPoint)\n  nameWithType: UdpClient.EndReceive(IAsyncResult, IPEndPoint)\n  fullName: UdpClient.EndReceive(IAsyncResult, IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Ends a pending asynchronous receive.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]\"\n  syntax:\n    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"></xref>.\n    - id: remoteEP\n      type: System.Net.IPEndPoint\n      description: The specified remote endpoint.\n    return:\n      type: System.Byte[]\n      description: If successful, the number of bytes received. If unsuccessful, this method returns 0.\n  overload: System.Net.Sockets.UdpClient.EndReceive*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not returned by a call to the <xref href=\"System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\"></xref> method.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\"></xref> was previously called for the asynchronous read.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying <xref href=\"System.Net.Sockets.Socket\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)\n  commentId: M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)\n  id: EndSend(System.IAsyncResult)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: EndSend(IAsyncResult)\n  nameWithType: UdpClient.EndSend(IAsyncResult)\n  fullName: UdpClient.EndSend(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Ends a pending asynchronous send.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.\"\n  example:\n  - \"The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]\\n [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]\"\n  syntax:\n    content: public int EndSend (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> object returned by a call to <xref href=\"System.Net.Sockets.UdpClient.BeginSend*\"></xref>.\n    return:\n      type: System.Int32\n      description: If successful, the number of bytes sent to the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.\n  overload: System.Net.Sockets.UdpClient.EndSend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>asyncResult</code> was not returned by a call to the <xref href=\"System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)\"></xref> method.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Net.Sockets.Socket.EndSend(System.IAsyncResult)\"></xref> was previously called for the asynchronous read.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  commentId: P:System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  id: ExclusiveAddressUse\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: ExclusiveAddressUse\n  nameWithType: UdpClient.ExclusiveAddressUse\n  fullName: UdpClient.ExclusiveAddressUse\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a port.\n  remarks: \"By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.  \\n  \\n This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property\"\n  example:\n  - \"The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#4)]\\n [!code-csharp[System.Net.Sockets.UdpClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#4)]\"\n  syntax:\n    content: public bool ExclusiveAddressUse { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> allows only one client to use a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions.'\n  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when attempting to access the underlying socket.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Finalize\n  commentId: M:System.Net.Sockets.UdpClient.Finalize\n  id: Finalize\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: UdpClient.Finalize()\n  fullName: UdpClient.Finalize()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  syntax:\n    content: ~UdpClient ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.Finalize*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)\n  fullName: UdpClient.JoinMulticastGroup(IPAddress)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.  \\n  \\n> [!NOTE]\\n>  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  \\n  \\n Before joining a multicast group, make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept a port or an endpoint as a parameter.  \\n  \\n To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.  \\n  \\n> [!NOTE]\\n>  In the IPv6 case, there are several multicast address ranges you can choose from. Please, refer to the IETF RFC 2375.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).\"\n  example:\n  - \"The following code example demonstrates how to join a multicast group by providing a multicast address.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#1)]\\n [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#1)]\\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#1)]\"\n  syntax:\n    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(Int32, IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(Int32, IPAddress)\n  fullName: UdpClient.JoinMulticastGroup(Int32, IPAddress)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.\n  remarks: \"Before joining a multicast group, be sure the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  \\n  \\n The `infindex` parameter is used to identify a hardware interface on the same link.  \\n  \\n> [!NOTE]\\n>  There are several multicast address ranges to choose from. Refer to the IETF RFC 2375.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> constructor).\"\n  example:\n  - >-\n    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#5)]\n     [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#5)]\n     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#5)]\n  syntax:\n    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);\n    parameters:\n    - id: ifindex\n      type: System.Int32\n      description: The interface index associated with the local IP address on which to join the multicast group.\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(IPAddress, Int32)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, Int32)\n  fullName: UdpClient.JoinMulticastGroup(IPAddress, Int32)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group with the specified Time to Live (TTL).\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>. After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group. The multicast address range is 224.0.0.0 to 239.255.255.255. If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded. Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.  \\n  \\n> [!NOTE]\\n>  You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams. Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work. You do not need to belong to a multicast group to send datagrams to a multicast IP address.  \\n  \\n Before joining a multicast group make sure the socket is bound to the port or endpoint. You do that by calling one of the constructors that accept as parameter a port or an endpoint.  \\n  \\n To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).\"\n  example:\n  - \"The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]\"\n  syntax:\n    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The <xref href=\"System.Net.IPAddress\"></xref> of the multicast group to join.\n    - id: timeToLive\n      type: System.Int32\n      description: The Time to Live (TTL), measured in router hops.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The TTL provided is not between 0 and 255\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>multicastAddr</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\"></xref> value that defines the addressing scheme of the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: JoinMulticastGroup(IPAddress, IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, IPAddress)\n  fullName: UdpClient.JoinMulticastGroup(IPAddress, IPAddress)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Adds a <xref href=\"System.Net.Sockets.UdpClient\"></xref> to a multicast group.\n  remarks: \"Before you join a multicast group, be sure that the socket is bound to the port or endpoint. You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.  \\n  \\n> [!NOTE]\\n>  There are several multicast address ranges to choose from. You can find them in the IETF RFC 2375.  \\n  \\n> [!NOTE]\\n>  You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#6)]\\n [!code-csharp[System.Net.Sockets.UdpClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#6)]\"\n  syntax:\n    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);\n    parameters:\n    - id: multicastAddr\n      type: System.Net.IPAddress\n      description: The multicast <xref href=\"System.Net.IPAddress\"></xref> of the group you want to join.\n    - id: localAddress\n      type: System.Net.IPAddress\n      description: The local <xref href=\"System.Net.IPAddress\"></xref>.\n  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.MulticastLoopback\n  commentId: P:System.Net.Sockets.UdpClient.MulticastLoopback\n  id: MulticastLoopback\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: MulticastLoopback\n  nameWithType: UdpClient.MulticastLoopback\n  fullName: UdpClient.MulticastLoopback\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a <xref href=\"System.Boolean\"></xref> value that specifies whether outgoing multicast packets are delivered to the sending application.\n  remarks: Multicast is a scalable method for many-to-many communication on the Internet. If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#7)]\\n [!code-csharp[System.Net.Sockets.UdpClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#7)]\"\n  syntax:\n    content: public bool MulticastLoopback { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Net.Sockets.UdpClient\"></xref> receives outgoing multicast packets; otherwise, `false`.'\n  overload: System.Net.Sockets.UdpClient.MulticastLoopback*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\n  commentId: M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\n  id: Receive(System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Receive(IPEndPoint)\n  nameWithType: UdpClient.Receive(IPEndPoint)\n  fullName: UdpClient.Receive(IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Returns a UDP datagram that was sent by a remote host.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Receive%2A> method will block until a datagram arrives from a remote host. When data is available, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will read the first enqueued datagram and return the data portion as a byte array. This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.  \\n  \\n If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only. All other datagrams will be discarded.  \\n  \\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!NOTE]\\n>  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Receive%2A> method. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]\"\n  syntax:\n    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);\n    parameters:\n    - id: remoteEP\n      type: System.Net.IPEndPoint\n      description: An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the remote host from which the data was sent.\n    return:\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that contains datagram data.\n  overload: System.Net.Sockets.UdpClient.Receive*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.ReceiveAsync\n  commentId: M:System.Net.Sockets.UdpClient.ReceiveAsync\n  id: ReceiveAsync\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: ReceiveAsync()\n  nameWithType: UdpClient.ReceiveAsync()\n  fullName: UdpClient.ReceiveAsync()\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Returns a UDP datagram asynchronously that was sent by a remote host.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.  \\n  \\n If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only. All other datagrams will be discarded.  \\n  \\n If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n> [!WARNING]\\n>  If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method. The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation.\"\n  overload: System.Net.Sockets.UdpClient.ReceiveAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The underlying <xref href=\"System.Net.Sockets.Socket\"></xref> has been closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)\n  id: Send(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Send(Byte[], Int32)\n  nameWithType: UdpClient.Send(Byte[], Int32)\n  fullName: UdpClient.Send(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram to a remote host.\n  remarks: \"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]\"\n  syntax:\n    content: public int Send (byte[] dgram, int bytes);\n    parameters:\n    - id: dgram\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    return:\n      type: System.Int32\n      description: The number of bytes sent.\n  overload: System.Net.Sockets.UdpClient.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Send(Byte[], Int32, IPEndPoint)\n  nameWithType: UdpClient.Send(Byte[], Int32, IPEndPoint)\n  fullName: UdpClient.Send(Byte[], Int32, IPEndPoint)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram to the host at the specified remote endpoint.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to the <xref:System.Net.Sockets.UdpClient.Send%2A> method as the `endPoint` parameter.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]\"\n  syntax:\n    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);\n    parameters:\n    - id: dgram\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send, represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the host and port to which to send the datagram.\n    return:\n      type: System.Int32\n      description: The number of bytes sent.\n  overload: System.Net.Sockets.UdpClient.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)\n  id: Send(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Send(Byte[], Int32, String, Int32)\n  nameWithType: UdpClient.Send(Byte[], Int32, String, Int32)\n  fullName: UdpClient.Send(Byte[], Int32, String, Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram to a specified port on a specified remote host.\n  remarks: \"The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent. You can send datagrams to the default broadcast address by specifying \\\"255.255.255.255\\\" for the `hostname` parameter value.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!NOTE]\\n>  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \\n  \\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]\\n [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]\\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]\"\n  syntax:\n    content: public int Send (byte[] dgram, int bytes, string hostname, int port);\n    parameters:\n    - id: dgram\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: hostname\n      type: System.String\n      description: The name of the remote host to which you intend to send the datagram.\n    - id: port\n      type: System.Int32\n      description: The remote port number with which you intend to communicate.\n    return:\n      type: System.Int32\n      description: The number of bytes sent.\n  overload: System.Net.Sockets.UdpClient.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)\n  id: SendAsync(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: SendAsync(Byte[], Int32)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32)\n  fullName: UdpClient.SendAsync(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram asynchronously to a remote host.\n  remarks: \"This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \\n  \\n If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host. Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Net.Sockets.UdpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: SendAsync(Byte[], Int32, IPEndPoint)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32, IPEndPoint)\n  fullName: UdpClient.SendAsync(Byte[], Int32, IPEndPoint)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram asynchronously to a remote host.\n  remarks: \"This method sends datagrams to the specified endpoint. Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered. You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>. After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!WARNING]\\n>  Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: endPoint\n      type: System.Net.IPEndPoint\n      description: An <xref href=\"System.Net.IPEndPoint\"></xref> that represents the host and port to which to send the datagram.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Net.Sockets.UdpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: SendAsync(Byte[], Int32, String, Int32)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32, String, Int32)\n  fullName: UdpClient.SendAsync(Byte[], Int32, String, Int32)\n  type: Method\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Sends a UDP datagram asynchronously to a remote host.\n  remarks: \"This method sends datagrams to the values specified by the `hostname` and `port` parameters. You can send datagrams to the default broadcast address by specifying \\\"255.255.255.255\\\" for the `hostname` parameter value.  \\n  \\n If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You can also revert to using the <xref:System.Net.Sockets.Socket> class.  \\n  \\n> [!WARNING]\\n>  Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method. If you do, this method will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);\n    parameters:\n    - id: datagram\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.\n    - id: bytes\n      type: System.Int32\n      description: The number of bytes in the datagram.\n    - id: hostname\n      type: System.String\n      description: The name of the remote host to which you intend to send the datagram.\n    - id: port\n      type: System.Int32\n      description: The remote port number with which you intend to communicate.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Net.Sockets.UdpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dgram</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> has already established a default remote host.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Net.Sockets.UdpClient\"></xref> is closed.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error occurred when accessing the socket.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.Ttl\n  commentId: P:System.Net.Sockets.UdpClient.Ttl\n  id: Ttl\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: Ttl\n  nameWithType: UdpClient.Ttl\n  fullName: UdpClient.Ttl\n  type: Property\n  assemblies:\n  - System.Net.Sockets\n  - System\n  - netstandard\n  namespace: System.Net.Sockets\n  summary: Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.UdpClient\"></xref>.\n  remarks: The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.\n  example:\n  - \"The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Ttl%2A> property.  \\n  \\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#5)]\\n [!code-csharp[System.Net.Sockets.UdpClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#5)]\"\n  syntax:\n    content: public short Ttl { get; set; }\n    return:\n      type: System.Int16\n      description: The TTL value.\n  overload: System.Net.Sockets.UdpClient.Ttl*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Sockets.UdpClient.System#IDisposable#Dispose\n  commentId: M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: System.Net.Sockets.UdpClient\n  langs:\n  - csharp\n  name: IDisposable.Dispose()\n  nameWithType: UdpClient.IDisposable.Dispose()\n  fullName: UdpClient.IDisposable.Dispose()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Net.Sockets\n  syntax:\n    content: void IDisposable.Dispose ();\n    parameters: []\n  overload: System.Net.Sockets.UdpClient.System#IDisposable#Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Net.Sockets.SocketException\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketException\n  nameWithType: SocketException\n  fullName: System.Net.Sockets.SocketException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Net.Sockets.UdpClient.#ctor\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient()\n  nameWithType: UdpClient.UdpClient()\n  fullName: UdpClient.UdpClient()\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(Int32)\n  nameWithType: UdpClient.UdpClient(Int32)\n  fullName: UdpClient.UdpClient(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(IPEndPoint)\n  nameWithType: UdpClient.UdpClient(IPEndPoint)\n  fullName: UdpClient.UdpClient(IPEndPoint)\n- uid: System.Net.IPEndPoint\n  parent: System.Net\n  isExternal: false\n  name: IPEndPoint\n  nameWithType: IPEndPoint\n  fullName: System.Net.IPEndPoint\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(AddressFamily)\n  nameWithType: UdpClient.UdpClient(AddressFamily)\n  fullName: UdpClient.UdpClient(AddressFamily)\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  nameWithType: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(Int32, AddressFamily)\n  nameWithType: UdpClient.UdpClient(Int32, AddressFamily)\n  fullName: UdpClient.UdpClient(Int32, AddressFamily)\n- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient(String, Int32)\n  nameWithType: UdpClient.UdpClient(String, Int32)\n  fullName: UdpClient.UdpClient(String, Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.Sockets.UdpClient.Active\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Active\n  nameWithType: UdpClient.Active\n  fullName: UdpClient.Active\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: AllowNatTraversal(Boolean)\n  nameWithType: UdpClient.AllowNatTraversal(Boolean)\n  fullName: UdpClient.AllowNatTraversal(Boolean)\n- uid: System.Net.Sockets.UdpClient.Available\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Available\n  nameWithType: UdpClient.Available\n  fullName: UdpClient.Available\n- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginReceive(AsyncCallback, Object)\n  nameWithType: UdpClient.BeginReceive(AsyncCallback, Object)\n  fullName: UdpClient.BeginReceive(AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend(Byte[], Int32, String, Int32, AsyncCallback, Object)\n  nameWithType: UdpClient.BeginSend(Byte[], Int32, String, Int32, AsyncCallback, Object)\n  fullName: UdpClient.BeginSend(Byte[], Int32, String, Int32, AsyncCallback, Object)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend(Byte[], Int32, AsyncCallback, Object)\n  nameWithType: UdpClient.BeginSend(Byte[], Int32, AsyncCallback, Object)\n  fullName: UdpClient.BeginSend(Byte[], Int32, AsyncCallback, Object)\n- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend(Byte[], Int32, IPEndPoint, AsyncCallback, Object)\n  nameWithType: UdpClient.BeginSend(Byte[], Int32, IPEndPoint, AsyncCallback, Object)\n  fullName: UdpClient.BeginSend(Byte[], Int32, IPEndPoint, AsyncCallback, Object)\n- uid: System.Net.Sockets.UdpClient.Client\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Client\n  nameWithType: UdpClient.Client\n  fullName: UdpClient.Client\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: false\n  name: Socket\n  nameWithType: Socket\n  fullName: System.Net.Sockets.Socket\n- uid: System.Net.Sockets.UdpClient.Close\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Close()\n  nameWithType: UdpClient.Close()\n  fullName: UdpClient.Close()\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect(IPEndPoint)\n  nameWithType: UdpClient.Connect(IPEndPoint)\n  fullName: UdpClient.Connect(IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect(IPAddress, Int32)\n  nameWithType: UdpClient.Connect(IPAddress, Int32)\n  fullName: UdpClient.Connect(IPAddress, Int32)\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect(String, Int32)\n  nameWithType: UdpClient.Connect(String, Int32)\n  fullName: UdpClient.Connect(String, Int32)\n- uid: System.Net.Sockets.UdpClient.Dispose\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Dispose()\n  nameWithType: UdpClient.Dispose()\n  fullName: UdpClient.Dispose()\n- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: UdpClient.Dispose(Boolean)\n  fullName: UdpClient.Dispose(Boolean)\n- uid: System.Net.Sockets.UdpClient.DontFragment\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DontFragment\n  nameWithType: UdpClient.DontFragment\n  fullName: UdpClient.DontFragment\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DropMulticastGroup(IPAddress, Int32)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress, Int32)\n  fullName: UdpClient.DropMulticastGroup(IPAddress, Int32)\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DropMulticastGroup(IPAddress)\n  nameWithType: UdpClient.DropMulticastGroup(IPAddress)\n  fullName: UdpClient.DropMulticastGroup(IPAddress)\n- uid: System.Net.Sockets.UdpClient.EnableBroadcast\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EnableBroadcast\n  nameWithType: UdpClient.EnableBroadcast\n  fullName: UdpClient.EnableBroadcast\n- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndReceive(IAsyncResult, IPEndPoint)\n  nameWithType: UdpClient.EndReceive(IAsyncResult, IPEndPoint)\n  fullName: UdpClient.EndReceive(IAsyncResult, IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndSend(IAsyncResult)\n  nameWithType: UdpClient.EndSend(IAsyncResult)\n  fullName: UdpClient.EndSend(IAsyncResult)\n- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: UdpClient.ExclusiveAddressUse\n  fullName: UdpClient.ExclusiveAddressUse\n- uid: System.Net.Sockets.UdpClient.Finalize\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Finalize()\n  nameWithType: UdpClient.Finalize()\n  fullName: UdpClient.Finalize()\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)\n  fullName: UdpClient.JoinMulticastGroup(IPAddress)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(Int32, IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(Int32, IPAddress)\n  fullName: UdpClient.JoinMulticastGroup(Int32, IPAddress)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(IPAddress, Int32)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, Int32)\n  fullName: UdpClient.JoinMulticastGroup(IPAddress, Int32)\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup(IPAddress, IPAddress)\n  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, IPAddress)\n  fullName: UdpClient.JoinMulticastGroup(IPAddress, IPAddress)\n- uid: System.Net.Sockets.UdpClient.MulticastLoopback\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: MulticastLoopback\n  nameWithType: UdpClient.MulticastLoopback\n  fullName: UdpClient.MulticastLoopback\n- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Receive(IPEndPoint)\n  nameWithType: UdpClient.Receive(IPEndPoint)\n  fullName: UdpClient.Receive(IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.ReceiveAsync\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ReceiveAsync()\n  nameWithType: UdpClient.ReceiveAsync()\n  fullName: UdpClient.ReceiveAsync()\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Net.Sockets.UdpReceiveResult\n  name: UdpReceiveResult\n  nameWithType: UdpReceiveResult\n  fullName: System.Net.Sockets.UdpReceiveResult\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<UdpReceiveResult>\n  nameWithType: Task<UdpReceiveResult>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Sockets.UdpReceiveResult\n    name: UdpReceiveResult\n    nameWithType: UdpReceiveResult\n    fullName: System.Net.Sockets.UdpReceiveResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send(Byte[], Int32)\n  nameWithType: UdpClient.Send(Byte[], Int32)\n  fullName: UdpClient.Send(Byte[], Int32)\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send(Byte[], Int32, IPEndPoint)\n  nameWithType: UdpClient.Send(Byte[], Int32, IPEndPoint)\n  fullName: UdpClient.Send(Byte[], Int32, IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send(Byte[], Int32, String, Int32)\n  nameWithType: UdpClient.Send(Byte[], Int32, String, Int32)\n  fullName: UdpClient.Send(Byte[], Int32, String, Int32)\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync(Byte[], Int32)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32)\n  fullName: UdpClient.SendAsync(Byte[], Int32)\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync(Byte[], Int32, IPEndPoint)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32, IPEndPoint)\n  fullName: UdpClient.SendAsync(Byte[], Int32, IPEndPoint)\n- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync(Byte[], Int32, String, Int32)\n  nameWithType: UdpClient.SendAsync(Byte[], Int32, String, Int32)\n  fullName: UdpClient.SendAsync(Byte[], Int32, String, Int32)\n- uid: System.Net.Sockets.UdpClient.Ttl\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Ttl\n  nameWithType: UdpClient.Ttl\n  fullName: UdpClient.Ttl\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Net.Sockets.UdpClient.System#IDisposable#Dispose\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: IDisposable.Dispose()\n  nameWithType: UdpClient.IDisposable.Dispose()\n  fullName: UdpClient.IDisposable.Dispose()\n- uid: System.Net.Sockets.UdpClient.#ctor*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: UdpClient\n  nameWithType: UdpClient.UdpClient\n  fullName: UdpClient.UdpClient\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Active*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Active\n  nameWithType: UdpClient.Active\n  fullName: UdpClient.Active\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: AllowNatTraversal\n  nameWithType: UdpClient.AllowNatTraversal\n  fullName: UdpClient.AllowNatTraversal\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Available*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Available\n  nameWithType: UdpClient.Available\n  fullName: UdpClient.Available\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.BeginReceive*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginReceive\n  nameWithType: UdpClient.BeginReceive\n  fullName: UdpClient.BeginReceive\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.BeginSend*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: BeginSend\n  nameWithType: UdpClient.BeginSend\n  fullName: UdpClient.BeginSend\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Client*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Client\n  nameWithType: UdpClient.Client\n  fullName: UdpClient.Client\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Close*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Close\n  nameWithType: UdpClient.Close\n  fullName: UdpClient.Close\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Connect*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Connect\n  nameWithType: UdpClient.Connect\n  fullName: UdpClient.Connect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Dispose*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Dispose\n  nameWithType: UdpClient.Dispose\n  fullName: UdpClient.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.DontFragment*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DontFragment\n  nameWithType: UdpClient.DontFragment\n  fullName: UdpClient.DontFragment\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: DropMulticastGroup\n  nameWithType: UdpClient.DropMulticastGroup\n  fullName: UdpClient.DropMulticastGroup\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.EnableBroadcast*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EnableBroadcast\n  nameWithType: UdpClient.EnableBroadcast\n  fullName: UdpClient.EnableBroadcast\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.EndReceive*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndReceive\n  nameWithType: UdpClient.EndReceive\n  fullName: UdpClient.EndReceive\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.EndSend*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: EndSend\n  nameWithType: UdpClient.EndSend\n  fullName: UdpClient.EndSend\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ExclusiveAddressUse\n  nameWithType: UdpClient.ExclusiveAddressUse\n  fullName: UdpClient.ExclusiveAddressUse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Finalize*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Finalize\n  nameWithType: UdpClient.Finalize\n  fullName: UdpClient.Finalize\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: JoinMulticastGroup\n  nameWithType: UdpClient.JoinMulticastGroup\n  fullName: UdpClient.JoinMulticastGroup\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.MulticastLoopback*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: MulticastLoopback\n  nameWithType: UdpClient.MulticastLoopback\n  fullName: UdpClient.MulticastLoopback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Receive*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Receive\n  nameWithType: UdpClient.Receive\n  fullName: UdpClient.Receive\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.ReceiveAsync*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: ReceiveAsync\n  nameWithType: UdpClient.ReceiveAsync\n  fullName: UdpClient.ReceiveAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Send*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Send\n  nameWithType: UdpClient.Send\n  fullName: UdpClient.Send\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.SendAsync*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: SendAsync\n  nameWithType: UdpClient.SendAsync\n  fullName: UdpClient.SendAsync\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.Ttl*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: Ttl\n  nameWithType: UdpClient.Ttl\n  fullName: UdpClient.Ttl\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Net.Sockets.UdpClient.System#IDisposable#Dispose*\n  parent: System.Net.Sockets.UdpClient\n  isExternal: false\n  name: System.IDisposable.Dispose\n  nameWithType: UdpClient.System.IDisposable.Dispose\n  fullName: UdpClient.System.IDisposable.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/UdpClient.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}