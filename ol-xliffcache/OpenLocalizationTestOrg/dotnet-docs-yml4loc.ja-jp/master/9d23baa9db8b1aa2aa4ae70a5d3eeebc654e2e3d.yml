### YamlMime:ManagedReference
items:
- uid: System.Messaging.Message
  commentId: T:System.Messaging.Message
  id: Message
  children:
  - System.Messaging.Message.#ctor
  - System.Messaging.Message.#ctor(System.Object)
  - System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  - System.Messaging.Message.AcknowledgeType
  - System.Messaging.Message.Acknowledgment
  - System.Messaging.Message.AdministrationQueue
  - System.Messaging.Message.AppSpecific
  - System.Messaging.Message.ArrivedTime
  - System.Messaging.Message.AttachSenderId
  - System.Messaging.Message.Authenticated
  - System.Messaging.Message.AuthenticationProviderName
  - System.Messaging.Message.AuthenticationProviderType
  - System.Messaging.Message.Body
  - System.Messaging.Message.BodyStream
  - System.Messaging.Message.BodyType
  - System.Messaging.Message.ConnectorType
  - System.Messaging.Message.CorrelationId
  - System.Messaging.Message.DestinationQueue
  - System.Messaging.Message.DestinationSymmetricKey
  - System.Messaging.Message.DigitalSignature
  - System.Messaging.Message.EncryptionAlgorithm
  - System.Messaging.Message.Extension
  - System.Messaging.Message.Formatter
  - System.Messaging.Message.HashAlgorithm
  - System.Messaging.Message.Id
  - System.Messaging.Message.InfiniteTimeout
  - System.Messaging.Message.IsFirstInTransaction
  - System.Messaging.Message.IsLastInTransaction
  - System.Messaging.Message.Label
  - System.Messaging.Message.LookupId
  - System.Messaging.Message.MessageType
  - System.Messaging.Message.Priority
  - System.Messaging.Message.Recoverable
  - System.Messaging.Message.ResponseQueue
  - System.Messaging.Message.SecurityContext
  - System.Messaging.Message.SenderCertificate
  - System.Messaging.Message.SenderId
  - System.Messaging.Message.SenderVersion
  - System.Messaging.Message.SentTime
  - System.Messaging.Message.SourceMachine
  - System.Messaging.Message.TimeToBeReceived
  - System.Messaging.Message.TimeToReachQueue
  - System.Messaging.Message.TransactionId
  - System.Messaging.Message.TransactionStatusQueue
  - System.Messaging.Message.UseAuthentication
  - System.Messaging.Message.UseDeadLetterQueue
  - System.Messaging.Message.UseEncryption
  - System.Messaging.Message.UseJournalQueue
  - System.Messaging.Message.UseTracing
  langs:
  - csharp
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
  type: Class
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Provides access to the properties needed to define a Message Queuing message.
  remarks: "Use the <xref:System.Messaging.Message> class to peek or receive messages from a queue, or to have fine control over message properties when sending a message to a queue.  \n  \n <xref:System.Messaging.MessageQueue> uses the <xref:System.Messaging.Message> class when it peeks or receives messages from queues, because both the <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName> and <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> methods create a new instance of the <xref:System.Messaging.Message> class and set the instance's properties. The <xref:System.Messaging.Message> class's read-only properties apply to retrieving messages from a queue, while the read/write properties apply to sending and retrieving messages. When <xref:System.Messaging.MessageQueue> peeks or receives a message from a queue, its <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property determines which of the message's properties are retrieved.  \n  \n The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> method allows you to specify any object type for a message being sent to that queue. You can use the <xref:System.Messaging.MessageQueue> instance's <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property to specify settings for generic messages sent to the queue. The types of settings include formatter, label, encryption, and authentication. You can also specify values for the appropriate <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> members when you coordinate your messaging application to respond to acknowledgment and report messages. Using a <xref:System.Messaging.Message> instance to send a message to the queue gives you the flexibility to access and modify many of these propertiesâ€”either for a single message or on a message-by-message basis. <xref:System.Messaging.Message> properties take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.  \n  \n Message data is stored in the <xref:System.Messaging.Message.Body%2A> property and to a lesser extent, the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties. When message data is encrypted, serialized, or deserialized, only the contents of the <xref:System.Messaging.Message.Body%2A> property are affected.  \n  \n The contents of the <xref:System.Messaging.Message.Body%2A> property are serialized when the message is sent, using the <xref:System.Messaging.Message.Formatter%2A> property you specify. The serialized contents are found in the <xref:System.Messaging.Message.BodyStream%2A> property. You can also set the <xref:System.Messaging.Message.BodyStream%2A> property directly, for example, to send a file as the data content of a message. You can change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> properties at any time before sending the message, and the data will be serialized appropriately when you call <xref:System.Messaging.MessageQueue.Send%2A>.  \n  \n The properties defined by the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> property apply only to messages that are not of type <xref:System.Messaging.Message>. If you specify the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property for a <xref:System.Messaging.MessageQueue>, the identically named properties in a <xref:System.Messaging.Message> instance sent to that queue cause these default properties to be ignored.  \n  \n For a list of initial property values for an instance of <xref:System.Messaging.Message>, see the <xref:System.Messaging.Message.%23ctor%2A> constructor."
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]\n [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]\n [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]\n [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]\n [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]"
  syntax:
    content: 'public class Message : System.ComponentModel.Component'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.#ctor
  commentId: M:System.Messaging.Message.#ctor
  id: '#ctor'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message()
  nameWithType: Message.Message()
  fullName: Message.Message()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Initializes a new instance of the <xref href="System.Messaging.Message"></xref> class with an empty body.
  remarks: "Use this overload to create a new instance of the <xref:System.Messaging.Message> class that has an empty body.  \n  \n Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object. The <xref:System.Messaging.Message.Body%2A> property can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.  \n  \n Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. The body is serialized using the <xref:System.Messaging.Message.Formatter%2A> property's value at the time the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance.  \n  \n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.Message>.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  \n|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.AppSpecific%2A>|0|  \n|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  \n|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|  \n|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  \n|<xref:System.Messaging.Message.Body%2A>|`null`|  \n|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  \n|<xref:System.Messaging.Message.BodyType%2A>|0|  \n|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  \n|<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|  \n|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \n|<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  \n|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \n|<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|  \n|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  \n|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  \n|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  \n|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  \n|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  \n|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  \n|<xref:System.Messaging.Message.UseTracing%2A>|`false`|"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]\n [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]"
  syntax:
    content: public Message ();
    parameters: []
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.#ctor(System.Object)
  commentId: M:System.Messaging.Message.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: Message.Message(Object)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Initializes a new instance of the <xref href="System.Messaging.Message"></xref> class, using the <xref href="System.Messaging.XmlMessageFormatter"></xref> to serialize the specified object into the body of the message.
  remarks: "Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter. The `body` parameter can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object. The body is serialized using the <xref:System.Messaging.XmlMessageFormatter> unless you change the <xref:System.Messaging.Message.Formatter%2A> property before the <xref:System.Messaging.Message> is sent. If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.  \n  \n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.Message>.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  \n|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.AppSpecific%2A>|0|  \n|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  \n|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|  \n|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  \n|<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|  \n|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  \n|<xref:System.Messaging.Message.BodyType%2A>|0|  \n|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  \n|<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|  \n|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \n|<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  \n|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \n|<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|  \n|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  \n|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  \n|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  \n|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  \n|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  \n|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  \n|<xref:System.Messaging.Message.UseTracing%2A>|`false`|"
  example:
  - "The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.  \n  \n [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]\n [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]\n [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]"
  syntax:
    content: public Message (object body);
    parameters:
    - id: body
      type: System.Object
      description: The object to be serialized into the body of the message.
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  commentId: M:System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  id: '#ctor(System.Object,System.Messaging.IMessageFormatter)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object, IMessageFormatter)
  nameWithType: Message.Message(Object, IMessageFormatter)
  fullName: Message.Message(Object, IMessageFormatter)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Initializes a new instance of the <xref href="System.Messaging.Message"></xref> class using the specified formatter to serialize the specified object into the body of the message.
  remarks: "Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter and that uses any valid formatter to serialize the body. The `body` parameter is any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object. If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.  \n  \n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.Message>.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  \n|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.AppSpecific%2A>|0|  \n|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  \n|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider version 1.0|  \n|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  \n|<xref:System.Messaging.Message.Body%2A>|The `body` parameter.|  \n|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  \n|<xref:System.Messaging.Message.BodyType%2A>|0|  \n|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  \n|<xref:System.Messaging.Message.CorrelationId%2A>|An empty string (\"\")|  \n|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.DigitalSignature%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \n|<xref:System.Messaging.Message.Extension%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.Formatter%2A>|The `formatter` parameter.|  \n|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \n|<xref:System.Messaging.Message.Label%2A>|An empty string (\"\")|  \n|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  \n|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  \n|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.SenderCertificate%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  \n|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  \n|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  \n|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  \n|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  \n|<xref:System.Messaging.Message.UseTracing%2A>|`false`|"
  example:
  - >-
    [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
     [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
     [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]
  syntax:
    content: public Message (object body, System.Messaging.IMessageFormatter formatter);
    parameters:
    - id: body
      type: System.Object
      description: The object to be serialized into the body of the message.
    - id: formatter
      type: System.Messaging.IMessageFormatter
      description: A <xref href="System.Messaging.IMessageFormatter"></xref> that specifies the formatter with which to serialize the message body.
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.AcknowledgeType
  commentId: P:System.Messaging.Message.AcknowledgeType
  id: AcknowledgeType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: Message.AcknowledgeType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the type of acknowledgment message to be returned to the sending application.
  remarks: "The <xref:System.Messaging.Message.AcknowledgeType%2A> property specifies the type of acknowledgment messages requested by the sending application. Set the <xref:System.Messaging.Message.AcknowledgeType%2A> property before sending the message to request notification of certain occurrencesâ€”for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue.  \n  \n Message Queuing returns notification by sending acknowledgment messages to the <xref:System.Messaging.Message.AdministrationQueue%2A> property specified by the original message. An acknowledgment message's <xref:System.Messaging.Message.Acknowledgment%2A> property indicates the type of acknowledgment that it represents. For example, if an acknowledgment message was sent because a message did not reach the destination before the <xref:System.Messaging.Message.TimeToReachQueue%2A> interval expired, the <xref:System.Messaging.Message.Acknowledgment%2A> property of the acknowledgment message would contain the value `ReachQueueTimeout`."
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]\n [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]\n [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]"
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAcknowledgeType")]

      public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }
    return:
      type: System.Messaging.AcknowledgeTypes
      description: One of the <xref href="System.Messaging.AcknowledgeTypes"></xref> values, which represent both the types of acknowledgment messages the system posts in the administration queue and the conditions under which acknowledgments are returned to the sending application. The default is `None`.
  overload: System.Messaging.Message.AcknowledgeType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message is filtered to ignore the <xref href="System.Messaging.Message.AcknowledgeType"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Acknowledgment
  commentId: P:System.Messaging.Message.Acknowledgment
  id: Acknowledgment
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: Message.Acknowledgment
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the classification of acknowledgment that this message represents.
  remarks: "When you receive a message from an administration queue, read the <xref:System.Messaging.Message.Acknowledgment%2A> property to verify the status of the original message.  \n  \n When a message is sent to its destination queue, Message Queuing can be requested to post an acknowledgment message. Such a message can indicate, for example, whether the message arrived and was retrieved within specified time-outs, or it can indicate what went wrong in the case of delivery failure. The destination queue returns acknowledgment messages and posts them to the administration queue specified in the original message's <xref:System.Messaging.Message.AdministrationQueue%2A> property. The <xref:System.Messaging.Message.Id%2A> property of an acknowledgment message identifies the acknowledgment message, not the original message. You can find the identifier of the original message in the acknowledgment <xref:System.Messaging.Message> instance's <xref:System.Messaging.Message.CorrelationId%2A> property.  \n  \n If this <xref:System.Messaging.Message> instance represents an acknowledgment message, the <xref:System.Messaging.Message.Acknowledgment%2A> property specifies the type of acknowledgment. Otherwise, the <xref:System.Messaging.Message.Acknowledgment%2A> property contains the value `Normal`.  \n  \n Use the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the original message to specify the circumstances under which acknowledgments will be returned."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAcknowledgement")]

      public System.Messaging.Acknowledgment Acknowledgment { get; }
    return:
      type: System.Messaging.Acknowledgment
      description: One of the <xref href="System.Messaging.Acknowledgment"></xref> enumeration values.
  overload: System.Messaging.Message.Acknowledgment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.MessagePropertyFilter.Acknowledgment\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.AdministrationQueue
  commentId: P:System.Messaging.Message.AdministrationQueue
  id: AdministrationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: Message.AdministrationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the queue that receives the acknowledgement messages that Message Queuing generates.
  remarks: "The queue specified in the <xref:System.Messaging.Message.AdministrationQueue%2A> property can be any non-transactional queue. The acknowledgment messages sent to the administration queue can indicate whether the original message reached its destination queue and whether it was removed from the queue.  \n  \n When the <xref:System.Messaging.Message.AcknowledgeType%2A> property has any value other than `None`, the sending application must specify the queue to use as the administration queue."
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]\n [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]\n [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]"
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAdministrationQueue")]

      public System.Messaging.MessageQueue AdministrationQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: The <xref href="System.Messaging.MessageQueue"></xref> that specifies the administration queue used for system-generated acknowledgment messages. The default is `null`.
  overload: System.Messaging.Message.AdministrationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.AdministrationQueue"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.AppSpecific
  commentId: P:System.Messaging.Message.AppSpecific
  id: AppSpecific
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: Message.AppSpecific
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets additional, application-specific information.
  remarks: "The <xref:System.Messaging.Message.AppSpecific%2A> property contains application-specific information that you can use to organize different types of messages. For example, you can use application-specific indexes. It is the responsibility of the application to interpret <xref:System.Messaging.Message.AppSpecific%2A> property information.  \n  \n Whenever possible, you should include message data in the body of the message rather than the <xref:System.Messaging.Message.AppSpecific%2A> property.  \n  \n When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing. As with the <xref:System.Messaging.Message.AppSpecific%2A> property, it is the responsibility of the application to understand the content of the <xref:System.Messaging.Message.Extension%2A> property."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAppSpecific")]

      public int AppSpecific { get; set; }
    return:
      type: System.Int32
      description: Information that is specific to the application. The default is zero.
  overload: System.Messaging.Message.AppSpecific*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.AppSpecific"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.ArrivedTime
  commentId: P:System.Messaging.Message.ArrivedTime
  id: ArrivedTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: Message.ArrivedTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the time that the message arrived in the destination queue.
  remarks: The message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property indicates how quickly the message must be received from the destination queue. The <xref:System.Messaging.Message.TimeToBeReceived%2A> property timer starts when the message is sent, not when the message arrives in the queue.
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.ArrivedTime%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgArrivedTime")]

      public DateTime ArrivedTime { get; }
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime"></xref> that represents the message's arrival time in the destination queue. The time is adjusted from GMT to the local time of the computer on which the destination queue resides.
  overload: System.Messaging.Message.ArrivedTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.ArrivedTime\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.AttachSenderId
  commentId: P:System.Messaging.Message.AttachSenderId
  id: AttachSenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: Message.AttachSenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates whether the sender ID should be attached to the message.
  remarks: "The <xref:System.Messaging.Message.SenderId%2A> property is an array of bytes that represents the identifier of the sending user. The sender ID is set by Message Queuing and is used by the receiving Queue Manager to verify whether the sender has access rights to a queue.  \n  \n The absence of the sender ID is an indication by the sending application that Message Queuing should not validate the message's sender nor verify the sender's access rights to the receiving queue. The <xref:System.Messaging.Message.SenderId%2A> is trustworthy only if the message was authenticated when it reached the destination queue. The message is rejected when it reaches the destination queue if the queue accepts only authenticated messages and either the <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> or the <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> property is `false`.  \n  \n> [!CAUTION]\n>  If a message is rejected, it is either sent to the dead-letter queue (if <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`), or it is ignored. You can request acknowledgments when a message fails to reach a queue. Otherwise, when <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false` the message might be lost without warning."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.AttachSenderId%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAttachSenderId")]

      public bool AttachSenderId { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Messaging.Message.SenderId"></xref> should be attached to the message; otherwise, `false`. The default is `true`.'
  overload: System.Messaging.Message.AttachSenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.AttachSenderId"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Authenticated
  commentId: P:System.Messaging.Message.Authenticated
  id: Authenticated
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: Message.Authenticated
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets a value that indicates whether the message was authenticated.
  remarks: "The <xref:System.Messaging.Message.Authenticated%2A> property is used only by the application while it is interacting with the message and trying to determine if authentication was requested. If the message is in the queue, the message was authenticated. Conversely, if the <xref:System.Messaging.Message.Authenticated%2A> property is `true`, the receiving Queue Manager authenticated the message when it received that message.  \n  \n You cannot determine if a message failed authentication by looking at its properties. Message Queuing discards messages that fail authentication before they are delivered to the queue. However, you can request that an acknowledgment message be sent if a delivery failure prevents the message from arriving in the queue."
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.Authenticated%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAuthenticated")]

      public bool Authenticated { get; }
    return:
      type: System.Boolean
      description: '`true` if authentication was requested for the message when it entered the queue; otherwise, `false`.'
  overload: System.Messaging.Message.Authenticated*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.Authenticated\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.AuthenticationProviderName
  commentId: P:System.Messaging.Message.AuthenticationProviderName
  id: AuthenticationProviderName
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: Message.AuthenticationProviderName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the name of the cryptographic provider used to generate the digital signature of the message.
  remarks: "You typically use the <xref:System.Messaging.Message.AuthenticationProviderName%2A> when working with foreign queues. Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.  \n  \n When sending a message, always set the <xref:System.Messaging.Message.AuthenticationProviderName%2A> and <xref:System.Messaging.Message.ConnectorType%2A> properties together. When the message is sent, Message Queuing ignores the authentication provider name if the connector type is not also set.  \n  \n The <xref:System.Messaging.Message.AuthenticationProviderName%2A> property cannot be `null`, but it can be an empty string (\"\")."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAuthenticationProviderName")]

      public string AuthenticationProviderName { get; set; }
    return:
      type: System.String
      description: The name of the cryptographic provider used to generate the digital signature of the message. The default is Microsoft Base Cryptographic Provider version 1.0.
  overload: System.Messaging.Message.AuthenticationProviderName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Messaging.Message.AuthenticationProviderName\"></xref> property could not be set.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.AuthenticationProviderName\"></xref> property."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Messaging.Message.AuthenticationProviderName"></xref> was set to `null`.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.AuthenticationProviderType
  commentId: P:System.Messaging.Message.AuthenticationProviderType
  id: AuthenticationProviderType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: Message.AuthenticationProviderType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the type of cryptographic provider used to generate the digital signature of the message.
  remarks: "You typically use the <xref:System.Messaging.Message.AuthenticationProviderType%2A> property when working with foreign queues to specify which cryptographic service provider is associated with a message. Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.  \n  \n Only `RsaFull` is intended to be used with messaging.  \n  \n When sending a message, always set the <xref:System.Messaging.Message.AuthenticationProviderType%2A> and <xref:System.Messaging.Message.ConnectorType%2A> properties together. When the message is sent, Message Queuing ignores the authentication provider type if the connector type is not also set."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgAuthenticationProviderType")]

      public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }
    return:
      type: System.Messaging.CryptographicProviderType
      description: One of the <xref href="System.Messaging.CryptographicProviderType"></xref> values. The default is `RSA_FULL`.
  overload: System.Messaging.Message.AuthenticationProviderType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Messaging.Message.AuthenticationProviderType\"></xref> property could not be set.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.AuthenticationProviderType\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Body
  commentId: P:System.Messaging.Message.Body
  id: Body
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Body
  nameWithType: Message.Body
  fullName: Message.Body
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the content of the message.
  remarks: "The message's <xref:System.Messaging.Message.Body%2A> property usually contains the data associated with the message. Although you can also send application-specific data in the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties, you should include message data in the <xref:System.Messaging.Message.Body%2A> of the message whenever possible. Only the <xref:System.Messaging.Message.Body%2A> property contents are serialized or encrypted.  \n  \n The <xref:System.Messaging.Message.Body%2A> property can contain any object whose size does not exceed 4 MB. If you use <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> to send any object that is not of type <xref:System.Messaging.Message> to the <xref:System.Messaging.MessageQueue>, that object will be located in the <xref:System.Messaging.Message.Body%2A> property of the <xref:System.Messaging.Message> instance returned by <xref:System.Messaging.MessageQueue.Peek%2A> or <xref:System.Messaging.MessageQueue.Receive%2A>.  \n  \n The string argument in `MessageQueue.Send(\"hello.\")` is an example of such a generic object.  \n  \n The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of information that is stored in the message body. Message Queuing uses this information to identify the type of the <xref:System.Messaging.Message.Body%2A> property contents.  \n  \n Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object. The <xref:System.Messaging.Message.Body%2A> property can be any serializable object, such as a text string, structure object, class instance, or embedded object.  \n  \n Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property. If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.  \n  \n> [!NOTE]\n>  Attempting to set the body of a message to <xref:System.Decimal.MaxValue> will cause a <xref:System.OverflowException> when the `Send` method of the <xref:System.Messaging.MessageQueue> class is called and the <xref:System.Messaging.ActiveXMessageFormatter> is used."
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]\n [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]"
  syntax:
    content: >-
      [System.ComponentModel.Browsable(false)]

      public object Body { get; set; }
    return:
      type: System.Object
      description: An object that specifies the message contents. The object can be a string, a date, a currency, a number, an array of bytes, or any managed object.
  overload: System.Messaging.Message.Body*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Messaging.Message.Formatter\"></xref> property is `null`.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.Body\"></xref> property."
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.BodyStream
  commentId: P:System.Messaging.Message.BodyStream
  id: BodyStream
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: Message.BodyStream
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the information in the body of the message.
  remarks: "The body of a message can consist of any type of informationâ€”for example, a string, a date, a currency, a number, an array of bytes, or any managed object. This information is serialized into a <xref:System.IO.Stream> to be passed to the queue.  \n  \n Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object. If you set the <xref:System.Messaging.Message.Body%2A> property, the contents are serialized into the <xref:System.Messaging.Message.BodyStream%2A> property. However, you can choose to write the <xref:System.Messaging.Message.BodyStream%2A> property directly. This is useful, for example, when you want to open a connection to a file and stream its contents as the body of your message.  \n  \n Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property. If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.  \n  \n If you set the <xref:System.Messaging.Message.UseEncryption%2A> property to `true` for the body of this message, the message will be encrypted when it is sent, not when you set the <xref:System.Messaging.Message.Body%2A> property. Therefore, the <xref:System.Messaging.Message.BodyStream%2A> property is never encrypted."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgBodyStream")]

      public System.IO.Stream BodyStream { get; set; }
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> that contains the serialized information included in the <xref href="System.Messaging.Message.Body"></xref> of the message.
  overload: System.Messaging.Message.BodyStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.Body"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.BodyType
  commentId: P:System.Messaging.Message.BodyType
  id: BodyType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyType
  nameWithType: Message.BodyType
  fullName: Message.BodyType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the type of data that the message body contains.
  remarks: "Message Queuing recognizes the body contents as an object or as a serialized stream. The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of the object within the <xref:System.Messaging.Message.Body%2A> property of the message.  \n  \n The <xref:System.Messaging.XmlMessageFormatter> performs binding between native types and the object in a message body. If you use the <xref:System.Messaging.XmlMessageFormatter>, the formatter sets the <xref:System.Messaging.Message.BodyType%2A> property for you.  \n  \n Other formatters can provide binding functionality also, as shown in the following C# code.  \n  \n```  \nmessage.Formatter = new ActiveXMessageFormatter();  \nobject myObject message.Body;  \nif (myObject is string) {  \n}  \nif (myObject is int) {  \n}  \nif (myObject is float) {  \n}  \n```"
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.BodyType%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgBodyType")]

      public int BodyType { get; set; }
    return:
      type: System.Int32
      description: The message body's true type, such as a string, a date, a currency, or a number.
  overload: System.Messaging.Message.BodyType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.Body"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.ConnectorType
  commentId: P:System.Messaging.Message.ConnectorType
  id: ConnectorType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: Message.ConnectorType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates that some message properties typically set by Message Queuing were set by the sending application.
  remarks: "Message Queuing requires the <xref:System.Messaging.Message.ConnectorType%2A> property be set whenever an application sets a message property that is usually set by Message Queuing. An application typically uses a <xref:System.Messaging.Message.ConnectorType%2A> in the following two cases:  \n  \n-   Whenever a connector application passes a message. The <xref:System.Messaging.Message.ConnectorType%2A> tells the sending and receiving applications how to interpret the security and acknowledgment properties of the message.  \n  \n-   Whenever the sending application, rather than Message Queuing, encrypts a message. The <xref:System.Messaging.Message.ConnectorType%2A> tells Message Queuing to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property value to decrypt the message.  \n  \n You must set the <xref:System.Messaging.Message.ConnectorType%2A> property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):  \n  \n-   <xref:System.Messaging.Message.AuthenticationProviderName%2A>  \n  \n-   <xref:System.Messaging.Message.AuthenticationProviderType%2A>  \n  \n-   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>  \n  \n-   <xref:System.Messaging.Message.DigitalSignature%2A>  \n  \n-   <xref:System.Messaging.Message.MessageType%2A>  \n  \n-   <xref:System.Messaging.Message.SenderId%2A>"
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgConnectorType")]

      public Guid ConnectorType { get; set; }
    return:
      type: System.Guid
      description: A <xref href="System.Guid"></xref> defined by the application and used in conjunction with connector applications or message encryption. This <xref href="System.Guid"></xref> allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing.
  overload: System.Messaging.Message.ConnectorType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.ConnectorType"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.CorrelationId
  commentId: P:System.Messaging.Message.CorrelationId
  id: CorrelationId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: Message.CorrelationId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the message identifier used by acknowledgment, report, and response messages to reference the original message.
  remarks: "When Message Queuing generates an acknowledgment or report message, it uses the correlation identifier property to specify the message identifier of the original message. In this manner, the correlation identifier ties the report or acknowledgment message to the original message.  \n  \n The sending application can then match the acknowledgment or report with the original message by using the <xref:System.Messaging.Message.CorrelationId%2A> property to identify the original message's <xref:System.Messaging.Message.Id%2A> property.  \n  \n Connector applications also must set the <xref:System.Messaging.Message.CorrelationId%2A> property of the acknowledgment and report messages to the message identifier of the original message.  \n  \n When your application sends a response message to the sending application, you can set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the message identifier of the original message. The sending application can then match your response message to the message that was sent."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]\n [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]\n [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]"
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgCorrelationId")]

      public string CorrelationId { get; set; }
    return:
      type: System.String
      description: The message identifier specified by the <xref href="System.Messaging.Message.Id"></xref> property of the original message. The correlation identifier is used by Message Queuing when it generates an acknowledgment or report message, and by an application when it generates a response message.
  overload: System.Messaging.Message.CorrelationId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.CorrelationId"></xref> property.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Messaging.Message.CorrelationId"></xref> is `null`.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.DestinationQueue
  commentId: P:System.Messaging.Message.DestinationQueue
  id: DestinationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: Message.DestinationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the intended destination queue for a message.
  remarks: The <xref:System.Messaging.Message.DestinationQueue%2A> property is most commonly used to determine the original destination of a message that arrived in a journal or dead-letter queue. Usually, you do not need to examine this property, because you typically retrieve the message from its destination queue.
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.DestinationQueue%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgDestinationQueue")]

      public System.Messaging.MessageQueue DestinationQueue { get; }
    return:
      type: System.Messaging.MessageQueue
      description: A <xref href="System.Messaging.MessageQueue"></xref> that specifies the intended destination queue for the message.
  overload: System.Messaging.Message.DestinationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.DestinationQueue\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.DestinationSymmetricKey
  commentId: P:System.Messaging.Message.DestinationSymmetricKey
  id: DestinationSymmetricKey
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: Message.DestinationSymmetricKey
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the symmetric key used to encrypt application-encrypted messages or messages sent to foreign queues.
  remarks: "Two scenarios require you to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property. The first is when your application, rather than Message Queuing, encrypts a message. The second is when you send an encrypted message to a queuing system other than Message Queuing.  \n  \n Before you set this property, you must encrypt the symmetric key with the public key of the receiving queue manager. When you send an application-encrypted message, the receiving queue manager uses the symmetric key to decrypt the message before sending it to its destination queue.  \n  \n If you send a message to a foreign queue, the message is first received by the appropriate connector application, which forwards the encrypted message with the attached symmetric key to the receiving application. It is then the responsibility of the receiving application to decrypt the message using the symmetric key.  \n  \n When you set the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When the message is sent, Message Queuing ignores the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.  \n  \n The <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property has a maximum array size of 256."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgDestinationSymmetricKey")]

      public byte[] DestinationSymmetricKey { get; set; }
    return:
      type: System.Byte[]
      description: An array of byte values that specifies the destination symmetric key used to encrypt the message. The default is a zero-length array.
  overload: System.Messaging.Message.DestinationSymmetricKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.DestinationSymmetricKey"></xref> property.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Messaging.Message.DestinationSymmetricKey"></xref> is `null`.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.DigitalSignature
  commentId: P:System.Messaging.Message.DigitalSignature
  id: DigitalSignature
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: Message.DigitalSignature
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the digital signature that Message Queuing uses to authenticate the message.
  remarks: "Message Queuing uses the digital signature when authenticating messages that were sent by Message Queuing version 1.0. In most cases, Message Queuing generates and sets the <xref:System.Messaging.Message.DigitalSignature%2A> property when the sending application requests authentication. The receiving application uses this property to retrieve the digital signature attached to the message.  \n  \n You can only use the <xref:System.Messaging.Message.DigitalSignature%2A> property when running Message Queuing version 2.0. The sending application must specify Message Queuing version 1.0 signatures when requesting authentication. If the sending application sends a Message Queuing version 2.0 signature, this property contains a buffer of four bytes, each containing zero.  \n  \n The <xref:System.Messaging.Message.DigitalSignature%2A> property, together with the <xref:System.Messaging.Message.SenderCertificate%2A> property, is also used by connector applications when a message is sent. In this scenario, the connector applicationâ€”rather than Message Queuingâ€”generates the digital signature, which it bases on the certificate of the user sending the message.  \n  \n The <xref:System.Messaging.Message.DigitalSignature%2A> property has a maximum array size of 256.  \n  \n When you set the <xref:System.Messaging.Message.DigitalSignature%2A> property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property. When a message is sent, Message Queuing ignores the <xref:System.Messaging.Message.DigitalSignature%2A> property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgDigitalSignature")]

      public byte[] DigitalSignature { get; set; }
    return:
      type: System.Byte[]
      description: An array of byte values that specifies the Message Queuing 1.0 digital signature used to authenticate the message. The default is a zero-length array.
  overload: System.Messaging.Message.DigitalSignature*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.DigitalSignature"></xref> property.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Messaging.Message.DigitalSignature"></xref> property is `null`.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.EncryptionAlgorithm
  commentId: P:System.Messaging.Message.EncryptionAlgorithm
  id: EncryptionAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: Message.EncryptionAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the encryption algorithm used to encrypt the body of a private message.
  remarks: "If a message is private (encrypted), it is encrypted before it is sent and decrypted upon receipt. The <xref:System.Messaging.Message.EncryptionAlgorithm%2A> property specifies the algorithm used to encrypt the message body of a private message.  \n  \n A queue can require that incoming messages be encrypted. If an application sends a non-encrypted (non-private) message to a queue that accepts only private messages, or if it sends a private message to a queue that accepts only non-private messages, the queue rejects the message. The sending application can request that a negative acknowledgment message be returned in such a case."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")]

      public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
    return:
      type: System.Messaging.EncryptionAlgorithm
      description: One of the <xref href="System.Messaging.EncryptionAlgorithm"></xref> enumeration values. The default is `RC2`.
  overload: System.Messaging.Message.EncryptionAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.EncryptionAlgorithm"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Extension
  commentId: P:System.Messaging.Message.Extension
  id: Extension
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Extension
  nameWithType: Message.Extension
  fullName: Message.Extension
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets additional, application-defined information associated with the message.
  remarks: "The <xref:System.Messaging.Message.Extension%2A> property provides for application-defined information, like a large binary object, that is associated with the message. It is the responsibility of the receiving application to interpret the contents of the <xref:System.Messaging.Message.Extension%2A> property.  \n  \n Where possible, you should include message data in the <xref:System.Messaging.Message.Body%2A> property of the message rather than the <xref:System.Messaging.Message.Extension%2A> property.  \n  \n When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing.  \n  \n A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgExtension")]

      public byte[] Extension { get; set; }
    return:
      type: System.Byte[]
      description: An array of byte values that provides application-defined information associated with the message. The default is a zero-length array.
  overload: System.Messaging.Message.Extension*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.Extension"></xref> property.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Messaging.Message.Extension"></xref> property is `null`.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Formatter
  commentId: P:System.Messaging.Message.Formatter
  id: Formatter
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Formatter
  nameWithType: Message.Formatter
  fullName: Message.Formatter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the formatter used to serialize an object into or deserialize an object from the message body.
  remarks: "Use the <xref:System.Messaging.Message.Formatter%2A> property when reading and writing a message. When a message is sent to the queue, the formatter serializes the <xref:System.Messaging.Message.Body%2A> property into a stream that can be sent to the message queue. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property.  \n  \n Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message. When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property. If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.  \n  \n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components."
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]\n [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]\n [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]\n [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]\n [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]"
  syntax:
    content: >-
      [System.ComponentModel.Browsable(false)]

      public System.Messaging.IMessageFormatter Formatter { get; set; }
    return:
      type: System.Messaging.IMessageFormatter
      description: The <xref href="System.Messaging.IMessageFormatter"></xref> that produces a stream to be written to or read from the message body. The default is <xref href="System.Messaging.XmlMessageFormatter"></xref>.
  overload: System.Messaging.Message.Formatter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="System.Messaging.Message.Formatter"></xref> property is `null`.
  attributes:
  - type: System.ComponentModel.BrowsableAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.HashAlgorithm
  commentId: P:System.Messaging.Message.HashAlgorithm
  id: HashAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: Message.HashAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the hashing algorithm that Message Queuing uses when authenticating a message or creating a digital signature for a message.
  remarks: On the source computer, Message Queuing uses the hashing algorithm when creating a digital signature for a message. The target Queue Manager then uses the same hashing algorithm to authenticate the message when it is received.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgHashAlgorithm")]

      public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Messaging.HashAlgorithm
      description: One of the <xref href="System.Messaging.HashAlgorithm"></xref> enumeration values. For Windows XP, the default is `SHA`. Otherwise, the default is `MD5`.
  overload: System.Messaging.Message.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.HashAlgorithm"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Id
  commentId: P:System.Messaging.Message.Id
  id: Id
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Id
  nameWithType: Message.Id
  fullName: Message.Id
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the message's identifier.
  remarks: "Message Queuing generates a message identifier when the message is sent. The identifier is composed of 20 bytes and includes two items: the machine <xref:System.Guid> of the sending computer and a unique identifier for the message on the computer. The combination of the two items produces a message identifier that is unique on the network.  \n  \n Message Queuing generates message identifiers for all messagesâ€”including acknowledgment and report messages. An acknowledgment message is generally sent by Message Queuing in reaction to the arrival or failure of an original, sent message. You can find the <xref:System.Messaging.Message.Id%2A> property value of the original message in the <xref:System.Messaging.Message.CorrelationId%2A> property of an acknowledgment message.  \n  \n You can also use the <xref:System.Messaging.Message.Id%2A> property when sending a response message to a response queue. To include the identifier of the original message in a response message, set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the <xref:System.Messaging.Message.Id%2A> property of the original message. The application reading the response message can then use the correlation identifier of the response message to identify the original message."
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]\n [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]\n [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]"
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgId")]

      public string Id { get; }
    return:
      type: System.String
      description: The message's unique identifier, which is generated by Message Queuing.
  overload: System.Messaging.Message.Id*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.Id\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.InfiniteTimeout
  commentId: F:System.Messaging.Message.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.Messaging.Message
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: Message.InfiniteTimeout
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Specifies that no time-out exists.
  remarks: <xref:System.Messaging.Message.TimeToBeReceived%2A> and <xref:System.Messaging.Message.TimeToReachQueue%2A> require a value that specifies a time-out. For the former, the time-out is the maximum time allowed for a message to be received from the queue. For the latter, the time-out is the time allowed for a message to reach the queue. In both cases, you can specify the time-out as a number of seconds or use <xref:System.Messaging.Message.InfiniteTimeout> to indicate that no time-out exists.
  example:
  - The following code example demonstrates the use of the <xref:System.Messaging.Message.InfiniteTimeout> field.
  syntax:
    content: public static readonly TimeSpan InfiniteTimeout;
    return:
      type: System.TimeSpan
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.IsFirstInTransaction
  commentId: P:System.Messaging.Message.IsFirstInTransaction
  id: IsFirstInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: Message.IsFirstInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets a value that indicates whether the message was the first message sent in a transaction.
  remarks: "Receiving applications use the <xref:System.Messaging.Message.IsFirstInTransaction%2A> property to verify that a message was the first message sent in a single transaction to a single queue.  \n  \n This property is available only with Message Queuing version 2.0 and later.  \n  \n To verify transaction boundaries, you can use the <xref:System.Messaging.Message.IsFirstInTransaction%2A> property along with two other properties: <xref:System.Messaging.Message.IsLastInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>. Use the former to check whether a message was the last message sent in the transaction, and use the latter to retrieve the identifier of the transaction.  \n  \n If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`."
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.IsFirstInTransaction%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgIsFirstInTransaction")]

      public bool IsFirstInTransaction { get; }
    return:
      type: System.Boolean
      description: '`true` if the message was the first message sent in a transaction; otherwise, `false`.'
  overload: System.Messaging.Message.IsFirstInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.IsFirstInTransaction\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.IsLastInTransaction
  commentId: P:System.Messaging.Message.IsLastInTransaction
  id: IsLastInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: Message.IsLastInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets a value that indicates whether the message was the last message sent in a transaction.
  remarks: "Receiving applications use the <xref:System.Messaging.Message.IsLastInTransaction%2A> property to verify that a message was the last message sent in a single transaction to a single queue.  \n  \n This property is available only with Message Queuing version 2.0 and later.  \n  \n To verify transaction boundaries, you can use the <xref:System.Messaging.Message.IsLastInTransaction%2A> property along with two other properties: <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>. Use the former to check whether a message was the first message sent in the transaction, and use the latter to retrieve the identifier of the transaction.  \n  \n If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`."
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.IsLastInTransaction%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgIsLastInTransaction")]

      public bool IsLastInTransaction { get; }
    return:
      type: System.Boolean
      description: '`true` if the message was the last message sent in a single transaction; otherwise, `false`.'
  overload: System.Messaging.Message.IsLastInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.IsLastInTransaction\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Label
  commentId: P:System.Messaging.Message.Label
  id: Label
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Label
  nameWithType: Message.Label
  fullName: Message.Label
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets an application-defined Unicode string that describes the message.
  remarks: "You can use a message label for several purposes. For example, you can use it for display purposes or to selectively process messages based on the label value. The label does not need to be unique across messages.  \n  \n Message queue and message labels represent an application-defined value that can help identify the queue or message in human-readable terms. It is the responsibility of the application to interpret the label contents, which have no intrinsic meaning to the Message Queuing application."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.Label%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgLabel")]

      public string Label { get; set; }
    return:
      type: System.String
      description: The label of the message. The default is an empty string ("").
  overload: System.Messaging.Message.Label*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.Label"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.LookupId
  commentId: P:System.Messaging.Message.LookupId
  id: LookupId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: LookupId
  nameWithType: Message.LookupId
  fullName: Message.LookupId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Introduced in MSMQ 3.0. Gets the message's lookup identifier.
  remarks: "The <xref:System.Messaging.Message.LookupId%2A> property provides read-only access to a message's lookup identifier. The lookup identifier, introduced in MSMQ 3.0, is a 64-bit identifier that is generated by Message Queuing and assigned to each message when the message is placed in the queue. The lookup identifier is not the same as the message identifier that is generated when the message is sent.  \n  \n Message Queuing generates a lookup identifier for all messages that are placed in any queue, including application-generated destination, administration, and report queues, as well as system-generated journal, dead-letter, connector, and outgoing queues. In other words, this includes both messages sent by sending applications and by Message Queuing. The lookup identifier is unique to the queue and has no meaning outside the queue.  \n  \n If a message is sent to several destination queues, or if a copy of a message is stored in a computer journal or queue journal, each copy of the message will have its own lookup identifier when it is placed in its respective queue.  \n  \n The <xref:System.Messaging.Message.LookupId%2A> property can only be read on messages retrieved from a queue.  \n  \n A lookup identifier is used to read a specific message in the queue. Once the lookup identifier of a message is known, the receiving application can call the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> or <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,  \n  \n Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application. One possible way to obtain the lookup identifiers is to create a trigger for the destination queue that invokes a component that caches the identifiers of each message as they are placed in the queue."
  syntax:
    content: public long LookupId { get; }
    return:
      type: System.Int64
      description: The message's lookup identifier, which is generated by Message Queuing and is unique to the queue where the message resides.
  overload: System.Messaging.Message.LookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: MSMQ 3.0 is not installed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.LookupId\"></xref> property."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.MessageType
  commentId: P:System.Messaging.Message.MessageType
  id: MessageType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: MessageType
  nameWithType: Message.MessageType
  fullName: Message.MessageType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: 'Gets the message type: `Normal`, `Acknowledgment`, or `Report`.'
  remarks: "Message Queuing typically sets this property when it sends the message. A Message Queuing message can be one of the following types:  \n  \n-   `Normal`, which is either a typical message sent from an application to a queue, or a response message returned to the sending application.  \n  \n-   `Acknowledgement`, which Message Queuing generates whenever the sending application requests one. For example, Message Queuing can generate positive or negative messages to indicate that the original message arrived or was read. Message Queuing returns the appropriate acknowledgment message to the administration queue specified by the sending application.  \n  \n-   `Report`, which Message Queuing generates whenever a report queue is defined at the source Queue Manager. When tracing is enabled, Message Queuing sends a report message to the Message Queuing report queue each time the original message enters or leaves a Message Queuing server."
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.MessageType%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgMessageType")]

      public System.Messaging.MessageType MessageType { get; }
    return:
      type: System.Messaging.MessageType
      description: One of the <xref href="System.Messaging.Message.MessageType"></xref> values.
  overload: System.Messaging.Message.MessageType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.MessageType\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Priority
  commentId: P:System.Messaging.Message.Priority
  id: Priority
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Priority
  nameWithType: Message.Priority
  fullName: Message.Priority
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the message priority, which determines where in the queue the message is placed.
  remarks: "The <xref:System.Messaging.Message.Priority%2A> property affects how Message Queuing handles the message both while it is en route and once it reaches its destination. Higher-priority messages are given preference during routing and inserted toward the front of the destination queue. Messages with the same priority are placed in the queue according to their arrival time.  \n  \n You can set a meaningful priority only for non-transactional messages. Message Queuing automatically sets the priority for transactional messages to `Lowest`, which causes transactional message priority to be ignored."
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]\n [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]"
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgPriority")]

      public System.Messaging.MessagePriority Priority { get; set; }
    return:
      type: System.Messaging.MessagePriority
      description: One of the <xref href="System.Messaging.MessagePriority"></xref> values, which represent the priority levels of non-transactional messages. The default is `Normal`.
  overload: System.Messaging.Message.Priority*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.Priority"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.Recoverable
  commentId: P:System.Messaging.Message.Recoverable
  id: Recoverable
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: Message.Recoverable
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates whether the message is guaranteed to be delivered in the event of a computer failure or network problem.
  remarks: "The <xref:System.Messaging.Message.Recoverable%2A> property indicates whether the delivery of a message is guaranteedâ€”even if a computer crashes while the message is en route to the destination queue.  \n  \n If delivery of a message is guaranteed, the message is stored locally at every step along the route, until the message is successfully forwarded to the next computer. Setting the <xref:System.Messaging.Message.Recoverable%2A> property to `true` could affect throughput.  \n  \n If the message is transactional, Message Queuing automatically treats the message as recoverable, regardless of the value of the <xref:System.Messaging.Message.Recoverable%2A> property."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.Recoverable%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgRecoverable")]

      public bool Recoverable { get; set; }
    return:
      type: System.Boolean
      description: '`true` if delivery of the message is guaranteed (through saving the message to disk while en route); `false` if delivery is not assured. The default is `false`.'
  overload: System.Messaging.Message.Recoverable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.Recoverable"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.ResponseQueue
  commentId: P:System.Messaging.Message.ResponseQueue
  id: ResponseQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: Message.ResponseQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the queue that receives application-generated response messages.
  remarks: "The <xref:System.Messaging.Message.ResponseQueue%2A> property identifies the queue that receives application-generated response messages, which the receiving application returns to the sending application. The sending application specifies response queues when the application sends its messages. Any available queue can be specified as a response queue.  \n  \n Messages returned to the response queue are application-specific. The application must define the contents of the messages as well as the action to take upon receipt of a message."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.ResponseQueue%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgResponseQueue")]

      public System.Messaging.MessageQueue ResponseQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: The <xref href="System.Messaging.MessageQueue"></xref> to which application-generated response messages are returned. The default is `null`.
  overload: System.Messaging.Message.ResponseQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.ResponseQueue"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.SecurityContext
  commentId: P:System.Messaging.Message.SecurityContext
  id: SecurityContext
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: Message.SecurityContext
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the security context for a message.
  syntax:
    content: public System.Messaging.SecurityContext SecurityContext { get; set; }
    return:
      type: System.Messaging.SecurityContext
      description: A <xref href="System.Messaging.SecurityContext"></xref> object that contains the security context for a message, if the property has previously been set; otherwise NULL.
  overload: System.Messaging.Message.SecurityContext*
  exceptions: []
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.SenderCertificate
  commentId: P:System.Messaging.Message.SenderCertificate
  id: SenderCertificate
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: Message.SenderCertificate
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the security certificate used to authenticate messages.
  remarks: "The receiving application uses the <xref:System.Messaging.Message.SenderCertificate%2A> property when the message includes an external security certificate.  \n  \n Message Queuing can authenticate a message using either an internal or external security certificate. Message Queuing provides internal certificates, which are used to verify message integrity. A certification authority provides an external certificate, which you can access through the <xref:System.Messaging.Message.SenderCertificate%2A> property of the message. In addition to allowing Message Queuing to authenticate the message, an external certificate allows the receiving application to further verify the sender. An internal certificate has no usable value to a receiving application.  \n  \n An external certificate must be registered with the directory service of the Message Queuing system. An external certificate contains information about the certification authority, the certificate user, the validity period of the certificate, the public key of the certificate user, and the certification authority's signature."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgSenderCertificate")]

      public byte[] SenderCertificate { get; set; }
    return:
      type: System.Byte[]
      description: An array of byte values that represents a security certificate, which Message Queuing uses to verify the sender of the message. The default is a zero-length array.
  overload: System.Messaging.Message.SenderCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.SenderCertificate"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.SenderId
  commentId: P:System.Messaging.Message.SenderId
  id: SenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderId
  nameWithType: Message.SenderId
  fullName: Message.SenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the identifier of the sending user.
  remarks: "If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `false`, the sender identifier specified in the <xref:System.Messaging.Message.SenderId%2A> property is not attached to the message when it is sent. This indicates to Message Queuing that the sender should not be validated when it sends the message to the destination queue. If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `true`, the <xref:System.Messaging.Message.SenderId%2A> property value is trustworthy only if the message was authenticated. Use the <xref:System.Messaging.Message.Authenticated%2A> property in conjunction with the <xref:System.Messaging.Message.SenderId%2A> property to verify the sender's access rights.  \n  \n A connector application is an application that uses a connector server to provide communication between Message Queuing and other queuing systems. Message Queuing requires connector applications to provide sender identification. You must set the <xref:System.Messaging.Message.ConnectorType%2A> property when sending a message through a connector application."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgSenderId")]

      public byte[] SenderId { get; }
    return:
      type: System.Byte[]
      description: An array of byte values that identifies the sender. The receiving Queue Manager uses the identifier when it authenticates the message to verify the sender of the message and the sender's access rights to the queue.
  overload: System.Messaging.Message.SenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.SenderId\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.SenderVersion
  commentId: P:System.Messaging.Message.SenderVersion
  id: SenderVersion
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: Message.SenderVersion
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the version of Message Queuing used to send the message.
  remarks: "The <xref:System.Messaging.Message.SenderVersion%2A> property is important for certain features. For example, transaction processing is supported only by Message Queuing 2.0 and later, and digital signatures are used to authenticate messages sent by MSMQ 1.0.  \n  \n The sending Queue Manager sets the <xref:System.Messaging.Message.SenderVersion%2A> property when the message is sent."
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.SenderVersion%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgSenderVersion")]

      public long SenderVersion { get; }
    return:
      type: System.Int64
      description: The version of Message Queuing used to send the message.
  overload: System.Messaging.Message.SenderVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.SenderVersion\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.SentTime
  commentId: P:System.Messaging.Message.SentTime
  id: SentTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SentTime
  nameWithType: Message.SentTime
  fullName: Message.SentTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the date and time on the sending computer that the message was sent by the source queue manager.
  remarks: The <xref:System.Messaging.Message.SentTime%2A> property is adjusted to the local time of the computer on which this instance of the <xref:System.Messaging.Message> class was created. This time zone could be different from those of the source and destination queues.
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.SentTime%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgSentTime")]

      public DateTime SentTime { get; }
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime"></xref> that represents the time the message was sent.
  overload: System.Messaging.Message.SentTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.SentTime\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.SourceMachine
  commentId: P:System.Messaging.Message.SourceMachine
  id: SourceMachine
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: Message.SourceMachine
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the computer from which the message originated.
  remarks: The format of the <xref:System.Messaging.Message.SourceMachine%2A> property does not include preceding two forward slashes (\\\\). For example, `myServer` is a valid <xref:System.Messaging.Message.SourceMachine%2A>.
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.SourceMachine%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgSourceMachine")]

      public string SourceMachine { get; }
    return:
      type: System.String
      description: The name of the computer from which the message was sent.
  overload: System.Messaging.Message.SourceMachine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.SourceMachine\"></xref> property."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: The computer information or directory service could not be accessed.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.TimeToBeReceived
  commentId: P:System.Messaging.Message.TimeToBeReceived
  id: TimeToBeReceived
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: Message.TimeToBeReceived
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the maximum amount of time for the message to be received from the destination queue.
  remarks: "The <xref:System.Messaging.Message.TimeToBeReceived%2A> property specifies the total time for a sent message to be received from the destination queue. The time limit includes the time spent getting to the destination queue and the time spent waiting in the queue before the message is received.  \n  \n> [!CAUTION]\n>  When using dependent client computers, be sure the clock on the client computer is synchronized with the clock on the server that is running Message Queuing. Otherwise, unpredictable behavior might result when sending a message whose <xref:System.Messaging.Message.TimeToBeReceived%2A> property is not <xref:System.Messaging.Message.InfiniteTimeout>.  \n  \n If the interval specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property expires before the message is removed from the queue, Message Queuing discards the message in one of two ways. If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue. If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored.  \n  \n You can set the message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message is not retrieved before the timer expires.  \n  \n If the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property is less than the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.  \n  \n When several messages are sent in a single transaction, Message Queuing uses the <xref:System.Messaging.Message.TimeToBeReceived%2A> property of the first message."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property.
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))]

      [System.Messaging.MessagingDescription("MsgTimeToBeReceived")]

      public TimeSpan TimeToBeReceived { get; set; }
    return:
      type: System.TimeSpan
      description: The total time for a sent message to be received from the destination queue. The default is <xref href="System.Messaging.Message.InfiniteTimeout"></xref>.
  overload: System.Messaging.Message.TimeToBeReceived*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.TimeToBeReceived"></xref> property.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value specified for <xref href="System.Messaging.Message.TimeToBeReceived"></xref> is invalid.
  attributes:
  - type: System.ComponentModel.TypeConverterAttribute
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.TimeToReachQueue
  commentId: P:System.Messaging.Message.TimeToReachQueue
  id: TimeToReachQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: Message.TimeToReachQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets the maximum amount of time for the message to reach the queue.
  remarks: "If the interval specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property expires before the message reaches its destination, Message Queuing discards the message in one of two ways. If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue. If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored  \n  \n You can set he message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message does not arrive before the timer expires.  \n  \n If the <xref:System.Messaging.Message.TimeToReachQueue%2A> property is set to 0 seconds, Message Queuing tries once to send the message to its destinationâ€”if the queue is waiting for the message. If the queue is local, the message always reaches it.  \n  \n If the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property is greater than the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.  \n  \n When several messages are sent in a single transaction, Message Queuing uses the <xref:System.Messaging.Message.TimeToReachQueue%2A> property of the first message."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.TimeToReachQueue%2A> property.
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))]

      [System.Messaging.MessagingDescription("MsgTimeToReachQueue")]

      public TimeSpan TimeToReachQueue { get; set; }
    return:
      type: System.TimeSpan
      description: The time limit for the message to reach the destination queue, beginning from the time the message is sent. The default is <xref href="System.Messaging.Message.InfiniteTimeout"></xref>.
  overload: System.Messaging.Message.TimeToReachQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.TimeToReachQueue"></xref> property.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value specified for <xref href="System.Messaging.Message.TimeToReachQueue"></xref> is invalid. It might represent a negative number.
  attributes:
  - type: System.ComponentModel.TypeConverterAttribute
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.TransactionId
  commentId: P:System.Messaging.Message.TransactionId
  id: TransactionId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: Message.TransactionId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the identifier for the transaction of which the message was a part.
  remarks: "Receiving applications use the <xref:System.Messaging.Message.TransactionId%2A> property to verify that a message was sent as part of a specific transaction. The transaction identifier contains the identifier of the sending computer (first 16 bits) followed by a 4-byte transaction sequence number.  \n  \n This property is available only for Message Queuing version 2.0 and later.  \n  \n Transaction identifiers are not guaranteed to be unique, because transaction sequence numbers are not persistent, and they start over again at 2 <sup>20</sup>. Message Queuing guarantees only that subsequent transactions will have different transaction sequence numbers.  \n  \n You can use the <xref:System.Messaging.Message.TransactionId%2A> property along with the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties to verify transaction boundaries."
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.TransactionId%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgTransactionId")]

      public string TransactionId { get; }
    return:
      type: System.String
      description: The identifier for the transaction associated with the message.
  overload: System.Messaging.Message.TransactionId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.TransactionId\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.TransactionStatusQueue
  commentId: P:System.Messaging.Message.TransactionStatusQueue
  id: TransactionStatusQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: Message.TransactionStatusQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets the transaction status queue on the source computer.
  remarks: "The <xref:System.Messaging.Message.TransactionStatusQueue%2A> property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications. Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues.  \n  \n A foreign queue exists in a queuing system other than Microsoft Message Queuing. Message Queuing communicates with such queues through a connector application.  \n  \n The connector application can use the transaction status queue to send acknowledgment messages back to the sending application. The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments."
  example:
  - The following code example displays the value of a message's <xref:System.Messaging.Message.TransactionStatusQueue%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgTransactionStatusQueue")]

      public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: The transaction status queue on the source computer, which is used for sending acknowledgement messages back to the sending application. The default is `null`.
  overload: System.Messaging.Message.TransactionStatusQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message has not been sent. This property can only be read on messages retrieved from a queue.  \n  \n -or-  \n  \n The message queue is filtered to ignore the <xref href=\"System.Messaging.Message.TransactionStatusQueue\"></xref> property."
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.UseAuthentication
  commentId: P:System.Messaging.Message.UseAuthentication
  id: UseAuthentication
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: Message.UseAuthentication
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates whether the message was (or must be) authenticated before being sent.
  remarks: "The <xref:System.Messaging.Message.UseAuthentication%2A> property specifies whether the message needs to be authenticated. If the sending application requests authentication, Message Queuing creates a digital signature and uses it to sign the message when it is sent and authenticate the message when it is received.  \n  \n If <xref:System.Messaging.Message.UseAuthentication%2A> is `false` and a message is sent to a queue that accepts only authenticated messages, the message will be rejected when it reaches the queue.  \n  \n You cannot determine if a message failed authentication by looking at its properties. Message Queuing discards such messages before they are delivered to the queue. However, you can request that an acknowledgment message be sent if a delivery failure prevents a message from arriving in the queue."
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgUseAuthentication")]

      public bool UseAuthentication { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the sending application requested authentication for the message; otherwise, `false`.'
  overload: System.Messaging.Message.UseAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.UseAuthentication"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.UseDeadLetterQueue
  commentId: P:System.Messaging.Message.UseDeadLetterQueue
  id: UseDeadLetterQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: Message.UseDeadLetterQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates whether a copy of the message that could not be delivered should be sent to a dead-letter queue.
  remarks: "The <xref:System.Messaging.Message.UseJournalQueue%2A> and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message. If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`, delivery failure (of a non-transactional message), causes the message to be sent to the non-transactional dead-letter queue on the computer that could not deliver the message. Delivery failure could be caused by a message timer expiring, for example.  \n  \n In the case of delivery failure for a transactional message, Message Queuing sends the message to the transactional dead-letter queue on the source machine in all negative and in-doubt cases.  \n  \n When you store messages in a dead-letter queue, you should clear the queue periodically to remove messages that are no longer needed. Messages stored in dead-letter queues count against the size quota for the computer where the queue resides. The computer quota is set by the administrator and refers to the size allocated for storing messages on the whole computer, not just in a single queue.  \n  \n You do not create a journal or dead-letter queue. These are both system queues that Message Queuing generates."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")]

      public bool UseDeadLetterQueue { get; set; }
    return:
      type: System.Boolean
      description: '`true` if message-delivery failure should result in a copy of the message being sent to a dead-letter queue; otherwise, `false`. The default is `false`.'
  overload: System.Messaging.Message.UseDeadLetterQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.UseDeadLetterQueue"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.UseEncryption
  commentId: P:System.Messaging.Message.UseEncryption
  id: UseEncryption
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: Message.UseEncryption
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates whether to make the message private.
  remarks: "If a message is private, its body is encrypted before it is sent and decrypted when it is received. To send a private message, the sending application must specify that encryption be used and, optionally, the encryption algorithm.  \n  \n When sending private messages, your application does not need to perform the message encryption. Message Queuing can encrypt the message body for you if your application is sending messages within a Microsoft Windows 2000 enterprise, which has access to the directory service. When receiving private messages, the receiving Queue Manager always decrypts the message body."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseEncryption%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgUseEncryption")]

      public bool UseEncryption { get; set; }
    return:
      type: System.Boolean
      description: '`true` to require Message Queuing to encrypt the message; otherwise, `false`. The default is `false`.'
  overload: System.Messaging.Message.UseEncryption*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.UseEncryption"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.UseJournalQueue
  commentId: P:System.Messaging.Message.UseJournalQueue
  id: UseJournalQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: Message.UseJournalQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates whether a copy of the message should be kept in a machine journal on the originating computer.
  remarks: "The <xref:System.Messaging.Message.UseJournalQueue%2A> and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message. If <xref:System.Messaging.Message.UseJournalQueue%2A> is `true`, then a copy is kept in the computer journal on the originating machine at each step that a message is transmitted.  \n  \n The sent message is only copied to the journal queue if the destination queue is on a remote computer. If the destination is on the local computer, the message is sent directly to the queue; there are no intermediate steps to require journaling.  \n  \n When you store messages in a journal queue, clear the queue periodically to remove messages that are no longer needed. Messages stored in journal queues count against the quota for the computer where the queue resides. (The computer quota is set by the administrator.)  \n  \n You do not create a journal or dead-letter queue. These are both system queues that Message Queuing generates."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseJournalQueue%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgUseJournalQueue")]

      public bool UseJournalQueue { get; set; }
    return:
      type: System.Boolean
      description: "`true` to require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server); otherwise, `false`. The default is `false`."
  overload: System.Messaging.Message.UseJournalQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.UseJournalQueue"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
- uid: System.Messaging.Message.UseTracing
  commentId: P:System.Messaging.Message.UseTracing
  id: UseTracing
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: Message.UseTracing
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: Gets or sets a value that indicates whether to trace a message as it moves toward its destination queue.
  remarks: "The <xref:System.Messaging.Message.UseTracing%2A> property specifies whether to track the route of a message as it moves toward its destination queue. If `true`, a report message (generated by Message Queuing) is sent to a report queue each time the message passes through a Message Queuing routing server. The report queue is specified by the source Queue Manager. Report queues are not limited to report messages generated by Message Queuing; your application-generated messages can also be sent to report queues.  \n  \n Using tracing involves setting up Active Directory and specifying a report queue for the Message Queuing enterprise. The administrator configures these settings."
  example:
  - The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseTracing%2A> property.
  syntax:
    content: >-
      [System.Messaging.MessagingDescription("MsgUseTracing")]

      public bool UseTracing { get; set; }
    return:
      type: System.Boolean
      description: "`true` if each intermediate step made by the original message en route to the destination queue generates a report to be sent to the system's report queue; otherwise, `false`. The default is `false`."
  overload: System.Messaging.Message.UseTracing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The message queue is filtered to ignore the <xref href="System.Messaging.Message.UseTracing"></xref> property.
  attributes:
  - type: System.Messaging.MessagingDescriptionAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
  ms.technology:
  - dotnet-standard
  manager: tyoung
references:
- uid: System.ComponentModel.Component
  parent: System.ComponentModel
  isExternal: false
  name: Component
  nameWithType: Component
  fullName: System.ComponentModel.Component
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.PlatformNotSupportedException
  parent: System
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.Message.#ctor
  parent: System.Messaging.Message
  isExternal: false
  name: Message()
  nameWithType: Message.Message()
  fullName: Message.Message()
- uid: System.Messaging.Message.#ctor(System.Object)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: Message.Message(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object, IMessageFormatter)
  nameWithType: Message.Message(Object, IMessageFormatter)
  fullName: Message.Message(Object, IMessageFormatter)
- uid: System.Messaging.IMessageFormatter
  parent: System.Messaging
  isExternal: false
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
- uid: System.Messaging.Message.AcknowledgeType
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: Message.AcknowledgeType
- uid: System.Messaging.AcknowledgeTypes
  parent: System.Messaging
  isExternal: false
  name: AcknowledgeTypes
  nameWithType: AcknowledgeTypes
  fullName: System.Messaging.AcknowledgeTypes
- uid: System.Messaging.Message.Acknowledgment
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: Message.Acknowledgment
- uid: System.Messaging.Acknowledgment
  parent: System.Messaging
  isExternal: false
  name: Acknowledgment
  nameWithType: Acknowledgment
  fullName: System.Messaging.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: Message.AdministrationQueue
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.Message.AppSpecific
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: Message.AppSpecific
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.Message.ArrivedTime
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: Message.ArrivedTime
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Messaging.Message.AttachSenderId
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: Message.AttachSenderId
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message.Authenticated
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: Message.AuthenticationProviderName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Messaging.Message.AuthenticationProviderType
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: Message.AuthenticationProviderType
- uid: System.Messaging.CryptographicProviderType
  parent: System.Messaging
  isExternal: false
  name: CryptographicProviderType
  nameWithType: CryptographicProviderType
  fullName: System.Messaging.CryptographicProviderType
- uid: System.Messaging.Message.Body
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
  fullName: Message.Body
- uid: System.Messaging.Message.BodyStream
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: Message.BodyStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Messaging.Message.BodyType
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
  fullName: Message.BodyType
- uid: System.Messaging.Message.ConnectorType
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: Message.ConnectorType
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Messaging.Message.CorrelationId
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: Message.DestinationSymmetricKey
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.Message.DigitalSignature
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: Message.EncryptionAlgorithm
- uid: System.Messaging.EncryptionAlgorithm
  parent: System.Messaging
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: EncryptionAlgorithm
  fullName: System.Messaging.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
  fullName: Message.Extension
- uid: System.Messaging.Message.Formatter
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
  fullName: Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: Message.HashAlgorithm
- uid: System.Messaging.HashAlgorithm
  parent: System.Messaging
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Messaging.HashAlgorithm
- uid: System.Messaging.Message.Id
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
  fullName: Message.Id
- uid: System.Messaging.Message.InfiniteTimeout
  parent: System.Messaging.Message
  isExternal: false
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: Message.InfiniteTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.Message.IsFirstInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: Message.IsLastInTransaction
- uid: System.Messaging.Message.Label
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
  fullName: Message.Label
- uid: System.Messaging.Message.LookupId
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
  fullName: Message.LookupId
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Messaging.Message.MessageType
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
  fullName: Message.MessageType
- uid: System.Messaging.MessageType
  parent: System.Messaging
  isExternal: false
  name: MessageType
  nameWithType: MessageType
  fullName: System.Messaging.MessageType
- uid: System.Messaging.Message.Priority
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
  fullName: Message.Priority
- uid: System.Messaging.MessagePriority
  parent: System.Messaging
  isExternal: false
  name: MessagePriority
  nameWithType: MessagePriority
  fullName: System.Messaging.MessagePriority
- uid: System.Messaging.Message.Recoverable
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: Message.SecurityContext
- uid: System.Messaging.SecurityContext
  parent: System.Messaging
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
- uid: System.Messaging.Message.SenderCertificate
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: Message.SenderCertificate
- uid: System.Messaging.Message.SenderId
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
  fullName: Message.SenderId
- uid: System.Messaging.Message.SenderVersion
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: Message.SenderVersion
- uid: System.Messaging.Message.SentTime
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
  fullName: Message.SentTime
- uid: System.Messaging.Message.SourceMachine
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: Message.UseTracing
- uid: System.Messaging.Message.#ctor*
  parent: System.Messaging.Message
  isExternal: false
  name: Message
  nameWithType: Message.Message
  fullName: Message.Message
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.AcknowledgeType*
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: Message.AcknowledgeType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Acknowledgment*
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: Message.Acknowledgment
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.AdministrationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: Message.AdministrationQueue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.AppSpecific*
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: Message.AppSpecific
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.ArrivedTime*
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: Message.ArrivedTime
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.AttachSenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: Message.AttachSenderId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Authenticated*
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: Message.Authenticated
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.AuthenticationProviderName*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: Message.AuthenticationProviderName
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.AuthenticationProviderType*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: Message.AuthenticationProviderType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Body*
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
  fullName: Message.Body
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.BodyStream*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: Message.BodyStream
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.BodyType*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
  fullName: Message.BodyType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.ConnectorType*
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: Message.ConnectorType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.CorrelationId*
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: Message.CorrelationId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.DestinationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: Message.DestinationQueue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.DestinationSymmetricKey*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: Message.DestinationSymmetricKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.DigitalSignature*
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: Message.DigitalSignature
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.EncryptionAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: Message.EncryptionAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Extension*
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
  fullName: Message.Extension
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Formatter*
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
  fullName: Message.Formatter
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.HashAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: Message.HashAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Id*
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
  fullName: Message.Id
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.IsFirstInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: Message.IsFirstInTransaction
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.IsLastInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: Message.IsLastInTransaction
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Label*
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
  fullName: Message.Label
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.LookupId*
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
  fullName: Message.LookupId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.MessageType*
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
  fullName: Message.MessageType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Priority*
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
  fullName: Message.Priority
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.Recoverable*
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: Message.Recoverable
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.ResponseQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: Message.ResponseQueue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.SecurityContext*
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: Message.SecurityContext
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.SenderCertificate*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: Message.SenderCertificate
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.SenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
  fullName: Message.SenderId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.SenderVersion*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: Message.SenderVersion
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.SentTime*
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
  fullName: Message.SentTime
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.SourceMachine*
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: Message.SourceMachine
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.TimeToBeReceived*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: Message.TimeToBeReceived
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.TimeToReachQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: Message.TimeToReachQueue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.TransactionId*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: Message.TransactionId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.TransactionStatusQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: Message.TransactionStatusQueue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.UseAuthentication*
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: Message.UseAuthentication
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.UseDeadLetterQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: Message.UseDeadLetterQueue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.UseEncryption*
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: Message.UseEncryption
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.UseJournalQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: Message.UseJournalQueue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Messaging.Message.UseTracing*
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: Message.UseTracing
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/Message.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.ComponentModel.Component.ToString
  parent: System.ComponentModel.Component
  isExternal: false
  name: ToString()
  nameWithType: Component.ToString()
  fullName: Component.ToString()
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: MarshalByRefObject.CreateObjRef(Type)
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: MarshalByRefObject.GetLifetimeService()
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: MarshalByRefObject.InitializeLifetimeService()
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: MarshalByRefObject.MemberwiseClone(Boolean)
- uid: System.ComponentModel.Component.CanRaiseEvents
  parent: System.ComponentModel.Component
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
  fullName: Component.CanRaiseEvents
- uid: System.ComponentModel.Component.Container
  parent: System.ComponentModel.Component
  isExternal: false
  name: Container
  nameWithType: Component.Container
  fullName: Component.Container
- uid: System.ComponentModel.Component.DesignMode
  parent: System.ComponentModel.Component
  isExternal: false
  name: DesignMode
  nameWithType: Component.DesignMode
  fullName: Component.DesignMode
- uid: System.ComponentModel.Component.Dispose
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose()
  nameWithType: Component.Dispose()
  fullName: Component.Dispose()
- uid: System.ComponentModel.Component.Dispose(System.Boolean)
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Component.Dispose(Boolean)
  fullName: Component.Dispose(Boolean)
- uid: System.ComponentModel.Component.Disposed
  parent: System.ComponentModel.Component
  isExternal: false
  name: Disposed
  nameWithType: Component.Disposed
  fullName: Component.Disposed
- uid: System.ComponentModel.Component.Events
  parent: System.ComponentModel.Component
  isExternal: false
  name: Events
  nameWithType: Component.Events
  fullName: Component.Events
- uid: System.ComponentModel.Component.GetService(System.Type)
  parent: System.ComponentModel.Component
  isExternal: false
  name: GetService(Type)
  nameWithType: Component.GetService(Type)
  fullName: Component.GetService(Type)
- uid: System.ComponentModel.Component.Site
  parent: System.ComponentModel.Component
  isExternal: false
  name: Site
  nameWithType: Component.Site
  fullName: Component.Site
