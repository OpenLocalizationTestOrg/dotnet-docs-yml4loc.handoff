{"nodes":[{"content":"Encapsulates and propagates the host execution context across threads.","nodes":[{"pos":[0,70],"content":"Encapsulates and propagates the host execution context across threads.","nodes":[{"content":"Encapsulates and propagates the host execution context across threads.","pos":[0,70]}]}],"pos":[756,827],"yaml":true},{"content":"The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>. The host context migrates, or flows, with the execution context.","nodes":[{"pos":[0,175],"content":"The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>. The host context migrates, or flows, with the execution context.","nodes":[{"content":"The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>. The host context migrates, or flows, with the execution context.","pos":[0,175],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> is part of a larger <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.","pos":[0,110],"source":"The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>."},{"content":"The host context migrates, or flows, with the execution context.","pos":[111,175]}]}]}],"pos":[838,1014],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class.","nodes":[{"pos":[0,99],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.HostExecutionContext\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class."}],"pos":[2649,2749],"yaml":true},{"content":"The default constructor creates a host execution context whose <xref:System.Threading.HostExecutionContext.State%2A> property value is `null`.","nodes":[{"pos":[0,142],"content":"The default constructor creates a host execution context whose <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph> property value is <ph id=\"ph2\">`null`</ph>.","source":"The default constructor creates a host execution context whose <xref:System.Threading.HostExecutionContext.State%2A> property value is `null`."}],"pos":[2760,2903],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class using the specified state.","nodes":[{"pos":[0,125],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.HostExecutionContext\"&gt;&lt;/xref&gt;</ph> class using the specified state.","source":"Initializes a new instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class using the specified state."}],"pos":[4312,4438],"yaml":true},{"content":"The <xref:System.Threading.HostExecutionContext> is included with the <xref:System.Threading.ExecutionContext>. The `state` represents a safe handle containing the `IUnknown` pointer for the host.","nodes":[{"pos":[0,196],"content":"The <xref:System.Threading.HostExecutionContext> is included with the <xref:System.Threading.ExecutionContext>. The `state` represents a safe handle containing the `IUnknown` pointer for the host.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> is included with the <ph id=\"ph2\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>.","pos":[0,111],"source":"The <xref:System.Threading.HostExecutionContext> is included with the <xref:System.Threading.ExecutionContext>."},{"content":"The <ph id=\"ph1\">`state`</ph> represents a safe handle containing the <ph id=\"ph2\">`IUnknown`</ph> pointer for the host.","pos":[112,196],"source":" The `state` represents a safe handle containing the `IUnknown` pointer for the host."}]}],"pos":[4449,4646],"yaml":true,"extradata":"MT"},{"content":"An object representing the host execution context state.","nodes":[{"pos":[0,56],"content":"An object representing the host execution context state.","nodes":[{"content":"An object representing the host execution context state.","pos":[0,56]}]}],"pos":[4790,4847],"yaml":true},{"content":"Creates a copy of the current host execution context.","nodes":[{"pos":[0,53],"content":"Creates a copy of the current host execution context.","nodes":[{"content":"Creates a copy of the current host execution context.","pos":[0,53]}]}],"pos":[6097,6151],"yaml":true},{"content":"The copy can be used as the parameter to a <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName> method call.","nodes":[{"pos":[0,159],"content":"The copy can be used as the parameter to a <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName> method call.","nodes":[{"content":"The copy can be used as the parameter to a <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName&gt;</ph> method call.","pos":[0,159],"source":"The copy can be used as the parameter to a <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName> method call."}]}],"pos":[6162,6322],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.HostExecutionContext\"></xref> object representing the host context for the current thread.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.HostExecutionContext\"&gt;&lt;/xref&gt;</ph> object representing the host context for the current thread.","source":"A <xref href=\"System.Threading.HostExecutionContext\"></xref> object representing the host context for the current thread."}],"pos":[6513,6635],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class.","nodes":[{"pos":[0,124],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.HostExecutionContext\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class."}],"pos":[7872,7997],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Threading.HostExecutionContext>. The `Dispose` method leaves the <xref:System.Threading.HostExecutionContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.HostExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.HostExecutionContext> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method.","nodes":[{"pos":[0,417],"content":"Call `Dispose` when you are finished using the <xref:System.Threading.HostExecutionContext>. The `Dispose` method leaves the <xref:System.Threading.HostExecutionContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.HostExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.HostExecutionContext> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>.","pos":[0,92],"source":"Call `Dispose` when you are finished using the <xref:System.Threading.HostExecutionContext>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> in an unusable state.","pos":[93,191],"source":" The `Dispose` method leaves the <xref:System.Threading.HostExecutionContext> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> was occupying.","pos":[192,417],"source":" After calling `Dispose`, you must release all references to the <xref:System.Threading.HostExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.HostExecutionContext> was occupying."}]},{"pos":[424,629],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[637,927],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method.","pos":[8,288],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph>.","pos":[1,114],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[115,280],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method."}]}]}],"pos":[8008,8943],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Threading.WaitHandle\"></xref>, and optionally releases the managed resources.","nodes":[{"pos":[0,177],"content":"When overridden in a derived class, releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph>, and optionally releases the managed resources.","source":"When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Threading.WaitHandle\"></xref>, and optionally releases the managed resources."}],"pos":[10312,10490],"yaml":true},{"content":"This method is called by the <xref:System.Threading.HostExecutionContext.Dispose> method overload and the finalizer. <xref:System.Threading.HostExecutionContext.Dispose> invokes this protected method with the `disposing` parameter set to `true`. The finalizer invokes this method with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.HostExecutionContext> references. This method invokes the `Dispose` method of each referenced object.  \n  \n This method can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.","nodes":[{"pos":[0,312],"content":"This method is called by the <xref:System.Threading.HostExecutionContext.Dispose> method overload and the finalizer. <xref:System.Threading.HostExecutionContext.Dispose> invokes this protected method with the `disposing` parameter set to `true`. The finalizer invokes this method with `disposing` set to `false`.","nodes":[{"content":"This method is called by the <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> method overload and the finalizer.","pos":[0,116],"source":"This method is called by the <xref:System.Threading.HostExecutionContext.Dispose> method overload and the finalizer."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContext.Dispose&gt;</ph> invokes this protected method with the <ph id=\"ph2\">`disposing`</ph> parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[117,245],"source":" <xref:System.Threading.HostExecutionContext.Dispose> invokes this protected method with the `disposing` parameter set to `true`."},{"content":"The finalizer invokes this method with <ph id=\"ph1\">`disposing`</ph> set to <ph id=\"ph2\">`false`</ph>.","pos":[246,312],"source":" The finalizer invokes this method with `disposing` set to `false`."}]},{"pos":[319,558],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.HostExecutionContext> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Threading.HostExecutionContext&gt;</ph> references.","pos":[0,171],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.HostExecutionContext> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[172,239],"source":" This method invokes the `Dispose` method of each referenced object."}]},{"pos":[565,743],"content":"This method can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.","nodes":[{"content":"This method can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.","pos":[0,178],"nodes":[{"content":"This method can be called multiple times by other objects.","pos":[0,58]},{"content":"When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.","pos":[59,178]}]}]}],"pos":[10501,11251],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[11402,11505],"yaml":true},{"content":"Gets or sets the state of the host execution context.","nodes":[{"pos":[0,53],"content":"Gets or sets the state of the host execution context.","nodes":[{"content":"Gets or sets the state of the host execution context.","pos":[0,53]}]}],"pos":[12723,12777],"yaml":true},{"content":"The <xref:System.Threading.HostExecutionContext.State%2A> property value represents a safe handle containing the `IUnknown` pointer for the host.","nodes":[{"pos":[0,145],"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContext.State%2A&gt;</ph> property value represents a safe handle containing the <ph id=\"ph2\">`IUnknown`</ph> pointer for the host.","source":"The <xref:System.Threading.HostExecutionContext.State%2A> property value represents a safe handle containing the `IUnknown` pointer for the host."}],"pos":[12788,12934],"yaml":true,"extradata":"MT"},{"content":"An object representing the host execution context state.","nodes":[{"pos":[0,56],"content":"An object representing the host execution context state.","nodes":[{"content":"An object representing the host execution context state.","pos":[0,56]}]}],"pos":[13051,13108],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.HostExecutionContext\n  commentId: T:System.Threading.HostExecutionContext\n  id: HostExecutionContext\n  children:\n  - System.Threading.HostExecutionContext.#ctor\n  - System.Threading.HostExecutionContext.#ctor(System.Object)\n  - System.Threading.HostExecutionContext.CreateCopy\n  - System.Threading.HostExecutionContext.Dispose\n  - System.Threading.HostExecutionContext.Dispose(System.Boolean)\n  - System.Threading.HostExecutionContext.State\n  langs:\n  - csharp\n  name: HostExecutionContext\n  nameWithType: HostExecutionContext\n  fullName: System.Threading.HostExecutionContext\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Encapsulates and propagates the host execution context across threads.\n  remarks: The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>. The host context migrates, or flows, with the execution context.\n  syntax:\n    content: 'public class HostExecutionContext : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.HostExecutionContext.#ctor\n  commentId: M:System.Threading.HostExecutionContext.#ctor\n  id: '#ctor'\n  parent: System.Threading.HostExecutionContext\n  langs:\n  - csharp\n  name: HostExecutionContext()\n  nameWithType: HostExecutionContext.HostExecutionContext()\n  fullName: HostExecutionContext.HostExecutionContext()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class.\n  remarks: The default constructor creates a host execution context whose <xref:System.Threading.HostExecutionContext.State%2A> property value is `null`.\n  syntax:\n    content: public HostExecutionContext ();\n    parameters: []\n  overload: System.Threading.HostExecutionContext.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.HostExecutionContext.#ctor(System.Object)\n  commentId: M:System.Threading.HostExecutionContext.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Threading.HostExecutionContext\n  langs:\n  - csharp\n  name: HostExecutionContext(Object)\n  nameWithType: HostExecutionContext.HostExecutionContext(Object)\n  fullName: HostExecutionContext.HostExecutionContext(Object)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class using the specified state.\n  remarks: The <xref:System.Threading.HostExecutionContext> is included with the <xref:System.Threading.ExecutionContext>. The `state` represents a safe handle containing the `IUnknown` pointer for the host.\n  syntax:\n    content: public HostExecutionContext (object state);\n    parameters:\n    - id: state\n      type: System.Object\n      description: An object representing the host execution context state.\n  overload: System.Threading.HostExecutionContext.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.HostExecutionContext.CreateCopy\n  commentId: M:System.Threading.HostExecutionContext.CreateCopy\n  id: CreateCopy\n  parent: System.Threading.HostExecutionContext\n  langs:\n  - csharp\n  name: CreateCopy()\n  nameWithType: HostExecutionContext.CreateCopy()\n  fullName: HostExecutionContext.CreateCopy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Creates a copy of the current host execution context.\n  remarks: The copy can be used as the parameter to a <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName> method call.\n  syntax:\n    content: public virtual System.Threading.HostExecutionContext CreateCopy ();\n    parameters: []\n    return:\n      type: System.Threading.HostExecutionContext\n      description: A <xref href=\"System.Threading.HostExecutionContext\"></xref> object representing the host context for the current thread.\n  overload: System.Threading.HostExecutionContext.CreateCopy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.HostExecutionContext.Dispose\n  commentId: M:System.Threading.HostExecutionContext.Dispose\n  id: Dispose\n  parent: System.Threading.HostExecutionContext\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: HostExecutionContext.Dispose()\n  fullName: HostExecutionContext.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.HostExecutionContext\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Threading.HostExecutionContext>. The `Dispose` method leaves the <xref:System.Threading.HostExecutionContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.HostExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.HostExecutionContext> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.HostExecutionContext.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)\n  commentId: M:System.Threading.HostExecutionContext.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.HostExecutionContext\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HostExecutionContext.Dispose(Boolean)\n  fullName: HostExecutionContext.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Threading.WaitHandle\"></xref>, and optionally releases the managed resources.\n  remarks: \"This method is called by the <xref:System.Threading.HostExecutionContext.Dispose> method overload and the finalizer. <xref:System.Threading.HostExecutionContext.Dispose> invokes this protected method with the `disposing` parameter set to `true`. The finalizer invokes this method with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.HostExecutionContext> references. This method invokes the `Dispose` method of each referenced object.  \\n  \\n This method can be called multiple times by other objects. When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.\"\n  syntax:\n    content: public virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Threading.HostExecutionContext.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.HostExecutionContext.State\n  commentId: P:System.Threading.HostExecutionContext.State\n  id: State\n  parent: System.Threading.HostExecutionContext\n  langs:\n  - csharp\n  name: State\n  nameWithType: HostExecutionContext.State\n  fullName: HostExecutionContext.State\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading\n  namespace: System.Threading\n  summary: Gets or sets the state of the host execution context.\n  remarks: The <xref:System.Threading.HostExecutionContext.State%2A> property value represents a safe handle containing the `IUnknown` pointer for the host.\n  syntax:\n    content: protected object State { get; set; }\n    return:\n      type: System.Object\n      description: An object representing the host execution context state.\n  overload: System.Threading.HostExecutionContext.State*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.HostExecutionContext.#ctor\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: HostExecutionContext()\n  nameWithType: HostExecutionContext.HostExecutionContext()\n  fullName: HostExecutionContext.HostExecutionContext()\n- uid: System.Threading.HostExecutionContext.#ctor(System.Object)\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: HostExecutionContext(Object)\n  nameWithType: HostExecutionContext.HostExecutionContext(Object)\n  fullName: HostExecutionContext.HostExecutionContext(Object)\n- uid: System.Threading.HostExecutionContext.CreateCopy\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: CreateCopy()\n  nameWithType: HostExecutionContext.CreateCopy()\n  fullName: HostExecutionContext.CreateCopy()\n- uid: System.Threading.HostExecutionContext\n  parent: System.Threading\n  isExternal: false\n  name: HostExecutionContext\n  nameWithType: HostExecutionContext\n  fullName: System.Threading.HostExecutionContext\n- uid: System.Threading.HostExecutionContext.Dispose\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: Dispose()\n  nameWithType: HostExecutionContext.Dispose()\n  fullName: HostExecutionContext.Dispose()\n- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HostExecutionContext.Dispose(Boolean)\n  fullName: HostExecutionContext.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.HostExecutionContext.State\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: State\n  nameWithType: HostExecutionContext.State\n  fullName: HostExecutionContext.State\n- uid: System.Threading.HostExecutionContext.#ctor*\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: HostExecutionContext\n  nameWithType: HostExecutionContext.HostExecutionContext\n  fullName: HostExecutionContext.HostExecutionContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n- uid: System.Threading.HostExecutionContext.CreateCopy*\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: CreateCopy\n  nameWithType: HostExecutionContext.CreateCopy\n  fullName: HostExecutionContext.CreateCopy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n- uid: System.Threading.HostExecutionContext.Dispose*\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: Dispose\n  nameWithType: HostExecutionContext.Dispose\n  fullName: HostExecutionContext.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n- uid: System.Threading.HostExecutionContext.State*\n  parent: System.Threading.HostExecutionContext\n  isExternal: false\n  name: State\n  nameWithType: HostExecutionContext.State\n  fullName: HostExecutionContext.State\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/HostExecutionContext.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}