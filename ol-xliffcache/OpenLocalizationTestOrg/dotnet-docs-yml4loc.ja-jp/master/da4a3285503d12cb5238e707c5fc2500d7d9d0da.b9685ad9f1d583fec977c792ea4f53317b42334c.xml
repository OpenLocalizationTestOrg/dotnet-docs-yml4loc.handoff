{"nodes":[{"content":"The <xref href=\"System.DirectoryServices.PropertyCollection\"></xref> class contains the properties of a <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref>.","nodes":[{"pos":[0,165],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.PropertyCollection\"&gt;&lt;/xref&gt;</ph> class contains the properties of a <ph id=\"ph2\">&lt;xref href=\"System.DirectoryServices.DirectoryEntry\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.DirectoryServices.PropertyCollection\"></xref> class contains the properties of a <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref>."}],"pos":[2073,2239],"yaml":true},{"content":"Determines whether the specified property is in this collection.","nodes":[{"pos":[0,64],"content":"Determines whether the specified property is in this collection.","nodes":[{"content":"Determines whether the specified property is in this collection.","pos":[0,64]}]}],"pos":[4048,4113],"yaml":true},{"content":"The name of the property to find.","nodes":[{"pos":[0,33],"content":"The name of the property to find.","nodes":[{"content":"The name of the property to find.","pos":[0,33]}]}],"pos":[4264,4298],"yaml":true},{"content":"The return value is `true` if the specified property belongs to this collection; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"The return value is <ph id=\"ph1\">`true`</ph> if the specified property belongs to this collection; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"The return value is `true` if the specified property belongs to this collection; otherwise, `false`."}],"pos":[4356,4457],"yaml":true},{"content":"Copies the all objects in this collection to an array, starting at the specified index in the target array.","nodes":[{"pos":[0,107],"content":"Copies the all objects in this collection to an array, starting at the specified index in the target array.","nodes":[{"content":"Copies the all objects in this collection to an array, starting at the specified index in the target array.","pos":[0,107]}]}],"pos":[5795,5903],"yaml":true},{"content":"The array of <xref href=\"System.DirectoryServices.PropertyValueCollection\"></xref> objects that receives the elements of this collection.","nodes":[{"pos":[0,137],"content":"The array of <ph id=\"ph1\">&lt;xref href=\"System.DirectoryServices.PropertyValueCollection\"&gt;&lt;/xref&gt;</ph> objects that receives the elements of this collection.","source":"The array of <xref href=\"System.DirectoryServices.PropertyValueCollection\"></xref> objects that receives the elements of this collection."}],"pos":[6130,6268],"yaml":true},{"content":"The zero-based index in <code>array</code> where this method starts copying this collection.","nodes":[{"pos":[0,92],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> where this method starts copying this collection.","source":"The zero-based index in <code>array</code> where this method starts copying this collection."}],"pos":[6328,6421],"yaml":true},{"content":"An error occurred during the call to the underlying interface.","nodes":[{"pos":[0,62],"content":"An error occurred during the call to the underlying interface.","nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]}],"pos":[6631,6694],"yaml":true},{"content":"Gets the number of properties in this collection.","nodes":[{"pos":[0,49],"content":"Gets the number of properties in this collection.","nodes":[{"content":"Gets the number of properties in this collection.","pos":[0,49]}]}],"pos":[7648,7698],"yaml":true},{"content":"The Internet Information Services (IIS), and WinNT providers do not currently support <xref:System.DirectoryServices.PropertyCollection.Count%2A>, so each will throw a <xref:System.NotSupportedException>.","nodes":[{"pos":[0,204],"content":"The Internet Information Services (IIS), and WinNT providers do not currently support <xref:System.DirectoryServices.PropertyCollection.Count%2A>, so each will throw a <xref:System.NotSupportedException>.","nodes":[{"content":"The Internet Information Services (IIS), and WinNT providers do not currently support <ph id=\"ph1\">&lt;xref:System.DirectoryServices.PropertyCollection.Count%2A&gt;</ph>, so each will throw a <ph id=\"ph2\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,204],"source":"The Internet Information Services (IIS), and WinNT providers do not currently support <xref:System.DirectoryServices.PropertyCollection.Count%2A>, so each will throw a <xref:System.NotSupportedException>."}]}],"pos":[7709,7914],"yaml":true,"extradata":"MT"},{"content":"The number of properties in this collection.","nodes":[{"pos":[0,44],"content":"The number of properties in this collection.","nodes":[{"content":"The number of properties in this collection.","pos":[0,44]}]}],"pos":[8019,8064],"yaml":true},{"content":"An error occurred during the call to the underlying interface.","nodes":[{"pos":[0,62],"content":"An error occurred during the call to the underlying interface.","nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]}],"pos":[8273,8336],"yaml":true},{"content":"The directory cannot report the number of properties.","nodes":[{"pos":[0,53],"content":"The directory cannot report the number of properties.","nodes":[{"content":"The directory cannot report the number of properties.","pos":[0,53]}]}],"pos":[8438,8492],"yaml":true},{"content":"Returns an enumerator that you can use to iterate through this collection.","nodes":[{"pos":[0,74],"content":"Returns an enumerator that you can use to iterate through this collection.","nodes":[{"content":"Returns an enumerator that you can use to iterate through this collection.","pos":[0,74]}]}],"pos":[9498,9573],"yaml":true},{"content":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> that you can use to iterate through this collection.","nodes":[{"pos":[0,117],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionaryEnumerator\"&gt;&lt;/xref&gt;</ph> that you can use to iterate through this collection.","source":"An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> that you can use to iterate through this collection."}],"pos":[9765,9883],"yaml":true},{"content":"An error occurred during the call to the underlying interface.","nodes":[{"pos":[0,62],"content":"An error occurred during the call to the underlying interface.","nodes":[{"content":"An error occurred during the call to the underlying interface.","pos":[0,62]}]}],"pos":[10100,10163],"yaml":true},{"content":"Gets the specified property.","nodes":[{"pos":[0,28],"content":"Gets the specified property.","nodes":[{"content":"Gets the specified property.","pos":[0,28]}]}],"pos":[11180,11209],"yaml":true},{"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class.  \n  \n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>.","nodes":[{"pos":[0,101],"content":"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class.","nodes":[{"content":"In C#, this property is the indexer for the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.PropertyCollection&gt;</ph> class.","pos":[0,101],"source":"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class."}]},{"pos":[108,392],"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>.","nodes":[{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>.","pos":[0,284],"nodes":[{"content":"In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.","pos":[0,116]},{"content":"However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <ph id=\"ph1\">&lt;xref:System.String&gt;</ph>.","pos":[117,284],"source":" However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>."}]}]}],"pos":[11220,11617],"yaml":true,"extradata":"MT"},{"content":"The name of the property to retrieve.","nodes":[{"pos":[0,37],"content":"The name of the property to retrieve.","nodes":[{"content":"The name of the property to retrieve.","pos":[0,37]}]}],"pos":[11815,11853],"yaml":true},{"content":"The value of the specified property.","nodes":[{"pos":[0,36],"content":"The value of the specified property.","nodes":[{"content":"The value of the specified property.","pos":[0,36]}]}],"pos":[11945,11982],"yaml":true},{"content":"Gets the names of the properties in this collection.","nodes":[{"pos":[0,52],"content":"Gets the names of the properties in this collection.","nodes":[{"content":"Gets the names of the properties in this collection.","pos":[0,52]}]}],"pos":[13063,13116],"yaml":true},{"content":"When accessing members of the <xref:System.DirectoryServices.PropertyCollection.PropertyNames%2A> property, a <xref:System.Runtime.InteropServices.COMException> might be thrown due to an error while accessing the underlying interface.","nodes":[{"pos":[0,234],"content":"When accessing members of the <xref:System.DirectoryServices.PropertyCollection.PropertyNames%2A> property, a <xref:System.Runtime.InteropServices.COMException> might be thrown due to an error while accessing the underlying interface.","nodes":[{"content":"When accessing members of the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.PropertyCollection.PropertyNames%2A&gt;</ph> property, a <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.COMException&gt;</ph> might be thrown due to an error while accessing the underlying interface.","pos":[0,234],"source":"When accessing members of the <xref:System.DirectoryServices.PropertyCollection.PropertyNames%2A> property, a <xref:System.Runtime.InteropServices.COMException> might be thrown due to an error while accessing the underlying interface."}]}],"pos":[13127,13362],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> object that contains the names of the properties in this collection.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object that contains the names of the properties in this collection.","source":"An <xref href=\"System.Collections.ICollection\"></xref> object that contains the names of the properties in this collection."}],"pos":[13520,13644],"yaml":true},{"content":"Gets the values of the properties in this collection.","nodes":[{"pos":[0,53],"content":"Gets the values of the properties in this collection.","nodes":[{"content":"Gets the values of the properties in this collection.","pos":[0,53]}]}],"pos":[14692,14746],"yaml":true},{"content":"When accessing members of the <xref:System.DirectoryServices.PropertyCollection.Values%2A> property, a <xref:System.Runtime.InteropServices.COMException> exception might be thrown due to an error while accessing the underlying interface.","nodes":[{"pos":[0,237],"content":"When accessing members of the <xref:System.DirectoryServices.PropertyCollection.Values%2A> property, a <xref:System.Runtime.InteropServices.COMException> exception might be thrown due to an error while accessing the underlying interface.","nodes":[{"content":"When accessing members of the <ph id=\"ph1\">&lt;xref:System.DirectoryServices.PropertyCollection.Values%2A&gt;</ph> property, a <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.COMException&gt;</ph> exception might be thrown due to an error while accessing the underlying interface.","pos":[0,237],"source":"When accessing members of the <xref:System.DirectoryServices.PropertyCollection.Values%2A> property, a <xref:System.Runtime.InteropServices.COMException> exception might be thrown due to an error while accessing the underlying interface."}]}],"pos":[14757,14995],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> that contains the values of the properties in this collection.","nodes":[{"pos":[0,117],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> that contains the values of the properties in this collection.","source":"An <xref href=\"System.Collections.ICollection\"></xref> that contains the values of the properties in this collection."}],"pos":[15146,15264],"yaml":true},{"content":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.","nodes":[{"pos":[0,185],"content":"Copies the elements of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> to an <ph id=\"ph2\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph>, starting at a particular <ph id=\"ph3\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> index.","source":"Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index."}],"pos":[16569,16755],"yaml":true},{"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"pos":[0,227],"content":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.","nodes":[{"content":"The one-dimensional <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that is the destination of the elements copied from <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,158],"source":"The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> must have zero-based indexing.","pos":[159,227],"source":" The <xref href=\"System.Array\"></xref> must have zero-based indexing."}]}],"pos":[16904,17132],"yaml":true},{"content":"The zero-based index in <code>array</code> at which copying begins.","nodes":[{"pos":[0,67],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which copying begins.","source":"The zero-based index in <code>array</code> at which copying begins."}],"pos":[17192,17260],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[17471,17501],"yaml":true},{"content":"<code>index</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."}],"pos":[17615,17653],"yaml":true},{"content":"<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.","source":"<code>array</code> is multidimensional."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,255],"content":"The number of elements in the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is greater than the available space from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the end of the destination <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">array</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."}],"pos":[17747,18011],"yaml":true},{"content":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.","nodes":[{"pos":[0,154],"content":"The type of the source <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> cannot be cast automatically to the type of the destination <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."}],"pos":[18111,18266],"yaml":true},{"content":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).","nodes":[{"pos":[0,128],"content":"Gets a value indicating whether access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe).","source":"Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe)."}],"pos":[19417,19546],"yaml":true},{"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```csharp  \nICollection myCollection = new ICollection();  \n  lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```","nodes":[{"pos":[0,154],"content":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph>.","pos":[0,154],"source":"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>."}]},{"pos":[161,362],"content":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","nodes":[{"content":"Most collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","pos":[0,201],"source":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection."}]},{"pos":[369,769],"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.","pos":[0,400],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.","pos":[217,400]}]}]},{"pos":[776,794],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[801,946],"content":"The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:","nodes":[{"content":"The following example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> during the entire enumeration:","pos":[0,145],"source":"The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:"}]}],"pos":[19557,20927],"yaml":true,"extradata":"MT"},{"content":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">`true`</ph> if access to the <ph id=\"ph2\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> is synchronized (thread safe); otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`."}],"pos":[21068,21197],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets an object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[22432,22546],"yaml":true},{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \n  \n In the absence of a Synchronized method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \n  \n```csharp  \nICollection MyCollection =...  \n lock(MyCollection.SyncRoot) {  \n  // Some operation on the collection, which is now thread safe.  \n }  \n```  \n  \n```vb  \nDim myCollection as New ICollection()  \n SyncLock myCollection.SyncRoot  \n  ' Some operation on the collection, which is now thread safe.  \n End SyncLock  \n```  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```csharp  \nICollection myCollection = new ICollection();  \n lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```","nodes":[{"pos":[0,310],"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.","nodes":[{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.","pos":[0,310],"nodes":[{"content":"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance.","pos":[0,128]},{"content":"Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.","pos":[129,310]}]}]},{"pos":[317,1044],"content":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","nodes":[{"content":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[0,727],"nodes":[{"content":"Most collection classes in the <ph id=\"ph1\">&lt;xref:System.Collections?displayProperty=fullName&gt;</ph> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.","pos":[0,201],"source":"Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection."},{"content":"However, derived classes can provide their own synchronized version of the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property.","pos":[202,357],"source":" However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property."},{"content":"The synchronizing code must perform operations on the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> of the collection, not directly on the collection.","pos":[358,512],"source":" The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection."},{"content":"This ensures proper operation of collections that are derived from other objects.","pos":[513,594]},{"content":"Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.","pos":[595,727]}]}]},{"pos":[1051,1197],"content":"In the absence of a Synchronized method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:","nodes":[{"content":"In the absence of a Synchronized method on a collection, the expected usage for <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> looks like this:","pos":[0,146],"source":"In the absence of a Synchronized method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:"}]},{"pos":[1535,1933],"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[0,398],"nodes":[{"content":"Enumerating through a collection is intrinsically not a thread safe procedure.","pos":[0,78]},{"content":"Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.","pos":[79,216]},{"content":"To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.","pos":[217,398]}]}]},{"pos":[1940,1958],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[1965,2115],"content":"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:","nodes":[{"content":"The following code example shows how to lock the collection using the <ph id=\"ph1\">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> during the entire enumeration:","pos":[0,150],"source":"The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:"}]}],"pos":[22557,25111],"yaml":true,"extradata":"MT"},{"content":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.","nodes":[{"pos":[0,108],"content":"An object that can be used to synchronize access to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph>.","source":"An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>."}],"pos":[25247,25356],"yaml":true},{"content":"Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,114],"content":"Adds an element with the provided key and value to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[26688,26803],"yaml":true},{"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"pos":[0,485],"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id=\"ph2\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>).","pos":[0,224],"source":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`)."},{"content":"However, if the specified key already exists in the dictionary, setting the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[225,381],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[382,485],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]}],"pos":[26814,27300],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Object\"></xref> to use as the key of the element to add.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to use as the key of the element to add.","source":"The <xref href=\"System.Object\"></xref> to use as the key of the element to add."}],"pos":[27989,28069],"yaml":true},{"content":"The <xref href=\"System.Object\"></xref> to use as the value of the element to add.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to use as the value of the element to add.","source":"The <xref href=\"System.Object\"></xref> to use as the value of the element to add."}],"pos":[28130,28212],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[28420,28448],"yaml":true},{"content":"An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,110],"content":"An element with the same key already exists in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[28542,28653],"yaml":true},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,69],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> is read-only.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> is read-only."},{"pos":[76,80],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[87,160],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size."}],"pos":[28755,28926],"yaml":true},{"content":"Removes all elements from the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,89],"content":"Removes all elements from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes all elements from the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[30027,30117],"yaml":true},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."}],"pos":[30956,31033],"yaml":true},{"content":"Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> object contains an element with the specified key.","nodes":[{"pos":[0,125],"content":"Determines whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object contains an element with the specified key.","source":"Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> object contains an element with the specified key."}],"pos":[32215,32341],"yaml":true},{"content":"The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,84],"content":"The key to locate in the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[33046,33131],"yaml":true},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> contains an element with the key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`."}],"pos":[33189,33311],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[33524,33552],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size.","nodes":[{"pos":[0,112],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object has a fixed size.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size."}],"pos":[34685,34798],"yaml":true},{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"pos":[0,168],"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","nodes":[{"content":"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.","pos":[0,168]}]},{"pos":[175,445],"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","nodes":[{"content":"A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.","pos":[0,270]}]}],"pos":[34809,35259],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size; otherwise, `false`.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object has a fixed size; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size; otherwise, `false`."}],"pos":[35956,36069],"yaml":true},{"content":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.","nodes":[{"pos":[0,108],"content":"Gets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."}],"pos":[37313,37422],"yaml":true},{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"pos":[0,129],"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","nodes":[{"content":"A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.","pos":[0,129]}]}],"pos":[37433,37563],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only; otherwise, `false`."}],"pos":[38251,38360],"yaml":true},{"content":"Gets or sets the element with the specified key.","nodes":[{"pos":[0,48],"content":"Gets or sets the element with the specified key.","nodes":[{"content":"Gets or sets the element with the specified key.","pos":[0,48]}]}],"pos":[39636,39685],"yaml":true},{"content":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \n  \n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"pos":[0,133],"content":"This property provides the ability to access a specific element in the collection by using the following syntax: <ph id=\"ph1\">`myCollection[key]`</ph>.","source":"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`."},{"pos":[140,625],"content":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id=\"ph2\">`myCollection[\"myNonexistentKey\"] = myValue`</ph>).","pos":[0,224],"source":"You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`)."},{"content":"However, if the specified key already exists in the dictionary, setting the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.","pos":[225,381],"source":" However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value."},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.","pos":[382,485],"source":" In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements."}]}],"pos":[39696,40328],"yaml":true,"extradata":"MT"},{"content":"The key of the element to get or set.","nodes":[{"pos":[0,37],"content":"The key of the element to get or set.","nodes":[{"content":"The key of the element to get or set.","pos":[0,37]}]}],"pos":[41046,41084],"yaml":true},{"content":"The element with the specified key.","nodes":[{"pos":[0,35],"content":"The element with the specified key.","nodes":[{"content":"The element with the specified key.","pos":[0,35]}]}],"pos":[41141,41177],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[41386,41414],"yaml":true},{"content":"The property is set and the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.  \n  \n -or-  \n  \n The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,100],"content":"The property is set and the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The property is set and the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."},{"pos":[107,111],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[118,267],"content":"The property is set, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the collection, and the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The property is set, <code>key</code> does not exist in the collection, and the <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size."}],"pos":[41516,41794],"yaml":true},{"content":"Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,153],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the keys of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[42885,43039],"yaml":true},{"content":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.","nodes":[{"pos":[0,284],"content":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.","nodes":[{"content":"The order of the keys in the returned <ph id=\"ph1\">&lt;xref:System.Collections.ICollection&gt;</ph> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <ph id=\"ph2\">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id=\"ph3\">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> property.","pos":[0,284],"source":"The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property."}]}],"pos":[43050,43335],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,148],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.ICollection\"&gt;&lt;/xref&gt;</ph> object containing the keys of the <ph id=\"ph2\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[44059,44208],"yaml":true},{"content":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref> object.","nodes":[{"pos":[0,111],"content":"Removes the element with the specified key from the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object.","source":"Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref> object."}],"pos":[45488,45600],"yaml":true},{"content":"The key of the element to remove.","nodes":[{"pos":[0,33],"content":"The key of the element to remove.","nodes":[{"content":"The key of the element to remove.","pos":[0,33]}]}],"pos":[46295,46329],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[46540,46568],"yaml":true},{"content":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> object is read-only.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only."},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,167],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> has a fixed size.","source":"The <xref href=\"System.Collections.IDictionary\"></xref> has a fixed size."}],"pos":[46670,46848],"yaml":true},{"content":"Returns an <xref href=\"System.Collections.IEnumerable\"></xref> object.","nodes":[{"pos":[0,70],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns an <xref href=\"System.Collections.IEnumerable\"></xref> object."}],"pos":[47997,48068],"yaml":true},{"content":"[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"pos":[0,18],"content":"[Visual Basic, C#]","nodes":[{"content":"[Visual Basic, C#]","pos":[0,18]}]},{"pos":[25,229],"content":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,112],"source":"The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended instead of directly manipulating the enumerator.","pos":[114,204],"source":"  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator."}]},{"pos":[236,356],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[363,856],"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.","pos":[0,493],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.","pos":[84,180],"source":" <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position."},{"content":"At this position, the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.","pos":[182,275],"source":"  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.","pos":[276,493],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>."}]}]},{"pos":[863,1184],"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.","pos":[0,196],"source":"<xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.","pos":[197,321],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element."}]}]},{"pos":[1191,1926],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.","pos":[360,510],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined."},{"content":"To set <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.","pos":[511,735],"source":" To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>."}]},{"pos":[1933,2168],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[0,235],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.","pos":[73,235]}]}]},{"pos":[2175,2566],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,391],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[156,261]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[263,391]}]}]}],"pos":[48079,50662],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.IEnumerable\"></xref>.object.","nodes":[{"pos":[0,62],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph>.object.","source":"An <xref href=\"System.Collections.IEnumerable\"></xref>.object."}],"pos":[50839,50902],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.DirectoryServices.PropertyCollection\n  commentId: T:System.DirectoryServices.PropertyCollection\n  id: PropertyCollection\n  children:\n  - System.DirectoryServices.PropertyCollection.Contains(System.String)\n  - System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  - System.DirectoryServices.PropertyCollection.Count\n  - System.DirectoryServices.PropertyCollection.GetEnumerator\n  - System.DirectoryServices.PropertyCollection.Item(System.String)\n  - System.DirectoryServices.PropertyCollection.PropertyNames\n  - System.DirectoryServices.PropertyCollection.Values\n  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized\n  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys\n  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)\n  - System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: PropertyCollection\n  nameWithType: PropertyCollection\n  fullName: System.DirectoryServices.PropertyCollection\n  type: Class\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: The <xref href=\"System.DirectoryServices.PropertyCollection\"></xref> class contains the properties of a <xref href=\"System.DirectoryServices.DirectoryEntry\"></xref>.\n  syntax:\n    content: 'public class PropertyCollection : System.Collections.IDictionary'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)\n  commentId: M:System.DirectoryServices.PropertyCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Contains(String)\n  nameWithType: PropertyCollection.Contains(String)\n  fullName: PropertyCollection.Contains(String)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines whether the specified property is in this collection.\n  syntax:\n    content: public bool Contains (string propertyName);\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: The name of the property to find.\n    return:\n      type: System.Boolean\n      description: The return value is `true` if the specified property belongs to this collection; otherwise, `false`.\n  overload: System.DirectoryServices.PropertyCollection.Contains*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  commentId: M:System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  id: CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: CopyTo(PropertyValueCollection[], Int32)\n  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[], Int32)\n  fullName: PropertyCollection.CopyTo(PropertyValueCollection[], Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the all objects in this collection to an array, starting at the specified index in the target array.\n  syntax:\n    content: public void CopyTo (System.DirectoryServices.PropertyValueCollection[] array, int index);\n    parameters:\n    - id: array\n      type: System.DirectoryServices.PropertyValueCollection[]\n      description: The array of <xref href=\"System.DirectoryServices.PropertyValueCollection\"></xref> objects that receives the elements of this collection.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> where this method starts copying this collection.\n  overload: System.DirectoryServices.PropertyCollection.CopyTo*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.Count\n  commentId: P:System.DirectoryServices.PropertyCollection.Count\n  id: Count\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: PropertyCollection.Count\n  fullName: PropertyCollection.Count\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the number of properties in this collection.\n  remarks: The Internet Information Services (IIS), and WinNT providers do not currently support <xref:System.DirectoryServices.PropertyCollection.Count%2A>, so each will throw a <xref:System.NotSupportedException>.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of properties in this collection.\n  overload: System.DirectoryServices.PropertyCollection.Count*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The directory cannot report the number of properties.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.GetEnumerator\n  commentId: M:System.DirectoryServices.PropertyCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: PropertyCollection.GetEnumerator()\n  fullName: PropertyCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an enumerator that you can use to iterate through this collection.\n  syntax:\n    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: An <xref href=\"System.Collections.IDictionaryEnumerator\"></xref> that you can use to iterate through this collection.\n  overload: System.DirectoryServices.PropertyCollection.GetEnumerator*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An error occurred during the call to the underlying interface.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.Item(System.String)\n  commentId: P:System.DirectoryServices.PropertyCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: PropertyCollection.Item(String)\n  fullName: PropertyCollection.Item(String)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the specified property.\n  remarks: \"In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyCollection> class.  \\n  \\n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property with a type of Object and an index type of <xref:System.String>.\"\n  syntax:\n    content: public System.DirectoryServices.PropertyValueCollection this[string propertyName] { get; }\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: The name of the property to retrieve.\n    return:\n      type: System.DirectoryServices.PropertyValueCollection\n      description: The value of the specified property.\n  overload: System.DirectoryServices.PropertyCollection.Item*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.PropertyNames\n  commentId: P:System.DirectoryServices.PropertyCollection.PropertyNames\n  id: PropertyNames\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: PropertyNames\n  nameWithType: PropertyCollection.PropertyNames\n  fullName: PropertyCollection.PropertyNames\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the names of the properties in this collection.\n  remarks: When accessing members of the <xref:System.DirectoryServices.PropertyCollection.PropertyNames%2A> property, a <xref:System.Runtime.InteropServices.COMException> might be thrown due to an error while accessing the underlying interface.\n  syntax:\n    content: public System.Collections.ICollection PropertyNames { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> object that contains the names of the properties in this collection.\n  overload: System.DirectoryServices.PropertyCollection.PropertyNames*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.Values\n  commentId: P:System.DirectoryServices.PropertyCollection.Values\n  id: Values\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: Values\n  nameWithType: PropertyCollection.Values\n  fullName: PropertyCollection.Values\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets the values of the properties in this collection.\n  remarks: When accessing members of the <xref:System.DirectoryServices.PropertyCollection.Values%2A> property, a <xref:System.Runtime.InteropServices.COMException> exception might be thrown due to an error while accessing the underlying interface.\n  syntax:\n    content: public System.Collections.ICollection Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> that contains the values of the properties in this collection.\n  overload: System.DirectoryServices.PropertyCollection.Values*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: PropertyCollection.ICollection.CopyTo(Array, Int32)\n  fullName: PropertyCollection.ICollection.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Copies the elements of the <xref href=\"System.Collections.ICollection\"></xref> to an <xref href=\"System.Array\"></xref>, starting at a particular <xref href=\"System.Array\"></xref> index.\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ICollection\"></xref>. The <xref href=\"System.Array\"></xref> must have zero-based indexing.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> at which copying begins.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>array</code> is multidimensional.  \\n  \\n -or-  \\n  \\n The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: ICollection.IsSynchronized\n  nameWithType: PropertyCollection.ICollection.IsSynchronized\n  fullName: PropertyCollection.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe).\n  remarks: \"<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions that result from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```csharp  \\nICollection myCollection = new ICollection();  \\n  lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the <xref href=\"System.Collections.ICollection\"></xref> is synchronized (thread safe); otherwise, `false`.'\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: ICollection.SyncRoot\n  nameWithType: PropertyCollection.ICollection.SyncRoot\n  fullName: PropertyCollection.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  remarks: \"For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's SyncRoot property.  \\n  \\n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \\n  \\n In the absence of a Synchronized method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \\n  \\n```csharp  \\nICollection MyCollection =...  \\n lock(MyCollection.SyncRoot) {  \\n  // Some operation on the collection, which is now thread safe.  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection as New ICollection()  \\n SyncLock myCollection.SyncRoot  \\n  ' Some operation on the collection, which is now thread safe.  \\n End SyncLock  \\n```  \\n  \\n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \\n  \\n [Visual Basic, C#]  \\n  \\n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \\n  \\n```csharp  \\nICollection myCollection = new ICollection();  \\n lock(myCollection.SyncRoot) {  \\n  foreach (Object item in myCollection) {  \\n  // Insert your code here.  \\n  }  \\n }  \\n```  \\n  \\n```vb  \\nDim myCollection As New ICollection()  \\n Dim item As Object  \\n SyncLock myCollection.SyncRoot  \\n  For Each item In myCollection  \\n  ' Insert your code here.  \\n  Next item  \\n End SyncLock  \\n```\"\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\"></xref>.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  commentId: M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.Add(Object, Object)\n  nameWithType: PropertyCollection.IDictionary.Add(Object, Object)\n  fullName: PropertyCollection.IDictionary.Add(Object, Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Add%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#9)]\\n [!code-csharp[Dictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#9)]\\n [!code-vb[Dictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#9)]\"\n  syntax:\n    content: void IDictionary.Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to use as the key of the element to add.\n    - id: value\n      type: System.Object\n      description: The <xref href=\"System.Object\"></xref> to use as the value of the element to add.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: An element with the same key already exists in the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.IDictionary\\\"></xref> is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.IDictionary\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear\n  commentId: M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear\n  id: System#Collections#IDictionary#Clear\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.Clear()\n  nameWithType: PropertyCollection.IDictionary.Clear()\n  fullName: PropertyCollection.IDictionary.Clear()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes all elements from the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#8)]\\n [!code-csharp[Dictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#8)]\\n [!code-vb[Dictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#8)]\"\n  syntax:\n    content: void IDictionary.Clear ();\n    parameters: []\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)\n  commentId: M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.Contains(Object)\n  nameWithType: PropertyCollection.IDictionary.Contains(Object)\n  fullName: PropertyCollection.IDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Determines whether the <xref href=\"System.Collections.IDictionary\"></xref> object contains an element with the specified key.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#5)]\\n [!code-csharp[Dictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#5)]\\n [!code-vb[Dictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#5)]\"\n  syntax:\n    content: bool IDictionary.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The key to locate in the <xref href=\"System.Collections.IDictionary\"></xref> object.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> contains an element with the key; otherwise, `false`.'\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize\n  commentId: P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.IsFixedSize\n  nameWithType: PropertyCollection.IDictionary.IsFixedSize\n  fullName: PropertyCollection.IDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size.\n  remarks: \"A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \\n  \\n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.\"\n  example:\n  - \"The following example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#6)]\\n [!code-csharp[Dictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#6)]\\n [!code-vb[Dictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#6)]\"\n  syntax:\n    content: bool System.Collections.IDictionary.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object has a fixed size; otherwise, `false`.'\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly\n  commentId: P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.IsReadOnly\n  nameWithType: PropertyCollection.IDictionary.IsReadOnly\n  fullName: PropertyCollection.IDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only.\n  remarks: A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#4)]\\n [!code-csharp[Dictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#4)]\\n [!code-vb[Dictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#4)]\"\n  syntax:\n    content: bool System.Collections.IDictionary.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Collections.IDictionary\"></xref> object is read-only; otherwise, `false`.'\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)\n  commentId: P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.Item(Object)\n  nameWithType: PropertyCollection.IDictionary.Item(Object)\n  fullName: PropertyCollection.IDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets or sets the element with the specified key.\n  remarks: \"This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \\n  \\n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\\\"myNonexistentKey\\\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.\"\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Item%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#13](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#13)]\\n [!code-csharp[Dictionary#13](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#13)]\\n [!code-vb[Dictionary#13](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#13)]\"\n  syntax:\n    content: object System.Collections.IDictionary.Item[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to get or set.\n    return:\n      type: System.Object\n      description: The element with the specified key.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The property is set and the <xref href=\\\"System.Collections.IDictionary\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The property is set, <code>key</code> does not exist in the collection, and the <xref href=\\\"System.Collections.IDictionary\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys\n  commentId: P:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.Keys\n  nameWithType: PropertyCollection.IDictionary.Keys\n  fullName: PropertyCollection.IDictionary.Keys\n  type: Property\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Gets an <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Keys%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#10)]\\n [!code-csharp[Dictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#10)]\\n [!code-vb[Dictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#10)]\"\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: An <xref href=\"System.Collections.ICollection\"></xref> object containing the keys of the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)\n  commentId: M:System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IDictionary.Remove(Object)\n  nameWithType: PropertyCollection.IDictionary.Remove(Object)\n  fullName: PropertyCollection.IDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\"></xref> object.\n  remarks: ''\n  example:\n  - \"The following example shows how to implement the <xref:System.Collections.IDictionary.Remove%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \\n  \\n [!code-cpp[Dictionary#7](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#7)]\\n [!code-csharp[Dictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#7)]\\n [!code-vb[Dictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#7)]\"\n  syntax:\n    content: void IDictionary.Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: The key of the element to remove.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The <xref href=\\\"System.Collections.IDictionary\\\"></xref> object is read-only.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.IDictionary\\\"></xref> has a fixed size.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.DirectoryServices.PropertyCollection\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: PropertyCollection.IEnumerable.GetEnumerator()\n  fullName: PropertyCollection.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.DirectoryServices\n  namespace: System.DirectoryServices\n  summary: Returns an <xref href=\"System.Collections.IEnumerable\"></xref> object.\n  remarks: \"[Visual Basic, C#]  \\n  \\n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \\n  \\n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.\"\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerable\"></xref>.object.\n  overload: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n  author: BrucePerlerMS\n  ms.author: bruceper\n  manager: mbaldwin\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.InteropServices.COMException\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: COMException\n  nameWithType: COMException\n  fullName: System.Runtime.InteropServices.COMException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Contains(String)\n  nameWithType: PropertyCollection.Contains(String)\n  fullName: PropertyCollection.Contains(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: CopyTo(PropertyValueCollection[], Int32)\n  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[], Int32)\n  fullName: PropertyCollection.CopyTo(PropertyValueCollection[], Int32)\n- uid: System.DirectoryServices.PropertyValueCollection\n  name: PropertyValueCollection\n  nameWithType: PropertyValueCollection\n  fullName: System.DirectoryServices.PropertyValueCollection\n- uid: System.DirectoryServices.PropertyValueCollection[]\n  parent: System.DirectoryServices\n  isExternal: false\n  name: PropertyValueCollection[]\n  nameWithType: PropertyValueCollection[]\n  fullName: System.DirectoryServices.PropertyValueCollection[]\n  spec.csharp:\n  - uid: System.DirectoryServices.PropertyValueCollection\n    name: PropertyValueCollection\n    nameWithType: PropertyValueCollection\n    fullName: System.DirectoryServices.PropertyValueCollection\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.DirectoryServices.PropertyCollection.Count\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Count\n  nameWithType: PropertyCollection.Count\n  fullName: PropertyCollection.Count\n- uid: System.DirectoryServices.PropertyCollection.GetEnumerator\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: PropertyCollection.GetEnumerator()\n  fullName: PropertyCollection.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.DirectoryServices.PropertyCollection.Item(System.String)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Item(String)\n  nameWithType: PropertyCollection.Item(String)\n  fullName: PropertyCollection.Item(String)\n- uid: System.DirectoryServices.PropertyCollection.PropertyNames\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: PropertyNames\n  nameWithType: PropertyCollection.PropertyNames\n  fullName: PropertyCollection.PropertyNames\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.DirectoryServices.PropertyCollection.Values\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Values\n  nameWithType: PropertyCollection.Values\n  fullName: PropertyCollection.Values\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: ICollection.CopyTo(Array, Int32)\n  nameWithType: PropertyCollection.ICollection.CopyTo(Array, Int32)\n  fullName: PropertyCollection.ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: ICollection.IsSynchronized\n  nameWithType: PropertyCollection.ICollection.IsSynchronized\n  fullName: PropertyCollection.ICollection.IsSynchronized\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: ICollection.SyncRoot\n  nameWithType: PropertyCollection.ICollection.SyncRoot\n  fullName: PropertyCollection.ICollection.SyncRoot\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.Add(Object, Object)\n  nameWithType: PropertyCollection.IDictionary.Add(Object, Object)\n  fullName: PropertyCollection.IDictionary.Add(Object, Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.Clear()\n  nameWithType: PropertyCollection.IDictionary.Clear()\n  fullName: PropertyCollection.IDictionary.Clear()\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.Contains(Object)\n  nameWithType: PropertyCollection.IDictionary.Contains(Object)\n  fullName: PropertyCollection.IDictionary.Contains(Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.IsFixedSize\n  nameWithType: PropertyCollection.IDictionary.IsFixedSize\n  fullName: PropertyCollection.IDictionary.IsFixedSize\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.IsReadOnly\n  nameWithType: PropertyCollection.IDictionary.IsReadOnly\n  fullName: PropertyCollection.IDictionary.IsReadOnly\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.Item(Object)\n  nameWithType: PropertyCollection.IDictionary.Item(Object)\n  fullName: PropertyCollection.IDictionary.Item(Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.Keys\n  nameWithType: PropertyCollection.IDictionary.Keys\n  fullName: PropertyCollection.IDictionary.Keys\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IDictionary.Remove(Object)\n  nameWithType: PropertyCollection.IDictionary.Remove(Object)\n  fullName: PropertyCollection.IDictionary.Remove(Object)\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: PropertyCollection.IEnumerable.GetEnumerator()\n  fullName: PropertyCollection.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.DirectoryServices.PropertyCollection.Contains*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Contains\n  nameWithType: PropertyCollection.Contains\n  fullName: PropertyCollection.Contains\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.CopyTo*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: CopyTo\n  nameWithType: PropertyCollection.CopyTo\n  fullName: PropertyCollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.Count*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Count\n  nameWithType: PropertyCollection.Count\n  fullName: PropertyCollection.Count\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.GetEnumerator*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: PropertyCollection.GetEnumerator\n  fullName: PropertyCollection.GetEnumerator\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.Item*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Item\n  nameWithType: PropertyCollection.Item\n  fullName: PropertyCollection.Item\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.PropertyNames*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: PropertyNames\n  nameWithType: PropertyCollection.PropertyNames\n  fullName: PropertyCollection.PropertyNames\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.Values*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: Values\n  nameWithType: PropertyCollection.Values\n  fullName: PropertyCollection.Values\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo\n  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo\n  fullName: PropertyCollection.System.Collections.ICollection.CopyTo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: PropertyCollection.System.Collections.ICollection.IsSynchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot\n  fullName: PropertyCollection.System.Collections.ICollection.SyncRoot\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Add\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Add\n  fullName: PropertyCollection.System.Collections.IDictionary.Add\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Clear\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear\n  fullName: PropertyCollection.System.Collections.IDictionary.Clear\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Contains\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains\n  fullName: PropertyCollection.System.Collections.IDictionary.Contains\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize\n  fullName: PropertyCollection.System.Collections.IDictionary.IsFixedSize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly\n  fullName: PropertyCollection.System.Collections.IDictionary.IsReadOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Item\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Item\n  fullName: PropertyCollection.System.Collections.IDictionary.Item\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys\n  fullName: PropertyCollection.System.Collections.IDictionary.Keys\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IDictionary.Remove\n  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove\n  fullName: PropertyCollection.System.Collections.IDictionary.Remove\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.DirectoryServices.PropertyCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator\n  fullName: PropertyCollection.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.DirectoryServices/PropertyCollection.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n"}