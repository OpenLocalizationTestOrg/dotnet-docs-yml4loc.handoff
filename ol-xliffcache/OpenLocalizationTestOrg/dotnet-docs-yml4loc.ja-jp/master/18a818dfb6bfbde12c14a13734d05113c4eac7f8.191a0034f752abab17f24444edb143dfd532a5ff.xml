{"nodes":[{"content":"Represents time in divisions, such as months, days, and years. Years are calculated using the Chinese calendar, while days and months are calculated using the lunisolar calendar.","nodes":[{"pos":[0,178],"content":"Represents time in divisions, such as months, days, and years. Years are calculated using the Chinese calendar, while days and months are calculated using the lunisolar calendar.","nodes":[{"content":"Represents time in divisions, such as months, days, and years. Years are calculated using the Chinese calendar, while days and months are calculated using the lunisolar calendar.","pos":[0,178],"nodes":[{"content":"Represents time in divisions, such as months, days, and years.","pos":[0,62]},{"content":"Years are calculated using the Chinese calendar, while days and months are calculated using the lunisolar calendar.","pos":[63,178]}]}]}],"pos":[972,1151],"yaml":true},{"content":"The <xref:System.Globalization.ChineseLunisolarCalendar> class is derived from the <xref:System.Globalization.EastAsianLunisolarCalendar> class, which represents the lunisolar calendar. The <xref:System.Globalization.EastAsianLunisolarCalendar> class supports the sexagenary year cycle (which repeats every 60 years) in addition to solar years and lunar months. Each solar year in the calendar is associated with a Sexagenary Year, a Celestial Stem, and a Terrestrial Branch, and these calendars can have leap months after any month of the year. The <xref:System.Globalization.ChineseLunisolarCalendar> class calculates years based on solar calculations, and months and days based on lunar calculations.  \n  \n> [!NOTE]\n>  For information about using the <xref:System.Globalization.ChineseLunisolarCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md).  \n  \n A leap month can occur after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.  \n  \n Currently, the <xref:System.Globalization.ChineseLunisolarCalendar> is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, this class can be used only to calculate dates in the Chinese lunisolar calendar.  \n  \n Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.","nodes":[{"pos":[0,703],"content":"The <xref:System.Globalization.ChineseLunisolarCalendar> class is derived from the <xref:System.Globalization.EastAsianLunisolarCalendar> class, which represents the lunisolar calendar. The <xref:System.Globalization.EastAsianLunisolarCalendar> class supports the sexagenary year cycle (which repeats every 60 years) in addition to solar years and lunar months. Each solar year in the calendar is associated with a Sexagenary Year, a Celestial Stem, and a Terrestrial Branch, and these calendars can have leap months after any month of the year. The <xref:System.Globalization.ChineseLunisolarCalendar> class calculates years based on solar calculations, and months and days based on lunar calculations.","nodes":[{"content":"The <xref:System.Globalization.ChineseLunisolarCalendar> class is derived from the <xref:System.Globalization.EastAsianLunisolarCalendar> class, which represents the lunisolar calendar. The <xref:System.Globalization.EastAsianLunisolarCalendar> class supports the sexagenary year cycle (which repeats every 60 years) in addition to solar years and lunar months. Each solar year in the calendar is associated with a Sexagenary Year, a Celestial Stem, and a Terrestrial Branch, and these calendars can have leap months after any month of the year. The <xref:System.Globalization.ChineseLunisolarCalendar> class calculates years based on solar calculations, and months and days based on lunar calculations.","pos":[0,703],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.ChineseLunisolarCalendar&gt;</ph> class is derived from the <ph id=\"ph2\">&lt;xref:System.Globalization.EastAsianLunisolarCalendar&gt;</ph> class, which represents the lunisolar calendar.","pos":[0,185],"source":"The <xref:System.Globalization.ChineseLunisolarCalendar> class is derived from the <xref:System.Globalization.EastAsianLunisolarCalendar> class, which represents the lunisolar calendar."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.EastAsianLunisolarCalendar&gt;</ph> class supports the sexagenary year cycle (which repeats every 60 years) in addition to solar years and lunar months.","pos":[186,361],"source":" The <xref:System.Globalization.EastAsianLunisolarCalendar> class supports the sexagenary year cycle (which repeats every 60 years) in addition to solar years and lunar months."},{"content":"Each solar year in the calendar is associated with a Sexagenary Year, a Celestial Stem, and a Terrestrial Branch, and these calendars can have leap months after any month of the year.","pos":[362,545]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.ChineseLunisolarCalendar&gt;</ph> class calculates years based on solar calculations, and months and days based on lunar calculations.","pos":[546,703],"source":" The <xref:System.Globalization.ChineseLunisolarCalendar> class calculates years based on solar calculations, and months and days based on lunar calculations."}]}]},{"pos":[711,948],"content":"[!NOTE]\n For information about using the <xref:System.Globalization.ChineseLunisolarCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md).","leadings":["","> "],"nodes":[{"content":"For information about using the <ph id=\"ph1\">&lt;xref:System.Globalization.ChineseLunisolarCalendar&gt;</ph> class and the other calendar classes in the .NET Framework, see <bpt id=\"p1\">[</bpt>Working with Calendars<ept id=\"p1\">](~/docs/standard/datetime/working-with-calendars.md)</ept>.","pos":[9,235],"source":" For information about using the <xref:System.Globalization.ChineseLunisolarCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md)."}]},{"pos":[955,1429],"content":"A leap month can occur after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","nodes":[{"content":"A leap month can occur after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[0,474],"nodes":[{"content":"A leap month can occur after any month in a year.","pos":[0,49]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt;</ph> method returns a number between 1 and 13 that indicates the month associated with a specified date.","pos":[50,233],"source":" For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date."},{"content":"If there is a leap month between the eighth and ninth months of the year, the <ph id=\"ph1\">&lt;xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A&gt;</ph> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.","pos":[234,474],"source":" If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month."}]}]},{"pos":[1436,1695],"content":"Currently, the <xref:System.Globalization.ChineseLunisolarCalendar> is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, this class can be used only to calculate dates in the Chinese lunisolar calendar.","nodes":[{"content":"Currently, the <xref:System.Globalization.ChineseLunisolarCalendar> is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, this class can be used only to calculate dates in the Chinese lunisolar calendar.","pos":[0,259],"nodes":[{"content":"Currently, the <ph id=\"ph1\">&lt;xref:System.Globalization.ChineseLunisolarCalendar&gt;</ph> is not used by any of the cultures supported by the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class.","pos":[0,166],"source":"Currently, the <xref:System.Globalization.ChineseLunisolarCalendar> is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class."},{"content":"Therefore, this class can be used only to calculate dates in the Chinese lunisolar calendar.","pos":[167,259]}]}]},{"pos":[1702,2349],"content":"Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.","nodes":[{"content":"Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.","pos":[0,647],"nodes":[{"content":"Each <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object supports a set of calendars.","pos":[0,80],"source":"Each <xref:System.Globalization.CultureInfo> object supports a set of calendars."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.Calendar%2A&gt;</ph> property returns the default calendar for the culture, and the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.OptionalCalendars%2A&gt;</ph> property returns an array containing all the calendars supported by the culture.","pos":[81,341],"source":" The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture."},{"content":"To change the calendar used by a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph>, the application should set the <ph id=\"ph2\">&lt;xref:System.Globalization.DateTimeFormatInfo.Calendar%2A&gt;</ph> property of <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName&gt;</ph> to a new <ph id=\"ph4\">&lt;xref:System.Globalization.Calendar&gt;</ph>.","pos":[342,647],"source":" To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>."}]}]}],"pos":[1162,3523],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class.","nodes":[{"pos":[0,107],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class."}],"pos":[9096,9204],"yaml":true},{"content":"Specifies the era that corresponds to the current <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object.","nodes":[{"pos":[0,124],"content":"Specifies the era that corresponds to the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar\"&gt;&lt;/xref&gt;</ph> object.","source":"Specifies the era that corresponds to the current <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object."}],"pos":[10759,10884],"yaml":true},{"content":"The value of this field is 1.  \n  \n The <xref:System.Globalization.ChineseLunisolarCalendar> class recognizes only the current era.","nodes":[{"pos":[0,29],"content":"The value of this field is 1.","nodes":[{"content":"The value of this field is 1.","pos":[0,29]}]},{"pos":[36,131],"content":"The <xref:System.Globalization.ChineseLunisolarCalendar> class recognizes only the current era.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.ChineseLunisolarCalendar&gt;</ph> class recognizes only the current era.","pos":[0,95],"source":"The <xref:System.Globalization.ChineseLunisolarCalendar> class recognizes only the current era."}]}],"pos":[10895,11031],"yaml":true,"extradata":"MT"},{"content":"Gets the number of days in the year that precedes the year that is specified by the <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref> property.","nodes":[{"pos":[0,181],"content":"Gets the number of days in the year that precedes the year that is specified by the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"&gt;&lt;/xref&gt;</ph> property.","source":"Gets the number of days in the year that precedes the year that is specified by the <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref> property."}],"pos":[12509,12691],"yaml":true},{"content":"This property returns a constant value of 384.","nodes":[{"pos":[0,46],"content":"This property returns a constant value of 384.","nodes":[{"content":"This property returns a constant value of 384.","pos":[0,46]}]}],"pos":[12702,12749],"yaml":true,"extradata":"MT"},{"content":"The number of days in the year that precedes the year specified by <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref>.","nodes":[{"pos":[0,155],"content":"The number of days in the year that precedes the year specified by <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"&gt;&lt;/xref&gt;</ph>.","source":"The number of days in the year that precedes the year specified by <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref>."}],"pos":[12893,13049],"yaml":true},{"content":"Gets the eras that correspond to the range of dates and times supported by the current <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object.","nodes":[{"pos":[0,161],"content":"Gets the eras that correspond to the range of dates and times supported by the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the eras that correspond to the range of dates and times supported by the current <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object."}],"pos":[14371,14533],"yaml":true},{"content":"An array of 32-bit signed integers that specify the relevant eras. The return value for a <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object is always an array containing one element equal to the <xref href=\"System.Globalization.ChineseLunisolarCalendar.ChineseEra\"></xref> value.","nodes":[{"pos":[0,303],"content":"An array of 32-bit signed integers that specify the relevant eras. The return value for a <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object is always an array containing one element equal to the <xref href=\"System.Globalization.ChineseLunisolarCalendar.ChineseEra\"></xref> value.","nodes":[{"content":"An array of 32-bit signed integers that specify the relevant eras.","pos":[0,66]},{"content":"The return value for a <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar\"&gt;&lt;/xref&gt;</ph> object is always an array containing one element equal to the <ph id=\"ph2\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar.ChineseEra\"&gt;&lt;/xref&gt;</ph> value.","pos":[67,303],"source":" The return value for a <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object is always an array containing one element equal to the <xref href=\"System.Globalization.ChineseLunisolarCalendar.ChineseEra\"></xref> value."}]}],"pos":[14717,15021],"yaml":true},{"content":"Retrieves the era that corresponds to the specified <xref href=\"System.DateTime\"></xref> type.","nodes":[{"pos":[0,94],"content":"Retrieves the era that corresponds to the specified <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> type.","source":"Retrieves the era that corresponds to the specified <xref href=\"System.DateTime\"></xref> type."}],"pos":[16665,16760],"yaml":true},{"content":"The <xref href=\"System.DateTime\"></xref> type to read.","nodes":[{"pos":[0,54],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> type to read.","source":"The <xref href=\"System.DateTime\"></xref> type to read."}],"pos":[16972,17027],"yaml":true},{"content":"An integer that represents the era in the <code>time</code> parameter.","nodes":[{"pos":[0,70],"content":"An integer that represents the era in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">time</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"An integer that represents the era in the <code>time</code> parameter."}],"pos":[17083,17154],"yaml":true},{"content":"<code>time</code> is less than <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref> or greater than <xref href=\"System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\"></xref>.","nodes":[{"pos":[0,223],"content":"<ph id=\"ph1\">&lt;code&gt;time&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\"&gt;&lt;/xref&gt;</ph>.","source":"<code>time</code> is less than <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref> or greater than <xref href=\"System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\"></xref>."}],"pos":[17348,17572],"yaml":true},{"content":"Gets the maximum date and time supported by the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class.","nodes":[{"pos":[0,121],"content":"Gets the maximum date and time supported by the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar\"&gt;&lt;/xref&gt;</ph> class.","source":"Gets the maximum date and time supported by the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class."}],"pos":[19140,19262],"yaml":true},{"content":"A <xref href=\"System.DateTime\"></xref> type that represents the last moment on January 28, 2101 in the Gregorian calendar, which is approximately equal to the constructor <code>DateTime(2101, 1, 28, 23, 59, 59, 999)</code>.","nodes":[{"pos":[0,223],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> type that represents the last moment on January 28, 2101 in the Gregorian calendar, which is approximately equal to the constructor <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">DateTime(2101, 1, 28, 23, 59, 59, 999)</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.DateTime\"></xref> type that represents the last moment on January 28, 2101 in the Gregorian calendar, which is approximately equal to the constructor <code>DateTime(2101, 1, 28, 23, 59, 59, 999)</code>."}],"pos":[19466,19690],"yaml":true},{"content":"Gets the minimum date and time supported by the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class.","nodes":[{"pos":[0,121],"content":"Gets the minimum date and time supported by the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.ChineseLunisolarCalendar\"&gt;&lt;/xref&gt;</ph> class.","source":"Gets the minimum date and time supported by the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class."}],"pos":[21355,21477],"yaml":true},{"content":"A <xref href=\"System.DateTime\"></xref> type that represents February 19, 1901 in the Gregorian calendar, which is equivalent to the constructor, <code>DateTime(1901, 2, 19)</code>.","nodes":[{"pos":[0,180],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> type that represents February 19, 1901 in the Gregorian calendar, which is equivalent to the constructor, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">DateTime(1901, 2, 19)</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.DateTime\"></xref> type that represents February 19, 1901 in the Gregorian calendar, which is equivalent to the constructor, <code>DateTime(1901, 2, 19)</code>."}],"pos":[21681,21862],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.ChineseLunisolarCalendar\n  commentId: T:System.Globalization.ChineseLunisolarCalendar\n  id: ChineseLunisolarCalendar\n  children:\n  - System.Globalization.ChineseLunisolarCalendar.#ctor\n  - System.Globalization.ChineseLunisolarCalendar.ChineseEra\n  - System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  - System.Globalization.ChineseLunisolarCalendar.Eras\n  - System.Globalization.ChineseLunisolarCalendar.GetEra(System.DateTime)\n  - System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\n  - System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\n  langs:\n  - csharp\n  name: ChineseLunisolarCalendar\n  nameWithType: ChineseLunisolarCalendar\n  fullName: System.Globalization.ChineseLunisolarCalendar\n  type: Class\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Represents time in divisions, such as months, days, and years. Years are calculated using the Chinese calendar, while days and months are calculated using the lunisolar calendar.\n  remarks: \"The <xref:System.Globalization.ChineseLunisolarCalendar> class is derived from the <xref:System.Globalization.EastAsianLunisolarCalendar> class, which represents the lunisolar calendar. The <xref:System.Globalization.EastAsianLunisolarCalendar> class supports the sexagenary year cycle (which repeats every 60 years) in addition to solar years and lunar months. Each solar year in the calendar is associated with a Sexagenary Year, a Celestial Stem, and a Terrestrial Branch, and these calendars can have leap months after any month of the year. The <xref:System.Globalization.ChineseLunisolarCalendar> class calculates years based on solar calculations, and months and days based on lunar calculations.  \\n  \\n> [!NOTE]\\n>  For information about using the <xref:System.Globalization.ChineseLunisolarCalendar> class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/docs/standard/datetime/working-with-calendars.md).  \\n  \\n A leap month can occur after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.  \\n  \\n Currently, the <xref:System.Globalization.ChineseLunisolarCalendar> is not used by any of the cultures supported by the <xref:System.Globalization.CultureInfo> class. Therefore, this class can be used only to calculate dates in the Chinese lunisolar calendar.  \\n  \\n Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>.\"\n  syntax:\n    content: 'public class ChineseLunisolarCalendar : System.Globalization.EastAsianLunisolarCalendar'\n  inheritance:\n  - System.Object\n  - System.Globalization.Calendar\n  - System.Globalization.EastAsianLunisolarCalendar\n  implements: []\n  inheritedMembers:\n  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.Clone\n  - System.Globalization.Calendar.CurrentEra\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - System.Globalization.Calendar.GetHour(System.DateTime)\n  - System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  - System.Globalization.Calendar.GetMinute(System.DateTime)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - System.Globalization.Calendar.GetSecond(System.DateTime)\n  - System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - System.Globalization.Calendar.IsReadOnly\n  - System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.AlgorithmType\n  - System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.ChineseLunisolarCalendar.#ctor\n  commentId: M:System.Globalization.ChineseLunisolarCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.ChineseLunisolarCalendar\n  langs:\n  - csharp\n  name: ChineseLunisolarCalendar()\n  nameWithType: ChineseLunisolarCalendar.ChineseLunisolarCalendar()\n  fullName: ChineseLunisolarCalendar.ChineseLunisolarCalendar()\n  type: Constructor\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Initializes a new instance of the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class.\n  syntax:\n    content: public ChineseLunisolarCalendar ();\n    parameters: []\n  overload: System.Globalization.ChineseLunisolarCalendar.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.ChineseLunisolarCalendar.ChineseEra\n  commentId: F:System.Globalization.ChineseLunisolarCalendar.ChineseEra\n  id: ChineseEra\n  parent: System.Globalization.ChineseLunisolarCalendar\n  langs:\n  - csharp\n  name: ChineseEra\n  nameWithType: ChineseLunisolarCalendar.ChineseEra\n  fullName: ChineseLunisolarCalendar.ChineseEra\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Specifies the era that corresponds to the current <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object.\n  remarks: \"The value of this field is 1.  \\n  \\n The <xref:System.Globalization.ChineseLunisolarCalendar> class recognizes only the current era.\"\n  syntax:\n    content: public const int ChineseEra = 1;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  commentId: P:System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  id: DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.ChineseLunisolarCalendar\n  langs:\n  - csharp\n  name: DaysInYearBeforeMinSupportedYear\n  nameWithType: ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  fullName: ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the number of days in the year that precedes the year that is specified by the <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref> property.\n  remarks: This property returns a constant value of 384.\n  syntax:\n    content: protected override int DaysInYearBeforeMinSupportedYear { get; }\n    return:\n      type: System.Int32\n      description: The number of days in the year that precedes the year specified by <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref>.\n  overload: System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.ChineseLunisolarCalendar.Eras\n  commentId: P:System.Globalization.ChineseLunisolarCalendar.Eras\n  id: Eras\n  parent: System.Globalization.ChineseLunisolarCalendar\n  langs:\n  - csharp\n  name: Eras\n  nameWithType: ChineseLunisolarCalendar.Eras\n  fullName: ChineseLunisolarCalendar.Eras\n  type: Property\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the eras that correspond to the range of dates and times supported by the current <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int[] Eras { get; }\n    return:\n      type: System.Int32[]\n      description: An array of 32-bit signed integers that specify the relevant eras. The return value for a <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> object is always an array containing one element equal to the <xref href=\"System.Globalization.ChineseLunisolarCalendar.ChineseEra\"></xref> value.\n  overload: System.Globalization.ChineseLunisolarCalendar.Eras*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.ChineseLunisolarCalendar.GetEra(System.DateTime)\n  commentId: M:System.Globalization.ChineseLunisolarCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.ChineseLunisolarCalendar\n  langs:\n  - csharp\n  name: GetEra(DateTime)\n  nameWithType: ChineseLunisolarCalendar.GetEra(DateTime)\n  fullName: ChineseLunisolarCalendar.GetEra(DateTime)\n  type: Method\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Retrieves the era that corresponds to the specified <xref href=\"System.DateTime\"></xref> type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetEra (DateTime time);\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: The <xref href=\"System.DateTime\"></xref> type to read.\n    return:\n      type: System.Int32\n      description: An integer that represents the era in the <code>time</code> parameter.\n  overload: System.Globalization.ChineseLunisolarCalendar.GetEra*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>time</code> is less than <xref href=\"System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\"></xref> or greater than <xref href=\"System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.ChineseLunisolarCalendar\n  langs:\n  - csharp\n  name: MaxSupportedDateTime\n  nameWithType: ChineseLunisolarCalendar.MaxSupportedDateTime\n  fullName: ChineseLunisolarCalendar.MaxSupportedDateTime\n  type: Property\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the maximum date and time supported by the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override DateTime MaxSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> type that represents the last moment on January 28, 2101 in the Gregorian calendar, which is approximately equal to the constructor <code>DateTime(2101, 1, 28, 23, 59, 59, 999)</code>.\n  overload: System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\n  commentId: P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.ChineseLunisolarCalendar\n  langs:\n  - csharp\n  name: MinSupportedDateTime\n  nameWithType: ChineseLunisolarCalendar.MinSupportedDateTime\n  fullName: ChineseLunisolarCalendar.MinSupportedDateTime\n  type: Property\n  assemblies:\n  - System.Globalization.Calendars\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the minimum date and time supported by the <xref href=\"System.Globalization.ChineseLunisolarCalendar\"></xref> class.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override DateTime MinSupportedDateTime { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> type that represents February 19, 1901 in the Gregorian calendar, which is equivalent to the constructor, <code>DateTime(1901, 2, 19)</code>.\n  overload: System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Globalization.EastAsianLunisolarCalendar\n  parent: System.Globalization\n  isExternal: false\n  name: EastAsianLunisolarCalendar\n  nameWithType: EastAsianLunisolarCalendar\n  fullName: System.Globalization.EastAsianLunisolarCalendar\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Globalization.ChineseLunisolarCalendar.#ctor\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: ChineseLunisolarCalendar()\n  nameWithType: ChineseLunisolarCalendar.ChineseLunisolarCalendar()\n  fullName: ChineseLunisolarCalendar.ChineseLunisolarCalendar()\n- uid: System.Globalization.ChineseLunisolarCalendar.ChineseEra\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: ChineseEra\n  nameWithType: ChineseLunisolarCalendar.ChineseEra\n  fullName: ChineseLunisolarCalendar.ChineseEra\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: DaysInYearBeforeMinSupportedYear\n  nameWithType: ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  fullName: ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Globalization.ChineseLunisolarCalendar.Eras\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: ChineseLunisolarCalendar.Eras\n  fullName: ChineseLunisolarCalendar.Eras\n- uid: System.Int32[]\n  parent: System\n  isExternal: false\n  name: Int32[]\n  nameWithType: Int32[]\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.ChineseLunisolarCalendar.GetEra(System.DateTime)\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: GetEra(DateTime)\n  nameWithType: ChineseLunisolarCalendar.GetEra(DateTime)\n  fullName: ChineseLunisolarCalendar.GetEra(DateTime)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: ChineseLunisolarCalendar.MaxSupportedDateTime\n  fullName: ChineseLunisolarCalendar.MaxSupportedDateTime\n- uid: System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: ChineseLunisolarCalendar.MinSupportedDateTime\n  fullName: ChineseLunisolarCalendar.MinSupportedDateTime\n- uid: System.Globalization.ChineseLunisolarCalendar.#ctor*\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: ChineseLunisolarCalendar\n  nameWithType: ChineseLunisolarCalendar.ChineseLunisolarCalendar\n  fullName: ChineseLunisolarCalendar.ChineseLunisolarCalendar\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n- uid: System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear*\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: DaysInYearBeforeMinSupportedYear\n  nameWithType: ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  fullName: ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n- uid: System.Globalization.ChineseLunisolarCalendar.Eras*\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: Eras\n  nameWithType: ChineseLunisolarCalendar.Eras\n  fullName: ChineseLunisolarCalendar.Eras\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n- uid: System.Globalization.ChineseLunisolarCalendar.GetEra*\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: GetEra\n  nameWithType: ChineseLunisolarCalendar.GetEra\n  fullName: ChineseLunisolarCalendar.GetEra\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n- uid: System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime*\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: MaxSupportedDateTime\n  nameWithType: ChineseLunisolarCalendar.MaxSupportedDateTime\n  fullName: ChineseLunisolarCalendar.MaxSupportedDateTime\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n- uid: System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime*\n  parent: System.Globalization.ChineseLunisolarCalendar\n  isExternal: false\n  name: MinSupportedDateTime\n  nameWithType: ChineseLunisolarCalendar.MinSupportedDateTime\n  fullName: ChineseLunisolarCalendar.MinSupportedDateTime\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/ChineseLunisolarCalendar.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddDays(DateTime, Int32)\n  nameWithType: Calendar.AddDays(DateTime, Int32)\n  fullName: Calendar.AddDays(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddHours(DateTime, Int32)\n  nameWithType: Calendar.AddHours(DateTime, Int32)\n  fullName: Calendar.AddHours(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddMilliseconds(DateTime, Double)\n  nameWithType: Calendar.AddMilliseconds(DateTime, Double)\n  fullName: Calendar.AddMilliseconds(DateTime, Double)\n- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddMinutes(DateTime, Int32)\n  nameWithType: Calendar.AddMinutes(DateTime, Int32)\n  fullName: Calendar.AddMinutes(DateTime, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AddMonths(DateTime, Int32)\n  nameWithType: EastAsianLunisolarCalendar.AddMonths(DateTime, Int32)\n  fullName: EastAsianLunisolarCalendar.AddMonths(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddSeconds(DateTime, Int32)\n  nameWithType: Calendar.AddSeconds(DateTime, Int32)\n  fullName: Calendar.AddSeconds(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: AddWeeks(DateTime, Int32)\n  nameWithType: Calendar.AddWeeks(DateTime, Int32)\n  fullName: Calendar.AddWeeks(DateTime, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AddYears(DateTime, Int32)\n  nameWithType: EastAsianLunisolarCalendar.AddYears(DateTime, Int32)\n  fullName: EastAsianLunisolarCalendar.AddYears(DateTime, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: AlgorithmType\n  nameWithType: EastAsianLunisolarCalendar.AlgorithmType\n  fullName: EastAsianLunisolarCalendar.AlgorithmType\n- uid: System.Globalization.Calendar.Clone\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: Clone()\n  nameWithType: Calendar.Clone()\n  fullName: Calendar.Clone()\n- uid: System.Globalization.Calendar.CurrentEra\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: CurrentEra\n  nameWithType: Calendar.CurrentEra\n  fullName: Calendar.CurrentEra\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfMonth(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)\n  fullName: EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfWeek(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)\n  fullName: EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDayOfYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear(DateTime)\n  fullName: EastAsianLunisolarCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetDaysInMonth(Int32, Int32)\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)\n  fullName: Calendar.GetDaysInMonth(Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth(Int32, Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.GetDaysInMonth(Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetDaysInYear(Int32)\n  nameWithType: Calendar.GetDaysInYear(Int32)\n  fullName: Calendar.GetDaysInYear(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetDaysInYear(Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear(Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.GetDaysInYear(Int32, Int32)\n- uid: System.Globalization.Calendar.GetHour(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetHour(DateTime)\n  nameWithType: Calendar.GetHour(DateTime)\n  fullName: Calendar.GetHour(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetLeapMonth(Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth(Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.GetLeapMonth(Int32, Int32)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetLeapMonth(Int32)\n  nameWithType: Calendar.GetLeapMonth(Int32)\n  fullName: Calendar.GetLeapMonth(Int32)\n- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetMilliseconds(DateTime)\n  nameWithType: Calendar.GetMilliseconds(DateTime)\n  fullName: Calendar.GetMilliseconds(DateTime)\n- uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetMinute(DateTime)\n  nameWithType: Calendar.GetMinute(DateTime)\n  fullName: Calendar.GetMinute(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetMonth(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetMonth(DateTime)\n  fullName: EastAsianLunisolarCalendar.GetMonth(DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetMonthsInYear(Int32)\n  nameWithType: Calendar.GetMonthsInYear(Int32)\n  fullName: Calendar.GetMonthsInYear(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetMonthsInYear(Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear(Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.GetMonthsInYear(Int32, Int32)\n- uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetSecond(DateTime)\n  nameWithType: Calendar.GetSecond(DateTime)\n  fullName: Calendar.GetSecond(DateTime)\n- uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  nameWithType: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetYear(DateTime)\n  fullName: EastAsianLunisolarCalendar.GetYear(DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsLeapDay(Int32, Int32, Int32)\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)\n  fullName: Calendar.IsLeapDay(Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapMonth(Int32, Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth(Int32, Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.IsLeapMonth(Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsLeapMonth(Int32, Int32)\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32)\n  fullName: Calendar.IsLeapMonth(Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsLeapYear(Int32)\n  nameWithType: Calendar.IsLeapYear(Int32)\n  fullName: Calendar.IsLeapYear(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: IsLeapYear(Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.IsLeapYear(Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.IsLeapYear(Int32, Int32)\n- uid: System.Globalization.Calendar.IsReadOnly\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: Calendar.IsReadOnly\n  fullName: Calendar.IsReadOnly\n- uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: ReadOnly(Calendar)\n  nameWithType: Calendar.ReadOnly(Calendar)\n  fullName: Calendar.ReadOnly(Calendar)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: false\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  nameWithType: EastAsianLunisolarCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: EastAsianLunisolarCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: ToFourDigitYear(Int32)\n  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear(Int32)\n  fullName: EastAsianLunisolarCalendar.ToFourDigitYear(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: TwoDigitYearMax\n  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax\n  fullName: EastAsianLunisolarCalendar.TwoDigitYearMax\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetCelestialStem(Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem(Int32)\n  fullName: EastAsianLunisolarCalendar.GetCelestialStem(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetSexagenaryYear(DateTime)\n  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)\n  fullName: EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  isExternal: false\n  name: GetTerrestrialBranch(Int32)\n  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)\n  fullName: EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)\n"}