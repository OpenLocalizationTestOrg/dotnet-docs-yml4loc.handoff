{"nodes":[{"content":"Defines the properties for a type.","nodes":[{"pos":[0,34],"content":"Defines the properties for a type.","nodes":[{"content":"Defines the properties for a type.","pos":[0,34]}]}],"pos":[3238,3273],"yaml":true},{"content":"A `PropertyBuilder` is always associated with a `TypeBuilder`. The `TypeBuilder`. `DefineProperty` method will return a new `PropertyBuilder` to a client.","nodes":[{"pos":[0,154],"content":"A `PropertyBuilder` is always associated with a `TypeBuilder`. The `TypeBuilder`. `DefineProperty` method will return a new `PropertyBuilder` to a client.","nodes":[{"content":"A <ph id=\"ph1\">`PropertyBuilder`</ph> is always associated with a <ph id=\"ph2\">`TypeBuilder`</ph>.","pos":[0,62],"source":"A `PropertyBuilder` is always associated with a `TypeBuilder`."},{"content":"The <ph id=\"ph1\">`TypeBuilder`</ph>.","pos":[63,81],"source":" The `TypeBuilder`."},{"content":"<ph id=\"ph1\">`DefineProperty`</ph> method will return a new <ph id=\"ph2\">`PropertyBuilder`</ph> to a client.","pos":[82,154],"source":"`DefineProperty` method will return a new `PropertyBuilder` to a client."}]}],"pos":[3284,3439],"yaml":true,"extradata":"MT"},{"content":"Adds one of the other methods associated with this property.","nodes":[{"pos":[0,60],"content":"Adds one of the other methods associated with this property.","nodes":[{"content":"Adds one of the other methods associated with this property.","pos":[0,60]}]}],"pos":[12501,12562],"yaml":true},{"content":"A `MethodBuilder` object that represents the other method.","nodes":[{"pos":[0,58],"content":"A <ph id=\"ph1\">`MethodBuilder`</ph> object that represents the other method.","source":"A `MethodBuilder` object that represents the other method."}],"pos":[12766,12825],"yaml":true},{"content":"<code>mdBuilder</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;mdBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mdBuilder</code> is `null`."}],"pos":[13008,13042],"yaml":true},{"content":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> has been called on the enclosing type.","source":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type."}],"pos":[13152,13258],"yaml":true},{"content":"Gets the attributes for this property.","nodes":[{"pos":[0,38],"content":"Gets the attributes for this property.","nodes":[{"content":"Gets the attributes for this property.","pos":[0,38]}]}],"pos":[14444,14483],"yaml":true},{"content":"Attributes of this property.","nodes":[{"pos":[0,28],"content":"Attributes of this property.","nodes":[{"content":"Attributes of this property.","pos":[0,28]}]}],"pos":[14659,14688],"yaml":true},{"content":"Gets a value indicating whether the property can be read.","nodes":[{"pos":[0,57],"content":"Gets a value indicating whether the property can be read.","nodes":[{"content":"Gets a value indicating whether the property can be read.","pos":[0,57]}]}],"pos":[15936,15994],"yaml":true},{"content":"Boolean property indicating if the property can be read. If the property does not have a get accessor, it cannot be read.","nodes":[{"pos":[0,121],"content":"Boolean property indicating if the property can be read. If the property does not have a get accessor, it cannot be read.","nodes":[{"content":"Boolean property indicating if the property can be read. If the property does not have a get accessor, it cannot be read.","pos":[0,121],"nodes":[{"content":"Boolean property indicating if the property can be read.","pos":[0,56]},{"content":"If the property does not have a get accessor, it cannot be read.","pos":[57,121]}]}]}],"pos":[16005,16127],"yaml":true,"extradata":"MT"},{"content":"`true` if this property can be read; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if this property can be read; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this property can be read; otherwise, `false`."}],"pos":[16246,16305],"yaml":true},{"content":"Gets a value indicating whether the property can be written to.","nodes":[{"pos":[0,63],"content":"Gets a value indicating whether the property can be written to.","nodes":[{"content":"Gets a value indicating whether the property can be written to.","pos":[0,63]}]}],"pos":[17556,17620],"yaml":true},{"content":"Boolean property indicating if the property can be written to. If the property does not have a set accessor, it cannot be written to.","nodes":[{"pos":[0,133],"content":"Boolean property indicating if the property can be written to. If the property does not have a set accessor, it cannot be written to.","nodes":[{"content":"Boolean property indicating if the property can be written to. If the property does not have a set accessor, it cannot be written to.","pos":[0,133],"nodes":[{"content":"Boolean property indicating if the property can be written to.","pos":[0,62]},{"content":"If the property does not have a set accessor, it cannot be written to.","pos":[63,133]}]}]}],"pos":[17631,17765],"yaml":true,"extradata":"MT"},{"content":"`true` if this property can be written to; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if this property can be written to; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this property can be written to; otherwise, `false`."}],"pos":[17885,17950],"yaml":true},{"content":"Gets the class that declares this member.","nodes":[{"pos":[0,41],"content":"Gets the class that declares this member.","nodes":[{"content":"Gets the class that declares this member.","pos":[0,41]}]}],"pos":[19232,19274],"yaml":true},{"content":"The `Type` object for the class that declares this member.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">`Type`</ph> object for the class that declares this member.","source":"The `Type` object for the class that declares this member."}],"pos":[19396,19455],"yaml":true},{"content":"Returns an array of the public and non-public `get` and `set` accessors on this property.","nodes":[{"pos":[0,89],"content":"Returns an array of the public and non-public <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors on this property.","source":"Returns an array of the public and non-public `get` and `set` accessors on this property."}],"pos":[20809,20899],"yaml":true},{"content":"To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.","nodes":[{"pos":[0,204],"content":"To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.","nodes":[{"content":"To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.","pos":[0,204]}]}],"pos":[20910,21115],"yaml":true,"extradata":"MT"},{"content":"Indicates whether non-public methods should be returned in the `MethodInfo` array. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"pos":[0,151],"content":"Indicates whether non-public methods should be returned in the `MethodInfo` array. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"content":"Indicates whether non-public methods should be returned in the <ph id=\"ph1\">`MethodInfo`</ph> array.","pos":[0,82],"source":"Indicates whether non-public methods should be returned in the `MethodInfo` array."},{"content":"<ph id=\"ph1\">`true`</ph> if non-public methods are to be included; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[83,151],"source":"`true` if non-public methods are to be included; otherwise, `false`."}]}],"pos":[21298,21450],"yaml":true},{"content":"An array of type `MethodInfo` containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.","nodes":[{"pos":[0,156],"content":"An array of type <ph id=\"ph1\">`MethodInfo`</ph> containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.","source":"An array of type `MethodInfo` containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property."}],"pos":[21524,21681],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[21862,21892],"yaml":true},{"content":"Returns an array of all the custom attributes for this property.","nodes":[{"pos":[0,64],"content":"Returns an array of all the custom attributes for this property.","nodes":[{"content":"Returns an array of all the custom attributes for this property.","pos":[0,64]}]}],"pos":[23101,23166],"yaml":true},{"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.","nodes":[{"pos":[0,175],"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.","nodes":[{"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.","pos":[0,175]}]}],"pos":[23177,23353],"yaml":true,"extradata":"MT"},{"content":"If `true`, walks up this property's inheritance chain to find the custom attributes","nodes":[{"pos":[0,83],"content":"If <ph id=\"ph1\">`true`</ph>, walks up this property's inheritance chain to find the custom attributes","source":"If `true`, walks up this property's inheritance chain to find the custom attributes"}],"pos":[23517,23601],"yaml":true},{"content":"An array of all the custom attributes.","nodes":[{"pos":[0,38],"content":"An array of all the custom attributes.","nodes":[{"content":"An array of all the custom attributes.","pos":[0,38]}]}],"pos":[23660,23699],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[23887,23917],"yaml":true},{"content":"Returns an array of custom attributes identified by <xref href=\"System.Type\"></xref>.","nodes":[{"pos":[0,85],"content":"Returns an array of custom attributes identified by <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an array of custom attributes identified by <xref href=\"System.Type\"></xref>."}],"pos":[25180,25266],"yaml":true},{"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.","nodes":[{"pos":[0,175],"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.","nodes":[{"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.","pos":[0,175]}]}],"pos":[25277,25453],"yaml":true,"extradata":"MT"},{"content":"An array of custom attributes identified by type.","nodes":[{"pos":[0,49],"content":"An array of custom attributes identified by type.","nodes":[{"content":"An array of custom attributes identified by type.","pos":[0,49]}]}],"pos":[25640,25690],"yaml":true},{"content":"If `true`, walks up this property's inheritance chain to find the custom attributes.","nodes":[{"pos":[0,84],"content":"If <ph id=\"ph1\">`true`</ph>, walks up this property's inheritance chain to find the custom attributes.","source":"If `true`, walks up this property's inheritance chain to find the custom attributes."}],"pos":[25754,25839],"yaml":true},{"content":"An array of custom attributes defined on this reflected member, or `null` if no attributes are defined on this member.","nodes":[{"pos":[0,118],"content":"An array of custom attributes defined on this reflected member, or <ph id=\"ph1\">`null`</ph> if no attributes are defined on this member.","source":"An array of custom attributes defined on this reflected member, or `null` if no attributes are defined on this member."}],"pos":[25898,26017],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[26205,26235],"yaml":true},{"content":"Returns the public and non-public get accessor for this property.","nodes":[{"pos":[0,65],"content":"Returns the public and non-public get accessor for this property.","nodes":[{"content":"Returns the public and non-public get accessor for this property.","pos":[0,65]}]}],"pos":[27402,27468],"yaml":true},{"content":"To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.","nodes":[{"pos":[0,201],"content":"To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.","nodes":[{"content":"To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.","pos":[0,201]}]}],"pos":[27479,27681],"yaml":true,"extradata":"MT"},{"content":"Indicates whether non-public get accessors should be returned. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"pos":[0,131],"content":"Indicates whether non-public get accessors should be returned. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"content":"Indicates whether non-public get accessors should be returned.","pos":[0,62]},{"content":"<ph id=\"ph1\">`true`</ph> if non-public methods are to be included; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[63,131],"source":"`true` if non-public methods are to be included; otherwise, `false`."}]}],"pos":[27862,27994],"yaml":true},{"content":"A `MethodInfo` object representing the get accessor for this property, if <code>nonPublic</code> is `true`. Returns `null` if <code>nonPublic</code> is `false` and the get accessor is non-public, or if <code>nonPublic</code> is `true` but no get accessors exist.","nodes":[{"pos":[0,262],"content":"A `MethodInfo` object representing the get accessor for this property, if <code>nonPublic</code> is `true`. Returns `null` if <code>nonPublic</code> is `false` and the get accessor is non-public, or if <code>nonPublic</code> is `true` but no get accessors exist.","nodes":[{"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object representing the get accessor for this property, if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`true`</ph>.","pos":[0,107],"source":"A `MethodInfo` object representing the get accessor for this property, if <code>nonPublic</code> is `true`."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`false`</ph> and the get accessor is non-public, or if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">nonPublic</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph5\">`true`</ph> but no get accessors exist.","pos":[108,262],"source":" Returns `null` if <code>nonPublic</code> is `false` and the get accessor is non-public, or if <code>nonPublic</code> is `true` but no get accessors exist."}]}],"pos":[28066,28329],"yaml":true},{"content":"Returns an array of all the index parameters for the property.","nodes":[{"pos":[0,62],"content":"Returns an array of all the index parameters for the property.","nodes":[{"content":"Returns an array of all the index parameters for the property.","pos":[0,62]}]}],"pos":[29545,29608],"yaml":true},{"content":"To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.","nodes":[{"pos":[0,217],"content":"To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.","nodes":[{"content":"To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.","pos":[0,217]}]}],"pos":[29619,29837],"yaml":true,"extradata":"MT"},{"content":"An array of type `ParameterInfo` containing the parameters for the indexes.","nodes":[{"pos":[0,75],"content":"An array of type <ph id=\"ph1\">`ParameterInfo`</ph> containing the parameters for the indexes.","source":"An array of type `ParameterInfo` containing the parameters for the indexes."}],"pos":[30029,30105],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[30292,30322],"yaml":true},{"content":"Returns the set accessor for this property.","nodes":[{"pos":[0,43],"content":"Returns the set accessor for this property.","nodes":[{"content":"Returns the set accessor for this property.","pos":[0,43]}]}],"pos":[31593,31637],"yaml":true},{"content":"To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.","nodes":[{"pos":[0,201],"content":"To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.","nodes":[{"content":"To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.","pos":[0,201]}]}],"pos":[31648,31850],"yaml":true,"extradata":"MT"},{"content":"Indicates whether the accessor should be returned if it is non-public. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"pos":[0,139],"content":"Indicates whether the accessor should be returned if it is non-public. `true` if non-public methods are to be included; otherwise, `false`.","nodes":[{"content":"Indicates whether the accessor should be returned if it is non-public.","pos":[0,70]},{"content":"<ph id=\"ph1\">`true`</ph> if non-public methods are to be included; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[71,139],"source":"`true` if non-public methods are to be included; otherwise, `false`."}]}],"pos":[32031,32171],"yaml":true},{"content":"The property's `Set` method, or `null`, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the Set method for this property.  \n  \n </td><td> The set accessor is public.  \n  \n <code>nonPublic</code> is true and non-public methods can be returned.  \n  \n </td></tr><tr><td> null  \n  \n </td><td><code>nonPublic</code> is true, but the property is read-only.  \n  \n <code>nonPublic</code> is false and the set accessor is non-public.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,72],"content":"The property's <ph id=\"ph1\">`Set`</ph> method, or <ph id=\"ph2\">`null`</ph>, as shown in the following table.","source":"The property's `Set` method, or `null`, as shown in the following table."},{"pos":[79,616],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the Set method for this property.  \n  \n </td><td> The set accessor is public.  \n  \n <code>nonPublic</code> is true and non-public methods can be returned.  \n  \n </td></tr><tr><td> null  \n  \n </td><td><code>nonPublic</code> is true, but the property is read-only.  \n  \n <code>nonPublic</code> is false and the set accessor is non-public.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":" A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the Set method for this property.  \n  \n ","pos":[94,207],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object representing the Set method for this property.","pos":[1,106],"source":" A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the Set method for this property."}]},{"content":" The set accessor is public.  \n  \n <code>nonPublic</code> is true and non-public methods can be returned.  \n  \n ","pos":[216,328],"nodes":[{"content":"The set accessor is public.","pos":[1,28]},{"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is true and non-public methods can be returned.","pos":[35,105],"source":"<code>nonPublic</code> is true and non-public methods can be returned."}]},{"content":"null","pos":[347,356],"source":" null  \n  \n "},{"content":"<code>nonPublic</code> is true, but the property is read-only.  \n  \n <code>nonPublic</code> is false and the set accessor is non-public.  \n  \n ","pos":[367,510],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is true, but the property is read-only.","pos":[0,62],"source":"<code>nonPublic</code> is true, but the property is read-only."},{"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is false and the set accessor is non-public.","pos":[69,136],"source":"<code>nonPublic</code> is false and the set accessor is non-public."}]}]}],"pos":[32243,32881],"yaml":true},{"content":"Gets the value of the indexed property by calling the property's getter method.","nodes":[{"pos":[0,79],"content":"Gets the value of the indexed property by calling the property's getter method.","nodes":[{"content":"Gets the value of the indexed property by calling the property's getter method.","pos":[0,79]}]}],"pos":[34178,34258],"yaml":true},{"content":"To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the `Reflection` property object from the type, and call `PropertyInfo.GetValue`.","nodes":[{"pos":[0,200],"content":"To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the <ph id=\"ph1\">`Reflection`</ph> property object from the type, and call <ph id=\"ph2\">`PropertyInfo.GetValue`</ph>.","source":"To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the `Reflection` property object from the type, and call `PropertyInfo.GetValue`."}],"pos":[34269,34470],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be returned.","nodes":[{"pos":[0,49],"content":"The object whose property value will be returned.","nodes":[{"content":"The object whose property value will be returned.","pos":[0,49]}]}],"pos":[34630,34680],"yaml":true},{"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,101],"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[46,101],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[34743,34845],"yaml":true},{"content":"The value of the specified indexed property.","nodes":[{"pos":[0,44],"content":"The value of the specified indexed property.","nodes":[{"content":"The value of the specified indexed property.","pos":[0,44]}]}],"pos":[34902,34947],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[35124,35154],"yaml":true},{"content":"Gets the value of a property having the specified binding, index, and `CultureInfo`.","nodes":[{"pos":[0,84],"content":"Gets the value of a property having the specified binding, index, and <ph id=\"ph1\">`CultureInfo`</ph>.","source":"Gets the value of a property having the specified binding, index, and `CultureInfo`."}],"pos":[36805,36890],"yaml":true},{"content":"To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.","nodes":[{"pos":[0,196],"content":"To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.","nodes":[{"content":"To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.","pos":[0,196]}]}],"pos":[36901,37098],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be returned.","nodes":[{"pos":[0,49],"content":"The object whose property value will be returned.","nodes":[{"content":"The object whose property value will be returned.","pos":[0,49]}]}],"pos":[37376,37426],"yaml":true},{"content":"The invocation attribute. This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set.","nodes":[{"pos":[0,309],"content":"The invocation attribute. This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set.","nodes":[{"content":"The invocation attribute.","pos":[0,25]},{"content":"This must be a bit flag from <ph id=\"ph1\">`BindingFlags`</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`CreateInstance`</ph>, <ph id=\"ph4\">`Static`</ph>, <ph id=\"ph5\">`GetField`</ph>, <ph id=\"ph6\">`SetField`</ph>, <ph id=\"ph7\">`GetProperty`</ph>, or <ph id=\"ph8\">`SetProperty`</ph>.","pos":[26,172],"source":" This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`."},{"content":"A suitable invocation attribute must be specified.","pos":[173,223]},{"content":"If a static member is to be invoked, the <ph id=\"ph1\">`Static`</ph> flag of <ph id=\"ph2\">`BindingFlags`</ph> must be set.","pos":[224,309],"source":" If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set."}]}],"pos":[37509,37821],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,204],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects using reflection.","pos":[0,142],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[143,204],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[37894,38099],"yaml":true},{"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,101],"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[46,101],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[38162,38264],"yaml":true},{"content":"The `CultureInfo` object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match. If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property.","nodes":[{"pos":[0,343],"content":"The `CultureInfo` object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match. If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property.","nodes":[{"content":"The <ph id=\"ph1\">`CultureInfo`</ph> object that represents the culture for which the resource is to be localized.","pos":[0,95],"source":"The `CultureInfo` object that represents the culture for which the resource is to be localized."},{"content":"Note that if the resource is not localized for this culture, the <ph id=\"ph1\">`CultureInfo.Parent`</ph> method will be called successively in search of a match.","pos":[96,238],"source":" Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match."},{"content":"If this value is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">`CultureInfo`</ph> is obtained from the <ph id=\"ph3\">`CultureInfo.CurrentUICulture`</ph> property.","pos":[239,343],"source":" If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property."}]}],"pos":[38346,38690],"yaml":true},{"content":"The property value for <code>obj</code>.","nodes":[{"pos":[0,40],"content":"The property value for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The property value for <code>obj</code>."}],"pos":[38747,38788],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[38965,38995],"yaml":true},{"content":"Indicates whether one or more instance of <code>attributeType</code> is defined on this property.","nodes":[{"pos":[0,97],"content":"Indicates whether one or more instance of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined on this property.","source":"Indicates whether one or more instance of <code>attributeType</code> is defined on this property."}],"pos":[40198,40296],"yaml":true},{"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.","nodes":[{"pos":[0,165],"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.","nodes":[{"content":"Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.","pos":[0,165]}]}],"pos":[40307,40473],"yaml":true,"extradata":"MT"},{"content":"The `Type` object to which the custom attributes are applied.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">`Type`</ph> object to which the custom attributes are applied.","source":"The `Type` object to which the custom attributes are applied."}],"pos":[40646,40708],"yaml":true},{"content":"Specifies whether to walk up this property's inheritance chain to find the custom attributes.","nodes":[{"pos":[0,93],"content":"Specifies whether to walk up this property's inheritance chain to find the custom attributes.","nodes":[{"content":"Specifies whether to walk up this property's inheritance chain to find the custom attributes.","pos":[0,93]}]}],"pos":[40772,40866],"yaml":true},{"content":"`true` if one or more instance of <code>attributeType</code> is defined on this property; otherwise `false`.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">`true`</ph> if one or more instance of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined on this property; otherwise <ph id=\"ph3\">`false`</ph>.","source":"`true` if one or more instance of <code>attributeType</code> is defined on this property; otherwise `false`."}],"pos":[40924,41035],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[41213,41243],"yaml":true},{"content":"Gets the module in which the type that declares the current property is being defined.","nodes":[{"pos":[0,86],"content":"Gets the module in which the type that declares the current property is being defined.","nodes":[{"content":"Gets the module in which the type that declares the current property is being defined.","pos":[0,86]}]}],"pos":[42301,42388],"yaml":true},{"content":"This property is provided as a convenience for the user. It is equivalent to using the <xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A> property to get the type in which the property is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.","nodes":[{"pos":[0,312],"content":"This property is provided as a convenience for the user. It is equivalent to using the <xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A> property to get the type in which the property is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.","nodes":[{"content":"This property is provided as a convenience for the user. It is equivalent to using the <xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A> property to get the type in which the property is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.","pos":[0,312],"nodes":[{"content":"This property is provided as a convenience for the user.","pos":[0,56]},{"content":"It is equivalent to using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A&gt;</ph> property to get the type in which the property is declared, and then calling the <ph id=\"ph2\">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object.","pos":[57,312],"source":" It is equivalent to using the <xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A> property to get the type in which the property is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object."}]}]}],"pos":[42399,42712],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.Module\"></xref> in which the type that declares the current property is defined.","nodes":[{"pos":[0,114],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> in which the type that declares the current property is defined.","source":"The <xref href=\"System.Reflection.Module\"></xref> in which the type that declares the current property is defined."}],"pos":[42860,42975],"yaml":true},{"content":"Gets the name of this member.","nodes":[{"pos":[0,29],"content":"Gets the name of this member.","nodes":[{"content":"Gets the name of this member.","pos":[0,29]}]}],"pos":[44097,44127],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the name of this member.","nodes":[{"pos":[0,72],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the name of this member.","source":"A <xref href=\"System.String\"></xref> containing the name of this member."}],"pos":[44244,44317],"yaml":true},{"content":"Retrieves the token for this property.","nodes":[{"pos":[0,38],"content":"Retrieves the token for this property.","nodes":[{"content":"Retrieves the token for this property.","pos":[0,38]}]}],"pos":[45568,45607],"yaml":true},{"content":"Read-only. Retrieves the token for this property.","nodes":[{"pos":[0,49],"content":"Read-only. Retrieves the token for this property.","nodes":[{"content":"Read-only. Retrieves the token for this property.","pos":[0,49],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the token for this property.","pos":[11,49]}]}]}],"pos":[45777,45827],"yaml":true},{"content":"Gets the type of the field of this property.","nodes":[{"pos":[0,44],"content":"Gets the type of the field of this property.","nodes":[{"content":"Gets the type of the field of this property.","pos":[0,44]}]}],"pos":[46972,47017],"yaml":true},{"content":"The type of this property.","nodes":[{"pos":[0,26],"content":"The type of this property.","nodes":[{"content":"The type of this property.","pos":[0,26]}]}],"pos":[47138,47165],"yaml":true},{"content":"Gets the class object that was used to obtain this instance of `MemberInfo`.","nodes":[{"pos":[0,76],"content":"Gets the class object that was used to obtain this instance of <ph id=\"ph1\">`MemberInfo`</ph>.","source":"Gets the class object that was used to obtain this instance of `MemberInfo`."}],"pos":[48451,48528],"yaml":true},{"content":"The `Type` object through which this `MemberInfo` object was obtained.","nodes":[{"pos":[0,70],"content":"The <ph id=\"ph1\">`Type`</ph> object through which this <ph id=\"ph2\">`MemberInfo`</ph> object was obtained.","source":"The `Type` object through which this `MemberInfo` object was obtained."}],"pos":[48650,48721],"yaml":true},{"content":"Sets the default value of this property.","nodes":[{"pos":[0,40],"content":"Sets the default value of this property.","nodes":[{"content":"Sets the default value of this property.","pos":[0,40]}]}],"pos":[49959,50000],"yaml":true},{"content":"`defaultValue` is restricted to the following types: `Boolean`, `SByte`, `Int16`, `Int32`, `Int64`, `Byte`, `UInt16`, `UInt32`, `UInt64`, `Single`, `Double`, `DateTime`, `Char`, `String`, and `Enum`. If the property type is a reference type, CLS compliance requires `defaultValue` to be `null`. However, starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], `defaultValue` can be non-null for reference types as long as the value can be assigned to that reference type. For example, an `Int32` value can be assigned to a property of type <xref:System.Object>. This is not CLS-compliant, but it can be useful in interop scenarios.","nodes":[{"pos":[0,650],"content":"`defaultValue` is restricted to the following types: `Boolean`, `SByte`, `Int16`, `Int32`, `Int64`, `Byte`, `UInt16`, `UInt32`, `UInt64`, `Single`, `Double`, `DateTime`, `Char`, `String`, and `Enum`. If the property type is a reference type, CLS compliance requires `defaultValue` to be `null`. However, starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], `defaultValue` can be non-null for reference types as long as the value can be assigned to that reference type. For example, an `Int32` value can be assigned to a property of type <xref:System.Object>. This is not CLS-compliant, but it can be useful in interop scenarios.","nodes":[{"content":"<ph id=\"ph1\">`defaultValue`</ph> is restricted to the following types: <ph id=\"ph2\">`Boolean`</ph>, <ph id=\"ph3\">`SByte`</ph>, <ph id=\"ph4\">`Int16`</ph>, <ph id=\"ph5\">`Int32`</ph>, <ph id=\"ph6\">`Int64`</ph>, <ph id=\"ph7\">`Byte`</ph>, <ph id=\"ph8\">`UInt16`</ph>, <ph id=\"ph9\">`UInt32`</ph>, <ph id=\"ph10\">`UInt64`</ph>, <ph id=\"ph11\">`Single`</ph>, <ph id=\"ph12\">`Double`</ph>, <ph id=\"ph13\">`DateTime`</ph>, <ph id=\"ph14\">`Char`</ph>, <ph id=\"ph15\">`String`</ph>, and <ph id=\"ph16\">`Enum`</ph>.","pos":[0,199],"source":"`defaultValue` is restricted to the following types: `Boolean`, `SByte`, `Int16`, `Int32`, `Int64`, `Byte`, `UInt16`, `UInt32`, `UInt64`, `Single`, `Double`, `DateTime`, `Char`, `String`, and `Enum`."},{"content":"If the property type is a reference type, CLS compliance requires <ph id=\"ph1\">`defaultValue`</ph> to be <ph id=\"ph2\">`null`</ph>.","pos":[200,294],"source":" If the property type is a reference type, CLS compliance requires `defaultValue` to be `null`."},{"content":"However, starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id=\"ph2\">`defaultValue`</ph> can be non-null for reference types as long as the value can be assigned to that reference type.","pos":[295,490],"source":" However, starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], `defaultValue` can be non-null for reference types as long as the value can be assigned to that reference type."},{"content":"For example, an <ph id=\"ph1\">`Int32`</ph> value can be assigned to a property of type <ph id=\"ph2\">&lt;xref:System.Object&gt;</ph>.","pos":[491,580],"source":" For example, an `Int32` value can be assigned to a property of type <xref:System.Object>."},{"content":"This is not CLS-compliant, but it can be useful in interop scenarios.","pos":[581,650]}]}],"pos":[50011,50664],"yaml":true,"extradata":"MT"},{"content":"The default value of this property.","nodes":[{"pos":[0,35],"content":"The default value of this property.","nodes":[{"content":"The default value of this property.","pos":[0,35]}]}],"pos":[50818,50854],"yaml":true},{"content":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> has been called on the enclosing type.","source":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type."}],"pos":[51042,51148],"yaml":true},{"content":"The property is not one of the supported types.  \n  \n -or-  \n  \n The type of <code>defaultValue</code> does not match the type of the property.  \n  \n -or-  \n  \n The property is of type <xref href=\"System.Object\"></xref> or other reference type, <code>defaultValue</code> is not `null`, and the value cannot be assigned to the reference type.","nodes":[{"pos":[0,47],"content":"The property is not one of the supported types.","nodes":[{"content":"The property is not one of the supported types.","pos":[0,47]}]},{"pos":[54,58],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[65,143],"content":"The type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">defaultValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not match the type of the property.","source":"The type of <code>defaultValue</code> does not match the type of the property."},{"pos":[150,154],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[161,341],"content":"The property is of type <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> or other reference type, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">defaultValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not <ph id=\"ph3\">`null`</ph>, and the value cannot be assigned to the reference type.","source":"The property is of type <xref href=\"System.Object\"></xref> or other reference type, <code>defaultValue</code> is not `null`, and the value cannot be assigned to the reference type."}],"pos":[51242,51596],"yaml":true},{"content":"Set a custom attribute using a custom attribute builder.","nodes":[{"pos":[0,56],"content":"Set a custom attribute using a custom attribute builder.","nodes":[{"content":"Set a custom attribute using a custom attribute builder.","pos":[0,56]}]}],"pos":[53041,53098],"yaml":true},{"content":"An instance of a helper class to define the custom attribute.","nodes":[{"pos":[0,61],"content":"An instance of a helper class to define the custom attribute.","nodes":[{"content":"An instance of a helper class to define the custom attribute.","pos":[0,61]}]}],"pos":[53332,53394],"yaml":true},{"content":"<code>customBuilder</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;customBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>customBuilder</code> is `null`."}],"pos":[53581,53619],"yaml":true},{"content":"if <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.","nodes":[{"pos":[0,108],"content":"if <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> has been called on the enclosing type.","source":"if <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type."}],"pos":[53729,53838],"yaml":true},{"content":"Set a custom attribute using a specified custom attribute blob.","nodes":[{"pos":[0,63],"content":"Set a custom attribute using a specified custom attribute blob.","nodes":[{"content":"Set a custom attribute using a specified custom attribute blob.","pos":[0,63]}]}],"pos":[55292,55356],"yaml":true},{"content":"See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`. The Partition II documentation is available online on MSDN ([ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?linkid=65555) Web page) and on the ECMA Web site ([Standard ECMA-335 Common Language Infrastructure](http://go.microsoft.com/fwlink/?linkid=65552) document).","nodes":[{"pos":[0,422],"content":"See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`. The Partition II documentation is available online on MSDN ([ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?linkid=65555) Web page) and on the ECMA Web site ([Standard ECMA-335 Common Language Infrastructure](http://go.microsoft.com/fwlink/?linkid=65552) document).","nodes":[{"content":"See the metadata specification in the ECMA Partition II documentation for details on how to format <ph id=\"ph1\">`binaryAttribute`</ph>.","pos":[0,117],"source":"See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`."},{"content":"The Partition II documentation is available online on MSDN (<bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=65555)</ept> Web page) and on the ECMA Web site (<bpt id=\"p2\">[</bpt>Standard ECMA-335 Common Language Infrastructure<ept id=\"p2\">](http://go.microsoft.com/fwlink/?linkid=65552)</ept> document).","pos":[118,422],"source":" The Partition II documentation is available online on MSDN ([ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?linkid=65555) Web page) and on the ECMA Web site ([Standard ECMA-335 Common Language Infrastructure](http://go.microsoft.com/fwlink/?linkid=65552) document)."}]}],"pos":[55367,55790],"yaml":true,"extradata":"MT"},{"content":"The constructor for the custom attribute.","nodes":[{"pos":[0,41],"content":"The constructor for the custom attribute.","nodes":[{"content":"The constructor for the custom attribute.","pos":[0,41]}]}],"pos":[56070,56112],"yaml":true},{"content":"A byte blob representing the attributes.","nodes":[{"pos":[0,40],"content":"A byte blob representing the attributes.","nodes":[{"content":"A byte blob representing the attributes.","pos":[0,40]}]}],"pos":[56183,56224],"yaml":true},{"content":"<code>con</code> or <code>binaryAttribute</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;binaryAttribute&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>con</code> or <code>binaryAttribute</code> is `null`."}],"pos":[56411,56471],"yaml":true},{"content":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> has been called on the enclosing type.","source":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type."}],"pos":[56581,56687],"yaml":true},{"content":"Sets the method that gets the property value.","nodes":[{"pos":[0,45],"content":"Sets the method that gets the property value.","nodes":[{"content":"Sets the method that gets the property value.","pos":[0,45]}]}],"pos":[58117,58163],"yaml":true},{"content":"A `MethodBuilder` object that represents the method that gets the property value.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">`MethodBuilder`</ph> object that represents the method that gets the property value.","source":"A `MethodBuilder` object that represents the method that gets the property value."}],"pos":[59034,59116],"yaml":true},{"content":"<code>mdBuilder</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;mdBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mdBuilder</code> is `null`."}],"pos":[59297,59331],"yaml":true},{"content":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> has been called on the enclosing type.","source":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type."}],"pos":[59441,59547],"yaml":true},{"content":"Sets the method that sets the property value.","nodes":[{"pos":[0,45],"content":"Sets the method that sets the property value.","nodes":[{"content":"Sets the method that sets the property value.","pos":[0,45]}]}],"pos":[60902,60948],"yaml":true},{"content":"A `MethodBuilder` object that represents the method that sets the property value.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">`MethodBuilder`</ph> object that represents the method that sets the property value.","source":"A `MethodBuilder` object that represents the method that sets the property value."}],"pos":[61819,61901],"yaml":true},{"content":"<code>mdBuilder</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;mdBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>mdBuilder</code> is `null`."}],"pos":[62082,62116],"yaml":true},{"content":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> has been called on the enclosing type.","source":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type."}],"pos":[62226,62332],"yaml":true},{"content":"Sets the value of the property with optional index values for index properties.","nodes":[{"pos":[0,79],"content":"Sets the value of the property with optional index values for index properties.","nodes":[{"content":"Sets the value of the property with optional index values for index properties.","pos":[0,79]}]}],"pos":[63717,63797],"yaml":true},{"content":"To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>.","nodes":[{"pos":[0,362],"content":"To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>.","nodes":[{"content":"To set the value of a property, reflect on the property's parent type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph>, retrieve the <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object from the type, and call <ph id=\"ph4\">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName&gt;</ph>.","pos":[0,362],"source":"To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>."}]}],"pos":[63808,64171],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be set.","nodes":[{"pos":[0,44],"content":"The object whose property value will be set.","nodes":[{"content":"The object whose property value will be set.","pos":[0,44]}]}],"pos":[64343,64388],"yaml":true},{"content":"The new value for this property.","nodes":[{"pos":[0,32],"content":"The new value for this property.","nodes":[{"content":"The new value for this property.","pos":[0,32]}]}],"pos":[64449,64482],"yaml":true},{"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,101],"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[46,101],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[64545,64647],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[64824,64854],"yaml":true},{"content":"Sets the property value for the given object to the given value.","nodes":[{"pos":[0,64],"content":"Sets the property value for the given object to the given value.","nodes":[{"content":"Sets the property value for the given object to the given value.","pos":[0,64]}]}],"pos":[66571,66636],"yaml":true},{"content":"To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>.","nodes":[{"pos":[0,362],"content":"To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>.","nodes":[{"content":"To set the value of a property, reflect on the property's parent type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph>, retrieve the <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object from the type, and call <ph id=\"ph4\">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName&gt;</ph>.","pos":[0,362],"source":"To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>."}]}],"pos":[66647,67010],"yaml":true,"extradata":"MT"},{"content":"The object whose property value will be returned.","nodes":[{"pos":[0,49],"content":"The object whose property value will be returned.","nodes":[{"content":"The object whose property value will be returned.","pos":[0,49]}]}],"pos":[67300,67350],"yaml":true},{"content":"The new value for this property.","nodes":[{"pos":[0,32],"content":"The new value for this property.","nodes":[{"content":"The new value for this property.","pos":[0,32]}]}],"pos":[67411,67444],"yaml":true},{"content":"The invocation attribute. This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set.","nodes":[{"pos":[0,309],"content":"The invocation attribute. This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set.","nodes":[{"content":"The invocation attribute.","pos":[0,25]},{"content":"This must be a bit flag from <ph id=\"ph1\">`BindingFlags`</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`CreateInstance`</ph>, <ph id=\"ph4\">`Static`</ph>, <ph id=\"ph5\">`GetField`</ph>, <ph id=\"ph6\">`SetField`</ph>, <ph id=\"ph7\">`GetProperty`</ph>, or <ph id=\"ph8\">`SetProperty`</ph>.","pos":[26,172],"source":" This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`."},{"content":"A suitable invocation attribute must be specified.","pos":[173,223]},{"content":"If a static member is to be invoked, the <ph id=\"ph1\">`Static`</ph> flag of <ph id=\"ph2\">`BindingFlags`</ph> must be set.","pos":[224,309],"source":" If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set."}]}],"pos":[67527,67839],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,204],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects using reflection.","pos":[0,142],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[143,204],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[67912,68117],"yaml":true},{"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"pos":[0,101],"content":"Optional index values for indexed properties. This value should be `null` for non-indexed properties.","nodes":[{"content":"Optional index values for indexed properties.","pos":[0,45]},{"content":"This value should be <ph id=\"ph1\">`null`</ph> for non-indexed properties.","pos":[46,101],"source":" This value should be `null` for non-indexed properties."}]}],"pos":[68180,68282],"yaml":true},{"content":"The `CultureInfo` object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match. If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property.","nodes":[{"pos":[0,343],"content":"The `CultureInfo` object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match. If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property.","nodes":[{"content":"The <ph id=\"ph1\">`CultureInfo`</ph> object that represents the culture for which the resource is to be localized.","pos":[0,95],"source":"The `CultureInfo` object that represents the culture for which the resource is to be localized."},{"content":"Note that if the resource is not localized for this culture, the <ph id=\"ph1\">`CultureInfo.Parent`</ph> method will be called successively in search of a match.","pos":[96,238],"source":" Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match."},{"content":"If this value is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">`CultureInfo`</ph> is obtained from the <ph id=\"ph3\">`CultureInfo.CurrentUICulture`</ph> property.","pos":[239,343],"source":" If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property."}]}],"pos":[68364,68708],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[68885,68915],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[70519,70587],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[70598,70785],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[70994,71037],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[71102,71141],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[71203,71236],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[71296,71348],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[71412,71486],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[71720,71800],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[73237,73352],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[73363,73548],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[73725,73757],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[73817,73865],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[73928,73989],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[74221,74301],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[75639,75732],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[75743,75933],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[76094,76195],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[76432,76512],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[78234,78298],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[78309,78489],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[78761,78784],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[78842,78885],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[78945,78997],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[79058,79100],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[79167,79327],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[79393,79451],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[79517,79577],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[79641,79692],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[79919,79999],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.PropertyBuilder\n  commentId: T:System.Reflection.Emit.PropertyBuilder\n  id: PropertyBuilder\n  children:\n  - System.Reflection.Emit.PropertyBuilder.#ctor\n  - System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)\n  - System.Reflection.Emit.PropertyBuilder.Attributes\n  - System.Reflection.Emit.PropertyBuilder.CanRead\n  - System.Reflection.Emit.PropertyBuilder.CanWrite\n  - System.Reflection.Emit.PropertyBuilder.DeclaringType\n  - System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)\n  - System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)\n  - System.Reflection.Emit.PropertyBuilder.GetIndexParameters\n  - System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)\n  - System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])\n  - System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Emit.PropertyBuilder.Module\n  - System.Reflection.Emit.PropertyBuilder.Name\n  - System.Reflection.Emit.PropertyBuilder.PropertyToken\n  - System.Reflection.Emit.PropertyBuilder.PropertyType\n  - System.Reflection.Emit.PropertyBuilder.ReflectedType\n  - System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)\n  - System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  - System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  - System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)\n  - System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)\n  - System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])\n  - System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: PropertyBuilder\n  nameWithType: PropertyBuilder\n  fullName: System.Reflection.Emit.PropertyBuilder\n  type: Class\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines the properties for a type.\n  remarks: A `PropertyBuilder` is always associated with a `TypeBuilder`. The `TypeBuilder`. `DefineProperty` method will return a new `PropertyBuilder` to a client.\n  example:\n  - \"The following code sample demonstrates how to implement properties in a dynamic type using a `PropertyBuilder` obtained via <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A?displayProperty=fullName> to create the property framework and an associated <xref:System.Reflection.Emit.MethodBuilder> to implement the IL logic within the property.  \\n  \\n [!code-cpp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class PropertyBuilder : System.Reflection.PropertyInfo, System.Runtime.InteropServices._PropertyBuilder\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.PropertyInfo\n  implements:\n  - System.Runtime.InteropServices._PropertyBuilder\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.PropertyInfo.Equals(System.Object)\n  - System.Reflection.PropertyInfo.GetAccessors\n  - System.Reflection.PropertyInfo.GetConstantValue\n  - System.Reflection.PropertyInfo.GetGetMethod\n  - System.Reflection.PropertyInfo.GetHashCode\n  - System.Reflection.PropertyInfo.GetMethod\n  - System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  - System.Reflection.PropertyInfo.GetRawConstantValue\n  - System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  - System.Reflection.PropertyInfo.GetSetMethod\n  - System.Reflection.PropertyInfo.GetValue(System.Object)\n  - System.Reflection.PropertyInfo.IsSpecialName\n  - System.Reflection.PropertyInfo.MemberType\n  - System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfo.SetMethod\n  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  - System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  - System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.#ctor\n  commentId: M:System.Reflection.Emit.PropertyBuilder.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: PropertyBuilder()\n  nameWithType: PropertyBuilder.PropertyBuilder()\n  fullName: PropertyBuilder.PropertyBuilder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected PropertyBuilder ();\n    parameters: []\n  overload: System.Reflection.Emit.PropertyBuilder.#ctor*\n  exceptions: []\n  version:\n  - xamarinios-10.8\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)\n  id: AddOtherMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: AddOtherMethod(MethodBuilder)\n  nameWithType: PropertyBuilder.AddOtherMethod(MethodBuilder)\n  fullName: PropertyBuilder.AddOtherMethod(MethodBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds one of the other methods associated with this property.\n  syntax:\n    content: public void AddOtherMethod (System.Reflection.Emit.MethodBuilder mdBuilder);\n    parameters:\n    - id: mdBuilder\n      type: System.Reflection.Emit.MethodBuilder\n      description: A `MethodBuilder` object that represents the other method.\n  overload: System.Reflection.Emit.PropertyBuilder.AddOtherMethod*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>mdBuilder</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.Attributes\n  commentId: P:System.Reflection.Emit.PropertyBuilder.Attributes\n  id: Attributes\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: PropertyBuilder.Attributes\n  fullName: PropertyBuilder.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the attributes for this property.\n  syntax:\n    content: public override System.Reflection.PropertyAttributes Attributes { get; }\n    return:\n      type: System.Reflection.PropertyAttributes\n      description: Attributes of this property.\n  overload: System.Reflection.Emit.PropertyBuilder.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.CanRead\n  commentId: P:System.Reflection.Emit.PropertyBuilder.CanRead\n  id: CanRead\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: PropertyBuilder.CanRead\n  fullName: PropertyBuilder.CanRead\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the property can be read.\n  remarks: Boolean property indicating if the property can be read. If the property does not have a get accessor, it cannot be read.\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this property can be read; otherwise, `false`.'\n  overload: System.Reflection.Emit.PropertyBuilder.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.CanWrite\n  commentId: P:System.Reflection.Emit.PropertyBuilder.CanWrite\n  id: CanWrite\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: PropertyBuilder.CanWrite\n  fullName: PropertyBuilder.CanWrite\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the property can be written to.\n  remarks: Boolean property indicating if the property can be written to. If the property does not have a set accessor, it cannot be written to.\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this property can be written to; otherwise, `false`.'\n  overload: System.Reflection.Emit.PropertyBuilder.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.DeclaringType\n  commentId: P:System.Reflection.Emit.PropertyBuilder.DeclaringType\n  id: DeclaringType\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: DeclaringType\n  nameWithType: PropertyBuilder.DeclaringType\n  fullName: PropertyBuilder.DeclaringType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the class that declares this member.\n  syntax:\n    content: public override Type DeclaringType { get; }\n    return:\n      type: System.Type\n      description: The `Type` object for the class that declares this member.\n  overload: System.Reflection.Emit.PropertyBuilder.DeclaringType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)\n  id: GetAccessors(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetAccessors(Boolean)\n  nameWithType: PropertyBuilder.GetAccessors(Boolean)\n  fullName: PropertyBuilder.GetAccessors(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of the public and non-public `get` and `set` accessors on this property.\n  remarks: To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.\n  syntax:\n    content: public override System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: Indicates whether non-public methods should be returned in the `MethodInfo` array. `true` if non-public methods are to be included; otherwise, `false`.\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array of type `MethodInfo` containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.\n  overload: System.Reflection.Emit.PropertyBuilder.GetAccessors*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: PropertyBuilder.GetCustomAttributes(Boolean)\n  fullName: PropertyBuilder.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of all the custom attributes for this property.\n  remarks: Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.\n  syntax:\n    content: public override object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: If `true`, walks up this property's inheritance chain to find the custom attributes\n    return:\n      type: System.Object[]\n      description: An array of all the custom attributes.\n  overload: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: PropertyBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: PropertyBuilder.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of custom attributes identified by <xref href=\"System.Type\"></xref>.\n  remarks: Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.\n  syntax:\n    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: An array of custom attributes identified by type.\n    - id: inherit\n      type: System.Boolean\n      description: If `true`, walks up this property's inheritance chain to find the custom attributes.\n    return:\n      type: System.Object[]\n      description: An array of custom attributes defined on this reflected member, or `null` if no attributes are defined on this member.\n  overload: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)\n  id: GetGetMethod(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetGetMethod(Boolean)\n  nameWithType: PropertyBuilder.GetGetMethod(Boolean)\n  fullName: PropertyBuilder.GetGetMethod(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public get accessor for this property.\n  remarks: To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.\n  syntax:\n    content: public override System.Reflection.MethodInfo GetGetMethod (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: Indicates whether non-public get accessors should be returned. `true` if non-public methods are to be included; otherwise, `false`.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object representing the get accessor for this property, if <code>nonPublic</code> is `true`. Returns `null` if <code>nonPublic</code> is `false` and the get accessor is non-public, or if <code>nonPublic</code> is `true` but no get accessors exist.\n  overload: System.Reflection.Emit.PropertyBuilder.GetGetMethod*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetIndexParameters\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters\n  id: GetIndexParameters\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetIndexParameters()\n  nameWithType: PropertyBuilder.GetIndexParameters()\n  fullName: PropertyBuilder.GetIndexParameters()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns an array of all the index parameters for the property.\n  remarks: To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.\n  syntax:\n    content: public override System.Reflection.ParameterInfo[] GetIndexParameters ();\n    parameters: []\n    return:\n      type: System.Reflection.ParameterInfo[]\n      description: An array of type `ParameterInfo` containing the parameters for the indexes.\n  overload: System.Reflection.Emit.PropertyBuilder.GetIndexParameters*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)\n  id: GetSetMethod(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetSetMethod(Boolean)\n  nameWithType: PropertyBuilder.GetSetMethod(Boolean)\n  fullName: PropertyBuilder.GetSetMethod(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the set accessor for this property.\n  remarks: To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.\n  syntax:\n    content: public override System.Reflection.MethodInfo GetSetMethod (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: Indicates whether the accessor should be returned if it is non-public. `true` if non-public methods are to be included; otherwise, `false`.\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"The property's `Set` method, or `null`, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> A <xref href=\\\"System.Reflection.MethodInfo\\\"></xref> object representing the Set method for this property.  \\n  \\n </td><td> The set accessor is public.  \\n  \\n <code>nonPublic</code> is true and non-public methods can be returned.  \\n  \\n </td></tr><tr><td> null  \\n  \\n </td><td><code>nonPublic</code> is true, but the property is read-only.  \\n  \\n <code>nonPublic</code> is false and the set accessor is non-public.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Reflection.Emit.PropertyBuilder.GetSetMethod*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])\n  id: GetValue(System.Object,System.Object[])\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetValue(Object, Object[])\n  nameWithType: PropertyBuilder.GetValue(Object, Object[])\n  fullName: PropertyBuilder.GetValue(Object, Object[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the value of the indexed property by calling the property's getter method.\n  remarks: To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the `Reflection` property object from the type, and call `PropertyInfo.GetValue`.\n  syntax:\n    content: public override object GetValue (object obj, object[] index);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be returned.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. This value should be `null` for non-indexed properties.\n    return:\n      type: System.Object\n      description: The value of the specified indexed property.\n  overload: System.Reflection.Emit.PropertyBuilder.GetValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  id: GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyBuilder.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyBuilder.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets the value of a property having the specified binding, index, and `CultureInfo`.\n  remarks: To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.\n  syntax:\n    content: public override object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be returned.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: 'The invocation attribute. This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set.'\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. This value should be `null` for non-indexed properties.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The `CultureInfo` object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match. If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property.\n    return:\n      type: System.Object\n      description: The property value for <code>obj</code>.\n  overload: System.Reflection.Emit.PropertyBuilder.GetValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: PropertyBuilder.IsDefined(Type, Boolean)\n  fullName: PropertyBuilder.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Indicates whether one or more instance of <code>attributeType</code> is defined on this property.\n  remarks: Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.\n  syntax:\n    content: public override bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The `Type` object to which the custom attributes are applied.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to walk up this property's inheritance chain to find the custom attributes.\n    return:\n      type: System.Boolean\n      description: '`true` if one or more instance of <code>attributeType</code> is defined on this property; otherwise `false`.'\n  overload: System.Reflection.Emit.PropertyBuilder.IsDefined*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.Module\n  commentId: P:System.Reflection.Emit.PropertyBuilder.Module\n  id: Module\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: Module\n  nameWithType: PropertyBuilder.Module\n  fullName: PropertyBuilder.Module\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets the module in which the type that declares the current property is being defined.\n  remarks: This property is provided as a convenience for the user. It is equivalent to using the <xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A> property to get the type in which the property is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.\n  syntax:\n    content: public override System.Reflection.Module Module { get; }\n    return:\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Module\"></xref> in which the type that declares the current property is defined.\n  overload: System.Reflection.Emit.PropertyBuilder.Module*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.Name\n  commentId: P:System.Reflection.Emit.PropertyBuilder.Name\n  id: Name\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: Name\n  nameWithType: PropertyBuilder.Name\n  fullName: PropertyBuilder.Name\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the name of this member.\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the name of this member.\n  overload: System.Reflection.Emit.PropertyBuilder.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.PropertyToken\n  commentId: P:System.Reflection.Emit.PropertyBuilder.PropertyToken\n  id: PropertyToken\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: PropertyToken\n  nameWithType: PropertyBuilder.PropertyToken\n  fullName: PropertyBuilder.PropertyToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the token for this property.\n  syntax:\n    content: public System.Reflection.Emit.PropertyToken PropertyToken { get; }\n    return:\n      type: System.Reflection.Emit.PropertyToken\n      description: Read-only. Retrieves the token for this property.\n  overload: System.Reflection.Emit.PropertyBuilder.PropertyToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.PropertyType\n  commentId: P:System.Reflection.Emit.PropertyBuilder.PropertyType\n  id: PropertyType\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: PropertyType\n  nameWithType: PropertyBuilder.PropertyType\n  fullName: PropertyBuilder.PropertyType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the type of the field of this property.\n  syntax:\n    content: public override Type PropertyType { get; }\n    return:\n      type: System.Type\n      description: The type of this property.\n  overload: System.Reflection.Emit.PropertyBuilder.PropertyType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.ReflectedType\n  commentId: P:System.Reflection.Emit.PropertyBuilder.ReflectedType\n  id: ReflectedType\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: ReflectedType\n  nameWithType: PropertyBuilder.ReflectedType\n  fullName: PropertyBuilder.ReflectedType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets the class object that was used to obtain this instance of `MemberInfo`.\n  syntax:\n    content: public override Type ReflectedType { get; }\n    return:\n      type: System.Type\n      description: The `Type` object through which this `MemberInfo` object was obtained.\n  overload: System.Reflection.Emit.PropertyBuilder.ReflectedType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)\n  id: SetConstant(System.Object)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: SetConstant(Object)\n  nameWithType: PropertyBuilder.SetConstant(Object)\n  fullName: PropertyBuilder.SetConstant(Object)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the default value of this property.\n  remarks: '`defaultValue` is restricted to the following types: `Boolean`, `SByte`, `Int16`, `Int32`, `Int64`, `Byte`, `UInt16`, `UInt32`, `UInt64`, `Single`, `Double`, `DateTime`, `Char`, `String`, and `Enum`. If the property type is a reference type, CLS compliance requires `defaultValue` to be `null`. However, starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], `defaultValue` can be non-null for reference types as long as the value can be assigned to that reference type. For example, an `Int32` value can be assigned to a property of type <xref:System.Object>. This is not CLS-compliant, but it can be useful in interop scenarios.'\n  syntax:\n    content: public void SetConstant (object defaultValue);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of this property.\n  overload: System.Reflection.Emit.PropertyBuilder.SetConstant*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The property is not one of the supported types.  \\n  \\n -or-  \\n  \\n The type of <code>defaultValue</code> does not match the type of the property.  \\n  \\n -or-  \\n  \\n The property is of type <xref href=\\\"System.Object\\\"></xref> or other reference type, <code>defaultValue</code> is not `null`, and the value cannot be assigned to the reference type.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: PropertyBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: PropertyBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Set a custom attribute using a custom attribute builder.\n  syntax:\n    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);\n    parameters:\n    - id: customBuilder\n      type: System.Reflection.Emit.CustomAttributeBuilder\n      description: An instance of a helper class to define the custom attribute.\n  overload: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>customBuilder</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: if <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  commentId: M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: PropertyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: PropertyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Set a custom attribute using a specified custom attribute blob.\n  remarks: See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`. The Partition II documentation is available online on MSDN ([ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?linkid=65555) Web page) and on the ECMA Web site ([Standard ECMA-335 Common Language Infrastructure](http://go.microsoft.com/fwlink/?linkid=65552) document).\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);\n    parameters:\n    - id: con\n      type: System.Reflection.ConstructorInfo\n      description: The constructor for the custom attribute.\n    - id: binaryAttribute\n      type: System.Byte[]\n      description: A byte blob representing the attributes.\n  overload: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>con</code> or <code>binaryAttribute</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)\n  id: SetGetMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: SetGetMethod(MethodBuilder)\n  nameWithType: PropertyBuilder.SetGetMethod(MethodBuilder)\n  fullName: PropertyBuilder.SetGetMethod(MethodBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the method that gets the property value.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates how to attach a dynamic method to a `get` property created with `PropertyBuilder` using `SetGetMethod`.  \\n  \\n [!code-cpp[PropertyBuilder_SetGetMethod_4#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CPP/propertybuilder_setgetmethod_4.cpp#1)]\\n [!code-csharp[PropertyBuilder_SetGetMethod_4#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CS/propertybuilder_setgetmethod_4.cs#1)]\\n [!code-vb[PropertyBuilder_SetGetMethod_4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/VB/propertybuilder_setgetmethod_4.vb#1)]\"\n  syntax:\n    content: public void SetGetMethod (System.Reflection.Emit.MethodBuilder mdBuilder);\n    parameters:\n    - id: mdBuilder\n      type: System.Reflection.Emit.MethodBuilder\n      description: A `MethodBuilder` object that represents the method that gets the property value.\n  overload: System.Reflection.Emit.PropertyBuilder.SetGetMethod*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>mdBuilder</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)\n  id: SetSetMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: SetSetMethod(MethodBuilder)\n  nameWithType: PropertyBuilder.SetSetMethod(MethodBuilder)\n  fullName: PropertyBuilder.SetSetMethod(MethodBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the method that sets the property value.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates how to attach a dynamic method to a `set` property created with `PropertyBuilder` using `SetSetMethod`.  \\n  \\n [!code-cpp[PropertyBuilder_SetGetMethod_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CPP/propertybuilder_setgetmethod_4.cpp#2)]\\n [!code-csharp[PropertyBuilder_SetGetMethod_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CS/propertybuilder_setgetmethod_4.cs#2)]\\n [!code-vb[PropertyBuilder_SetGetMethod_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/VB/propertybuilder_setgetmethod_4.vb#2)]\"\n  syntax:\n    content: public void SetSetMethod (System.Reflection.Emit.MethodBuilder mdBuilder);\n    parameters:\n    - id: mdBuilder\n      type: System.Reflection.Emit.MethodBuilder\n      description: A `MethodBuilder` object that represents the method that sets the property value.\n  overload: System.Reflection.Emit.PropertyBuilder.SetSetMethod*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>mdBuilder</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been called on the enclosing type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])\n  commentId: M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])\n  id: SetValue(System.Object,System.Object,System.Object[])\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: SetValue(Object, Object, Object[])\n  nameWithType: PropertyBuilder.SetValue(Object, Object, Object[])\n  fullName: PropertyBuilder.SetValue(Object, Object, Object[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the value of the property with optional index values for index properties.\n  remarks: To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>.\n  syntax:\n    content: public override void SetValue (object obj, object value, object[] index);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be set.\n    - id: value\n      type: System.Object\n      description: The new value for this property.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. This value should be `null` for non-indexed properties.\n  overload: System.Reflection.Emit.PropertyBuilder.SetValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  id: SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyBuilder.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyBuilder.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Sets the property value for the given object to the given value.\n  remarks: To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=fullName>.\n  syntax:\n    content: public override void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object whose property value will be returned.\n    - id: value\n      type: System.Object\n      description: The new value for this property.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: 'The invocation attribute. This must be a bit flag from `BindingFlags` : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag of `BindingFlags` must be set.'\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: index\n      type: System.Object[]\n      description: Optional index values for indexed properties. This value should be `null` for non-indexed properties.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The `CultureInfo` object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the `CultureInfo.Parent` method will be called successively in search of a match. If this value is `null`, the `CultureInfo` is obtained from the `CultureInfo.CurrentUICulture` property.\n  overload: System.Reflection.Emit.PropertyBuilder.SetValue*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: _PropertyBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: PropertyBuilder._PropertyBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: PropertyBuilder._PropertyBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _PropertyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: _PropertyBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: PropertyBuilder._PropertyBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: PropertyBuilder._PropertyBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _PropertyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: _PropertyBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: PropertyBuilder._PropertyBuilder.GetTypeInfoCount(UInt32)\n  fullName: PropertyBuilder._PropertyBuilder.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _PropertyBuilder.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.PropertyBuilder\n  langs:\n  - csharp\n  name: _PropertyBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: PropertyBuilder._PropertyBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: PropertyBuilder._PropertyBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _PropertyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Emit.PropertyBuilder.#ctor\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: PropertyBuilder()\n  nameWithType: PropertyBuilder.PropertyBuilder()\n  fullName: PropertyBuilder.PropertyBuilder()\n- uid: System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: AddOtherMethod(MethodBuilder)\n  nameWithType: PropertyBuilder.AddOtherMethod(MethodBuilder)\n  fullName: PropertyBuilder.AddOtherMethod(MethodBuilder)\n- uid: System.Reflection.Emit.MethodBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: MethodBuilder\n  nameWithType: MethodBuilder\n  fullName: System.Reflection.Emit.MethodBuilder\n- uid: System.Reflection.Emit.PropertyBuilder.Attributes\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: PropertyBuilder.Attributes\n  fullName: PropertyBuilder.Attributes\n- uid: System.Reflection.PropertyAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyAttributes\n  nameWithType: PropertyAttributes\n  fullName: System.Reflection.PropertyAttributes\n- uid: System.Reflection.Emit.PropertyBuilder.CanRead\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: CanRead\n  nameWithType: PropertyBuilder.CanRead\n  fullName: PropertyBuilder.CanRead\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.PropertyBuilder.CanWrite\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: CanWrite\n  nameWithType: PropertyBuilder.CanWrite\n  fullName: PropertyBuilder.CanWrite\n- uid: System.Reflection.Emit.PropertyBuilder.DeclaringType\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: PropertyBuilder.DeclaringType\n  fullName: PropertyBuilder.DeclaringType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetAccessors(Boolean)\n  nameWithType: PropertyBuilder.GetAccessors(Boolean)\n  fullName: PropertyBuilder.GetAccessors(Boolean)\n- uid: System.Reflection.MethodInfo\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: PropertyBuilder.GetCustomAttributes(Boolean)\n  fullName: PropertyBuilder.GetCustomAttributes(Boolean)\n- uid: System.Object\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: PropertyBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: PropertyBuilder.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetGetMethod(Boolean)\n  nameWithType: PropertyBuilder.GetGetMethod(Boolean)\n  fullName: PropertyBuilder.GetGetMethod(Boolean)\n- uid: System.Reflection.Emit.PropertyBuilder.GetIndexParameters\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetIndexParameters()\n  nameWithType: PropertyBuilder.GetIndexParameters()\n  fullName: PropertyBuilder.GetIndexParameters()\n- uid: System.Reflection.ParameterInfo\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.Reflection.ParameterInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo[]\n  nameWithType: ParameterInfo[]\n  fullName: System.Reflection.ParameterInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    nameWithType: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetSetMethod(Boolean)\n  nameWithType: PropertyBuilder.GetSetMethod(Boolean)\n  fullName: PropertyBuilder.GetSetMethod(Boolean)\n- uid: System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetValue(Object, Object[])\n  nameWithType: PropertyBuilder.GetValue(Object, Object[])\n  fullName: PropertyBuilder.GetValue(Object, Object[])\n- uid: System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyBuilder.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyBuilder.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: PropertyBuilder.IsDefined(Type, Boolean)\n  fullName: PropertyBuilder.IsDefined(Type, Boolean)\n- uid: System.Reflection.Emit.PropertyBuilder.Module\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: Module\n  nameWithType: PropertyBuilder.Module\n  fullName: PropertyBuilder.Module\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Emit.PropertyBuilder.Name\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: Name\n  nameWithType: PropertyBuilder.Name\n  fullName: PropertyBuilder.Name\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.PropertyBuilder.PropertyToken\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: PropertyToken\n  nameWithType: PropertyBuilder.PropertyToken\n  fullName: PropertyBuilder.PropertyToken\n- uid: System.Reflection.Emit.PropertyToken\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: PropertyToken\n  nameWithType: PropertyToken\n  fullName: System.Reflection.Emit.PropertyToken\n- uid: System.Reflection.Emit.PropertyBuilder.PropertyType\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: PropertyType\n  nameWithType: PropertyBuilder.PropertyType\n  fullName: PropertyBuilder.PropertyType\n- uid: System.Reflection.Emit.PropertyBuilder.ReflectedType\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: PropertyBuilder.ReflectedType\n  fullName: PropertyBuilder.ReflectedType\n- uid: System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetConstant(Object)\n  nameWithType: PropertyBuilder.SetConstant(Object)\n  fullName: PropertyBuilder.SetConstant(Object)\n- uid: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: PropertyBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: PropertyBuilder.SetCustomAttribute(CustomAttributeBuilder)\n- uid: System.Reflection.Emit.CustomAttributeBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: CustomAttributeBuilder\n  nameWithType: CustomAttributeBuilder\n  fullName: System.Reflection.Emit.CustomAttributeBuilder\n- uid: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: PropertyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: PropertyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetGetMethod(MethodBuilder)\n  nameWithType: PropertyBuilder.SetGetMethod(MethodBuilder)\n  fullName: PropertyBuilder.SetGetMethod(MethodBuilder)\n- uid: System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetSetMethod(MethodBuilder)\n  nameWithType: PropertyBuilder.SetSetMethod(MethodBuilder)\n  fullName: PropertyBuilder.SetSetMethod(MethodBuilder)\n- uid: System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetValue(Object, Object, Object[])\n  nameWithType: PropertyBuilder.SetValue(Object, Object, Object[])\n  fullName: PropertyBuilder.SetValue(Object, Object, Object[])\n- uid: System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: PropertyBuilder.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: PropertyBuilder.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: _PropertyBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: PropertyBuilder._PropertyBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: PropertyBuilder._PropertyBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: _PropertyBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: PropertyBuilder._PropertyBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: PropertyBuilder._PropertyBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: _PropertyBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: PropertyBuilder._PropertyBuilder.GetTypeInfoCount(UInt32)\n  fullName: PropertyBuilder._PropertyBuilder.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: _PropertyBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: PropertyBuilder._PropertyBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: PropertyBuilder._PropertyBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.PropertyBuilder.#ctor*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: PropertyBuilder\n  nameWithType: PropertyBuilder.PropertyBuilder\n  fullName: PropertyBuilder.PropertyBuilder\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.AddOtherMethod*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: AddOtherMethod\n  nameWithType: PropertyBuilder.AddOtherMethod\n  fullName: PropertyBuilder.AddOtherMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.Attributes*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: PropertyBuilder.Attributes\n  fullName: PropertyBuilder.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.CanRead*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: CanRead\n  nameWithType: PropertyBuilder.CanRead\n  fullName: PropertyBuilder.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.CanWrite*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: CanWrite\n  nameWithType: PropertyBuilder.CanWrite\n  fullName: PropertyBuilder.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.DeclaringType*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: PropertyBuilder.DeclaringType\n  fullName: PropertyBuilder.DeclaringType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.GetAccessors*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetAccessors\n  nameWithType: PropertyBuilder.GetAccessors\n  fullName: PropertyBuilder.GetAccessors\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.GetCustomAttributes*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: PropertyBuilder.GetCustomAttributes\n  fullName: PropertyBuilder.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.GetGetMethod*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetGetMethod\n  nameWithType: PropertyBuilder.GetGetMethod\n  fullName: PropertyBuilder.GetGetMethod\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.GetIndexParameters*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetIndexParameters\n  nameWithType: PropertyBuilder.GetIndexParameters\n  fullName: PropertyBuilder.GetIndexParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.GetSetMethod*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetSetMethod\n  nameWithType: PropertyBuilder.GetSetMethod\n  fullName: PropertyBuilder.GetSetMethod\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.GetValue*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: GetValue\n  nameWithType: PropertyBuilder.GetValue\n  fullName: PropertyBuilder.GetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.IsDefined*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: IsDefined\n  nameWithType: PropertyBuilder.IsDefined\n  fullName: PropertyBuilder.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.Module*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: Module\n  nameWithType: PropertyBuilder.Module\n  fullName: PropertyBuilder.Module\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.Name*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: Name\n  nameWithType: PropertyBuilder.Name\n  fullName: PropertyBuilder.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.PropertyToken*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: PropertyToken\n  nameWithType: PropertyBuilder.PropertyToken\n  fullName: PropertyBuilder.PropertyToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.PropertyType*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: PropertyType\n  nameWithType: PropertyBuilder.PropertyType\n  fullName: PropertyBuilder.PropertyType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.ReflectedType*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: PropertyBuilder.ReflectedType\n  fullName: PropertyBuilder.ReflectedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.SetConstant*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetConstant\n  nameWithType: PropertyBuilder.SetConstant\n  fullName: PropertyBuilder.SetConstant\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetCustomAttribute\n  nameWithType: PropertyBuilder.SetCustomAttribute\n  fullName: PropertyBuilder.SetCustomAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.SetGetMethod*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetGetMethod\n  nameWithType: PropertyBuilder.SetGetMethod\n  fullName: PropertyBuilder.SetGetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.SetSetMethod*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetSetMethod\n  nameWithType: PropertyBuilder.SetSetMethod\n  fullName: PropertyBuilder.SetSetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.SetValue*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: SetValue\n  nameWithType: PropertyBuilder.SetValue\n  fullName: PropertyBuilder.SetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames\n  nameWithType: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames\n  fullName: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo\n  nameWithType: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo\n  fullName: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount\n  nameWithType: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount\n  fullName: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke*\n  parent: System.Reflection.Emit.PropertyBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._PropertyBuilder.Invoke\n  nameWithType: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.Invoke\n  fullName: PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/PropertyBuilder.xml\n- uid: System.Reflection.PropertyInfo.Equals(System.Object)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PropertyInfo.Equals(Object)\n  fullName: PropertyInfo.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Reflection.PropertyInfo.GetHashCode\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PropertyInfo.GetHashCode()\n  fullName: PropertyInfo.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.PropertyInfo.MemberType\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: PropertyInfo.MemberType\n  fullName: PropertyInfo.MemberType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.PropertyInfo.GetAccessors\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetAccessors()\n  nameWithType: PropertyInfo.GetAccessors()\n  fullName: PropertyInfo.GetAccessors()\n- uid: System.Reflection.PropertyInfo.GetConstantValue\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetConstantValue()\n  nameWithType: PropertyInfo.GetConstantValue()\n  fullName: PropertyInfo.GetConstantValue()\n- uid: System.Reflection.PropertyInfo.GetGetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetGetMethod()\n  nameWithType: PropertyInfo.GetGetMethod()\n  fullName: PropertyInfo.GetGetMethod()\n- uid: System.Reflection.PropertyInfo.GetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetMethod\n  nameWithType: PropertyInfo.GetMethod\n  fullName: PropertyInfo.GetMethod\n- uid: System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetOptionalCustomModifiers()\n  nameWithType: PropertyInfo.GetOptionalCustomModifiers()\n  fullName: PropertyInfo.GetOptionalCustomModifiers()\n- uid: System.Reflection.PropertyInfo.GetRawConstantValue\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetRawConstantValue()\n  nameWithType: PropertyInfo.GetRawConstantValue()\n  fullName: PropertyInfo.GetRawConstantValue()\n- uid: System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetRequiredCustomModifiers()\n  nameWithType: PropertyInfo.GetRequiredCustomModifiers()\n  fullName: PropertyInfo.GetRequiredCustomModifiers()\n- uid: System.Reflection.PropertyInfo.GetSetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetSetMethod()\n  nameWithType: PropertyInfo.GetSetMethod()\n  fullName: PropertyInfo.GetSetMethod()\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: GetValue(Object)\n  nameWithType: PropertyInfo.GetValue(Object)\n  fullName: PropertyInfo.GetValue(Object)\n- uid: System.Reflection.PropertyInfo.IsSpecialName\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: PropertyInfo.IsSpecialName\n  fullName: PropertyInfo.IsSpecialName\n- uid: System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: op_Equality(PropertyInfo, PropertyInfo)\n  nameWithType: PropertyInfo.op_Equality(PropertyInfo, PropertyInfo)\n  fullName: PropertyInfo.op_Equality(PropertyInfo, PropertyInfo)\n- uid: System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: op_Inequality(PropertyInfo, PropertyInfo)\n  nameWithType: PropertyInfo.op_Inequality(PropertyInfo, PropertyInfo)\n  fullName: PropertyInfo.op_Inequality(PropertyInfo, PropertyInfo)\n- uid: System.Reflection.PropertyInfo.SetMethod\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetMethod\n  nameWithType: PropertyInfo.SetMethod\n  fullName: PropertyInfo.SetMethod\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: SetValue(Object, Object)\n  nameWithType: PropertyInfo.SetValue(Object, Object)\n  fullName: PropertyInfo.SetValue(Object, Object)\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetType()\n  nameWithType: PropertyInfo._PropertyInfo.GetType()\n  fullName: PropertyInfo._PropertyInfo.GetType()\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.GetTypeInfoCount(UInt32)\n  nameWithType: PropertyInfo._PropertyInfo.GetTypeInfoCount(UInt32)\n  fullName: PropertyInfo._PropertyInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.PropertyInfo\n  isExternal: false\n  name: _PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: PropertyInfo._PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: PropertyInfo._PropertyInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetAccessors(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetAccessors(PropertyInfo)\n  fullName: PropertyInfoExtensions.GetAccessors(PropertyInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetAccessors(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetAccessors(PropertyInfo, Boolean)\n  fullName: PropertyInfoExtensions.GetAccessors(PropertyInfo, Boolean)\n- uid: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetGetMethod(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetGetMethod(PropertyInfo)\n  fullName: PropertyInfoExtensions.GetGetMethod(PropertyInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetGetMethod(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetGetMethod(PropertyInfo, Boolean)\n  fullName: PropertyInfoExtensions.GetGetMethod(PropertyInfo, Boolean)\n- uid: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetSetMethod(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetSetMethod(PropertyInfo)\n  fullName: PropertyInfoExtensions.GetSetMethod(PropertyInfo)\n- uid: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  parent: System.Reflection.PropertyInfoExtensions\n  isExternal: false\n  name: GetSetMethod(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetSetMethod(PropertyInfo, Boolean)\n  fullName: PropertyInfoExtensions.GetSetMethod(PropertyInfo, Boolean)\n- uid: System.Runtime.InteropServices._PropertyBuilder\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _PropertyBuilder\n  nameWithType: _PropertyBuilder\n  fullName: System.Runtime.InteropServices._PropertyBuilder\n"}