{"nodes":[{"content":"Represents a displacement in 2-D space.","nodes":[{"pos":[0,39],"content":"Represents a displacement in 2-D space.","nodes":[{"content":"Represents a displacement in 2-D space.","pos":[0,39]}]}],"pos":[2927,2967],"yaml":true},{"content":"A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration). Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.  \n  \n In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.  \n  \n Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.  \n  \n<a name=\"xamlAttributeUsage_Vector\"></a>   \n## XAML Attribute Usage  \n  \n```  \n<object property=\"x,y\"/>  \n-or-  \n<object property=\"x y\"/>  \n```  \n  \n<a name=\"xamlValues_Vector\"></a>   \n## XAML Values  \n *x*  \n The vector's X component. For more information, see the <xref:System.Windows.Vector.X%2A> property.  \n  \n *y*  \n The vector's Y component. For more information, see the <xref:System.Windows.Vector.Y%2A> property.","nodes":[{"pos":[0,312],"content":"A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration). Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.","nodes":[{"content":"A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration). Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.","pos":[0,312],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Point&gt;</ph> represents a fixed position, but a <ph id=\"ph2\">&lt;xref:System.Windows.Vector&gt;</ph> represents a direction and a magnitude (for example, velocity or acceleration).","pos":[0,173],"source":"A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration)."},{"content":"Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.","pos":[174,312]}]}]},{"pos":[319,500],"content":"In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.","nodes":[{"content":"In XAML, the delimiter between the <ph id=\"ph1\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> values of a <ph id=\"ph3\">&lt;xref:System.Windows.Vector&gt;</ph> can be either a comma or a space.","pos":[0,181],"source":"In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space."}]},{"pos":[507,1077],"content":"Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.","nodes":[{"content":"Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.","pos":[0,570],"nodes":[{"content":"Some cultures might use the comma character as the decimal delimiter instead of the period character.","pos":[0,101]},{"content":"XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.","pos":[102,249]},{"content":"You should avoid using the comma character as the decimal delimiter if specifying a <ph id=\"ph1\">&lt;xref:System.Windows.Vector&gt;</ph> in XAML, because that will clash with the string type conversion of a <ph id=\"ph2\">&lt;xref:System.Windows.Vector&gt;</ph> attribute value into the <ph id=\"ph3\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> components.","pos":[250,570],"source":" You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components."}]}]},{"pos":[1130,1150],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1271,1282],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1286,1392],"content":"*x*  \n The vector's X component. For more information, see the <xref:System.Windows.Vector.X%2A> property.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept>","pos":[0,3],"source":"*x*"},{"content":" The vector's X component. For more information, see the <xref:System.Windows.Vector.X%2A> property.","pos":[6,106],"nodes":[{"content":"The vector's X component.","pos":[1,26]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> property.","pos":[27,100],"source":" For more information, see the <xref:System.Windows.Vector.X%2A> property."}]}]},{"pos":[1399,1505],"content":"*y*  \n The vector's Y component. For more information, see the <xref:System.Windows.Vector.Y%2A> property.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>y<ept id=\"p1\">*</ept>","pos":[0,3],"source":"*y*"},{"content":" The vector's Y component. For more information, see the <xref:System.Windows.Vector.Y%2A> property.","pos":[6,106],"nodes":[{"content":"The vector's Y component.","pos":[1,26]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> property.","pos":[27,100],"source":" For more information, see the <xref:System.Windows.Vector.Y%2A> property."}]}]}],"pos":[2978,4515],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Vector\"></xref> structure.","nodes":[{"pos":[0,87],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> structure.","source":"Initializes a new instance of the <xref href=\"System.Windows.Vector\"></xref> structure."}],"pos":[6129,6217],"yaml":true},{"content":"The <xref href=\"System.Windows.Vector.X\"></xref>-offset of the new <xref href=\"System.Windows.Vector\"></xref>.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph>-offset of the new <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Windows.Vector.X\"></xref>-offset of the new <xref href=\"System.Windows.Vector\"></xref>."}],"pos":[6644,6755],"yaml":true},{"content":"The <xref href=\"System.Windows.Vector.Y\"></xref>-offset of the new <xref href=\"System.Windows.Vector\"></xref>.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph>-offset of the new <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Windows.Vector.Y\"></xref>-offset of the new <xref href=\"System.Windows.Vector\"></xref>."}],"pos":[6812,6923],"yaml":true},{"content":"Translates the specified point by the specified vector and returns the resulting point.","nodes":[{"pos":[0,87],"content":"Translates the specified point by the specified vector and returns the resulting point.","nodes":[{"content":"Translates the specified point by the specified vector and returns the resulting point.","pos":[0,87]}]}],"pos":[7956,8044],"yaml":true},{"content":"The amount to translate the specified point.","nodes":[{"pos":[0,44],"content":"The amount to translate the specified point.","nodes":[{"content":"The amount to translate the specified point.","pos":[0,44]}]}],"pos":[8621,8666],"yaml":true},{"content":"The point to translate.","nodes":[{"pos":[0,23],"content":"The point to translate.","nodes":[{"content":"The point to translate.","pos":[0,23]}]}],"pos":[8734,8758],"yaml":true},{"content":"The result of translating <code>point</code> by <code>vector</code>.","nodes":[{"pos":[0,68],"content":"The result of translating <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of translating <code>point</code> by <code>vector</code>."}],"pos":[8822,8891],"yaml":true},{"content":"Adds two vectors and returns the result as a <xref href=\"System.Windows.Vector\"></xref> structure.","nodes":[{"pos":[0,98],"content":"Adds two vectors and returns the result as a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> structure.","source":"Adds two vectors and returns the result as a <xref href=\"System.Windows.Vector\"></xref> structure."}],"pos":[9928,10027],"yaml":true},{"content":"The first vector to add.","nodes":[{"pos":[0,24],"content":"The first vector to add.","nodes":[{"content":"The first vector to add.","pos":[0,24]}]}],"pos":[10562,10587],"yaml":true},{"content":"The second vector to add.","nodes":[{"pos":[0,25],"content":"The second vector to add.","nodes":[{"content":"The second vector to add.","pos":[0,25]}]}],"pos":[10658,10684],"yaml":true},{"content":"The sum of <code>vector1</code> and <code>vector2</code>.","nodes":[{"pos":[0,57],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The sum of <code>vector1</code> and <code>vector2</code>."}],"pos":[10749,10807],"yaml":true},{"content":"Retrieves the angle, expressed in degrees, between the two specified vectors.","nodes":[{"pos":[0,77],"content":"Retrieves the angle, expressed in degrees, between the two specified vectors.","nodes":[{"content":"Retrieves the angle, expressed in degrees, between the two specified vectors.","pos":[0,77]}]}],"pos":[11898,11976],"yaml":true},{"content":"The first vector to evaluate.","nodes":[{"pos":[0,29],"content":"The first vector to evaluate.","nodes":[{"content":"The first vector to evaluate.","pos":[0,29]}]}],"pos":[12521,12551],"yaml":true},{"content":"The second vector to evaluate.","nodes":[{"pos":[0,30],"content":"The second vector to evaluate.","nodes":[{"content":"The second vector to evaluate.","pos":[0,30]}]}],"pos":[12622,12653],"yaml":true},{"content":"The angle, in degrees, between <code>vector1</code> and <code>vector2</code>.","nodes":[{"pos":[0,77],"content":"The angle, in degrees, between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The angle, in degrees, between <code>vector1</code> and <code>vector2</code>."}],"pos":[12710,12788],"yaml":true},{"content":"Calculates the cross product of two vectors.","nodes":[{"pos":[0,44],"content":"Calculates the cross product of two vectors.","nodes":[{"content":"Calculates the cross product of two vectors.","pos":[0,44]}]}],"pos":[13888,13933],"yaml":true},{"content":"The first vector to evaluate.","nodes":[{"pos":[0,29],"content":"The first vector to evaluate.","nodes":[{"content":"The first vector to evaluate.","pos":[0,29]}]}],"pos":[14487,14517],"yaml":true},{"content":"The second vector to evaluate.","nodes":[{"pos":[0,30],"content":"The second vector to evaluate.","nodes":[{"content":"The second vector to evaluate.","pos":[0,30]}]}],"pos":[14588,14619],"yaml":true},{"content":"The cross product of <code>vector1</code> and <code>vector2</code>. The following formula is used to calculate the cross product:  \n  \n <code>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</code>","nodes":[{"pos":[0,129],"content":"The cross product of <code>vector1</code> and <code>vector2</code>. The following formula is used to calculate the cross product:","nodes":[{"content":"The cross product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[0,67],"source":"The cross product of <code>vector1</code> and <code>vector2</code>."},{"content":"The following formula is used to calculate the cross product:","pos":[68,129]}]}],"pos":[14676,14879],"yaml":true},{"content":"Calculates the determinant of two vectors.","nodes":[{"pos":[0,42],"content":"Calculates the determinant of two vectors.","nodes":[{"content":"Calculates the determinant of two vectors.","pos":[0,42]}]}],"pos":[15973,16016],"yaml":true},{"content":"The first vector to evaluate.","nodes":[{"pos":[0,29],"content":"The first vector to evaluate.","nodes":[{"content":"The first vector to evaluate.","pos":[0,29]}]}],"pos":[16546,16576],"yaml":true},{"content":"The second vector to evaluate.","nodes":[{"pos":[0,30],"content":"The second vector to evaluate.","nodes":[{"content":"The second vector to evaluate.","pos":[0,30]}]}],"pos":[16647,16678],"yaml":true},{"content":"The determinant of <code>vector1</code> and <code>vector2</code>.","nodes":[{"pos":[0,65],"content":"The determinant of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The determinant of <code>vector1</code> and <code>vector2</code>."}],"pos":[16735,16801],"yaml":true},{"content":"Divides the specified vector by the specified scalar and returns the result as a <xref href=\"System.Windows.Vector\"></xref>.","nodes":[{"pos":[0,124],"content":"Divides the specified vector by the specified scalar and returns the result as a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph>.","source":"Divides the specified vector by the specified scalar and returns the result as a <xref href=\"System.Windows.Vector\"></xref>."}],"pos":[17840,17965],"yaml":true},{"content":"The vector structure to divide.","nodes":[{"pos":[0,31],"content":"The vector structure to divide.","nodes":[{"content":"The vector structure to divide.","pos":[0,31]}]}],"pos":[18473,18505],"yaml":true},{"content":"The amount by which <code>vector</code> is divided.","nodes":[{"pos":[0,51],"content":"The amount by which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> is divided.","source":"The amount by which <code>vector</code> is divided."}],"pos":[18567,18619],"yaml":true},{"content":"The result of dividing <code>vector</code> by <code>scalar</code>.","nodes":[{"pos":[0,66],"content":"The result of dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of dividing <code>vector</code> by <code>scalar</code>."}],"pos":[18684,18751],"yaml":true},{"content":"Compares two vectors for equality.","nodes":[{"pos":[0,34],"content":"Compares two vectors for equality.","nodes":[{"content":"Compares two vectors for equality.","pos":[0,34]}]}],"pos":[19719,19754],"yaml":true},{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"pos":[0,355],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's <ph id=\"ph1\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> properties are described using <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> can lose precision when arithmetic operations are performed on it, a comparison between two <ph id=\"ph2\">&lt;xref:System.Windows.Vector&gt;</ph> structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]}],"pos":[19765,20121],"yaml":true,"extradata":"MT"},{"content":"The vector to compare with this vector.","nodes":[{"pos":[0,39],"content":"The vector to compare with this vector.","nodes":[{"content":"The vector to compare with this vector.","pos":[0,39]}]}],"pos":[20594,20634],"yaml":true},{"content":"`true` if <code>value</code> has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector; otherwise, `false`.","nodes":[{"pos":[0,178],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> has the same <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> values as this vector; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if <code>value</code> has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector; otherwise, `false`."}],"pos":[20692,20873],"yaml":true},{"content":"Compares the two specified vectors for equality.","nodes":[{"pos":[0,48],"content":"Compares the two specified vectors for equality.","nodes":[{"content":"Compares the two specified vectors for equality.","pos":[0,48]}]}],"pos":[21931,21980],"yaml":true},{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.","nodes":[{"pos":[0,347],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.","pos":[0,347],"nodes":[{"content":"A vector's <ph id=\"ph1\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> properties are described using <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> can lose precision when arithmetic operations are performed on it, a comparison between two <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> structures that are logically equal might fail.","pos":[143,347],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail."}]}]}],"pos":[21991,22339],"yaml":true,"extradata":"MT"},{"content":"The first vector to compare.","nodes":[{"pos":[0,28],"content":"The first vector to compare.","nodes":[{"content":"The first vector to compare.","pos":[0,28]}]}],"pos":[22854,22883],"yaml":true},{"content":"The second vector to compare.","nodes":[{"pos":[0,29],"content":"The second vector to compare.","nodes":[{"content":"The second vector to compare.","pos":[0,29]}]}],"pos":[22954,22984],"yaml":true},{"content":"`true` if t he <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, `false`.","nodes":[{"pos":[0,199],"content":"<ph id=\"ph1\">`true`</ph> if t he <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> components of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if t he <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, `false`."}],"pos":[23042,23244],"yaml":true},{"content":"Determines whether the specified <xref href=\"System.Object\"></xref> is a <xref href=\"System.Windows.Vector\"></xref> structure and, if it is, whether it has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector.","nodes":[{"pos":[0,281],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> is a <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> structure and, if it is, whether it has the same <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> values as this vector.","source":"Determines whether the specified <xref href=\"System.Object\"></xref> is a <xref href=\"System.Windows.Vector\"></xref> structure and, if it is, whether it has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector."}],"pos":[24188,24470],"yaml":true},{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"pos":[0,355],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's <ph id=\"ph1\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> properties are described using <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> can lose precision when arithmetic operations are performed on it, a comparison between two <ph id=\"ph2\">&lt;xref:System.Windows.Vector&gt;</ph> structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]}],"pos":[24481,24837],"yaml":true,"extradata":"MT"},{"content":"The vector to compare.","nodes":[{"pos":[0,22],"content":"The vector to compare.","nodes":[{"content":"The vector to compare.","pos":[0,22]}]}],"pos":[25303,25326],"yaml":true},{"content":"`true` if <code>o</code> is a <xref href=\"System.Windows.Vector\"></xref> and has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector; otherwise, `false`.","nodes":[{"pos":[0,226],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">o</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> and has the same <ph id=\"ph4\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> values as this vector; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if <code>o</code> is a <xref href=\"System.Windows.Vector\"></xref> and has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector; otherwise, `false`."}],"pos":[25384,25613],"yaml":true},{"content":"Returns the hash code for this vector.","nodes":[{"pos":[0,38],"content":"Returns the hash code for this vector.","nodes":[{"content":"Returns the hash code for this vector.","pos":[0,38]}]}],"pos":[26524,26563],"yaml":true},{"content":"The hash code for this instance.","nodes":[{"pos":[0,32],"content":"The hash code for this instance.","nodes":[{"content":"The hash code for this instance.","pos":[0,32]}]}],"pos":[26999,27032],"yaml":true},{"content":"Gets the length of this vector.","nodes":[{"pos":[0,31],"content":"Gets the length of this vector.","nodes":[{"content":"Gets the length of this vector.","pos":[0,31]}]}],"pos":[27914,27946],"yaml":true},{"content":"The length of a vector is sometimes referred to as the magnitude.","nodes":[{"pos":[0,65],"content":"The length of a vector is sometimes referred to as the magnitude.","nodes":[{"content":"The length of a vector is sometimes referred to as the magnitude.","pos":[0,65]}]}],"pos":[27957,28023],"yaml":true,"extradata":"MT"},{"content":"The length of this vector.","nodes":[{"pos":[0,26],"content":"The length of this vector.","nodes":[{"content":"The length of this vector.","pos":[0,26]}]}],"pos":[28549,28576],"yaml":true},{"content":"Gets the square of the length of this vector.","nodes":[{"pos":[0,45],"content":"Gets the square of the length of this vector.","nodes":[{"content":"Gets the square of the length of this vector.","pos":[0,45]}]}],"pos":[29495,29541],"yaml":true},{"content":"The length of a vector is sometimes referred to as its magnitude.","nodes":[{"pos":[0,65],"content":"The length of a vector is sometimes referred to as its magnitude.","nodes":[{"content":"The length of a vector is sometimes referred to as its magnitude.","pos":[0,65]}]}],"pos":[29552,29618],"yaml":true,"extradata":"MT"},{"content":"The square of the <xref href=\"System.Windows.Vector.Length\"></xref> of this vector.","nodes":[{"pos":[0,83],"content":"The square of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.Length\"&gt;&lt;/xref&gt;</ph> of this vector.","source":"The square of the <xref href=\"System.Windows.Vector.Length\"></xref> of this vector."}],"pos":[30196,30280],"yaml":true},{"content":"Multiplies the specified scalar by the specified vector and returns the resulting <xref href=\"System.Windows.Vector\"></xref>.","nodes":[{"pos":[0,125],"content":"Multiplies the specified scalar by the specified vector and returns the resulting <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph>.","source":"Multiplies the specified scalar by the specified vector and returns the resulting <xref href=\"System.Windows.Vector\"></xref>."}],"pos":[31311,31437],"yaml":true},{"content":"The scalar to multiply.","nodes":[{"pos":[0,23],"content":"The scalar to multiply.","nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]}],"pos":[31975,31999],"yaml":true},{"content":"The vector to multiply.","nodes":[{"pos":[0,23],"content":"The vector to multiply.","nodes":[{"content":"The vector to multiply.","pos":[0,23]}]}],"pos":[32069,32093],"yaml":true},{"content":"The result of multiplying <code>scalar</code> and <code>vector</code>.","nodes":[{"pos":[0,70],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scalar</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of multiplying <code>scalar</code> and <code>vector</code>."}],"pos":[32158,32229],"yaml":true},{"content":"Multiplies the specified vector by the specified scalar and returns the resulting <xref href=\"System.Windows.Vector\"></xref>.","nodes":[{"pos":[0,125],"content":"Multiplies the specified vector by the specified scalar and returns the resulting <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph>.","source":"Multiplies the specified vector by the specified scalar and returns the resulting <xref href=\"System.Windows.Vector\"></xref>."}],"pos":[33255,33381],"yaml":true},{"content":"The vector to multiply.","nodes":[{"pos":[0,23],"content":"The vector to multiply.","nodes":[{"content":"The vector to multiply.","pos":[0,23]}]}],"pos":[33927,33951],"yaml":true},{"content":"The scalar to multiply.","nodes":[{"pos":[0,23],"content":"The scalar to multiply.","nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]}],"pos":[34013,34037],"yaml":true},{"content":"The result of multiplying <code>vector</code> and <code>scalar</code>.","nodes":[{"pos":[0,70],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of multiplying <code>vector</code> and <code>scalar</code>."}],"pos":[34102,34173],"yaml":true},{"content":"Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>.","nodes":[{"pos":[0,125],"content":"Transforms the coordinate space of the specified vector using the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Matrix\"&gt;&lt;/xref&gt;</ph>.","source":"Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>."}],"pos":[35263,35389],"yaml":true},{"content":"The vector structure to transform.","nodes":[{"pos":[0,34],"content":"The vector structure to transform.","nodes":[{"content":"The vector structure to transform.","pos":[0,34]}]}],"pos":[35982,36017],"yaml":true},{"content":"The transformation to apply to <code>vector</code>.","nodes":[{"pos":[0,51],"content":"The transformation to apply to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The transformation to apply to <code>vector</code>."}],"pos":[36093,36145],"yaml":true},{"content":"The result of transforming <code>vector</code> by <code>matrix</code>.","nodes":[{"pos":[0,70],"content":"The result of transforming <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">matrix</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of transforming <code>vector</code> by <code>matrix</code>."}],"pos":[36210,36281],"yaml":true},{"content":"Calculates the dot product of the two specified vectors and returns the result as a <xref href=\"System.Double\"></xref>.","nodes":[{"pos":[0,119],"content":"Calculates the dot product of the two specified vectors and returns the result as a <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph>.","source":"Calculates the dot product of the two specified vectors and returns the result as a <xref href=\"System.Double\"></xref>."}],"pos":[37353,37473],"yaml":true},{"content":"The first vector to multiply.","nodes":[{"pos":[0,29],"content":"The first vector to multiply.","nodes":[{"content":"The first vector to multiply.","pos":[0,29]}]}],"pos":[38024,38054],"yaml":true},{"content":"The second vector structure to multiply.","nodes":[{"pos":[0,40],"content":"The second vector structure to multiply.","nodes":[{"content":"The second vector structure to multiply.","pos":[0,40]}]}],"pos":[38125,38166],"yaml":true},{"content":"A <xref href=\"System.Double\"></xref> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  \n  \n <code>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</code>","nodes":[{"pos":[0,169],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> containing the scalar dot product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which is calculated using the following formula:","source":"A <xref href=\"System.Double\"></xref> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:"}],"pos":[38223,38468],"yaml":true},{"content":"Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.","nodes":[{"pos":[0,100],"content":"Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.","nodes":[{"content":"Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.","pos":[0,100],"nodes":[{"content":"Negates this vector.","pos":[0,20]},{"content":"The vector has the same magnitude as before, but its direction is now opposite.","pos":[21,100]}]}]}],"pos":[39351,39452],"yaml":true},{"content":"Normalizes this vector.","nodes":[{"pos":[0,23],"content":"Normalizes this vector.","nodes":[{"content":"Normalizes this vector.","pos":[0,23]}]}],"pos":[40691,40715],"yaml":true},{"content":"A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.","nodes":[{"pos":[0,250],"content":"A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.","nodes":[{"content":"A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.","pos":[0,250],"nodes":[{"content":"A normalized vector maintains its direction but its <ph id=\"ph1\">&lt;xref:System.Windows.Vector.Length%2A&gt;</ph> becomes 1.","pos":[0,101],"source":"A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1."},{"content":"The resulting vector is often called a unit vector.","pos":[102,153]},{"content":"A vector is normalized by dividing the vector by its own <ph id=\"ph1\">&lt;xref:System.Windows.Vector.Length%2A&gt;</ph>.","pos":[154,250],"source":" A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>."}]}]}],"pos":[40726,40977],"yaml":true,"extradata":"MT"},{"content":"Adds two vectors and returns the result as a vector.","nodes":[{"pos":[0,52],"content":"Adds two vectors and returns the result as a vector.","nodes":[{"content":"Adds two vectors and returns the result as a vector.","pos":[0,52]}]}],"pos":[42386,42439],"yaml":true},{"content":"The first vector to add.","nodes":[{"pos":[0,24],"content":"The first vector to add.","nodes":[{"content":"The first vector to add.","pos":[0,24]}]}],"pos":[43245,43270],"yaml":true},{"content":"The second vector to add.","nodes":[{"pos":[0,25],"content":"The second vector to add.","nodes":[{"content":"The second vector to add.","pos":[0,25]}]}],"pos":[43341,43367],"yaml":true},{"content":"The sum of <code>vector1</code> and <code>vector2</code>.","nodes":[{"pos":[0,57],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The sum of <code>vector1</code> and <code>vector2</code>."}],"pos":[43432,43490],"yaml":true},{"content":"Translates a point by the specified vector and returns the resulting point.","nodes":[{"pos":[0,75],"content":"Translates a point by the specified vector and returns the resulting point.","nodes":[{"content":"Translates a point by the specified vector and returns the resulting point.","pos":[0,75]}]}],"pos":[44579,44655],"yaml":true},{"content":"The vector used to translate <code>point</code>.","nodes":[{"pos":[0,48],"content":"The vector used to translate <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The vector used to translate <code>point</code>."}],"pos":[45459,45508],"yaml":true},{"content":"The point to translate.","nodes":[{"pos":[0,23],"content":"The point to translate.","nodes":[{"content":"The point to translate.","pos":[0,23]}]}],"pos":[45576,45600],"yaml":true},{"content":"The result of translating <code>point</code> by <code>vector</code>.","nodes":[{"pos":[0,68],"content":"The result of translating <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">point</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of translating <code>point</code> by <code>vector</code>."}],"pos":[45664,45733],"yaml":true},{"content":"Divides the specified vector by the specified scalar and returns the resulting vector.","nodes":[{"pos":[0,86],"content":"Divides the specified vector by the specified scalar and returns the resulting vector.","nodes":[{"content":"Divides the specified vector by the specified scalar and returns the resulting vector.","pos":[0,86]}]}],"pos":[46804,46891],"yaml":true},{"content":"The vector to divide.","nodes":[{"pos":[0,21],"content":"The vector to divide.","nodes":[{"content":"The vector to divide.","pos":[0,21]}]}],"pos":[47645,47667],"yaml":true},{"content":"The scalar by which <code>vector</code> will be divided.","nodes":[{"pos":[0,56],"content":"The scalar by which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be divided.","source":"The scalar by which <code>vector</code> will be divided."}],"pos":[47729,47786],"yaml":true},{"content":"The result of dividing <code>vector</code> by <code>scalar</code>.","nodes":[{"pos":[0,66],"content":"The result of dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of dividing <code>vector</code> by <code>scalar</code>."}],"pos":[47851,47918],"yaml":true},{"content":"Compares two vectors for equality.","nodes":[{"pos":[0,34],"content":"Compares two vectors for equality.","nodes":[{"content":"Compares two vectors for equality.","pos":[0,34]}]}],"pos":[49013,49048],"yaml":true},{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"pos":[0,355],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's <ph id=\"ph1\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> properties are described using <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> can lose precision when arithmetic operations are performed on it, a comparison between two <ph id=\"ph2\">&lt;xref:System.Windows.Vector&gt;</ph> structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]}],"pos":[49059,49415],"yaml":true,"extradata":"MT"},{"content":"The first vector to compare.","nodes":[{"pos":[0,28],"content":"The first vector to compare.","nodes":[{"content":"The first vector to compare.","pos":[0,28]}]}],"pos":[50165,50194],"yaml":true},{"content":"The second vector to compare.","nodes":[{"pos":[0,29],"content":"The second vector to compare.","nodes":[{"content":"The second vector to compare.","pos":[0,29]}]}],"pos":[50265,50295],"yaml":true},{"content":"`true` if the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, `false`.","nodes":[{"pos":[0,198],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> components of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, `false`."}],"pos":[50353,50554],"yaml":true},{"content":"Compares two vectors for inequality.","nodes":[{"pos":[0,36],"content":"Compares two vectors for inequality.","nodes":[{"content":"Compares two vectors for inequality.","pos":[0,36]}]}],"pos":[54167,54204],"yaml":true},{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"pos":[0,355],"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","nodes":[{"content":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.","pos":[0,355],"nodes":[{"content":"A vector's <ph id=\"ph1\">&lt;xref:System.Windows.Vector.X%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Vector.Y%2A&gt;</ph> properties are described using <ph id=\"ph3\">&lt;xref:System.Double&gt;</ph> values.","pos":[0,142],"source":"A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values."},{"content":"Because the value of a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> can lose precision when arithmetic operations are performed on it, a comparison between two <ph id=\"ph2\">&lt;xref:System.Windows.Vector&gt;</ph> structures that are logically equal might fail.","pos":[143,355],"source":" Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail."}]}]}],"pos":[54215,54571],"yaml":true,"extradata":"MT"},{"content":"The first vector to compare.","nodes":[{"pos":[0,28],"content":"The first vector to compare.","nodes":[{"content":"The first vector to compare.","pos":[0,28]}]}],"pos":[55335,55364],"yaml":true},{"content":"The second vector to compare.","nodes":[{"pos":[0,29],"content":"The second vector to compare.","nodes":[{"content":"The second vector to compare.","pos":[0,29]}]}],"pos":[55435,55465],"yaml":true},{"content":"`true` if the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are different; otherwise, `false`.","nodes":[{"pos":[0,202],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> components of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph4\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph5\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept> are different; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are different; otherwise, `false`."}],"pos":[55523,55728],"yaml":true},{"content":"Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>.","nodes":[{"pos":[0,125],"content":"Transforms the coordinate space of the specified vector using the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Matrix\"&gt;&lt;/xref&gt;</ph>.","source":"Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>."}],"pos":[56821,56947],"yaml":true},{"content":"The vector to transform.","nodes":[{"pos":[0,24],"content":"The vector to transform.","nodes":[{"content":"The vector to transform.","pos":[0,24]}]}],"pos":[57818,57843],"yaml":true},{"content":"The transformation to apply to <code>vector</code>.","nodes":[{"pos":[0,51],"content":"The transformation to apply to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The transformation to apply to <code>vector</code>."}],"pos":[57919,57971],"yaml":true},{"content":"The result of transforming <code>vector</code> by <code>matrix</code>.","nodes":[{"pos":[0,70],"content":"The result of transforming <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">matrix</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of transforming <code>vector</code> by <code>matrix</code>."}],"pos":[58036,58107],"yaml":true},{"content":"Calculates the dot product of the two specified vector structures and returns the result as a <xref href=\"System.Double\"></xref>.","nodes":[{"pos":[0,129],"content":"Calculates the dot product of the two specified vector structures and returns the result as a <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph>.","source":"Calculates the dot product of the two specified vector structures and returns the result as a <xref href=\"System.Double\"></xref>."}],"pos":[59202,59332],"yaml":true},{"content":"The first vector to multiply.","nodes":[{"pos":[0,29],"content":"The first vector to multiply.","nodes":[{"content":"The first vector to multiply.","pos":[0,29]}]}],"pos":[60133,60163],"yaml":true},{"content":"The second vector to multiply.","nodes":[{"pos":[0,30],"content":"The second vector to multiply.","nodes":[{"content":"The second vector to multiply.","pos":[0,30]}]}],"pos":[60234,60265],"yaml":true},{"content":"Returns a <xref href=\"System.Double\"></xref> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  \n  \n <code>vector1.X * vector2.X + vector1.Y * vector2.Y</code>","nodes":[{"pos":[0,177],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> containing the scalar dot product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which is calculated using the following formula:","source":"Returns a <xref href=\"System.Double\"></xref> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:"}],"pos":[60322,60571],"yaml":true},{"content":"Multiplies the specified scalar by the specified vector and returns the resulting vector.","nodes":[{"pos":[0,89],"content":"Multiplies the specified scalar by the specified vector and returns the resulting vector.","nodes":[{"content":"Multiplies the specified scalar by the specified vector and returns the resulting vector.","pos":[0,89]}]}],"pos":[61642,61732],"yaml":true},{"content":"The scalar to multiply.","nodes":[{"pos":[0,23],"content":"The scalar to multiply.","nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]}],"pos":[62508,62532],"yaml":true},{"content":"The vector to multiply.","nodes":[{"pos":[0,23],"content":"The vector to multiply.","nodes":[{"content":"The vector to multiply.","pos":[0,23]}]}],"pos":[62602,62626],"yaml":true},{"content":"The result of multiplying <code>scalar</code> and <code>vector</code>.","nodes":[{"pos":[0,70],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scalar</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of multiplying <code>scalar</code> and <code>vector</code>."}],"pos":[62691,62762],"yaml":true},{"content":"Multiplies the specified vector by the specified scalar and returns the resulting vector.","nodes":[{"pos":[0,89],"content":"Multiplies the specified vector by the specified scalar and returns the resulting vector.","nodes":[{"content":"Multiplies the specified vector by the specified scalar and returns the resulting vector.","pos":[0,89]}]}],"pos":[63833,63923],"yaml":true},{"content":"The vector to multiply.","nodes":[{"pos":[0,23],"content":"The vector to multiply.","nodes":[{"content":"The vector to multiply.","pos":[0,23]}]}],"pos":[64707,64731],"yaml":true},{"content":"The scalar to multiply.","nodes":[{"pos":[0,23],"content":"The scalar to multiply.","nodes":[{"content":"The scalar to multiply.","pos":[0,23]}]}],"pos":[64793,64817],"yaml":true},{"content":"The result of multiplying <code>vector</code> and <code>scalar</code>.","nodes":[{"pos":[0,70],"content":"The result of multiplying <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">scalar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of multiplying <code>vector</code> and <code>scalar</code>."}],"pos":[64882,64953],"yaml":true},{"content":"Subtracts one specified vector from another.","nodes":[{"pos":[0,44],"content":"Subtracts one specified vector from another.","nodes":[{"content":"Subtracts one specified vector from another.","pos":[0,44]}]}],"pos":[66066,66111],"yaml":true},{"content":"The vector from which <code>vector2</code> is subtracted.","nodes":[{"pos":[0,57],"content":"The vector from which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector2</ph><ept id=\"p1\">&lt;/code&gt;</ept> is subtracted.","source":"The vector from which <code>vector2</code> is subtracted."}],"pos":[66934,66992],"yaml":true},{"content":"The vector to subtract from <code>vector1</code>.","nodes":[{"pos":[0,49],"content":"The vector to subtract from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The vector to subtract from <code>vector1</code>."}],"pos":[67063,67113],"yaml":true},{"content":"The difference between <code>vector1</code> and <code>vector2</code>.","nodes":[{"pos":[0,69],"content":"The difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The difference between <code>vector1</code> and <code>vector2</code>."}],"pos":[67178,67248],"yaml":true},{"content":"Negates the specified vector.","nodes":[{"pos":[0,29],"content":"Negates the specified vector.","nodes":[{"content":"Negates the specified vector.","pos":[0,29]}]}],"pos":[68286,68316],"yaml":true},{"content":"The vector to negate.","nodes":[{"pos":[0,21],"content":"The vector to negate.","nodes":[{"content":"The vector to negate.","pos":[0,21]}]}],"pos":[69053,69075],"yaml":true},{"content":"A vector with <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values opposite of the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of <code>vector</code>.","nodes":[{"pos":[0,255],"content":"A vector with <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> values opposite of the <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph5\">vector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A vector with <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values opposite of the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of <code>vector</code>."}],"pos":[69140,69396],"yaml":true},{"content":"Converts a string representation of a vector into the equivalent <xref href=\"System.Windows.Vector\"></xref> structure.","nodes":[{"pos":[0,118],"content":"Converts a string representation of a vector into the equivalent <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> structure.","source":"Converts a string representation of a vector into the equivalent <xref href=\"System.Windows.Vector\"></xref> structure."}],"pos":[70344,70463],"yaml":true},{"content":"The string representation of the vector.","nodes":[{"pos":[0,40],"content":"The string representation of the vector.","nodes":[{"content":"The string representation of the vector.","pos":[0,40]}]}],"pos":[71113,71154],"yaml":true},{"content":"The equivalent <xref href=\"System.Windows.Vector\"></xref> structure.","nodes":[{"pos":[0,68],"content":"The equivalent <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> structure.","source":"The equivalent <xref href=\"System.Windows.Vector\"></xref> structure."}],"pos":[71219,71288],"yaml":true},{"content":"Subtracts the specified vector from another specified vector.","nodes":[{"pos":[0,61],"content":"Subtracts the specified vector from another specified vector.","nodes":[{"content":"Subtracts the specified vector from another specified vector.","pos":[0,61]}]}],"pos":[72335,72397],"yaml":true},{"content":"The vector from which <code>vector2</code> is subtracted.","nodes":[{"pos":[0,57],"content":"The vector from which <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector2</ph><ept id=\"p1\">&lt;/code&gt;</ept> is subtracted.","source":"The vector from which <code>vector2</code> is subtracted."}],"pos":[73124,73182],"yaml":true},{"content":"The vector to subtract from <code>vector1</code>.","nodes":[{"pos":[0,49],"content":"The vector to subtract from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The vector to subtract from <code>vector1</code>."}],"pos":[73253,73303],"yaml":true},{"content":"The difference between <code>vector1</code> and <code>vector2</code>.","nodes":[{"pos":[0,69],"content":"The difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">vector1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">vector2</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The difference between <code>vector1</code> and <code>vector2</code>."}],"pos":[73368,73438],"yaml":true},{"content":"Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure.","nodes":[{"pos":[0,95],"content":"Returns the string representation of this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> structure.","source":"Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure."}],"pos":[74333,74429],"yaml":true},{"content":"A string that represents the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of this <xref href=\"System.Windows.Vector\"></xref>.","nodes":[{"pos":[0,181],"content":"A string that represents the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> values of this <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph>.","source":"A string that represents the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of this <xref href=\"System.Windows.Vector\"></xref>."}],"pos":[75038,75220],"yaml":true},{"content":"Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure with the specified formatting information.","nodes":[{"pos":[0,137],"content":"Returns the string representation of this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph> structure with the specified formatting information.","source":"Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure with the specified formatting information."}],"pos":[76232,76370],"yaml":true},{"content":"The culture-specific formatting information.","nodes":[{"pos":[0,44],"content":"The culture-specific formatting information.","nodes":[{"content":"The culture-specific formatting information.","pos":[0,44]}]}],"pos":[76533,76578],"yaml":true},{"content":"A string that represents the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of this <xref href=\"System.Windows.Vector\"></xref>.","nodes":[{"pos":[0,181],"content":"A string that represents the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> values of this <ph id=\"ph3\">&lt;xref href=\"System.Windows.Vector\"&gt;&lt;/xref&gt;</ph>.","source":"A string that represents the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of this <xref href=\"System.Windows.Vector\"></xref>."}],"pos":[76635,76817],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Windows.Vector.X\"></xref> component of this vector.","nodes":[{"pos":[0,87],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> component of this vector.","source":"Gets or sets the <xref href=\"System.Windows.Vector.X\"></xref> component of this vector."}],"pos":[77666,77754],"yaml":true},{"content":"The <xref href=\"System.Windows.Vector.X\"></xref> component of this vector. The default value is 0.","nodes":[{"pos":[0,98],"content":"The <xref href=\"System.Windows.Vector.X\"></xref> component of this vector. The default value is 0.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.X\"&gt;&lt;/xref&gt;</ph> component of this vector.","pos":[0,74],"source":"The <xref href=\"System.Windows.Vector.X\"></xref> component of this vector."},{"content":"The default value is 0.","pos":[75,98]}]}],"pos":[78344,78443],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Windows.Vector.Y\"></xref> component of this vector.","nodes":[{"pos":[0,87],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> component of this vector.","source":"Gets or sets the <xref href=\"System.Windows.Vector.Y\"></xref> component of this vector."}],"pos":[79285,79373],"yaml":true},{"content":"The <xref href=\"System.Windows.Vector.Y\"></xref> component of this vector. The default value is 0.","nodes":[{"pos":[0,98],"content":"The <xref href=\"System.Windows.Vector.Y\"></xref> component of this vector. The default value is 0.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Vector.Y\"&gt;&lt;/xref&gt;</ph> component of this vector.","pos":[0,74],"source":"The <xref href=\"System.Windows.Vector.Y\"></xref> component of this vector."},{"content":"The default value is 0.","pos":[75,98]}]}],"pos":[79963,80062],"yaml":true},{"content":"This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\"></xref>.","nodes":[{"pos":[0,292],"content":"This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\"></xref>.","nodes":[{"content":"This member supports the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","pos":[0,165],"source":"This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code."},{"content":"For a description of this member, see <ph id=\"ph1\">&lt;xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\"&gt;&lt;/xref&gt;</ph>.","pos":[166,292],"source":" For a description of this member, see <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\"></xref>."}]}],"pos":[81246,81539],"yaml":true},{"content":"The string specifying the format to use.  \n  \n -or-  \n  \n `null` to use the default format defined for the type of the <xref href=\"System.IFormattable\"></xref> implementation.","nodes":[{"pos":[0,40],"content":"The string specifying the format to use.","nodes":[{"content":"The string specifying the format to use.","pos":[0,40]}]},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,175],"content":"<ph id=\"ph1\">`null`</ph> to use the default format defined for the type of the <ph id=\"ph2\">&lt;xref href=\"System.IFormattable\"&gt;&lt;/xref&gt;</ph> implementation.","source":"`null` to use the default format defined for the type of the <xref href=\"System.IFormattable\"></xref> implementation."}],"pos":[81712,81896],"yaml":true},{"content":"The `IFormatProvider` to use to format the value.  \n  \n -or-  \n  \n `null` to obtain the numeric format information from the current locale setting of the operating system.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">`IFormatProvider`</ph> to use to format the value.","source":"The `IFormatProvider` to use to format the value."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,171],"content":"<ph id=\"ph1\">`null`</ph> to obtain the numeric format information from the current locale setting of the operating system.","source":"`null` to obtain the numeric format information from the current locale setting of the operating system."}],"pos":[81969,82147],"yaml":true},{"content":"A string containing the value of the current instance in the specified format.","nodes":[{"pos":[0,78],"content":"A string containing the value of the current instance in the specified format.","nodes":[{"content":"A string containing the value of the current instance in the specified format.","pos":[0,78]}]}],"pos":[82204,82283],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Vector\n  commentId: T:System.Windows.Vector\n  id: Vector\n  children:\n  - System.Windows.Vector.#ctor(System.Double,System.Double)\n  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)\n  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.Divide(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.Equals(System.Windows.Vector)\n  - System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.Equals(System.Object)\n  - System.Windows.Vector.GetHashCode\n  - System.Windows.Vector.Length\n  - System.Windows.Vector.LengthSquared\n  - System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)\n  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.Negate\n  - System.Windows.Vector.Normalize\n  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)\n  - System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)\n  - System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)\n  - System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)\n  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)\n  - System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)\n  - System.Windows.Vector.Parse(System.String)\n  - System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)\n  - System.Windows.Vector.ToString\n  - System.Windows.Vector.ToString(System.IFormatProvider)\n  - System.Windows.Vector.X\n  - System.Windows.Vector.Y\n  - System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  langs:\n  - csharp\n  name: Vector\n  nameWithType: Vector\n  fullName: System.Windows.Vector\n  type: Struct\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Represents a displacement in 2-D space.\n  remarks: \"A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration). Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.  \\n  \\n In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.  \\n  \\n Some cultures might use the comma character as the decimal delimiter instead of the period character. XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter. You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.  \\n  \\n<a name=\\\"xamlAttributeUsage_Vector\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"x,y\\\"/>  \\n-or-  \\n<object property=\\\"x y\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_Vector\\\"></a>   \\n## XAML Values  \\n *x*  \\n The vector's X component. For more information, see the <xref:System.Windows.Vector.X%2A> property.  \\n  \\n *y*  \\n The vector's Y component. For more information, see the <xref:System.Windows.Vector.Y%2A> property.\"\n  example:\n  - \"The following example shows how to add two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]\\n [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))]\n\n      public struct Vector : IFormattable\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IFormattable\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.#ctor(System.Double,System.Double)\n  commentId: M:System.Windows.Vector.#ctor(System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double)'\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Vector(Double, Double)\n  nameWithType: Vector.Vector(Double, Double)\n  fullName: Vector.Vector(Double, Double)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to create two vectors and add them together.  \\n  \\n [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]\"\n  syntax:\n    content: public Vector (double x, double y);\n    parameters:\n    - id: x\n      type: System.Double\n      description: The <xref href=\"System.Windows.Vector.X\"></xref>-offset of the new <xref href=\"System.Windows.Vector\"></xref>.\n    - id: y\n      type: System.Double\n      description: The <xref href=\"System.Windows.Vector.Y\"></xref>-offset of the new <xref href=\"System.Windows.Vector\"></xref>.\n  overload: System.Windows.Vector.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)\n  commentId: M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)\n  id: Add(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Add(Vector, Point)\n  nameWithType: Vector.Add(Vector, Point)\n  fullName: Vector.Add(Vector, Point)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Translates the specified point by the specified vector and returns the resulting point.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The amount to translate the specified point.\n    - id: point\n      type: System.Windows.Point\n      description: The point to translate.\n    return:\n      type: System.Windows.Point\n      description: The result of translating <code>point</code> by <code>vector</code>.\n  overload: System.Windows.Vector.Add*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)\n  id: Add(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Add(Vector, Vector)\n  nameWithType: Vector.Add(Vector, Vector)\n  fullName: Vector.Add(Vector, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds two vectors and returns the result as a <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to add.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to add.\n    return:\n      type: System.Windows.Vector\n      description: The sum of <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.Add*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  id: AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: AngleBetween(Vector, Vector)\n  nameWithType: Vector.AngleBetween(Vector, Vector)\n  fullName: Vector.AngleBetween(Vector, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Retrieves the angle, expressed in degrees, between the two specified vectors.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]\"\n  syntax:\n    content: public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to evaluate.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to evaluate.\n    return:\n      type: System.Double\n      description: The angle, in degrees, between <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.AngleBetween*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  id: CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: CrossProduct(Vector, Vector)\n  nameWithType: Vector.CrossProduct(Vector, Vector)\n  fullName: Vector.CrossProduct(Vector, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the cross product of two vectors.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]\"\n  syntax:\n    content: public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to evaluate.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to evaluate.\n    return:\n      type: System.Double\n      description: \"The cross product of <code>vector1</code> and <code>vector2</code>. The following formula is used to calculate the cross product:  \\n  \\n <code>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</code>\"\n  overload: System.Windows.Vector.CrossProduct*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)\n  id: Determinant(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Determinant(Vector, Vector)\n  nameWithType: Vector.Determinant(Vector, Vector)\n  fullName: Vector.Determinant(Vector, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the determinant of two vectors.\n  remarks: ''\n  example:\n  - \"The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.  \\n  \\n [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]\"\n  syntax:\n    content: public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to evaluate.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to evaluate.\n    return:\n      type: System.Double\n      description: The determinant of <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.Determinant*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Divide(System.Windows.Vector,System.Double)\n  commentId: M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)\n  id: Divide(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Divide(Vector, Double)\n  nameWithType: Vector.Divide(Vector, Double)\n  fullName: Vector.Divide(Vector, Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Divides the specified vector by the specified scalar and returns the result as a <xref href=\"System.Windows.Vector\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.  \\n  \\n [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector structure to divide.\n    - id: scalar\n      type: System.Double\n      description: The amount by which <code>vector</code> is divided.\n    return:\n      type: System.Windows.Vector\n      description: The result of dividing <code>vector</code> by <code>scalar</code>.\n  overload: System.Windows.Vector.Divide*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Equals(System.Windows.Vector)\n  commentId: M:System.Windows.Vector.Equals(System.Windows.Vector)\n  id: Equals(System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Equals(Vector)\n  nameWithType: Vector.Equals(Vector)\n  fullName: Vector.Equals(Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two vectors for equality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.  \\n  \\n [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]\"\n  syntax:\n    content: public bool Equals (System.Windows.Vector value);\n    parameters:\n    - id: value\n      type: System.Windows.Vector\n      description: The vector to compare with this vector.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector; otherwise, `false`.'\n  overload: System.Windows.Vector.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)\n  id: Equals(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Equals(Vector, Vector)\n  nameWithType: Vector.Equals(Vector, Vector)\n  fullName: Vector.Equals(Vector, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares the two specified vectors for equality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.  \\n  \\n [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]\"\n  syntax:\n    content: public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to compare.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if t he <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, `false`.'\n  overload: System.Windows.Vector.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Equals(System.Object)\n  commentId: M:System.Windows.Vector.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Vector.Equals(Object)\n  fullName: Vector.Equals(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Determines whether the specified <xref href=\"System.Object\"></xref> is a <xref href=\"System.Windows.Vector\"></xref> structure and, if it is, whether it has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.  \\n  \\n [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]\"\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The vector to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>o</code> is a <xref href=\"System.Windows.Vector\"></xref> and has the same <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values as this vector; otherwise, `false`.'\n  overload: System.Windows.Vector.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.GetHashCode\n  commentId: M:System.Windows.Vector.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Vector.GetHashCode()\n  fullName: Vector.GetHashCode()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the hash code for this vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to get the hash code of a <xref:System.Windows.Vector>.  \\n  \\n [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for this instance.\n  overload: System.Windows.Vector.GetHashCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Length\n  commentId: P:System.Windows.Vector.Length\n  id: Length\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Length\n  nameWithType: Vector.Length\n  fullName: Vector.Length\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the length of this vector.\n  remarks: The length of a vector is sometimes referred to as the magnitude.\n  example:\n  - \"The following example shows how use this property to get the length of a vector.  \\n  \\n [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]\\n [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]\"\n  syntax:\n    content: public double Length { get; }\n    return:\n      type: System.Double\n      description: The length of this vector.\n  overload: System.Windows.Vector.Length*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.LengthSquared\n  commentId: P:System.Windows.Vector.LengthSquared\n  id: LengthSquared\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: LengthSquared\n  nameWithType: Vector.LengthSquared\n  fullName: Vector.LengthSquared\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets the square of the length of this vector.\n  remarks: The length of a vector is sometimes referred to as its magnitude.\n  example:\n  - \"The following example shows how to use this property to get the square of the length of a vector.  \\n  \\n [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]\\n [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]\"\n  syntax:\n    content: public double LengthSquared { get; }\n    return:\n      type: System.Double\n      description: The square of the <xref href=\"System.Windows.Vector.Length\"></xref> of this vector.\n  overload: System.Windows.Vector.LengthSquared*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)\n  id: Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Double, Vector)\n  nameWithType: Vector.Multiply(Double, Vector)\n  fullName: Vector.Multiply(Double, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified scalar by the specified vector and returns the resulting <xref href=\"System.Windows.Vector\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.  \\n  \\n [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);\n    parameters:\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>scalar</code> and <code>vector</code>.\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)\n  commentId: M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)\n  id: Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Vector, Double)\n  nameWithType: Vector.Multiply(Vector, Double)\n  fullName: Vector.Multiply(Vector, Double)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified vector by the specified scalar and returns the resulting <xref href=\"System.Windows.Vector\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.  \\n  \\n [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>vector</code> and <code>scalar</code>.\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  commentId: M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  id: Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Vector, Matrix)\n  nameWithType: Vector.Multiply(Vector, Matrix)\n  fullName: Vector.Multiply(Vector, Matrix)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.  \\n  \\n [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]\"\n  syntax:\n    content: public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector structure to transform.\n    - id: matrix\n      type: System.Windows.Media.Matrix\n      description: The transformation to apply to <code>vector</code>.\n    return:\n      type: System.Windows.Vector\n      description: The result of transforming <code>vector</code> by <code>matrix</code>.\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)\n  id: Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Multiply(Vector, Vector)\n  nameWithType: Vector.Multiply(Vector, Vector)\n  fullName: Vector.Multiply(Vector, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the dot product of the two specified vectors and returns the result as a <xref href=\"System.Double\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.  \\n  \\n [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]\"\n  syntax:\n    content: public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to multiply.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector structure to multiply.\n    return:\n      type: System.Double\n      description: \"A <xref href=\\\"System.Double\\\"></xref> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  \\n  \\n <code>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</code>\"\n  overload: System.Windows.Vector.Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Negate\n  commentId: M:System.Windows.Vector.Negate\n  id: Negate\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Negate()\n  nameWithType: Vector.Negate()\n  fullName: Vector.Negate()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to negate a vector.  \\n  \\n [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]\"\n  syntax:\n    content: public void Negate ();\n    parameters: []\n  overload: System.Windows.Vector.Negate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Normalize\n  commentId: M:System.Windows.Vector.Normalize\n  id: Normalize\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Normalize()\n  nameWithType: Vector.Normalize()\n  fullName: Vector.Normalize()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Normalizes this vector.\n  remarks: A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1. The resulting vector is often called a unit vector. A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.\n  example:\n  - \"The following example shows how to use this method to normalize a vector.  \\n  \\n [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]\"\n  syntax:\n    content: public void Normalize ();\n    parameters: []\n  overload: System.Windows.Vector.Normalize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)\n  id: op_Addition(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Addition(Vector, Vector)\n  nameWithType: Vector.op_Addition(Vector, Vector)\n  fullName: Vector.op_Addition(Vector, Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds two vectors and returns the result as a vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]\\n [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Addition (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to add.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to add.\n    return:\n      type: System.Windows.Vector\n      description: The sum of <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.op_Addition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)\n  commentId: M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)\n  id: op_Addition(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Addition(Vector, Point)\n  nameWithType: Vector.op_Addition(Vector, Point)\n  fullName: Vector.op_Addition(Vector, Point)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Translates a point by the specified vector and returns the resulting point.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]\\n [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]\"\n  syntax:\n    content: public static System.Windows.Point op_Addition (System.Windows.Vector vector, System.Windows.Point point);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector used to translate <code>point</code>.\n    - id: point\n      type: System.Windows.Point\n      description: The point to translate.\n    return:\n      type: System.Windows.Point\n      description: The result of translating <code>point</code> by <code>vector</code>.\n  overload: System.Windows.Vector.op_Addition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)\n  commentId: M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)\n  id: op_Division(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Division(Vector, Double)\n  nameWithType: Vector.op_Division(Vector, Double)\n  fullName: Vector.op_Division(Vector, Double)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Divides the specified vector by the specified scalar and returns the resulting vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]\\n [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Division (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to divide.\n    - id: scalar\n      type: System.Double\n      description: The scalar by which <code>vector</code> will be divided.\n    return:\n      type: System.Windows.Vector\n      description: The result of dividing <code>vector</code> by <code>scalar</code>.\n  overload: System.Windows.Vector.op_Division*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)\n  id: op_Equality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Equality(Vector, Vector)\n  nameWithType: Vector.op_Equality(Vector, Vector)\n  fullName: Vector.op_Equality(Vector, Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two vectors for equality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]\\n [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]\"\n  syntax:\n    content: public static bool op_Equality (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to compare.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, `false`.'\n  overload: System.Windows.Vector.op_Equality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)\n  commentId: M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point\n  id: op_Explicit(System.Windows.Vector to System.Windows.Point)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Explicit(Vector to Point)\n  nameWithType: Vector.op_Explicit(Vector to Point)\n  fullName: Vector.op_Explicit(Vector to Point)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public static System.Windows.Point op_Explicit (System.Windows.Vector vector);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: ''\n    return:\n      type: System.Windows.Point\n      description: ''\n  overload: System.Windows.Vector.op_Explicit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)\n  commentId: M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size\n  id: op_Explicit(System.Windows.Vector to System.Windows.Size)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Explicit(Vector to Size)\n  nameWithType: Vector.op_Explicit(Vector to Size)\n  fullName: Vector.op_Explicit(Vector to Size)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  syntax:\n    content: public static System.Windows.Size op_Explicit (System.Windows.Vector vector);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: ''\n    return:\n      type: System.Windows.Size\n      description: ''\n  overload: System.Windows.Vector.op_Explicit*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  id: op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Inequality(Vector, Vector)\n  nameWithType: Vector.op_Inequality(Vector, Vector)\n  fullName: Vector.op_Inequality(Vector, Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Compares two vectors for inequality.\n  remarks: A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values. Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.\n  example:\n  - \"The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]\\n [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]\"\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to compare.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> components of <code>vector1</code> and <code>vector2</code> are different; otherwise, `false`.'\n  overload: System.Windows.Vector.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  commentId: M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  id: op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Vector, Matrix)\n  nameWithType: Vector.op_Multiply(Vector, Matrix)\n  fullName: Vector.op_Multiply(Vector, Matrix)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Transforms the coordinate space of the specified vector using the specified <xref href=\"System.Windows.Media.Matrix\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]\\n [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to transform.\n    - id: matrix\n      type: System.Windows.Media.Matrix\n      description: The transformation to apply to <code>vector</code>.\n    return:\n      type: System.Windows.Vector\n      description: The result of transforming <code>vector</code> by <code>matrix</code>.\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  id: op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Vector, Vector)\n  nameWithType: Vector.op_Multiply(Vector, Vector)\n  fullName: Vector.op_Multiply(Vector, Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Calculates the dot product of the two specified vector structures and returns the result as a <xref href=\"System.Double\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]\\n [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]\"\n  syntax:\n    content: public static double op_Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The first vector to multiply.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The second vector to multiply.\n    return:\n      type: System.Double\n      description: \"Returns a <xref href=\\\"System.Double\\\"></xref> containing the scalar dot product of <code>vector1</code> and <code>vector2</code>, which is calculated using the following formula:  \\n  \\n <code>vector1.X * vector2.X + vector1.Y * vector2.Y</code>\"\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)\n  id: op_Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Double, Vector)\n  nameWithType: Vector.op_Multiply(Double, Vector)\n  fullName: Vector.op_Multiply(Double, Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified scalar by the specified vector and returns the resulting vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a scalar by a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]\\n [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Multiply (double scalar, System.Windows.Vector vector);\n    parameters:\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>scalar</code> and <code>vector</code>.\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)\n  commentId: M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)\n  id: op_Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Multiply(Vector, Double)\n  nameWithType: Vector.op_Multiply(Vector, Double)\n  fullName: Vector.op_Multiply(Vector, Double)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Multiplies the specified vector by the specified scalar and returns the resulting vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a scalar.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]\\n [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, double scalar);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to multiply.\n    - id: scalar\n      type: System.Double\n      description: The scalar to multiply.\n    return:\n      type: System.Windows.Vector\n      description: The result of multiplying <code>vector</code> and <code>scalar</code>.\n  overload: System.Windows.Vector.op_Multiply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  id: op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_Subtraction(Vector, Vector)\n  nameWithType: Vector.op_Subtraction(Vector, Vector)\n  fullName: Vector.op_Subtraction(Vector, Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Subtracts one specified vector from another.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]\\n [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_Subtraction (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The vector from which <code>vector2</code> is subtracted.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The vector to subtract from <code>vector1</code>.\n    return:\n      type: System.Windows.Vector\n      description: The difference between <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.op_Subtraction*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)\n  commentId: M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)\n  id: op_UnaryNegation(System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: op_UnaryNegation(Vector)\n  nameWithType: Vector.op_UnaryNegation(Vector)\n  fullName: Vector.op_UnaryNegation(Vector)\n  type: Operator\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Negates the specified vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]\\n [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]\"\n  syntax:\n    content: public static System.Windows.Vector op_UnaryNegation (System.Windows.Vector vector);\n    parameters:\n    - id: vector\n      type: System.Windows.Vector\n      description: The vector to negate.\n    return:\n      type: System.Windows.Vector\n      description: A vector with <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values opposite of the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of <code>vector</code>.\n  overload: System.Windows.Vector.op_UnaryNegation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Parse(System.String)\n  commentId: M:System.Windows.Vector.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: Vector.Parse(String)\n  fullName: Vector.Parse(String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Converts a string representation of a vector into the equivalent <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]\\n [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]\"\n  syntax:\n    content: public static System.Windows.Vector Parse (string source);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string representation of the vector.\n    return:\n      type: System.Windows.Vector\n      description: The equivalent <xref href=\"System.Windows.Vector\"></xref> structure.\n  overload: System.Windows.Vector.Parse*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)\n  commentId: M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)\n  id: Subtract(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Subtract(Vector, Vector)\n  nameWithType: Vector.Subtract(Vector, Vector)\n  fullName: Vector.Subtract(Vector, Vector)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Subtracts the specified vector from another specified vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.  \\n  \\n [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]\\n [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]\"\n  syntax:\n    content: public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);\n    parameters:\n    - id: vector1\n      type: System.Windows.Vector\n      description: The vector from which <code>vector2</code> is subtracted.\n    - id: vector2\n      type: System.Windows.Vector\n      description: The vector to subtract from <code>vector1</code>.\n    return:\n      type: System.Windows.Vector\n      description: The difference between <code>vector1</code> and <code>vector2</code>.\n  overload: System.Windows.Vector.Subtract*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.ToString\n  commentId: M:System.Windows.Vector.ToString\n  id: ToString\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Vector.ToString()\n  fullName: Vector.ToString()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure.\n  remarks: ''\n  example:\n  - \"The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.  \\n  \\n [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]\\n [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of this <xref href=\"System.Windows.Vector\"></xref>.\n  overload: System.Windows.Vector.ToString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.ToString(System.IFormatProvider)\n  commentId: M:System.Windows.Vector.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: ToString(IFormatProvider)\n  nameWithType: Vector.ToString(IFormatProvider)\n  fullName: Vector.ToString(IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns the string representation of this <xref href=\"System.Windows.Vector\"></xref> structure with the specified formatting information.\n  syntax:\n    content: public string ToString (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: The culture-specific formatting information.\n    return:\n      type: System.String\n      description: A string that represents the <xref href=\"System.Windows.Vector.X\"></xref> and <xref href=\"System.Windows.Vector.Y\"></xref> values of this <xref href=\"System.Windows.Vector\"></xref>.\n  overload: System.Windows.Vector.ToString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.X\n  commentId: P:System.Windows.Vector.X\n  id: X\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: X\n  nameWithType: Vector.X\n  fullName: Vector.X\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the <xref href=\"System.Windows.Vector.X\"></xref> component of this vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to check two <xref:System.Windows.Vector> structures for equality.  \\n  \\n [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]\\n [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]\"\n  syntax:\n    content: public double X { get; set; }\n    return:\n      type: System.Double\n      description: The <xref href=\"System.Windows.Vector.X\"></xref> component of this vector. The default value is 0.\n  overload: System.Windows.Vector.X*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.Y\n  commentId: P:System.Windows.Vector.Y\n  id: Y\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: Y\n  nameWithType: Vector.Y\n  fullName: Vector.Y\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the <xref href=\"System.Windows.Vector.Y\"></xref> component of this vector.\n  remarks: ''\n  example:\n  - \"The following example shows how to check two <xref:System.Windows.Vector> structures for equality.  \\n  \\n [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]\\n [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]\"\n  syntax:\n    content: public double Y { get; set; }\n    return:\n      type: System.Double\n      description: The <xref href=\"System.Windows.Vector.Y\"></xref> component of this vector. The default value is 0.\n  overload: System.Windows.Vector.Y*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  id: System#IFormattable#ToString(System.String,System.IFormatProvider)\n  isEii: true\n  parent: System.Windows.Vector\n  langs:\n  - csharp\n  name: IFormattable.ToString(String, IFormatProvider)\n  nameWithType: Vector.IFormattable.ToString(String, IFormatProvider)\n  fullName: Vector.IFormattable.ToString(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see <xref href=\"System.IFormattable.ToString(System.String,System.IFormatProvider)\"></xref>.\n  syntax:\n    content: string IFormattable.ToString (string format, IFormatProvider provider);\n    parameters:\n    - id: format\n      type: System.String\n      description: \"The string specifying the format to use.  \\n  \\n -or-  \\n  \\n `null` to use the default format defined for the type of the <xref href=\\\"System.IFormattable\\\"></xref> implementation.\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"The `IFormatProvider` to use to format the value.  \\n  \\n -or-  \\n  \\n `null` to obtain the numeric format information from the current locale setting of the operating system.\"\n    return:\n      type: System.String\n      description: A string containing the value of the current instance in the specified format.\n  overload: System.Windows.Vector.System#IFormattable#ToString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.Windows.Vector.#ctor(System.Double,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Vector(Double, Double)\n  nameWithType: Vector.Vector(Double, Double)\n  fullName: Vector.Vector(Double, Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Add(Vector, Point)\n  nameWithType: Vector.Add(Vector, Point)\n  fullName: Vector.Add(Vector, Point)\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.Vector\n  parent: System.Windows\n  isExternal: false\n  name: Vector\n  nameWithType: Vector\n  fullName: System.Windows.Vector\n- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Add(Vector, Vector)\n  nameWithType: Vector.Add(Vector, Vector)\n  fullName: Vector.Add(Vector, Vector)\n- uid: System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: AngleBetween(Vector, Vector)\n  nameWithType: Vector.AngleBetween(Vector, Vector)\n  fullName: Vector.AngleBetween(Vector, Vector)\n- uid: System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: CrossProduct(Vector, Vector)\n  nameWithType: Vector.CrossProduct(Vector, Vector)\n  fullName: Vector.CrossProduct(Vector, Vector)\n- uid: System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Determinant(Vector, Vector)\n  nameWithType: Vector.Determinant(Vector, Vector)\n  fullName: Vector.Determinant(Vector, Vector)\n- uid: System.Windows.Vector.Divide(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Divide(Vector, Double)\n  nameWithType: Vector.Divide(Vector, Double)\n  fullName: Vector.Divide(Vector, Double)\n- uid: System.Windows.Vector.Equals(System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals(Vector)\n  nameWithType: Vector.Equals(Vector)\n  fullName: Vector.Equals(Vector)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals(Vector, Vector)\n  nameWithType: Vector.Equals(Vector, Vector)\n  fullName: Vector.Equals(Vector, Vector)\n- uid: System.Windows.Vector.Equals(System.Object)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Vector.Equals(Object)\n  fullName: Vector.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Vector.GetHashCode\n  parent: System.Windows.Vector\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Vector.GetHashCode()\n  fullName: Vector.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Vector.Length\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Length\n  nameWithType: Vector.Length\n  fullName: Vector.Length\n- uid: System.Windows.Vector.LengthSquared\n  parent: System.Windows.Vector\n  isExternal: false\n  name: LengthSquared\n  nameWithType: Vector.LengthSquared\n  fullName: Vector.LengthSquared\n- uid: System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Double, Vector)\n  nameWithType: Vector.Multiply(Double, Vector)\n  fullName: Vector.Multiply(Double, Vector)\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Vector, Double)\n  nameWithType: Vector.Multiply(Vector, Double)\n  fullName: Vector.Multiply(Vector, Double)\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Vector, Matrix)\n  nameWithType: Vector.Multiply(Vector, Matrix)\n  fullName: Vector.Multiply(Vector, Matrix)\n- uid: System.Windows.Media.Matrix\n  parent: System.Windows.Media\n  isExternal: false\n  name: Matrix\n  nameWithType: Matrix\n  fullName: System.Windows.Media.Matrix\n- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply(Vector, Vector)\n  nameWithType: Vector.Multiply(Vector, Vector)\n  fullName: Vector.Multiply(Vector, Vector)\n- uid: System.Windows.Vector.Negate\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Negate()\n  nameWithType: Vector.Negate()\n  fullName: Vector.Negate()\n- uid: System.Windows.Vector.Normalize\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Normalize()\n  nameWithType: Vector.Normalize()\n  fullName: Vector.Normalize()\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Addition(Vector, Vector)\n  nameWithType: Vector.op_Addition(Vector, Vector)\n  fullName: Vector.op_Addition(Vector, Vector)\n- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Addition(Vector, Point)\n  nameWithType: Vector.op_Addition(Vector, Point)\n  fullName: Vector.op_Addition(Vector, Point)\n- uid: System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Division(Vector, Double)\n  nameWithType: Vector.op_Division(Vector, Double)\n  fullName: Vector.op_Division(Vector, Double)\n- uid: System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Equality(Vector, Vector)\n  nameWithType: Vector.op_Equality(Vector, Vector)\n  fullName: Vector.op_Equality(Vector, Vector)\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Explicit(Vector to Point)\n  nameWithType: Vector.op_Explicit(Vector to Point)\n  fullName: Vector.op_Explicit(Vector to Point)\n- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Explicit(Vector to Size)\n  nameWithType: Vector.op_Explicit(Vector to Size)\n  fullName: Vector.op_Explicit(Vector to Size)\n- uid: System.Windows.Size\n  parent: System.Windows\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: System.Windows.Size\n- uid: System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Inequality(Vector, Vector)\n  nameWithType: Vector.op_Inequality(Vector, Vector)\n  fullName: Vector.op_Inequality(Vector, Vector)\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Vector, Matrix)\n  nameWithType: Vector.op_Multiply(Vector, Matrix)\n  fullName: Vector.op_Multiply(Vector, Matrix)\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Vector, Vector)\n  nameWithType: Vector.op_Multiply(Vector, Vector)\n  fullName: Vector.op_Multiply(Vector, Vector)\n- uid: System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Double, Vector)\n  nameWithType: Vector.op_Multiply(Double, Vector)\n  fullName: Vector.op_Multiply(Double, Vector)\n- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply(Vector, Double)\n  nameWithType: Vector.op_Multiply(Vector, Double)\n  fullName: Vector.op_Multiply(Vector, Double)\n- uid: System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Subtraction(Vector, Vector)\n  nameWithType: Vector.op_Subtraction(Vector, Vector)\n  fullName: Vector.op_Subtraction(Vector, Vector)\n- uid: System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_UnaryNegation(Vector)\n  nameWithType: Vector.op_UnaryNegation(Vector)\n  fullName: Vector.op_UnaryNegation(Vector)\n- uid: System.Windows.Vector.Parse(System.String)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Parse(String)\n  nameWithType: Vector.Parse(String)\n  fullName: Vector.Parse(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Subtract(Vector, Vector)\n  nameWithType: Vector.Subtract(Vector, Vector)\n  fullName: Vector.Subtract(Vector, Vector)\n- uid: System.Windows.Vector.ToString\n  parent: System.Windows.Vector\n  isExternal: false\n  name: ToString()\n  nameWithType: Vector.ToString()\n  fullName: Vector.ToString()\n- uid: System.Windows.Vector.ToString(System.IFormatProvider)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: ToString(IFormatProvider)\n  nameWithType: Vector.ToString(IFormatProvider)\n  fullName: Vector.ToString(IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Windows.Vector.X\n  parent: System.Windows.Vector\n  isExternal: false\n  name: X\n  nameWithType: Vector.X\n  fullName: Vector.X\n- uid: System.Windows.Vector.Y\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Y\n  nameWithType: Vector.Y\n  fullName: Vector.Y\n- uid: System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  parent: System.Windows.Vector\n  isExternal: false\n  name: IFormattable.ToString(String, IFormatProvider)\n  nameWithType: Vector.IFormattable.ToString(String, IFormatProvider)\n  fullName: Vector.IFormattable.ToString(String, IFormatProvider)\n- uid: System.Windows.Vector.Equals*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Equals\n  nameWithType: Vector.Equals\n  fullName: Vector.Equals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.#ctor*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Vector\n  nameWithType: Vector.Vector\n  fullName: Vector.Vector\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Add*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Add\n  nameWithType: Vector.Add\n  fullName: Vector.Add\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.AngleBetween*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: AngleBetween\n  nameWithType: Vector.AngleBetween\n  fullName: Vector.AngleBetween\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.CrossProduct*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: CrossProduct\n  nameWithType: Vector.CrossProduct\n  fullName: Vector.CrossProduct\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Determinant*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Determinant\n  nameWithType: Vector.Determinant\n  fullName: Vector.Determinant\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Divide*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Divide\n  nameWithType: Vector.Divide\n  fullName: Vector.Divide\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.GetHashCode*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Vector.GetHashCode\n  fullName: Vector.GetHashCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Length*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Length\n  nameWithType: Vector.Length\n  fullName: Vector.Length\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.LengthSquared*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: LengthSquared\n  nameWithType: Vector.LengthSquared\n  fullName: Vector.LengthSquared\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Multiply*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Multiply\n  nameWithType: Vector.Multiply\n  fullName: Vector.Multiply\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Negate*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Negate\n  nameWithType: Vector.Negate\n  fullName: Vector.Negate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Normalize*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Normalize\n  nameWithType: Vector.Normalize\n  fullName: Vector.Normalize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Addition*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Addition\n  nameWithType: Vector.op_Addition\n  fullName: Vector.op_Addition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Division*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Division\n  nameWithType: Vector.op_Division\n  fullName: Vector.op_Division\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Equality*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Equality\n  nameWithType: Vector.op_Equality\n  fullName: Vector.op_Equality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Explicit*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Explicit\n  nameWithType: Vector.op_Explicit\n  fullName: Vector.op_Explicit\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Inequality*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Vector.op_Inequality\n  fullName: Vector.op_Inequality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Multiply*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Multiply\n  nameWithType: Vector.op_Multiply\n  fullName: Vector.op_Multiply\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_Subtraction*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: Vector.op_Subtraction\n  fullName: Vector.op_Subtraction\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.op_UnaryNegation*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: op_UnaryNegation\n  nameWithType: Vector.op_UnaryNegation\n  fullName: Vector.op_UnaryNegation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Parse*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Parse\n  nameWithType: Vector.Parse\n  fullName: Vector.Parse\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Subtract*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Subtract\n  nameWithType: Vector.Subtract\n  fullName: Vector.Subtract\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.ToString*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: ToString\n  nameWithType: Vector.ToString\n  fullName: Vector.ToString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.X*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: X\n  nameWithType: Vector.X\n  fullName: Vector.X\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.Y*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: Y\n  nameWithType: Vector.Y\n  fullName: Vector.Y\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.Windows.Vector.System#IFormattable#ToString*\n  parent: System.Windows.Vector\n  isExternal: false\n  name: System.IFormattable.ToString\n  nameWithType: Vector.System.IFormattable.ToString\n  fullName: Vector.System.IFormattable.ToString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Vector.xml\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  nameWithType: IFormattable\n  fullName: System.IFormattable\n"}