### YamlMime:ManagedReference
items:
- uid: System.Windows.FrameworkPropertyMetadata
  commentId: T:System.Windows.FrameworkPropertyMetadata
  id: FrameworkPropertyMetadata
  children:
  - System.Windows.FrameworkPropertyMetadata.#ctor
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  - System.Windows.FrameworkPropertyMetadata.AffectsArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsRender
  - System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  - System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  - System.Windows.FrameworkPropertyMetadata.Inherits
  - System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  - System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  - System.Windows.FrameworkPropertyMetadata.Journal
  - System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  - System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  langs:
  - csharp
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata
  fullName: System.Windows.FrameworkPropertyMetadata
  type: Class
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.
  remarks: "This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) . For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>. This is true both for existing dependency properties and for most custom dependency property scenarios.  \n  \n The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.  \n  \n Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter. The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed. From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.  \n  \n<a name=\"xamlTextUsage_FrameworkPropertyMetadata\"></a>   \n## XAML Text Usage  \n This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type. That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>. If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).  \n  \n [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: 'public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata'
  inheritance:
  - System.Object
  - System.Windows.PropertyMetadata
  - System.Windows.UIPropertyMetadata
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  - System.Windows.UIPropertyMetadata.IsAnimationProhibited
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class.
  remarks: This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults. <xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.
  syntax:
    content: public FrameworkPropertyMetadata ();
    parameters: []
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the specified default value.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a value of a specific type.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  ms.author: kempb
  manager: ghogen
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the specified <xref href="System.Windows.PropertyChangedCallback"></xref> callback.
  remarks: ''
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the provided default value and framework-level metadata options.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \n  \n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a value of a specific type.
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: The metadata option flags (a combination of <xref href="System.Windows.FrameworkPropertyMetadataOptions"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object, PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the provided default value and specified <xref href="System.Windows.PropertyChangedCallback"></xref> callback.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a value of a specific type.
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the specified callbacks.
  remarks: This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: A reference to a handler implementation will be called whenever the property system calls <xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></xref> for this dependency property.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the provided default value and framework metadata options, and specified <xref href="System.Windows.PropertyChangedCallback"></xref> callback.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \n  \n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a value of a specific type.
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: The metadata option flags (a combination of <xref href="System.Windows.FrameworkPropertyMetadataOptions"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  ms.author: kempb
  manager: ghogen
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the provided default value and specified callbacks.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a specific type.
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: A reference to a handler implementation that will be called whenever the property system calls <xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></xref> for this dependency property.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the provided default value and framework metadata options, and specified callbacks.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \n  \n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a specific type.
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: The metadata option flags (a combination of <xref href="System.Windows.FrameworkPropertyMetadataOptions"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: A reference to a handler implementation that will be called whenever the property system calls <xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></xref> against this property.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \n  \n The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.  \n  \n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a specific type.
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: The metadata option flags (a combination of <xref href="System.Windows.FrameworkPropertyMetadataOptions"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: A reference to a handler implementation that will be called whenever the property system calls <xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></xref> on this dependency property.
    - id: isAnimationProhibited
      type: System.Boolean
      description: '`true` to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. `false` to permit animating the property. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  commentId: M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean, UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean, UpdateSourceTrigger)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean, UpdateSourceTrigger)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.FrameworkPropertyMetadata"></xref> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.
  remarks: "The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation. The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.  \n  \n The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.  \n  \n The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.  \n  \n For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).  \n  \n Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`. You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation."
  example:
  - "[!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  \n[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);
    parameters:
    - id: defaultValue
      type: System.Object
      description: The default value of the dependency property, usually provided as a specific type.
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: The metadata option flags (a combination of <xref href="System.Windows.FrameworkPropertyMetadataOptions"></xref> values). These options specify characteristics of the dependency property that interact with systems such as layout or data binding.
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: A reference to a handler implementation that the property system will call whenever the effective value of the property changes.
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: A reference to a handler implementation that will be called whenever the property system calls <xref href="System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></xref> against this property.
    - id: isAnimationProhibited
      type: System.Boolean
      description: '`true` to prevent the property system from animating the property that this metadata is applied to. Such properties will raise a run-time exception originating from the property system if animations of them are attempted. The default is `false`.'
    - id: defaultUpdateSourceTrigger
      type: System.Windows.Data.UpdateSourceTrigger
      description: The <xref href="System.Windows.Data.UpdateSourceTrigger"></xref> to use when bindings for this property are applied that have their <xref href="System.Windows.Data.UpdateSourceTrigger"></xref> set to <xref href="System.Windows.Data.UpdateSourceTrigger.Default"></xref>.
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>defaultValue</code> is set to <xref href="System.Windows.DependencyProperty.UnsetValue"></xref>.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsArrange
  id: AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: FrameworkPropertyMetadata.AffectsArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.
  remarks: "<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>). Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \n  \n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.  \n  \n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_AffectsArrange\"></a>   \n## XAML Text Usage  \n Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsArrange { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  id: AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: FrameworkPropertyMetadata.AffectsMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.
  remarks: "<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \n  \n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.  \n  \n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_AffectsMeasure\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsMeasure { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  ms.author: kempb
  manager: ghogen
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  id: AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: FrameworkPropertyMetadata.AffectsParentArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.
  remarks: "<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.  \n  \n Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`. That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate. <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class. In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering. The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host. For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed. Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`. Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.  \n  \n Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \n  \n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.  \n  \n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_AffectsParentArrange\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool AffectsParentArrange { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  id: AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: FrameworkPropertyMetadata.AffectsParentMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.
  remarks: "<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \n  \n Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`. That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate. <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class. In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering. The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host. For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size. Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.  \n  \n Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic. For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.  \n  \n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.  \n  \n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_AffectsParentMeasure\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool AffectsParentMeasure { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, `false`.The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  commentId: P:System.Windows.FrameworkPropertyMetadata.AffectsRender
  id: AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: FrameworkPropertyMetadata.AffectsRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.
  remarks: "<xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element. As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element. Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.  \n  \n Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.  \n  \n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_AffectsRender\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsRender { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the dependency property on which this metadata exists affects rendering; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  commentId: P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  id: BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: FrameworkPropertyMetadata.BindsTwoWayByDefault
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether the property binds two-way by default.
  remarks: "In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.  \n  \n In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>.  \n  \n This property only reports the default binding update characteristics of the dependency property in general. Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.  \n  \n Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_BindsTwoWayByDefault\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool BindsTwoWayByDefault { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the dependency property on which this metadata exists binds two-way by default; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  commentId: P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  id: DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets the default for <xref href="System.Windows.Data.UpdateSourceTrigger"></xref> to use when bindings for the property with this metadata are applied, which have their <xref href="System.Windows.Data.UpdateSourceTrigger"></xref> set to <xref href="System.Windows.Data.UpdateSourceTrigger.Default"></xref>.
  remarks: "Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_DefaultUpdateSourceTrigger\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: A value of the enumeration, other than <xref href="System.Windows.Data.UpdateSourceTrigger.Default"></xref>.
  overload: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: This property is set to <xref href="System.Windows.Data.UpdateSourceTrigger.Default"></xref>; the value you set is supposed to become the default when requested by bindings.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  commentId: P:System.Windows.FrameworkPropertyMetadata.Inherits
  id: Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: FrameworkPropertyMetadata.Inherits
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether the value of the dependency property is inheritable.
  remarks: "Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property. Property value inheritance is not enabled by default, and enabling it does have some performance implications. For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).  \n  \n> [!NOTE]\n>  Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.  \n  \n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_Inherits\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool Inherits { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the property value is inheritable; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.Inherits*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  commentId: P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  id: IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: FrameworkPropertyMetadata.IsDataBindingAllowed
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets a value that indicates whether data binding is supported for the dependency property.
  remarks: "This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata. This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.  \n  \n If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).  \n  \n<a name=\"xamlTextUsage_IsDataBindingAllowed\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool IsDataBindingAllowed { get; }
    return:
      type: System.Boolean
      description: '`true` if data binding is supported on the dependency property to which this metadata applies; otherwise, `false`. The default is `true`.'
  overload: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  commentId: P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  id: IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: FrameworkPropertyMetadata.IsNotDataBindable
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether the dependency property supports data binding.
  remarks: "Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties. The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful. Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding. Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.  \n  \n Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>. This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply. To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead. <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.  \n  \n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_IsNotDataBindable\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool IsNotDataBindable { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the property does not support data binding; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  commentId: P:System.Windows.FrameworkPropertyMetadata.Journal
  id: Journal
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: FrameworkPropertyMetadata.Journal
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.
  remarks: "Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_Journal\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool Journal { get; set; }
    return:
      type: System.Boolean
      description: '`true` if journaling should be performed on the dependency property that this metadata is applied to; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.Journal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  commentId: M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata, DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata, DependencyProperty)
  fullName: FrameworkPropertyMetadata.Merge(PropertyMetadata, DependencyProperty)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Enables a merge of the source metadata with base metadata.
  remarks: This method is used internally when metadata is being overridden.
  syntax:
    content: protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: The base metadata to merge.
    - id: dp
      type: System.Windows.DependencyProperty
      description: The dependency property this metadata is being applied to.
  overload: System.Windows.FrameworkPropertyMetadata.Merge*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  commentId: M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty, Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty, Type)
  fullName: FrameworkPropertyMetadata.OnApply(DependencyProperty, Type)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.
  remarks: Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.
  syntax:
    content: protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: The dependency property to which the metadata has been applied.
    - id: targetType
      type: System.Type
      description: The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value can be `null`.
  overload: System.Windows.FrameworkPropertyMetadata.OnApply*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  commentId: P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  id: OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.
  remarks: "This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries. The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>. The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control. Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.  \n  \n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_OverridesInheritanceBehavior\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool OverridesInheritanceBehavior { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the property value inheritance should span across certain content boundaries; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  commentId: P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  id: SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.
  remarks: "This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own. Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass. Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.  \n  \n Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write. This is so they can be adjusted after initialization of the instance. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable. Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n<a name=\"xamlTextUsage_SubPropertiesDoNotAffectRender\"></a>   \n## XAML Text Usage  \n Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool SubPropertiesDoNotAffectRender { get; set; }
    return:
      type: System.Boolean
      description: '`true` if changes to sub-property values do not affect rendering if changed; otherwise, `false`. The default is `false`.'
  overload: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.Windows.UIPropertyMetadata
  parent: System.Windows
  isExternal: false
  name: UIPropertyMetadata
  nameWithType: UIPropertyMetadata
  fullName: System.Windows.UIPropertyMetadata
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions)
- uid: System.Windows.FrameworkPropertyMetadataOptions
  parent: System.Windows
  isExternal: false
  name: FrameworkPropertyMetadataOptions
  nameWithType: FrameworkPropertyMetadataOptions
  fullName: System.Windows.FrameworkPropertyMetadataOptions
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object, PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback, CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean, UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean, UpdateSourceTrigger)
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object, FrameworkPropertyMetadataOptions, PropertyChangedCallback, CoerceValueCallback, Boolean, UpdateSourceTrigger)
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: FrameworkPropertyMetadata.BindsTwoWayByDefault
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: FrameworkPropertyMetadata.Inherits
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: FrameworkPropertyMetadata.IsDataBindingAllowed
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: FrameworkPropertyMetadata.IsNotDataBindable
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: FrameworkPropertyMetadata.Journal
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata, DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata, DependencyProperty)
  fullName: FrameworkPropertyMetadata.Merge(PropertyMetadata, DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty, Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty, Type)
  fullName: FrameworkPropertyMetadata.OnApply(DependencyProperty, Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: FrameworkPropertyMetadata.OverridesInheritanceBehavior
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
- uid: System.Windows.FrameworkPropertyMetadata.#ctor*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata
  fullName: FrameworkPropertyMetadata.FrameworkPropertyMetadata
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: FrameworkPropertyMetadata.AffectsArrange
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: FrameworkPropertyMetadata.AffectsMeasure
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: FrameworkPropertyMetadata.AffectsParentArrange
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: FrameworkPropertyMetadata.AffectsParentMeasure
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: FrameworkPropertyMetadata.AffectsRender
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: FrameworkPropertyMetadata.BindsTwoWayByDefault
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.Inherits*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: FrameworkPropertyMetadata.Inherits
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: FrameworkPropertyMetadata.IsDataBindingAllowed
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: FrameworkPropertyMetadata.IsNotDataBindable
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.Journal*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: FrameworkPropertyMetadata.Journal
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.Merge*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: FrameworkPropertyMetadata.Merge
  fullName: FrameworkPropertyMetadata.Merge
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.OnApply*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: FrameworkPropertyMetadata.OnApply
  fullName: FrameworkPropertyMetadata.OnApply
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/FrameworkPropertyMetadata.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.UIPropertyMetadata.IsAnimationProhibited
  parent: System.Windows.UIPropertyMetadata
  isExternal: false
  name: IsAnimationProhibited
  nameWithType: UIPropertyMetadata.IsAnimationProhibited
  fullName: UIPropertyMetadata.IsAnimationProhibited
