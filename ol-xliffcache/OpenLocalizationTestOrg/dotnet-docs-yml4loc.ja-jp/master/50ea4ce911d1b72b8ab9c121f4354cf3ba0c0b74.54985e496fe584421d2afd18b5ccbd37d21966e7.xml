{"nodes":[{"content":"Represents errors that occur during application execution.","nodes":[{"pos":[0,58],"content":"Represents errors that occur during application execution.","nodes":[{"content":"Represents errors that occur during application execution.","pos":[0,58]}]}],"pos":[1079,1138],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n This class is the base class for all exceptions. When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error. After an exception is thrown, it is handled by the application or by the default exception handler.  \n  \n In this section:  \n  \n [Errors and exceptions](#Errors)   \n [Try/catch blocks](#TryCatch)   \n [Exception type features](#Features)   \n [Exception class properties](#Properties)   \n [Performance considerations](#Performance)   \n [Re-throwing an exception](#Rethrow)   \n [Choosing standard exceptions](#Standard)   \n [Implementing custom exceptions](#Custom)  \n  \n<a name=\"Errors\"></a>   \n## Errors and exceptions  \n Run-time errors can occur for a variety of reasons. However, not all errors should be handled as exceptions in your code. Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.  \n  \n-   **Usage errors.** A usage error represents an error in program logic that can result in an exception. However, the error should be addressed not through exception handling but by modifying the faulty code. For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method in the following example assumes that the `obj` argument must always be non-null.  \n  \n     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]\n     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  \n  \n     The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=fullName> override and then re-compiling. The following example contains the corrected source code that handles a `null` argument.  \n  \n     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]\n     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  \n  \n     Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method to identify usage errors in both debug and release builds. For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1).  \n  \n-   **Program errors.** A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.  \n  \n     In some cases, a program error may reflect an expected or routine error condition. In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation. For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=fullName> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=fullName> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value. Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.  \n  \n     In other cases, a program error reflects an unexpected error condition that can be handled in your code. For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted. In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception. In these cases, you should use exception handling to recover from the error.  \n  \n-   **System failures.** A system failure is a run-time error that cannot be handled programmatically in a meaningful way. For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory. Ordinarily, system failures are not handled by using exception handling. Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=fullName> and call the <xref:System.Environment.FailFast%2A?displayProperty=fullName> method to log exception information and notify the user of the failure before the application terminates.  \n  \n<a name=\"TryCatch\"></a>   \n## Try/catch blocks  \n The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks. There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.  \n  \n If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block. Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block. Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.  \n  \n When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception. A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from. The system stops searching after it finds the first `catch` block that handles the exception. For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section. A catch block that handles `System.Exception` is specified last.  \n  \n If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched. If no `catch` block for the exception is found, the system searches previous nesting levels in the current call. If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception. The search of the call stack continues until the exception is handled or until no more frames exist on the call stack. If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.  \n  \n<a name=\"Features\"></a>   \n## Exception type features  \n Exception types support the following features:  \n  \n-   Human-readable text that describes the error. When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem. This text message is held in the <xref:System.Exception.Message%2A> property of the exception object. During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception. If no error message argument is supplied to the constructor, the default error message is used. For more information, see the <xref:System.Exception.Message%2A> property.  \n  \n-   The state of the call stack when the exception was thrown. The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code. The stack trace lists all the called methods and the line numbers in the source file where the calls are made.  \n  \n<a name=\"Properties\"></a>   \n## Exception class properties  \n The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.  \n  \n When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information. The outer exception is thrown in response to this inner exception. The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately. Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.  \n  \n The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class. For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.  \n  \n To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.  \n  \n The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.  \n  \n For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.  \n  \n<a name=\"Performance\"></a>   \n## Performance considerations  \n Throwing or handling an exception consumes a significant amount of system resources and execution time. Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control. For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters. An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred. Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data. Instead, provide a retry mechanism so users can enter valid input. Nor should you use exceptions to handle usage errors. Instead, use [assertions](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1) to identify and correct usage errors.  \n  \n In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.  \n  \n<a name=\"Rethrow\"></a>   \n## Re-throwing an exception  \n In many cases, an exception handler simply wants to pass the exception on to the caller. This most often occurs in:  \n  \n-   A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.  \n  \n-   An application or library that encounters a fatal exception. The exception handler can log the exception and then re-throw the exception.  \n  \n The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression. This ensures that all call stack information is preserved when the exception is propagated to the caller. The following example illustrates this. A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> without validating its arguments beforehand.  \n  \n [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]\n [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  \n  \n A caller then calls `FindOccurrences` twice. In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> method to throw an <xref:System.ArgumentNullException> exception. This exception is handled by the `FindOccurrences` method and passed back to the caller. Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.  \n  \n [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]\n [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  \n  \n In contrast, if the exception is re-thrown by using the  \n  \n```csharp  \nthrow e  \n```  \n  \n```vb  \nThrow e  \n```  \n  \n statement, the full call stack is not preserved, and the example would generate the following output:  \n  \n```Output  \n  \n'a' occurs at the following character positions: 4, 7, 15  \n  \nAn exception (ArgumentNullException) occurred.  \nMessage:  \n   Value cannot be null.  \nParameter name: value  \n  \nStack Trace:  \n      at Library.FindOccurrences(String s, String f)  \n   at Example.Main()  \n  \n```  \n  \n A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception. The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception. In this case, the throw statement is:  \n  \n [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]\n [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  \n  \n The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.  \n  \n [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]\n [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  \n  \n<a name=\"Standard\"></a>   \n## Choosing standard exceptions  \n When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception. You should use a standard exception type under these two conditions:  \n  \n-   You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method). Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>. The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it. For more information, see the <xref:System.Exception.Message%2A> property.  \n  \n-   You are handling an error that can be communicated to the caller with an existing .NET Framework exception. You should throw the most derived exception possible. For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.  \n  \n The following table lists common exception types and the conditions under which you would throw them.  \n  \n|Exception|Condition|  \n|---------------|---------------|  \n|<xref:System.ArgumentException>|A non-null argument that is passed to a method is invalid.|  \n|<xref:System.ArgumentNullException>|An argument that is passed to a method is `null`.|  \n|<xref:System.ArgumentOutOfRangeException>|An argument is outside the range of valid values.|  \n|<xref:System.IO.DirectoryNotFoundException>|Part of a directory path is not valid.|  \n|<xref:System.DivideByZeroException>|The denominator in an integer or <xref:System.Decimal> division operation is zero.|  \n|<xref:System.IO.DriveNotFoundException>|A drive is unavailable or does not exist.|  \n|<xref:System.IO.FileNotFoundException>|A file does not exist.|  \n|<xref:System.FormatException>|A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.|  \n|<xref:System.IndexOutOfRangeException>|An index is outside the bounds of an array or collection.|  \n|<xref:System.InvalidOperationException>|A method call is invalid in an object's current state.|  \n|<xref:System.Collections.Generic.KeyNotFoundException>|The specified key for accessing a member in a collection cannot be found.|  \n|<xref:System.NotImplementedException>|A method or operation is not implemented.|  \n|<xref:System.NotSupportedException>|A method or operation is not supported.|  \n|<xref:System.ObjectDisposedException>|An operation is performed on an object that has been disposed.|  \n|<xref:System.OverflowException>|An arithmetic, casting, or conversion operation results in an overflow.|  \n|<xref:System.IO.PathTooLongException>|A path or file name exceeds the maximum system-defined length.|  \n|<xref:System.PlatformNotSupportedException>|The operation is not supported on the current platform.|  \n|<xref:System.RankException>|An array with the wrong number of dimensions is passed to a method.|  \n|<xref:System.TimeoutException>|The time interval allotted to an operation has expired.|  \n|<xref:System.UriFormatException>|An invalid Uniform Resource Identifier (URI) is used.|  \n  \n<a name=\"Custom\"></a>   \n## Implementing custom exceptions  \n In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:  \n  \n-   When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.  \n  \n-   When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception. For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.  \n  \n The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework. Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.  \n  \n To define your own exception class:  \n  \n1.  Define a class that inherits from <xref:System.Exception>. If necessary, define any unique members needed by your class to provide additional information about the exception. For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.  \n  \n2.  If necessary, override any inherited members whose functionality you want to change or modify. Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.  \n  \n3.  Determine whether your custom exception object is serializable. Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context. To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.  \n  \n4.  Define the constructors of your exception class. Typically, exception classes have one or more of the following constructors:  \n  \n    -   <xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.  \n  \n    -   <xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.  \n  \n    -   <xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.  \n  \n    -   <xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data. You should implement this constructor if you've chosen to make your exception object serializable.  \n  \n The following example illustrates the use of a custom exception class. It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime. The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception. Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.  Each constructor calls a base class constructor in addition to preserving the value of the non-prime number. The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.  \n  \n [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]\n [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  \n  \n The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor. The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.  \n  \n [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]\n [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  \n  \n The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries. In both cases, the exception is thrown and successfully handled in client code.  \n  \n [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]\n [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  \n  \n## Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  \n In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames. Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.","nodes":[{"pos":[2,408],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,404],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162)</ept>.","pos":[1,167],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[168,396],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[415,721],"content":"This class is the base class for all exceptions. When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error. After an exception is thrown, it is handled by the application or by the default exception handler.","nodes":[{"content":"This class is the base class for all exceptions. When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error. After an exception is thrown, it is handled by the application or by the default exception handler.","pos":[0,306],"nodes":[{"content":"This class is the base class for all exceptions.","pos":[0,48]},{"content":"When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.","pos":[49,206]},{"content":"After an exception is thrown, it is handled by the application or by the default exception handler.","pos":[207,306]}]}]},{"pos":[728,744],"content":"In this section:","nodes":[{"content":"In this section:","pos":[0,16]}]},{"pos":[751,1084],"content":"[Errors and exceptions](#Errors)   \n [Try/catch blocks](#TryCatch)   \n [Exception type features](#Features)   \n [Exception class properties](#Properties)   \n [Performance considerations](#Performance)   \n [Re-throwing an exception](#Rethrow)   \n [Choosing standard exceptions](#Standard)   \n [Implementing custom exceptions](#Custom)","nodes":[{"content":"<bpt id=\"p1\">[</bpt>Errors and exceptions<ept id=\"p1\">](#Errors)</ept><ph id=\"ph1\"> </ph>","pos":[0,33],"source":"[Errors and exceptions](#Errors) "},{"content":"<bpt id=\"p1\"> [</bpt>Try/catch blocks<ept id=\"p1\">](#TryCatch)</ept><ph id=\"ph1\"> </ph>","pos":[36,67],"source":" [Try/catch blocks](#TryCatch) "},{"content":"<bpt id=\"p1\"> [</bpt>Exception type features<ept id=\"p1\">](#Features)</ept><ph id=\"ph1\"> </ph>","pos":[70,108],"source":" [Exception type features](#Features) "},{"content":"<bpt id=\"p1\"> [</bpt>Exception class properties<ept id=\"p1\">](#Properties)</ept><ph id=\"ph1\"> </ph>","pos":[111,154],"source":" [Exception class properties](#Properties) "},{"content":"<bpt id=\"p1\"> [</bpt>Performance considerations<ept id=\"p1\">](#Performance)</ept><ph id=\"ph1\"> </ph>","pos":[157,201],"source":" [Performance considerations](#Performance) "},{"content":"<bpt id=\"p1\"> [</bpt>Re-throwing an exception<ept id=\"p1\">](#Rethrow)</ept><ph id=\"ph1\"> </ph>","pos":[204,242],"source":" [Re-throwing an exception](#Rethrow) "},{"content":"<bpt id=\"p1\"> [</bpt>Choosing standard exceptions<ept id=\"p1\">](#Standard)</ept><ph id=\"ph1\"> </ph>","pos":[245,288],"source":" [Choosing standard exceptions](#Standard) "},{"content":"<bpt id=\"p1\"> [</bpt>Implementing custom exceptions<ept id=\"p1\">](#Custom)</ept>","pos":[291,333],"source":" [Implementing custom exceptions](#Custom)"}]},{"pos":[1118,1139],"content":"Errors and exceptions","linkify":"Errors and exceptions","nodes":[{"content":"Errors and exceptions","pos":[0,21]}]},{"pos":[1143,1371],"content":"Run-time errors can occur for a variety of reasons. However, not all errors should be handled as exceptions in your code. Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.","nodes":[{"content":"Run-time errors can occur for a variety of reasons. However, not all errors should be handled as exceptions in your code. Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.","pos":[0,228],"nodes":[{"content":"Run-time errors can occur for a variety of reasons.","pos":[0,51]},{"content":"However, not all errors should be handled as exceptions in your code.","pos":[52,121]},{"content":"Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.","pos":[122,228]}]}]},{"pos":[1381,1780],"content":"**Usage errors.** A usage error represents an error in program logic that can result in an exception. However, the error should be addressed not through exception handling but by modifying the faulty code. For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method in the following example assumes that the `obj` argument must always be non-null.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Usage errors.<ept id=\"p1\">**</ept>","pos":[0,17],"source":"**Usage errors.**"},{"content":"A usage error represents an error in program logic that can result in an exception.","pos":[18,101]},{"content":"However, the error should be addressed not through exception handling but by modifying the faulty code.","pos":[102,205]},{"content":"For example, the override of the <ph id=\"ph1\">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=fullName&gt;</ph> method in the following example assumes that the <ph id=\"ph2\">`obj`</ph> argument must always be non-null.","pos":[206,399],"source":" For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method in the following example assumes that the `obj` argument must always be non-null."}]},{"pos":[1791,2066],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]\n [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]"},{"pos":[2077,2432],"content":"The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=fullName> override and then re-compiling. The following example contains the corrected source code that handles a `null` argument.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.NullReferenceException&gt;</ph> exception that results when <ph id=\"ph2\">`obj`</ph> is <ph id=\"ph3\">`null`</ph> can be eliminated by modifying the source code to explicitly test for null before calling the <ph id=\"ph4\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph> override and then re-compiling.","pos":[0,266],"source":"The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=fullName> override and then re-compiling."},{"content":"The following example contains the corrected source code that handles a <ph id=\"ph1\">`null`</ph> argument.","pos":[267,355],"source":" The following example contains the corrected source code that handles a `null` argument."}]},{"pos":[2443,2718],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]\n [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]"},{"pos":[2729,3183],"content":"Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method to identify usage errors in both debug and release builds. For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1).","nodes":[{"content":"Instead of using exception handling for usage errors, you can use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName&gt;</ph> method to identify usage errors in debug builds, and the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName&gt;</ph> method to identify usage errors in both debug and release builds.","pos":[0,326],"source":"Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method to identify usage errors in both debug and release builds."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Assertions in Managed Code<ept id=\"p1\">](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1)</ept>.","pos":[327,454],"source":" For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1)."}]},{"pos":[3193,3309],"content":"**Program errors.** A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Program errors.<ept id=\"p1\">**</ept>","pos":[0,19],"source":"**Program errors.**"},{"content":"A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.","pos":[20,116]}]},{"pos":[3320,4298],"content":"In some cases, a program error may reflect an expected or routine error condition. In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation. For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=fullName> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=fullName> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value. Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.","nodes":[{"content":"In some cases, a program error may reflect an expected or routine error condition. In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation. For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=fullName> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=fullName> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value. Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.","pos":[0,978],"nodes":[{"content":"In some cases, a program error may reflect an expected or routine error condition.","pos":[0,82]},{"content":"In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.","pos":[83,207]},{"content":"For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <ph id=\"ph1\">&lt;xref:System.DateTime.TryParseExact%2A?displayProperty=fullName&gt;</ph> method, which returns a <ph id=\"ph2\">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the parse operation succeeded, instead of using the <ph id=\"ph3\">&lt;xref:System.DateTime.ParseExact%2A?displayProperty=fullName&gt;</ph> method, which throws a <ph id=\"ph4\">&lt;xref:System.FormatException&gt;</ph> exception if the date string cannot be converted to a <ph id=\"ph5\">&lt;xref:System.DateTime&gt;</ph> value.","pos":[208,720],"source":" For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=fullName> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=fullName> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value."},{"content":"Similarly, if a user tries to open a file that does not exist, you can first call the <ph id=\"ph1\">&lt;xref:System.IO.File.Exists%2A?displayProperty=fullName&gt;</ph> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.","pos":[721,978],"source":" Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it."}]}]},{"pos":[4309,4830],"content":"In other cases, a program error reflects an unexpected error condition that can be handled in your code. For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted. In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception. In these cases, you should use exception handling to recover from the error.","nodes":[{"content":"In other cases, a program error reflects an unexpected error condition that can be handled in your code. For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted. In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception. In these cases, you should use exception handling to recover from the error.","pos":[0,521],"nodes":[{"content":"In other cases, a program error reflects an unexpected error condition that can be handled in your code.","pos":[0,104]},{"content":"For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.","pos":[105,236]},{"content":"In that case, trying to open the file by instantiating a <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> object or calling the <ph id=\"ph2\">&lt;xref:System.IO.File.Open%2A&gt;</ph> method may throw a <ph id=\"ph3\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> exception.","pos":[237,444],"source":" In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception."},{"content":"In these cases, you should use exception handling to recover from the error.","pos":[445,521]}]}]},{"pos":[4840,5484],"content":"**System failures.** A system failure is a run-time error that cannot be handled programmatically in a meaningful way. For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory. Ordinarily, system failures are not handled by using exception handling. Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=fullName> and call the <xref:System.Environment.FailFast%2A?displayProperty=fullName> method to log exception information and notify the user of the failure before the application terminates.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>System failures.<ept id=\"p1\">**</ept>","pos":[0,20],"source":"**System failures.**"},{"content":"A system failure is a run-time error that cannot be handled programmatically in a meaningful way.","pos":[21,118]},{"content":"For example, any method can throw an <ph id=\"ph1\">&lt;xref:System.OutOfMemoryException&gt;</ph> exception if the common language runtime is unable to allocate additional memory.","pos":[119,272],"source":" For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory."},{"content":"Ordinarily, system failures are not handled by using exception handling.","pos":[273,345]},{"content":"Instead, you may be able to use an event such as <ph id=\"ph1\">&lt;xref:System.AppDomain.UnhandledException?displayProperty=fullName&gt;</ph> and call the <ph id=\"ph2\">&lt;xref:System.Environment.FailFast%2A?displayProperty=fullName&gt;</ph> method to log exception information and notify the user of the failure before the application terminates.","pos":[346,644],"source":" Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=fullName> and call the <xref:System.Environment.FailFast%2A?displayProperty=fullName> method to log exception information and notify the user of the failure before the application terminates."}]},{"pos":[5520,5536],"content":"Try/catch blocks","linkify":"Try/catch blocks","nodes":[{"content":"Try/catch blocks","pos":[0,16]}]},{"pos":[5540,5941],"content":"The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks. There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.","nodes":[{"content":"The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into <ph id=\"ph1\">`try`</ph> blocks and <ph id=\"ph2\">`catch`</ph> blocks.","pos":[0,227],"source":"The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks."},{"content":"There can be one or more <ph id=\"ph1\">`catch`</ph> blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.","pos":[228,401],"source":" There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block."}]},{"pos":[5948,6420],"content":"If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block. Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block. Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.","nodes":[{"content":"If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a <ph id=\"ph1\">`try`</ph> statement and is called a <ph id=\"ph2\">`try`</ph> block.","pos":[0,178],"source":"If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block."},{"content":"Application code that handles exceptions thrown by a <ph id=\"ph1\">`try`</ph> block is placed within a <ph id=\"ph2\">`catch`</ph> statement and is called a <ph id=\"ph3\">`catch`</ph> block.","pos":[179,311],"source":" Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block."},{"content":"Zero or more <ph id=\"ph1\">`catch`</ph> blocks are associated with a <ph id=\"ph2\">`try`</ph> block, and each <ph id=\"ph3\">`catch`</ph> block includes a type filter that determines the types of exceptions it handles.","pos":[312,472],"source":" Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles."}]},{"pos":[6427,7123],"content":"When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception. A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from. The system stops searching after it finds the first `catch` block that handles the exception. For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section. A catch block that handles `System.Exception` is specified last.","nodes":[{"content":"When an exception occurs in a <ph id=\"ph1\">`try`</ph> block, the system searches the associated <ph id=\"ph2\">`catch`</ph> blocks in the order they appear in application code, until it locates a <ph id=\"ph3\">`catch`</ph> block that handles the exception.","pos":[0,199],"source":"When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception."},{"content":"A <ph id=\"ph1\">`catch`</ph> block handles an exception of type <ph id=\"ph2\">`T`</ph> if the type filter of the catch block specifies <ph id=\"ph3\">`T`</ph> or any type that <ph id=\"ph4\">`T`</ph> derives from.","pos":[200,335],"source":" A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from."},{"content":"The system stops searching after it finds the first <ph id=\"ph1\">`catch`</ph> block that handles the exception.","pos":[336,429],"source":" The system stops searching after it finds the first `catch` block that handles the exception."},{"content":"For this reason, in application code, a <ph id=\"ph1\">`catch`</ph> block that handles a type must be specified before a <ph id=\"ph2\">`catch`</ph> block that handles its base types, as demonstrated in the example that follows this section.","pos":[430,631],"source":" For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section."},{"content":"A catch block that handles <ph id=\"ph1\">`System.Exception`</ph> is specified last.","pos":[632,696],"source":" A catch block that handles `System.Exception` is specified last."}]},{"pos":[7130,7991],"content":"If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched. If no `catch` block for the exception is found, the system searches previous nesting levels in the current call. If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception. The search of the call stack continues until the exception is handled or until no more frames exist on the call stack. If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.","nodes":[{"content":"If none of the <ph id=\"ph1\">`catch`</ph> blocks associated with the current <ph id=\"ph2\">`try`</ph> block handle the exception, and the current <ph id=\"ph3\">`try`</ph> block is nested within other <ph id=\"ph4\">`try`</ph> blocks in the current call, the <ph id=\"ph5\">`catch`</ph> blocks associated with the next enclosing <ph id=\"ph6\">`try`</ph> block are searched.","pos":[0,256],"source":"If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched."},{"content":"If no <ph id=\"ph1\">`catch`</ph> block for the exception is found, the system searches previous nesting levels in the current call.","pos":[257,369],"source":" If no `catch` block for the exception is found, the system searches previous nesting levels in the current call."},{"content":"If no <ph id=\"ph1\">`catch`</ph> block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a <ph id=\"ph2\">`catch`</ph> block that handles the exception.","pos":[370,569],"source":" If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception."},{"content":"The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.","pos":[570,688]},{"content":"If the top of the call stack is reached without finding a <ph id=\"ph1\">`catch`</ph> block that handles the exception, the default exception handler handles it and the application terminates.","pos":[689,861],"source":" If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates."}]},{"pos":[8027,8050],"content":"Exception type features","linkify":"Exception type features","nodes":[{"content":"Exception type features","pos":[0,23]}]},{"pos":[8054,8101],"content":"Exception types support the following features:","nodes":[{"content":"Exception types support the following features:","pos":[0,47]}]},{"pos":[8111,8735],"content":"Human-readable text that describes the error. When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem. This text message is held in the <xref:System.Exception.Message%2A> property of the exception object. During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception. If no error message argument is supplied to the constructor, the default error message is used. For more information, see the <xref:System.Exception.Message%2A> property.","nodes":[{"content":"Human-readable text that describes the error. When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem. This text message is held in the <xref:System.Exception.Message%2A> property of the exception object. During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception. If no error message argument is supplied to the constructor, the default error message is used. For more information, see the <xref:System.Exception.Message%2A> property.","pos":[0,624],"nodes":[{"content":"Human-readable text that describes the error.","pos":[0,45]},{"content":"When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.","pos":[46,206]},{"content":"This text message is held in the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the exception object.","pos":[207,308],"source":" This text message is held in the <xref:System.Exception.Message%2A> property of the exception object."},{"content":"During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.","pos":[309,453]},{"content":"If no error message argument is supplied to the constructor, the default error message is used.","pos":[454,549]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property.","pos":[550,624],"source":" For more information, see the <xref:System.Exception.Message%2A> property."}]}]},{"pos":[8745,9053],"content":"The state of the call stack when the exception was thrown. The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code. The stack trace lists all the called methods and the line numbers in the source file where the calls are made.","nodes":[{"content":"The state of the call stack when the exception was thrown. The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code. The stack trace lists all the called methods and the line numbers in the source file where the calls are made.","pos":[0,308],"nodes":[{"content":"The state of the call stack when the exception was thrown.","pos":[0,58]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property carries a stack trace that can be used to determine where the error occurs in the code.","pos":[59,197],"source":" The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code."},{"content":"The stack trace lists all the called methods and the line numbers in the source file where the calls are made.","pos":[198,308]}]}]},{"pos":[9091,9117],"content":"Exception class properties","linkify":"Exception class properties","nodes":[{"content":"Exception class properties","pos":[0,26]}]},{"pos":[9121,9585],"content":"The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <ph id=\"ph2\">&lt;xref:System.Exception.StackTrace%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Exception.Message%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Exception.HelpLink%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Exception.HResult%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Exception.Source%2A&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Exception.TargetSite%2A&gt;</ph>, and <ph id=\"ph9\">&lt;xref:System.Exception.Data%2A&gt;</ph>.","pos":[0,464],"source":"The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>."}]},{"pos":[9592,10090],"content":"When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information. The outer exception is thrown in response to this inner exception. The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately. Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.","nodes":[{"content":"When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information. The outer exception is thrown in response to this inner exception. The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately. Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.","pos":[0,498],"nodes":[{"content":"When a causal relationship exists between two or more exceptions, the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property maintains this information.","pos":[0,148],"source":"When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information."},{"content":"The outer exception is thrown in response to this inner exception.","pos":[149,215]},{"content":"The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.","pos":[216,354]},{"content":"Supplementary information about the exception can be stored as a collection of key/value pairs in the <ph id=\"ph1\">&lt;xref:System.Exception.Data%2A&gt;</ph> property.","pos":[355,498],"source":" Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property."}]}]},{"pos":[10097,10615],"content":"The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class. For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.","nodes":[{"content":"The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <ph id=\"ph1\">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.","pos":[0,223],"source":"The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class."},{"content":"For more information about localized resources, see the <bpt id=\"p1\">[</bpt>Creating Satellite Assemblies<ept id=\"p1\">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept> and <bpt id=\"p2\">[</bpt>Packaging and Deploying Resources<ept id=\"p2\">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> topics.","pos":[224,518],"source":" For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics."}]},{"pos":[10622,10791],"content":"To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.","nodes":[{"content":"To provide the user with extensive information about why the exception occurred, the <ph id=\"ph1\">&lt;xref:System.Exception.HelpLink%2A&gt;</ph> property can hold a URL (or URN) to a help file.","pos":[0,169],"source":"To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file."}]},{"pos":[10798,10897],"content":"The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.","pos":[0,99],"source":"The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500."}]},{"pos":[10904,11052],"content":"For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.","nodes":[{"content":"For a list of initial property values for an instance of the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class, see the <ph id=\"ph2\">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructors.","pos":[0,148],"source":"For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors."}]},{"pos":[11091,11117],"content":"Performance considerations","linkify":"Performance considerations","nodes":[{"content":"Performance considerations","pos":[0,26]}]},{"pos":[11121,12057],"content":"Throwing or handling an exception consumes a significant amount of system resources and execution time. Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control. For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters. An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred. Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data. Instead, provide a retry mechanism so users can enter valid input. Nor should you use exceptions to handle usage errors. Instead, use [assertions](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1) to identify and correct usage errors.","nodes":[{"content":"Throwing or handling an exception consumes a significant amount of system resources and execution time.","pos":[0,103]},{"content":"Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.","pos":[104,217]},{"content":"For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.","pos":[218,431]},{"content":"An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.","pos":[432,550]},{"content":"Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.","pos":[551,679]},{"content":"Instead, provide a retry mechanism so users can enter valid input.","pos":[680,746]},{"content":"Nor should you use exceptions to handle usage errors.","pos":[747,800]},{"content":"Instead, use <bpt id=\"p1\">[</bpt>assertions<ept id=\"p1\">](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1)</ept> to identify and correct usage errors.","pos":[801,936],"source":" Instead, use [assertions](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1) to identify and correct usage errors."}]},{"pos":[12064,12264],"content":"In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.","nodes":[{"content":"In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.","pos":[0,200]}]},{"pos":[12299,12323],"content":"Re-throwing an exception","linkify":"Re-throwing an exception","nodes":[{"content":"Re-throwing an exception","pos":[0,24]}]},{"pos":[12327,12442],"content":"In many cases, an exception handler simply wants to pass the exception on to the caller. This most often occurs in:","nodes":[{"content":"In many cases, an exception handler simply wants to pass the exception on to the caller. This most often occurs in:","pos":[0,115],"nodes":[{"content":"In many cases, an exception handler simply wants to pass the exception on to the caller.","pos":[0,88]},{"content":"This most often occurs in:","pos":[89,115]}]}]},{"pos":[12452,12565],"content":"A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.","nodes":[{"content":"A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.","pos":[0,113]}]},{"pos":[12575,12712],"content":"An application or library that encounters a fatal exception. The exception handler can log the exception and then re-throw the exception.","nodes":[{"content":"An application or library that encounters a fatal exception. The exception handler can log the exception and then re-throw the exception.","pos":[0,137],"nodes":[{"content":"An application or library that encounters a fatal exception.","pos":[0,60]},{"content":"The exception handler can log the exception and then re-throw the exception.","pos":[61,137]}]}]},{"pos":[12719,13357],"content":"The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression. This ensures that all call stack information is preserved when the exception is propagated to the caller. The following example illustrates this. A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> without validating its arguments beforehand.","nodes":[{"content":"The recommended way to re-throw an exception is to simply use the <bpt id=\"p1\">[</bpt>throw<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/throw.md)</ept> statement in C# and the <bpt id=\"p2\">[</bpt>Throw<ept id=\"p2\">](~/docs/visual-basic/language-reference/statements/throw-statement.md)</ept> statement in Visual Basic without including an expression.","pos":[0,286],"source":"The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression."},{"content":"This ensures that all call stack information is preserved when the exception is propagated to the caller.","pos":[287,392]},{"content":"The following example illustrates this.","pos":[393,432]},{"content":"A string extension method, <ph id=\"ph1\">`FindOccurrences`</ph>, wraps one or more calls to <ph id=\"ph2\">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> without validating its arguments beforehand.","pos":[433,638],"source":" A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> without validating its arguments beforehand."}]},{"pos":[13364,13627],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]\n[!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]"},{"pos":[13634,14151],"content":"A caller then calls `FindOccurrences` twice. In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> method to throw an <xref:System.ArgumentNullException> exception. This exception is handled by the `FindOccurrences` method and passed back to the caller. Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.","nodes":[{"content":"A caller then calls <ph id=\"ph1\">`FindOccurrences`</ph> twice.","pos":[0,44],"source":"A caller then calls `FindOccurrences` twice."},{"content":"In the second call to <ph id=\"ph1\">`FindOccurrences`</ph>, the caller passes a <ph id=\"ph2\">`null`</ph> as the search string, which cases the <ph id=\"ph3\">&lt;xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method to throw an <ph id=\"ph4\">&lt;xref:System.ArgumentNullException&gt;</ph> exception.","pos":[45,304],"source":" In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> method to throw an <xref:System.ArgumentNullException> exception."},{"content":"This exception is handled by the <ph id=\"ph1\">`FindOccurrences`</ph> method and passed back to the caller.","pos":[305,393],"source":" This exception is handled by the `FindOccurrences` method and passed back to the caller."},{"content":"Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.","pos":[394,517]}]},{"pos":[14158,14421],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]\n[!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]"},{"pos":[14428,14483],"content":"In contrast, if the exception is re-thrown by using the","nodes":[{"content":"In contrast, if the exception is re-thrown by using the","pos":[0,55]}]},{"pos":[14548,14649],"content":"statement, the full call stack is not preserved, and the example would generate the following output:","nodes":[{"content":"statement, the full call stack is not preserved, and the example would generate the following output:","pos":[0,101]}]},{"pos":[14953,15316],"content":"A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception. The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception. In this case, the throw statement is:","nodes":[{"content":"A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception. The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception. In this case, the throw statement is:","pos":[0,363],"nodes":[{"content":"A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.","pos":[0,154]},{"content":"The caller can then use the new exception's <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to retrieve stack frame and other information about the original exception.","pos":[155,325],"source":" The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception."},{"content":"In this case, the throw statement is:","pos":[326,363]}]}]},{"pos":[15323,15586],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]\n [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]"},{"pos":[15593,15804],"content":"The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.","nodes":[{"content":"The user code that handles the exception has to know that the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property contains information about the original exception, as the following exception handler illustrates.","pos":[0,211],"source":"The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates."}]},{"pos":[15811,16074],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]\n [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]"},{"pos":[16110,16138],"content":"Choosing standard exceptions","linkify":"Choosing standard exceptions","nodes":[{"content":"Choosing standard exceptions","pos":[0,28]}]},{"pos":[16142,16358],"content":"When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception. You should use a standard exception type under these two conditions:","nodes":[{"content":"When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception. You should use a standard exception type under these two conditions:","pos":[0,216],"nodes":[{"content":"When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.","pos":[0,147]},{"content":"You should use a standard exception type under these two conditions:","pos":[148,216]}]}]},{"pos":[16368,16953],"content":"You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method). Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>. The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it. For more information, see the <xref:System.Exception.Message%2A> property.","nodes":[{"content":"You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method). Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>. The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it. For more information, see the <xref:System.Exception.Message%2A> property.","pos":[0,585],"nodes":[{"content":"You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).","pos":[0,151]},{"content":"Typically, you would throw an exception such as <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ArgumentNullException&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[152,350],"source":" Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>."},{"content":"The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.","pos":[351,510]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property.","pos":[511,585],"source":" For more information, see the <xref:System.Exception.Message%2A> property."}]}]},{"pos":[16963,17366],"content":"You are handling an error that can be communicated to the caller with an existing .NET Framework exception. You should throw the most derived exception possible. For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.","nodes":[{"content":"You are handling an error that can be communicated to the caller with an existing .NET Framework exception. You should throw the most derived exception possible. For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.","pos":[0,403],"nodes":[{"content":"You are handling an error that can be communicated to the caller with an existing .NET Framework exception.","pos":[0,107]},{"content":"You should throw the most derived exception possible.","pos":[108,161]},{"content":"For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <ph id=\"ph1\">&lt;xref:System.ComponentModel.InvalidEnumArgumentException&gt;</ph> (the most derived class) rather than an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[162,403],"source":" For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>."}]}]},{"pos":[17373,17474],"content":"The following table lists common exception types and the conditions under which you would throw them.","nodes":[{"content":"The following table lists common exception types and the conditions under which you would throw them.","pos":[0,101]}]},{"pos":[17481,17490],"content":"Exception","nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[17491,17500],"content":"Condition","nodes":[{"content":"Condition","pos":[0,9]}]},{"pos":[17541,17572],"content":"<xref:System.ArgumentException>","nodes":[]},{"pos":[17573,17631],"content":"A non-null argument that is passed to a method is invalid.","nodes":[{"content":"A non-null argument that is passed to a method is invalid.","pos":[0,58]}]},{"pos":[17636,17671],"content":"<xref:System.ArgumentNullException>","nodes":[]},{"pos":[17672,17721],"content":"An argument that is passed to a method is <ph id=\"ph1\">`null`</ph>.","source":"An argument that is passed to a method is `null`."},{"pos":[17726,17767],"content":"<xref:System.ArgumentOutOfRangeException>","nodes":[]},{"pos":[17768,17817],"content":"An argument is outside the range of valid values.","nodes":[{"content":"An argument is outside the range of valid values.","pos":[0,49]}]},{"pos":[17822,17865],"content":"<xref:System.IO.DirectoryNotFoundException>","nodes":[]},{"pos":[17866,17904],"content":"Part of a directory path is not valid.","nodes":[{"content":"Part of a directory path is not valid.","pos":[0,38]}]},{"pos":[17909,17944],"content":"<xref:System.DivideByZeroException>","nodes":[]},{"pos":[17945,18027],"content":"The denominator in an integer or <xref:System.Decimal> division operation is zero.","nodes":[{"content":"The denominator in an integer or <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> division operation is zero.","pos":[0,82],"source":"The denominator in an integer or <xref:System.Decimal> division operation is zero."}]},{"pos":[18032,18071],"content":"<xref:System.IO.DriveNotFoundException>","nodes":[]},{"pos":[18072,18113],"content":"A drive is unavailable or does not exist.","nodes":[{"content":"A drive is unavailable or does not exist.","pos":[0,41]}]},{"pos":[18118,18156],"content":"<xref:System.IO.FileNotFoundException>","nodes":[]},{"pos":[18157,18179],"content":"A file does not exist.","nodes":[{"content":"A file does not exist.","pos":[0,22]}]},{"pos":[18184,18213],"content":"<xref:System.FormatException>","nodes":[]},{"pos":[18214,18323],"content":"A value is not in an appropriate format to be converted from a string by a conversion method such as <ph id=\"ph1\">`Parse`</ph>.","source":"A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`."},{"pos":[18328,18366],"content":"<xref:System.IndexOutOfRangeException>","nodes":[]},{"pos":[18367,18424],"content":"An index is outside the bounds of an array or collection.","nodes":[{"content":"An index is outside the bounds of an array or collection.","pos":[0,57]}]},{"pos":[18429,18468],"content":"<xref:System.InvalidOperationException>","nodes":[]},{"pos":[18469,18523],"content":"A method call is invalid in an object's current state.","nodes":[{"content":"A method call is invalid in an object's current state.","pos":[0,54]}]},{"pos":[18528,18582],"content":"<xref:System.Collections.Generic.KeyNotFoundException>","nodes":[]},{"pos":[18583,18656],"content":"The specified key for accessing a member in a collection cannot be found.","nodes":[{"content":"The specified key for accessing a member in a collection cannot be found.","pos":[0,73]}]},{"pos":[18661,18698],"content":"<xref:System.NotImplementedException>","nodes":[]},{"pos":[18699,18740],"content":"A method or operation is not implemented.","nodes":[{"content":"A method or operation is not implemented.","pos":[0,41]}]},{"pos":[18745,18780],"content":"<xref:System.NotSupportedException>","nodes":[]},{"pos":[18781,18820],"content":"A method or operation is not supported.","nodes":[{"content":"A method or operation is not supported.","pos":[0,39]}]},{"pos":[18825,18862],"content":"<xref:System.ObjectDisposedException>","nodes":[]},{"pos":[18863,18925],"content":"An operation is performed on an object that has been disposed.","nodes":[{"content":"An operation is performed on an object that has been disposed.","pos":[0,62]}]},{"pos":[18930,18961],"content":"<xref:System.OverflowException>","nodes":[]},{"pos":[18962,19033],"content":"An arithmetic, casting, or conversion operation results in an overflow.","nodes":[{"content":"An arithmetic, casting, or conversion operation results in an overflow.","pos":[0,71]}]},{"pos":[19038,19075],"content":"<xref:System.IO.PathTooLongException>","nodes":[]},{"pos":[19076,19138],"content":"A path or file name exceeds the maximum system-defined length.","nodes":[{"content":"A path or file name exceeds the maximum system-defined length.","pos":[0,62]}]},{"pos":[19143,19186],"content":"<xref:System.PlatformNotSupportedException>","nodes":[]},{"pos":[19187,19242],"content":"The operation is not supported on the current platform.","nodes":[{"content":"The operation is not supported on the current platform.","pos":[0,55]}]},{"pos":[19247,19274],"content":"<xref:System.RankException>","nodes":[]},{"pos":[19275,19342],"content":"An array with the wrong number of dimensions is passed to a method.","nodes":[{"content":"An array with the wrong number of dimensions is passed to a method.","pos":[0,67]}]},{"pos":[19347,19377],"content":"<xref:System.TimeoutException>","nodes":[]},{"pos":[19378,19433],"content":"The time interval allotted to an operation has expired.","nodes":[{"content":"The time interval allotted to an operation has expired.","pos":[0,55]}]},{"pos":[19438,19470],"content":"<xref:System.UriFormatException>","nodes":[]},{"pos":[19471,19524],"content":"An invalid Uniform Resource Identifier (URI) is used.","nodes":[{"content":"An invalid Uniform Resource Identifier (URI) is used.","pos":[0,53]}]},{"pos":[19559,19589],"content":"Implementing custom exceptions","linkify":"Implementing custom exceptions","nodes":[{"content":"Implementing custom exceptions","pos":[0,30]}]},{"pos":[19593,19705],"content":"In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:","nodes":[{"content":"In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:","pos":[0,112]}]},{"pos":[19715,19828],"content":"When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.","nodes":[{"content":"When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.","pos":[0,113]}]},{"pos":[19838,20381],"content":"When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception. For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.","nodes":[{"content":"When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception. For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.","pos":[0,543],"nodes":[{"content":"When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.","pos":[0,199]},{"content":"For example, if you throw an <ph id=\"ph1\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.","pos":[200,543],"source":" For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method."}]}]},{"pos":[20388,20685],"content":"The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework. Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.","nodes":[{"content":"The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework. Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.","pos":[0,297],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class is the base class of all exceptions in the .NET Framework.","pos":[0,92],"source":"The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework."},{"content":"Many derived classes rely on the inherited behavior of the members of the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class; they do not override the members of <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph>, nor do they define any unique members.","pos":[93,297],"source":" Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members."}]}]},{"pos":[20692,20727],"content":"To define your own exception class:","nodes":[{"content":"To define your own exception class:","pos":[0,35]}]},{"pos":[20737,21330],"content":"Define a class that inherits from <xref:System.Exception>. If necessary, define any unique members needed by your class to provide additional information about the exception. For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.","nodes":[{"content":"Define a class that inherits from <xref:System.Exception>. If necessary, define any unique members needed by your class to provide additional information about the exception. For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.","pos":[0,593],"nodes":[{"content":"Define a class that inherits from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[0,58],"source":"Define a class that inherits from <xref:System.Exception>."},{"content":"If necessary, define any unique members needed by your class to provide additional information about the exception.","pos":[59,174]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> class includes a <ph id=\"ph2\">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property that specifies the name of the parameter whose argument caused the exception, and the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException&gt;</ph> property includes a <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A&gt;</ph> property that indicates the time-out interval.","pos":[175,593],"source":" For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval."}]}]},{"pos":[21340,21552],"content":"If necessary, override any inherited members whose functionality you want to change or modify. Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.","nodes":[{"content":"If necessary, override any inherited members whose functionality you want to change or modify. Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.","pos":[0,212],"nodes":[{"content":"If necessary, override any inherited members whose functionality you want to change or modify.","pos":[0,94]},{"content":"Note that most existing derived classes of <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> do not override the behavior of inherited members.","pos":[95,212],"source":" Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members."}]}]},{"pos":[21562,21899],"content":"Determine whether your custom exception object is serializable. Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context. To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.","nodes":[{"content":"Determine whether your custom exception object is serializable. Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context. To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.","pos":[0,337],"nodes":[{"content":"Determine whether your custom exception object is serializable.","pos":[0,63]},{"content":"Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.","pos":[64,230]},{"content":"To make the exception object serializable, mark it with the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.","pos":[231,337],"source":" To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute."}]}]},{"pos":[21909,22034],"content":"Define the constructors of your exception class. Typically, exception classes have one or more of the following constructors:","nodes":[{"content":"Define the constructors of your exception class. Typically, exception classes have one or more of the following constructors:","pos":[0,125],"nodes":[{"content":"Define the constructors of your exception class.","pos":[0,48]},{"content":"Typically, exception classes have one or more of the following constructors:","pos":[49,125]}]}]},{"pos":[22048,22162],"content":"<xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.%23ctor&gt;</ph>, which uses default values to initialize the properties of a new exception object.","pos":[0,114],"source":"<xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object."}]},{"pos":[22176,22300],"content":"<xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.%23ctor%28System.String%29&gt;</ph>, which initializes a new exception object with a specified error message.","pos":[0,124],"source":"<xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message."}]},{"pos":[22314,22477],"content":"<xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29&gt;</ph>, which initializes a new exception object with a specified error message and inner exception.","pos":[0,163],"source":"<xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception."}]},{"pos":[22491,22819],"content":"<xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data. You should implement this constructor if you've chosen to make your exception object serializable.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29&gt;</ph>, which is a <ph id=\"ph2\">`protected`</ph> constructor that initializes a new exception object from serialized data.","pos":[0,229],"source":"<xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data."},{"content":"You should implement this constructor if you've chosen to make your exception object serializable.","pos":[230,328]}]},{"pos":[22826,23714],"content":"The following example illustrates the use of a custom exception class. It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime. The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception. Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.  Each constructor calls a base class constructor in addition to preserving the value of the non-prime number. The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.","nodes":[{"content":"The following example illustrates the use of a custom exception class.","pos":[0,70]},{"content":"It defines a <ph id=\"ph1\">`NotPrimeException`</ph> exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.","pos":[71,239],"source":" It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime."},{"content":"The exception defines a new property, <ph id=\"ph1\">`NonPrime`</ph>, that returns the non-prime number that caused the exception.","pos":[240,350],"source":" The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception."},{"content":"Besides implementing a protected parameterless constructor and a constructor with <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> parameters for serialization, the <ph id=\"ph3\">`NotPrimeException`</ph> class defines three additional constructors to support the <ph id=\"ph4\">`NonPrime`</ph> property.","pos":[351,677],"source":" Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property."},{"content":"Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.","pos":[679,787]},{"content":"The <ph id=\"ph1\">`NotPrimeException`</ph> class is also marked with the <ph id=\"ph2\">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.","pos":[788,888],"source":" The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute."}]},{"pos":[23721,24002],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]\n[!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]"},{"pos":[24009,24414],"content":"The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor. The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.","nodes":[{"content":"The <ph id=\"ph1\">`PrimeNumberGenerator`</ph> class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.","pos":[0,217],"source":"The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor."},{"content":"The <ph id=\"ph1\">`GetPrimesFrom`</ph> method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a <ph id=\"ph2\">`NotPrimeException`</ph> if that lower limit is not a prime number.","pos":[218,405],"source":" The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number."}]},{"pos":[24421,24708],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]\n[!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]"},{"pos":[24715,24938],"content":"The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries. In both cases, the exception is thrown and successfully handled in client code.","nodes":[{"content":"The following example makes two calls to the <ph id=\"ph1\">`GetPrimesFrom`</ph> method with non-prime numbers, one of which crosses application domain boundaries.","pos":[0,143],"source":"The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries."},{"content":"In both cases, the exception is thrown and successfully handled in client code.","pos":[144,223]}]},{"pos":[24945,25206],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Exception.Class#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Exception.Class#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]\n[!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]"},{"pos":[25215,25282],"content":"Windows Runtime and <ph id=\"ph1\">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph>","linkify":"Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]","source":"Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]"},{"pos":[25286,25805],"content":"In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames. Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> for <ph id=\"ph2\">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>, some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.","pos":[0,229],"source":"In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames."},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, the common language runtime continues to use the original <ph id=\"ph3\">&lt;xref:System.Exception&gt;</ph> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.","pos":[230,519],"source":" Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame."}]}],"pos":[1149,27183],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class.","nodes":[{"pos":[0,78],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class."}],"pos":[40048,40127],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.  \n  \n All the derived classes should provide this default constructor. The following table shows the initial property values for an instance of <xref:System.Exception>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|A system-supplied localized description.|","nodes":[{"pos":[0,201],"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.","nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.","pos":[0,201],"source":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture."}]},{"pos":[208,370],"content":"All the derived classes should provide this default constructor. The following table shows the initial property values for an instance of <xref:System.Exception>.","nodes":[{"content":"All the derived classes should provide this default constructor. The following table shows the initial property values for an instance of <xref:System.Exception>.","pos":[0,162],"nodes":[{"content":"All the derived classes should provide this default constructor.","pos":[0,64]},{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[65,162],"source":" The following table shows the initial property values for an instance of <xref:System.Exception>."}]}]},{"pos":[377,385],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[386,391],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[427,468],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[469,514],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[519,553],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[554,594],"content":"A system-supplied localized description.","nodes":[{"content":"A system-supplied localized description.","pos":[0,40]}]}],"pos":[40138,40743],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with a specified error message.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> class with a specified error message.","source":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with a specified error message."}],"pos":[42910,43020],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter. If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.Exception>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,248],"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter. If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.","nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance by using the <ph id=\"ph2\">`message`</ph> parameter.","pos":[0,130],"source":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter."},{"content":"If the <ph id=\"ph1\">`message`</ph> parameter is <ph id=\"ph2\">`null`</ph>, this is the same as calling the <ph id=\"ph3\">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructor.","pos":[131,248],"source":" If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor."}]},{"pos":[255,352],"content":"The following table shows the initial property values for an instance of <xref:System.Exception>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[0,97],"source":"The following table shows the initial property values for an instance of <xref:System.Exception>."}]},{"pos":[359,367],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[368,373],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[409,450],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[451,496],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[501,535],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[536,561],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[43031,43603],"yaml":true,"extradata":"MT"},{"content":"The message that describes the error.","nodes":[{"pos":[0,37],"content":"The message that describes the error.","nodes":[{"content":"The message that describes the error.","pos":[0,37]}]}],"pos":[44379,44417],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with serialized data.","nodes":[{"pos":[0,99],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> class with serialized data.","source":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with serialized data."}],"pos":[46248,46348],"yaml":true},{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"pos":[0,231],"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.","pos":[0,113]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XML and SOAP Serialization<ept id=\"p1\">](~/docs/framework/serialization/xml-and-soap-serialization.md)</ept>.","pos":[114,231],"source":" For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md)."}]}],"pos":[46359,46591],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> that holds the serialized object data about the exception being thrown.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."}],"pos":[47783,47927],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.","nodes":[{"pos":[0,140],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> that contains contextual information about the source or destination.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination."}],"pos":[48022,48163],"yaml":true},{"content":"The <code>info</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>info</code> parameter is `null`."}],"pos":[48315,48358],"yaml":true},{"content":"The class name is `null` or <xref href=\"System.Exception.HResult\"></xref> is zero (0).","nodes":[{"pos":[0,86],"content":"The class name is <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Exception.HResult\"&gt;&lt;/xref&gt;</ph> is zero (0).","source":"The class name is `null` or <xref href=\"System.Exception.HResult\"></xref> is zero (0)."}],"pos":[48506,48593],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.","nodes":[{"pos":[0,184],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception."}],"pos":[49804,49989],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.Exception>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,465],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,182],"source":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) if the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.","pos":[183,465],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[472,569],"content":"The following table shows the initial property values for an instance of <xref:System.Exception>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[0,97],"source":"The following table shows the initial property values for an instance of <xref:System.Exception>."}]},{"pos":[576,584],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[585,590],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[626,667],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[668,698],"content":"The inner exception reference.","nodes":[{"content":"The inner exception reference.","pos":[0,30]}]},{"pos":[703,737],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[738,763],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[50000,50774],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception.","nodes":[{"pos":[0,61],"content":"The error message that explains the reason for the exception.","nodes":[{"content":"The error message that explains the reason for the exception.","pos":[0,61]}]}],"pos":[51584,51646],"yaml":true},{"content":"The exception that is the cause of the current exception, or a null reference (`Nothing` in Visual Basic) if no inner exception is specified.","nodes":[{"pos":[0,141],"content":"The exception that is the cause of the current exception, or a null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) if no inner exception is specified.","source":"The exception that is the cause of the current exception, or a null reference (`Nothing` in Visual Basic) if no inner exception is specified."}],"pos":[51719,51861],"yaml":true},{"content":"Gets a collection of key/value pairs that provide additional user-defined information about the exception.","nodes":[{"pos":[0,106],"content":"Gets a collection of key/value pairs that provide additional user-defined information about the exception.","nodes":[{"content":"Gets a collection of key/value pairs that provide additional user-defined information about the exception.","pos":[0,106]}]}],"pos":[53276,53383],"yaml":true},{"content":"Use the <xref:System.Collections.IDictionary?displayProperty=fullName> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception. The information is in the form of an arbitrary number of user-defined key/value pairs. The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.  \n  \n## Key/Value Pair Security  \n The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure. If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers. If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler. This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.  \n  \n## Key Conflicts  \n A key conflict occurs when different exception handlers specify the same key to access a key/value pair. Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors. However, if you are cautious you can use key conflicts to enhance your application.  \n  \n## Avoiding Key Conflicts  \n Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs. For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.  \n  \n Suppose two applications, named Products and Suppliers, each has a method named Sales. The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product. The Sales method in the Suppliers application provides the identification number, or SID, of a supplier. Consequently, the naming convention for this example yields the keys, \"Products.Sales.SKU\" and \"Suppliers.Sales.SID\".  \n  \n## Exploiting Key Conflicts  \n Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing. Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers. If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.  \n  \n Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler. In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.  \n  \n Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler. After the update process is complete, the exception handler throws the exception to the next higher-level exception handler. Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.","nodes":[{"pos":[0,440],"content":"Use the <xref:System.Collections.IDictionary?displayProperty=fullName> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception. The information is in the form of an arbitrary number of user-defined key/value pairs. The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.","nodes":[{"content":"Use the <xref:System.Collections.IDictionary?displayProperty=fullName> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception. The information is in the form of an arbitrary number of user-defined key/value pairs. The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.","pos":[0,440],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary?displayProperty=fullName&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Exception.Data%2A&gt;</ph> property to store and retrieve supplementary information relevant to the exception.","pos":[0,209],"source":"Use the <xref:System.Collections.IDictionary?displayProperty=fullName> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception."},{"content":"The information is in the form of an arbitrary number of user-defined key/value pairs.","pos":[210,296]},{"content":"The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.","pos":[297,440]}]}]},{"pos":[449,472],"content":"Key/Value Pair Security","linkify":"Key/Value Pair Security","nodes":[{"content":"Key/Value Pair Security","pos":[0,23]}]},{"pos":[476,1176],"content":"The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure. If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers. If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler. This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.","nodes":[{"content":"The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure. If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers. If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler. This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.","pos":[0,700],"nodes":[{"content":"The key/value pairs stored in the collection returned by the <ph id=\"ph1\">&lt;xref:System.Exception.Data%2A&gt;</ph> property are not secure.","pos":[0,117],"source":"The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure."},{"content":"If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.","pos":[118,293]},{"content":"If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.","pos":[294,501]},{"content":"This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.","pos":[502,700]}]}]},{"pos":[1185,1198],"content":"Key Conflicts","linkify":"Key Conflicts","nodes":[{"content":"Key Conflicts","pos":[0,13]}]},{"pos":[1202,1642],"content":"A key conflict occurs when different exception handlers specify the same key to access a key/value pair. Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors. However, if you are cautious you can use key conflicts to enhance your application.","nodes":[{"content":"A key conflict occurs when different exception handlers specify the same key to access a key/value pair. Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors. However, if you are cautious you can use key conflicts to enhance your application.","pos":[0,440],"nodes":[{"content":"A key conflict occurs when different exception handlers specify the same key to access a key/value pair.","pos":[0,104]},{"content":"Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.","pos":[105,356]},{"content":"However, if you are cautious you can use key conflicts to enhance your application.","pos":[357,440]}]}]},{"pos":[1651,1673],"content":"Avoiding Key Conflicts","linkify":"Avoiding Key Conflicts","nodes":[{"content":"Avoiding Key Conflicts","pos":[0,22]}]},{"pos":[1677,1978],"content":"Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs. For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.","nodes":[{"content":"Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs. For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.","pos":[0,301],"nodes":[{"content":"Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.","pos":[0,96]},{"content":"For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.","pos":[97,301]}]}]},{"pos":[1985,2420],"content":"Suppose two applications, named Products and Suppliers, each has a method named Sales. The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product. The Sales method in the Suppliers application provides the identification number, or SID, of a supplier. Consequently, the naming convention for this example yields the keys, \"Products.Sales.SKU\" and \"Suppliers.Sales.SID\".","nodes":[{"content":"Suppose two applications, named Products and Suppliers, each has a method named Sales. The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product. The Sales method in the Suppliers application provides the identification number, or SID, of a supplier. Consequently, the naming convention for this example yields the keys, \"Products.Sales.SKU\" and \"Suppliers.Sales.SID\".","pos":[0,435],"nodes":[{"content":"Suppose two applications, named Products and Suppliers, each has a method named Sales.","pos":[0,86]},{"content":"The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.","pos":[87,212]},{"content":"The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.","pos":[213,317]},{"content":"Consequently, the naming convention for this example yields the keys, \"Products.Sales.SKU\" and \"Suppliers.Sales.SID\".","pos":[318,435]}]}]},{"pos":[2429,2453],"content":"Exploiting Key Conflicts","linkify":"Exploiting Key Conflicts","nodes":[{"content":"Exploiting Key Conflicts","pos":[0,24]}]},{"pos":[2457,2992],"content":"Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing. Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers. If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.","nodes":[{"content":"Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing. Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers. If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.","pos":[0,535],"nodes":[{"content":"Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.","pos":[0,107]},{"content":"Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.","pos":[108,262]},{"content":"If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <ph id=\"ph1\">&lt;xref:System.Collections.IDictionary&gt;</ph> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.","pos":[263,535],"source":" If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner."}]}]},{"pos":[2999,3369],"content":"Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler. In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.","nodes":[{"content":"Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler. In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.","pos":[0,370],"nodes":[{"content":"Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.","pos":[0,169]},{"content":"In addition, each exception handler knows the collection returned by the <ph id=\"ph1\">&lt;xref:System.Exception.Data%2A&gt;</ph> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.","pos":[170,370],"source":" In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys."}]}]},{"pos":[3376,3841],"content":"Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler. After the update process is complete, the exception handler throws the exception to the next higher-level exception handler. Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.","nodes":[{"content":"Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler. After the update process is complete, the exception handler throws the exception to the next higher-level exception handler. Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.","pos":[0,465],"nodes":[{"content":"Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.","pos":[0,172]},{"content":"After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.","pos":[173,297]},{"content":"Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.","pos":[298,465]}]}]}],"pos":[53394,57260],"yaml":true,"extradata":"MT"},{"content":"An object that implements the <xref href=\"System.Collections.IDictionary\"></xref> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.","nodes":[{"pos":[0,186],"content":"An object that implements the <xref href=\"System.Collections.IDictionary\"></xref> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.","nodes":[{"content":"An object that implements the <ph id=\"ph1\">&lt;xref href=\"System.Collections.IDictionary\"&gt;&lt;/xref&gt;</ph> interface and contains a collection of user-defined key/value pairs.","pos":[0,150],"source":"An object that implements the <xref href=\"System.Collections.IDictionary\"></xref> interface and contains a collection of user-defined key/value pairs."},{"content":"The default is an empty collection.","pos":[151,186]}]}],"pos":[57938,58125],"yaml":true},{"content":"When overridden in a derived class, returns the <xref href=\"System.Exception\"></xref> that is the root cause of one or more subsequent exceptions.","nodes":[{"pos":[0,146],"content":"When overridden in a derived class, returns the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> that is the root cause of one or more subsequent exceptions.","source":"When overridden in a derived class, returns the <xref href=\"System.Exception\"></xref> that is the root cause of one or more subsequent exceptions."}],"pos":[59683,59830],"yaml":true},{"content":"A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property. For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain. This exception is called the base exception and its `InnerException` property always contains a null reference.  \n  \n For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).  \n  \n Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.","nodes":[{"pos":[0,410],"content":"A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property. For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain. This exception is called the base exception and its `InnerException` property always contains a null reference.","nodes":[{"content":"A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its <ph id=\"ph1\">`InnerException`</ph> property.","pos":[0,183],"source":"A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property."},{"content":"For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.","pos":[184,298]},{"content":"This exception is called the base exception and its <ph id=\"ph1\">`InnerException`</ph> property always contains a null reference.","pos":[299,410],"source":" This exception is called the base exception and its `InnerException` property always contains a null reference."}]},{"pos":[417,541],"content":"For all exceptions in a chain of exceptions, the <ph id=\"ph1\">`GetBaseException`</ph> method must return the same object (the base exception).","source":"For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception)."},{"pos":[548,757],"content":"Use the <ph id=\"ph1\">`GetBaseException`</ph> method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.","source":"Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception."}],"pos":[59841,60605],"yaml":true,"extradata":"MT"},{"content":"The first exception thrown in a chain of exceptions. If the <xref href=\"System.Exception.InnerException\"></xref> property of the current exception is a null reference (`Nothing` in Visual Basic), this property returns the current exception.","nodes":[{"pos":[0,240],"content":"The first exception thrown in a chain of exceptions. If the <xref href=\"System.Exception.InnerException\"></xref> property of the current exception is a null reference (`Nothing` in Visual Basic), this property returns the current exception.","nodes":[{"content":"The first exception thrown in a chain of exceptions.","pos":[0,52]},{"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property of the current exception is a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic), this property returns the current exception.","pos":[53,240],"source":" If the <xref href=\"System.Exception.InnerException\"></xref> property of the current exception is a null reference (`Nothing` in Visual Basic), this property returns the current exception."}]}],"pos":[61486,61727],"yaml":true},{"content":"When overridden in a derived class, sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with information about the exception.","nodes":[{"pos":[0,150],"content":"When overridden in a derived class, sets the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> with information about the exception.","source":"When overridden in a derived class, sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with information about the exception."}],"pos":[63598,63749],"yaml":true},{"content":"`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.","nodes":[{"pos":[0,252],"content":"`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.","nodes":[{"content":"<ph id=\"ph1\">`GetObjectData`</ph> sets a <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with all the exception object data targeted for serialization.","pos":[0,139],"source":"`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization."},{"content":"During deserialization, the exception is reconstituted from the <ph id=\"ph1\">`SerializationInfo`</ph> transmitted over the stream.","pos":[140,252],"source":" During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream."}]}],"pos":[63760,64015],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> that holds the serialized object data about the exception being thrown.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."}],"pos":[65279,65423],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.","nodes":[{"pos":[0,140],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> that contains contextual information about the source or destination.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination."}],"pos":[65518,65659],"yaml":true},{"content":"The <code>info</code> parameter is a null reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,80],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"The <code>info</code> parameter is a null reference (`Nothing` in Visual Basic)."}],"pos":[65819,65900],"yaml":true},{"content":"Gets the runtime type of the current instance.","nodes":[{"pos":[0,46],"content":"Gets the runtime type of the current instance.","nodes":[{"content":"Gets the runtime type of the current instance.","pos":[0,46]}]}],"pos":[67006,67053],"yaml":true},{"content":"The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=fullName>.","nodes":[{"pos":[0,203],"content":"The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.GetType%2A&gt;</ph> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <ph id=\"ph2\">&lt;xref:System.Object.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[0,203],"source":"The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=fullName>."}]}],"pos":[67064,67268],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the exact runtime type of the current instance.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the exact runtime type of the current instance.","source":"A <xref href=\"System.Type\"></xref> object that represents the exact runtime type of the current instance."}],"pos":[67389,67495],"yaml":true},{"content":"Gets or sets a link to the help file associated with this exception.","nodes":[{"pos":[0,68],"content":"Gets or sets a link to the help file associated with this exception.","nodes":[{"content":"Gets or sets a link to the help file associated with this exception.","pos":[0,68]}]}],"pos":[68592,68661],"yaml":true},{"content":"The return value, which represents a help file, is a URN or URL. For example, the `HelpLink` value could be:  \n  \n \"file:///C:/Applications/Bazzal/help.html#ErrorNum42\"","nodes":[{"pos":[0,108],"content":"The return value, which represents a help file, is a URN or URL. For example, the `HelpLink` value could be:","nodes":[{"content":"The return value, which represents a help file, is a URN or URL.","pos":[0,64]},{"content":"For example, the <ph id=\"ph1\">`HelpLink`</ph> value could be:","pos":[65,108],"source":" For example, the `HelpLink` value could be:"}]},{"pos":[115,168],"content":"\"file:///C:/Applications/Bazzal/help.html#ErrorNum42\"","nodes":[{"content":"\"file:///C:/Applications/Bazzal/help.html#ErrorNum42\"","pos":[0,53]}]}],"pos":[68672,68847],"yaml":true,"extradata":"MT"},{"content":"The Uniform Resource Name (URN) or Uniform Resource Locator (URL).","nodes":[{"pos":[0,66],"content":"The Uniform Resource Name (URN) or Uniform Resource Locator (URL).","nodes":[{"content":"The Uniform Resource Name (URN) or Uniform Resource Locator (URL).","pos":[0,66]}]}],"pos":[69585,69652],"yaml":true},{"content":"Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.","nodes":[{"pos":[0,87],"content":"Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.","nodes":[{"content":"Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.","pos":[0,87]}]}],"pos":[71088,71176],"yaml":true},{"content":"HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code. The severity code indicates whether the return value represents information, warning, or error. The facility code identifies the area of the system responsible for the error. The error code is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT. When managed code throws an exception, the runtime passes the HRESULT to the COM client. When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime. For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md). See [Common HRESULT Values](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.  \n  \n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.  In previous versions of the .NET Framework, both getter and setter are protected.","nodes":[{"pos":[0,1000],"content":"HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code. The severity code indicates whether the return value represents information, warning, or error. The facility code identifies the area of the system responsible for the error. The error code is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT. When managed code throws an exception, the runtime passes the HRESULT to the COM client. When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime. For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md). See [Common HRESULT Values](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.","nodes":[{"content":"HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.","pos":[0,116]},{"content":"The severity code indicates whether the return value represents information, warning, or error.","pos":[117,212]},{"content":"The facility code identifies the area of the system responsible for the error.","pos":[213,291]},{"content":"The error code is a unique number that is assigned to represent the exception.","pos":[292,370]},{"content":"Each exception is mapped to a distinct HRESULT.","pos":[371,418]},{"content":"When managed code throws an exception, the runtime passes the HRESULT to the COM client.","pos":[419,507]},{"content":"When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.","pos":[508,624]},{"content":"For information about HRESULT values and their corresponding .NET Framework exceptions, see <bpt id=\"p1\">[</bpt>How to: Map HRESULTs and Exceptions<ept id=\"p1\">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.","pos":[625,819],"source":" For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."},{"content":"See <bpt id=\"p1\">[</bpt>Common HRESULT Values<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx)</ept> in the Windows documentation for a list of the values you are most likely to encounter.","pos":[820,1000],"source":" See [Common HRESULT Values](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter."}]},{"pos":[1007,1255],"content":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.  In previous versions of the .NET Framework, both getter and setter are protected.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Exception.HResult%2A&gt;</ph> property's setter is protected, whereas its getter is public.","pos":[0,165],"source":"Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public."},{"content":"In previous versions of the .NET Framework, both getter and setter are protected.","pos":[167,248]}]}],"pos":[71187,72447],"yaml":true,"extradata":"MT"},{"content":"The HRESULT value.","nodes":[{"pos":[0,18],"content":"The HRESULT value.","nodes":[{"content":"The HRESULT value.","pos":[0,18]}]}],"pos":[73131,73150],"yaml":true},{"content":"Gets the <xref href=\"System.Exception\"></xref> instance that caused the current exception.","nodes":[{"pos":[0,90],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instance that caused the current exception.","source":"Gets the <xref href=\"System.Exception\"></xref> instance that caused the current exception."}],"pos":[74627,74718],"yaml":true},{"content":"When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.  \n  \n Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.  \n  \n You can create a new exception that catches an earlier exception. The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.  \n  \n Suppose that there is a function that reads a file and formats the data from that file. In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown. The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>. The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.  \n  \n The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.","nodes":[{"pos":[0,176],"content":"When an exception <ph id=\"ph1\">`X`</ph> is thrown as a direct result of a previous exception <ph id=\"ph2\">`Y`</ph>, the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id=\"ph4\">`X`</ph> should contain a reference to <ph id=\"ph5\">`Y`</ph>.","source":"When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`."},{"pos":[183,308],"content":"Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to obtain the set of exceptions that led to the current exception.","pos":[0,125],"source":"Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception."}]},{"pos":[315,533],"content":"You can create a new exception that catches an earlier exception. The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.","nodes":[{"content":"You can create a new exception that catches an earlier exception. The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.","pos":[0,218],"nodes":[{"content":"You can create a new exception that catches an earlier exception.","pos":[0,65]},{"content":"The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.","pos":[66,218]}]}]},{"pos":[540,1100],"content":"Suppose that there is a function that reads a file and formats the data from that file. In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown. The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>. The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.","nodes":[{"content":"Suppose that there is a function that reads a file and formats the data from that file. In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown. The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>. The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.","pos":[0,560],"nodes":[{"content":"Suppose that there is a function that reads a file and formats the data from that file.","pos":[0,87]},{"content":"In this example, as the code tries to read the file, an <ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph> is thrown.","pos":[88,183],"source":" In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown."},{"content":"The function catches the <ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph> and throws a <ph id=\"ph2\">&lt;xref:System.IO.FileNotFoundException&gt;</ph>.","pos":[184,290],"source":" The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph> could be saved in the <ph id=\"ph2\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.IO.FileNotFoundException&gt;</ph>, enabling the code that catches the <ph id=\"ph4\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> to examine the cause of the initial error.","pos":[291,560],"source":" The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error."}]}]},{"pos":[1107,1262],"content":"The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property, which holds a reference to the inner exception, is set upon initialization of the exception object.","pos":[0,155],"source":"The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object."}]}],"pos":[74729,76002],"yaml":true,"extradata":"MT"},{"content":"An object that describes the error that caused the current exception. The <xref href=\"System.Exception.InnerException\"></xref> property returns the same value as was passed into the <xref href=\"System.Exception.#ctor(System.String,System.Exception)\"></xref> constructor, or `null` if the inner exception value was not supplied to the constructor. This property is read-only.","nodes":[{"pos":[0,374],"content":"An object that describes the error that caused the current exception. The <xref href=\"System.Exception.InnerException\"></xref> property returns the same value as was passed into the <xref href=\"System.Exception.#ctor(System.String,System.Exception)\"></xref> constructor, or `null` if the inner exception value was not supplied to the constructor. This property is read-only.","nodes":[{"content":"An object that describes the error that caused the current exception.","pos":[0,69]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property returns the same value as was passed into the <ph id=\"ph2\">&lt;xref href=\"System.Exception.#ctor(System.String,System.Exception)\"&gt;&lt;/xref&gt;</ph> constructor, or <ph id=\"ph3\">`null`</ph> if the inner exception value was not supplied to the constructor.","pos":[70,346],"source":" The <xref href=\"System.Exception.InnerException\"></xref> property returns the same value as was passed into the <xref href=\"System.Exception.#ctor(System.String,System.Exception)\"></xref> constructor, or `null` if the inner exception value was not supplied to the constructor."},{"content":"This property is read-only.","pos":[347,374]}]}],"pos":[76537,76912],"yaml":true},{"content":"Gets a message that describes the current exception.","nodes":[{"pos":[0,52],"content":"Gets a message that describes the current exception.","nodes":[{"content":"Gets a message that describes the current exception.","pos":[0,52]}]}],"pos":[78354,78407],"yaml":true},{"content":"Error messages target the developer who is handling the exception. The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error. Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period. Do not use question marks or exclamation points. If your application uses localized exception messages, you should ensure that they are accurately translated.  \n  \n> [!IMPORTANT]\n>  Do not disclose sensitive information in exception messages without checking for the appropriate permissions.  \n  \n The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>. If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.  \n  \n## Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  \n Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved. In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.","nodes":[{"pos":[0,567],"content":"Error messages target the developer who is handling the exception. The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error. Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period. Do not use question marks or exclamation points. If your application uses localized exception messages, you should ensure that they are accurately translated.","nodes":[{"content":"Error messages target the developer who is handling the exception. The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error. Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period. Do not use question marks or exclamation points. If your application uses localized exception messages, you should ensure that they are accurately translated.","pos":[0,567],"nodes":[{"content":"Error messages target the developer who is handling the exception.","pos":[0,66]},{"content":"The text of the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property should completely describe the error and, when possible, should also explain how to correct the error.","pos":[67,229],"source":" The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error."},{"content":"Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.","pos":[230,408]},{"content":"Do not use question marks or exclamation points.","pos":[409,457]},{"content":"If your application uses localized exception messages, you should ensure that they are accurately translated.","pos":[458,567]}]}]},{"pos":[575,700],"content":"[!IMPORTANT]\n Do not disclose sensitive information in exception messages without checking for the appropriate permissions.","leadings":["","> "],"nodes":[{"content":"Do not disclose sensitive information in exception messages without checking for the appropriate permissions.","pos":[14,123]}]},{"pos":[707,1110],"content":"The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>. If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.","nodes":[{"content":"The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>. If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.","pos":[0,403],"nodes":[{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property is included in the information returned by <ph id=\"ph2\">&lt;xref:System.Exception.ToString%2A&gt;</ph>.The <ph id=\"ph3\">&lt;xref:System.Exception.Message%2A&gt;</ph> property is set only when creating an <ph id=\"ph4\">&lt;xref:System.Exception&gt;</ph>.","pos":[0,241],"source":"The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>."},{"content":"If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.","pos":[242,403]}]}]},{"pos":[1119,1186],"content":"Windows Runtime and <ph id=\"ph1\">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph>","linkify":"Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]","source":"Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]"},{"pos":[1190,1618],"content":"Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved. In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>, the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.","pos":[0,271],"source":"Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved."},{"content":"In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> objects.","pos":[272,428],"source":" In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects."}]}],"pos":[78418,80047],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception, or an empty string (\"\").","nodes":[{"pos":[0,86],"content":"The error message that explains the reason for the exception, or an empty string (\"\").","nodes":[{"content":"The error message that explains the reason for the exception, or an empty string (\"\").","pos":[0,86]}]}],"pos":[80805,80892],"yaml":true},{"content":"Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.","nodes":[{"pos":[0,125],"content":"Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.","nodes":[{"content":"Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.","pos":[0,125]}]}],"pos":[82402,82528],"yaml":true},{"content":"The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.  \n  \n When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception. The exception's constructor is not run, and the exception state is also deserialized. The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.  \n  \n The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data. Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.  \n  \n If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.  \n  \n Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization. But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception. To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=fullName> method. See the Examples section for an illustration.","nodes":[{"pos":[0,111],"content":"The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.","nodes":[{"content":"The exception state object implements the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISafeSerializationData&gt;</ph> interface.","pos":[0,111],"source":"The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface."}]},{"pos":[118,563],"content":"When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception. The exception's constructor is not run, and the exception state is also deserialized. The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.","nodes":[{"content":"When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception. The exception's constructor is not run, and the exception state is also deserialized. The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.","pos":[0,445],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is subscribed to, the exception is deserialized and created as an empty exception.","pos":[0,142],"source":"When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception."},{"content":"The exception's constructor is not run, and the exception state is also deserialized.","pos":[143,228]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A&gt;</ph> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.","pos":[229,445],"source":" The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception."}]}]},{"pos":[570,872],"content":"The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data. Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.","nodes":[{"content":"The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data. Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.","pos":[0,302],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event enables transparent exception types to serialize and deserialize exception data.","pos":[0,135],"source":"The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data."},{"content":"Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.","pos":[136,302]}]}]},{"pos":[879,1048],"content":"If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is not subscribed to, deserialization occurs as usual using the <ph id=\"ph2\">&lt;xref:System.Exception.%23ctor%2A&gt;</ph> constructor.","pos":[0,169],"source":"If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor."}]},{"pos":[1055,1769],"content":"Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization. But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception. To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=fullName> method. See the Examples section for an illustration.","nodes":[{"content":"Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization. But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception. To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=fullName> method. See the Examples section for an illustration.","pos":[0,714],"nodes":[{"content":"Typically, a handler for the <ph id=\"ph1\">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event is added in the exception's constructor to provide for its serialization.","pos":[0,153],"source":"Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization."},{"content":"But because the constructor is not executed when the <ph id=\"ph1\">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event handler executes, serializing a deserialized exception can throw a <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception when you try to deserialize the exception.","pos":[154,436],"source":" But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception."},{"content":"To avoid this, you should also add the handler for the <ph id=\"ph1\">&lt;xref:System.Exception.SerializeObjectState&gt;</ph> event in the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=fullName&gt;</ph> method.","pos":[437,668],"source":" To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=fullName> method."},{"content":"See the Examples section for an illustration.","pos":[669,714]}]}]}],"pos":[82539,84319],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the name of the application or the object that causes the error.","nodes":[{"pos":[0,77],"content":"Gets or sets the name of the application or the object that causes the error.","nodes":[{"content":"Gets or sets the name of the application or the object that causes the error.","pos":[0,77]}]}],"pos":[87022,87100],"yaml":true},{"content":"If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.","nodes":[{"pos":[0,169],"content":"If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Exception.Source%2A&gt;</ph> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.","pos":[0,169],"source":"If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated."}]}],"pos":[87111,87281],"yaml":true,"extradata":"MT"},{"content":"The name of the application or the object that causes the error.","nodes":[{"pos":[0,64],"content":"The name of the application or the object that causes the error.","nodes":[{"content":"The name of the application or the object that causes the error.","pos":[0,64]}]}],"pos":[88008,88073],"yaml":true},{"content":"The object must be a runtime <xref href=\"System.Reflection\"></xref> object","nodes":[{"pos":[0,74],"content":"The object must be a runtime <ph id=\"ph1\">&lt;xref href=\"System.Reflection\"&gt;&lt;/xref&gt;</ph> object","source":"The object must be a runtime <xref href=\"System.Reflection\"></xref> object"}],"pos":[88218,88293],"yaml":true},{"content":"Gets a string representation of the immediate frames on the call stack.","nodes":[{"pos":[0,71],"content":"Gets a string representation of the immediate frames on the call stack.","nodes":[{"content":"Gets a string representation of the immediate frames on the call stack.","pos":[0,71]}]}],"pos":[89691,89763],"yaml":true},{"content":"The execution stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called a stack trace. The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.  \n  \n The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown. You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=fullName> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=fullName> method.  \n  \n The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword). If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown. If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.  \n  \n The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.","nodes":[{"pos":[0,270],"content":"The execution stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called a stack trace. The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.","nodes":[{"content":"The execution stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called a stack trace. The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.","pos":[0,270],"nodes":[{"content":"The execution stack keeps track of all the methods that are in execution at a given instant.","pos":[0,92]},{"content":"A trace of the method calls is called a stack trace.","pos":[93,145]},{"content":"The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.","pos":[146,270]}]}]},{"pos":[277,694],"content":"The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown. You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=fullName> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown. You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=fullName> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=fullName> method.","pos":[0,417],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property returns the frames of the call stack that originate at the location where the exception was thrown.","pos":[0,150],"source":"The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown."},{"content":"You can obtain information about additional frames in the call stack by creating a new instance of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.StackTrace?displayProperty=fullName&gt;</ph> class and using its <ph id=\"ph2\">&lt;xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[151,417],"source":" You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=fullName> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=fullName> method."}]}]},{"pos":[701,1336],"content":"The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword). If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown. If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.","nodes":[{"content":"The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the <ph id=\"ph1\">`throw`</ph> keyword).","pos":[0,141],"source":"The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword)."},{"content":"If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.","pos":[142,414]},{"content":"If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.","pos":[415,635]}]},{"pos":[1343,1524],"content":"The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.","pos":[0,181],"source":"The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization."}]}],"pos":[89774,91307],"yaml":true,"extradata":"MT"},{"content":"A string that describes the immediate frames of the call stack.","nodes":[{"pos":[0,63],"content":"A string that describes the immediate frames of the call stack.","nodes":[{"content":"A string that describes the immediate frames of the call stack.","pos":[0,63]}]}],"pos":[92013,92077],"yaml":true},{"content":"Gets the method that throws the current exception.","nodes":[{"pos":[0,50],"content":"Gets the method that throws the current exception.","nodes":[{"content":"Gets the method that throws the current exception.","pos":[0,50]}]}],"pos":[93533,93584],"yaml":true},{"content":"If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace. If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.  \n  \n> [!NOTE]\n>  The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.","nodes":[{"pos":[0,318],"content":"If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace. If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.","nodes":[{"content":"If the method that throws this exception is not available and the stack trace is not a null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic), <ph id=\"ph2\">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> obtains the method from the stack trace.","pos":[0,209],"source":"If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace."},{"content":"If the stack trace is a null reference, <ph id=\"ph1\">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> also returns a null reference.","pos":[210,318],"source":" If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference."}]},{"pos":[326,553],"content":"[!NOTE]\n The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.TargetSite%2A&gt;</ph> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.","pos":[9,225],"source":" The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries."}]}],"pos":[93595,94154],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.MethodBase\"></xref> that threw the current exception.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> that threw the current exception.","source":"The <xref href=\"System.Reflection.MethodBase\"></xref> that threw the current exception."}],"pos":[94958,95046],"yaml":true},{"content":"Creates and returns a string representation of the current exception.","nodes":[{"pos":[0,69],"content":"Creates and returns a string representation of the current exception.","nodes":[{"content":"Creates and returns a string representation of the current exception.","pos":[0,69]}]}],"pos":[96218,96288],"yaml":true},{"content":"<xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans. Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture. Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.  \n  \n The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=fullName>. If any of these members is `null`, its value is not included in the returned string.  \n  \n If there is no error message or if it is an empty string (\"\"), then no error message is returned. The name of the inner exception and the stack trace are returned only if they are not `null`.  \n  \n This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.","nodes":[{"pos":[0,452],"content":"<xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans. Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture. Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Exception.ToString%2A&gt;</ph> returns a representation of the current exception that is intended to be understood by humans.","pos":[0,130],"source":"<xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans."},{"content":"Where the exception contains culture-sensitive data, the string representation returned by <ph id=\"ph1\">`ToString`</ph> is required to take into account the current system culture.","pos":[131,293],"source":" Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture."},{"content":"Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.","pos":[294,452]}]},{"pos":[459,860],"content":"The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=fullName>. If any of these members is `null`, its value is not included in the returned string.","nodes":[{"content":"The default implementation of <ph id=\"ph1\">&lt;xref:System.Exception.ToString%2A&gt;</ph> obtains the name of the class that threw the current exception, the message, the result of calling <ph id=\"ph2\">&lt;xref:System.Exception.ToString%2A&gt;</ph> on the inner exception, and the result of calling <ph id=\"ph3\">&lt;xref:System.Environment.StackTrace%2A?displayProperty=fullName&gt;</ph>.","pos":[0,316],"source":"The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=fullName>."},{"content":"If any of these members is <ph id=\"ph1\">`null`</ph>, its value is not included in the returned string.","pos":[317,401],"source":" If any of these members is `null`, its value is not included in the returned string."}]},{"pos":[867,1058],"content":"If there is no error message or if it is an empty string (\"\"), then no error message is returned. The name of the inner exception and the stack trace are returned only if they are not `null`.","nodes":[{"content":"If there is no error message or if it is an empty string (\"\"), then no error message is returned.","pos":[0,97]},{"content":"The name of the inner exception and the stack trace are returned only if they are not <ph id=\"ph1\">`null`</ph>.","pos":[98,191],"source":" The name of the inner exception and the stack trace are returned only if they are not `null`."}]},{"pos":[1065,1145],"content":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph>.","pos":[0,80],"source":"This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>."}]}],"pos":[96299,97455],"yaml":true,"extradata":"MT"},{"content":"A string representation of the current exception.","nodes":[{"pos":[0,49],"content":"A string representation of the current exception.","nodes":[{"content":"A string representation of the current exception.","pos":[0,49]}]}],"pos":[98409,98459],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Exception\n  commentId: T:System.Exception\n  id: Exception\n  children:\n  - System.Exception.#ctor\n  - System.Exception.#ctor(System.String)\n  - System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.#ctor(System.String,System.Exception)\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Represents errors that occur during application execution.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/exception.cs#f092fb2b893a0162). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n This class is the base class for all exceptions. When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error. After an exception is thrown, it is handled by the application or by the default exception handler.  \\n  \\n In this section:  \\n  \\n [Errors and exceptions](#Errors)   \\n [Try/catch blocks](#TryCatch)   \\n [Exception type features](#Features)   \\n [Exception class properties](#Properties)   \\n [Performance considerations](#Performance)   \\n [Re-throwing an exception](#Rethrow)   \\n [Choosing standard exceptions](#Standard)   \\n [Implementing custom exceptions](#Custom)  \\n  \\n<a name=\\\"Errors\\\"></a>   \\n## Errors and exceptions  \\n Run-time errors can occur for a variety of reasons. However, not all errors should be handled as exceptions in your code. Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.  \\n  \\n-   **Usage errors.** A usage error represents an error in program logic that can result in an exception. However, the error should be addressed not through exception handling but by modifying the faulty code. For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method in the following example assumes that the `obj` argument must always be non-null.  \\n  \\n     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]\\n     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  \\n  \\n     The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=fullName> override and then re-compiling. The following example contains the corrected source code that handles a `null` argument.  \\n  \\n     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]\\n     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  \\n  \\n     Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method to identify usage errors in both debug and release builds. For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1).  \\n  \\n-   **Program errors.** A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.  \\n  \\n     In some cases, a program error may reflect an expected or routine error condition. In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation. For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=fullName> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=fullName> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value. Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.  \\n  \\n     In other cases, a program error reflects an unexpected error condition that can be handled in your code. For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted. In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception. In these cases, you should use exception handling to recover from the error.  \\n  \\n-   **System failures.** A system failure is a run-time error that cannot be handled programmatically in a meaningful way. For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory. Ordinarily, system failures are not handled by using exception handling. Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=fullName> and call the <xref:System.Environment.FailFast%2A?displayProperty=fullName> method to log exception information and notify the user of the failure before the application terminates.  \\n  \\n<a name=\\\"TryCatch\\\"></a>   \\n## Try/catch blocks  \\n The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks. There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.  \\n  \\n If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block. Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block. Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.  \\n  \\n When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception. A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from. The system stops searching after it finds the first `catch` block that handles the exception. For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section. A catch block that handles `System.Exception` is specified last.  \\n  \\n If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched. If no `catch` block for the exception is found, the system searches previous nesting levels in the current call. If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception. The search of the call stack continues until the exception is handled or until no more frames exist on the call stack. If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.  \\n  \\n<a name=\\\"Features\\\"></a>   \\n## Exception type features  \\n Exception types support the following features:  \\n  \\n-   Human-readable text that describes the error. When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem. This text message is held in the <xref:System.Exception.Message%2A> property of the exception object. During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception. If no error message argument is supplied to the constructor, the default error message is used. For more information, see the <xref:System.Exception.Message%2A> property.  \\n  \\n-   The state of the call stack when the exception was thrown. The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code. The stack trace lists all the called methods and the line numbers in the source file where the calls are made.  \\n  \\n<a name=\\\"Properties\\\"></a>   \\n## Exception class properties  \\n The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.  \\n  \\n When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information. The outer exception is thrown in response to this inner exception. The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately. Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.  \\n  \\n The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class. For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.  \\n  \\n To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.  \\n  \\n The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.  \\n  \\n For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.  \\n  \\n<a name=\\\"Performance\\\"></a>   \\n## Performance considerations  \\n Throwing or handling an exception consumes a significant amount of system resources and execution time. Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control. For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters. An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred. Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data. Instead, provide a retry mechanism so users can enter valid input. Nor should you use exceptions to handle usage errors. Instead, use [assertions](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1) to identify and correct usage errors.  \\n  \\n In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.  \\n  \\n<a name=\\\"Rethrow\\\"></a>   \\n## Re-throwing an exception  \\n In many cases, an exception handler simply wants to pass the exception on to the caller. This most often occurs in:  \\n  \\n-   A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.  \\n  \\n-   An application or library that encounters a fatal exception. The exception handler can log the exception and then re-throw the exception.  \\n  \\n The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression. This ensures that all call stack information is preserved when the exception is propagated to the caller. The following example illustrates this. A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> without validating its arguments beforehand.  \\n  \\n [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]\\n [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  \\n  \\n A caller then calls `FindOccurrences` twice. In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=fullName> method to throw an <xref:System.ArgumentNullException> exception. This exception is handled by the `FindOccurrences` method and passed back to the caller. Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.  \\n  \\n [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]\\n [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  \\n  \\n In contrast, if the exception is re-thrown by using the  \\n  \\n```csharp  \\nthrow e  \\n```  \\n  \\n```vb  \\nThrow e  \\n```  \\n  \\n statement, the full call stack is not preserved, and the example would generate the following output:  \\n  \\n```Output  \\n  \\n'a' occurs at the following character positions: 4, 7, 15  \\n  \\nAn exception (ArgumentNullException) occurred.  \\nMessage:  \\n   Value cannot be null.  \\nParameter name: value  \\n  \\nStack Trace:  \\n      at Library.FindOccurrences(String s, String f)  \\n   at Example.Main()  \\n  \\n```  \\n  \\n A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception. The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception. In this case, the throw statement is:  \\n  \\n [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]\\n [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  \\n  \\n The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.  \\n  \\n [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]\\n [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  \\n  \\n<a name=\\\"Standard\\\"></a>   \\n## Choosing standard exceptions  \\n When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception. You should use a standard exception type under these two conditions:  \\n  \\n-   You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method). Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>. The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it. For more information, see the <xref:System.Exception.Message%2A> property.  \\n  \\n-   You are handling an error that can be communicated to the caller with an existing .NET Framework exception. You should throw the most derived exception possible. For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.  \\n  \\n The following table lists common exception types and the conditions under which you would throw them.  \\n  \\n|Exception|Condition|  \\n|---------------|---------------|  \\n|<xref:System.ArgumentException>|A non-null argument that is passed to a method is invalid.|  \\n|<xref:System.ArgumentNullException>|An argument that is passed to a method is `null`.|  \\n|<xref:System.ArgumentOutOfRangeException>|An argument is outside the range of valid values.|  \\n|<xref:System.IO.DirectoryNotFoundException>|Part of a directory path is not valid.|  \\n|<xref:System.DivideByZeroException>|The denominator in an integer or <xref:System.Decimal> division operation is zero.|  \\n|<xref:System.IO.DriveNotFoundException>|A drive is unavailable or does not exist.|  \\n|<xref:System.IO.FileNotFoundException>|A file does not exist.|  \\n|<xref:System.FormatException>|A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.|  \\n|<xref:System.IndexOutOfRangeException>|An index is outside the bounds of an array or collection.|  \\n|<xref:System.InvalidOperationException>|A method call is invalid in an object's current state.|  \\n|<xref:System.Collections.Generic.KeyNotFoundException>|The specified key for accessing a member in a collection cannot be found.|  \\n|<xref:System.NotImplementedException>|A method or operation is not implemented.|  \\n|<xref:System.NotSupportedException>|A method or operation is not supported.|  \\n|<xref:System.ObjectDisposedException>|An operation is performed on an object that has been disposed.|  \\n|<xref:System.OverflowException>|An arithmetic, casting, or conversion operation results in an overflow.|  \\n|<xref:System.IO.PathTooLongException>|A path or file name exceeds the maximum system-defined length.|  \\n|<xref:System.PlatformNotSupportedException>|The operation is not supported on the current platform.|  \\n|<xref:System.RankException>|An array with the wrong number of dimensions is passed to a method.|  \\n|<xref:System.TimeoutException>|The time interval allotted to an operation has expired.|  \\n|<xref:System.UriFormatException>|An invalid Uniform Resource Identifier (URI) is used.|  \\n  \\n<a name=\\\"Custom\\\"></a>   \\n## Implementing custom exceptions  \\n In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:  \\n  \\n-   When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.  \\n  \\n-   When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception. For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.  \\n  \\n The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework. Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.  \\n  \\n To define your own exception class:  \\n  \\n1.  Define a class that inherits from <xref:System.Exception>. If necessary, define any unique members needed by your class to provide additional information about the exception. For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.  \\n  \\n2.  If necessary, override any inherited members whose functionality you want to change or modify. Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.  \\n  \\n3.  Determine whether your custom exception object is serializable. Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context. To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.  \\n  \\n4.  Define the constructors of your exception class. Typically, exception classes have one or more of the following constructors:  \\n  \\n    -   <xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.  \\n  \\n    -   <xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.  \\n  \\n    -   <xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.  \\n  \\n    -   <xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data. You should implement this constructor if you've chosen to make your exception object serializable.  \\n  \\n The following example illustrates the use of a custom exception class. It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime. The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception. Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.  Each constructor calls a base class constructor in addition to preserving the value of the non-prime number. The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.  \\n  \\n [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]\\n [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  \\n  \\n The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor. The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.  \\n  \\n [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]\\n [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  \\n  \\n The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries. In both cases, the exception is thrown and successfully handled in client code.  \\n  \\n [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]\\n [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  \\n  \\n## Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  \\n In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames. Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.\"\n  example:\n  - \"The following example demonstrates a `catch` block that is defined to handle <xref:System.ArithmeticException> errors. This `catch` block also catches <xref:System.DivideByZeroException> errors, because <xref:System.DivideByZeroException> derives from <xref:System.ArithmeticException> and there is no `catch` block explicitly defined for <xref:System.DivideByZeroException> errors.  \\n  \\n [!code-cpp[CatchException#1](~/samples/snippets/cpp/VS_Snippets_CLR/CatchException/CPP/catchexception.cpp#1)]\\n [!code-csharp[CatchException#1](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception.cs#1)]\\n [!code-vb[CatchException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - Microsoft.Build.BuildEngine.InternalLoggerException\n  - Microsoft.Build.BuildEngine.InvalidProjectFileException\n  - Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException\n  - Microsoft.Build.BuildEngine.RemoteErrorException\n  - Microsoft.Build.Exceptions.BuildAbortedException\n  - Microsoft.Build.Exceptions.InternalLoggerException\n  - Microsoft.Build.Exceptions.InvalidProjectFileException\n  - Microsoft.Build.Exceptions.InvalidToolsetDefinitionException\n  - Microsoft.Build.Framework.LoggerException\n  - Microsoft.CSharp.RuntimeBinder.RuntimeBinderException\n  - Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException\n  - Microsoft.FSharp.Core.MatchFailureException\n  - Microsoft.JScript.CmdLineException\n  - Microsoft.JScript.ParserException\n  - Microsoft.VisualBasic.ApplicationServices.CantStartSingleInstanceException\n  - Microsoft.VisualBasic.ApplicationServices.NoStartupFormException\n  - Microsoft.VisualBasic.Compatibility.VB6.WebClassContainingClassNotOptional\n  - Microsoft.VisualBasic.Compatibility.VB6.WebClassCouldNotFindEvent\n  - Microsoft.VisualBasic.Compatibility.VB6.WebClassNextItemCannotBeCurrentWebItem\n  - Microsoft.VisualBasic.Compatibility.VB6.WebClassNextItemRespondNotFound\n  - Microsoft.VisualBasic.Compatibility.VB6.WebClassUserWebClassNameNotOptional\n  - Microsoft.VisualBasic.Compatibility.VB6.WebClassWebClassFileNameNotOptional\n  - Microsoft.VisualBasic.Compatibility.VB6.WebClassWebItemNotValid\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemAssociatedWebClassNotOptional\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemClosingTagNotFound\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemCouldNotLoadEmbeddedResource\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemCouldNotLoadTemplateFile\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemNameNotOptional\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemNoTemplateSpecified\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemTooManyNestedTags\n  - Microsoft.VisualBasic.Compatibility.VB6.WebItemUnexpectedErrorReadingTemplateFile\n  - Microsoft.VisualBasic.CompilerServices.IncompleteInitialization\n  - Microsoft.VisualBasic.CompilerServices.InternalErrorException\n  - Microsoft.VisualBasic.FileIO.MalformedLineException\n  - Mono.Security.Interface.TlsException\n  - System.AggregateException\n  - System.ApplicationException\n  - System.ArgumentException\n  - System.ArithmeticException\n  - System.ArrayTypeMismatchException\n  - System.BadImageFormatException\n  - System.DataMisalignedException\n  - System.FormatException\n  - System.IndexOutOfRangeException\n  - System.InsufficientExecutionStackException\n  - System.InvalidCastException\n  - System.InvalidOperationException\n  - System.InvalidProgramException\n  - System.InvalidTimeZoneException\n  - System.MemberAccessException\n  - System.NotImplementedException\n  - System.NotSupportedException\n  - System.NullReferenceException\n  - System.OperationCanceledException\n  - System.OutOfMemoryException\n  - System.RankException\n  - System.SystemException\n  - System.TimeoutException\n  - System.TimeZoneNotFoundException\n  - System.TypeInitializationException\n  - System.TypeLoadException\n  - System.UnauthorizedAccessException\n  - System.Activities.InvalidWorkflowException\n  - System.Activities.VersionMismatchException\n  - System.Activities.WorkflowApplicationException\n  - System.Activities.DynamicUpdate.InstanceUpdateException\n  - System.Activities.ExpressionParser.SourceExpressionException\n  - System.Activities.Expressions.LambdaSerializationException\n  - System.Activities.Presentation.Metadata.AttributeTableValidationException\n  - System.Activities.Statements.WorkflowTerminatedException\n  - System.AddIn.Hosting.AddInSegmentDirectoryNotFoundException\n  - System.AddIn.Hosting.InvalidPipelineStoreException\n  - System.Collections.Generic.KeyNotFoundException\n  - System.ComponentModel.Win32Exception\n  - System.ComponentModel.Composition.CompositionContractMismatchException\n  - System.ComponentModel.Composition.CompositionException\n  - System.ComponentModel.Composition.ImportCardinalityMismatchException\n  - System.ComponentModel.Composition.Primitives.ComposablePartException\n  - System.ComponentModel.DataAnnotations.ValidationException\n  - System.ComponentModel.Design.ExceptionCollection\n  - System.Composition.Hosting.CompositionFailedException\n  - System.Configuration.SettingsPropertyIsReadOnlyException\n  - System.Configuration.SettingsPropertyNotFoundException\n  - System.Configuration.SettingsPropertyWrongTypeException\n  - System.Configuration.Provider.ProviderException\n  - System.Data.Common.DbException\n  - System.Data.Linq.ChangeConflictException\n  - System.Data.SqlTypes.SqlTypeException\n  - System.Diagnostics.Eventing.Reader.EventLogException\n  - System.Diagnostics.Tracing.EventSourceException\n  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException\n  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException\n  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException\n  - System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException\n  - System.DirectoryServices.Protocols.DirectoryException\n  - System.IdentityModel.AsynchronousOperationException\n  - System.IdentityModel.RequestException\n  - System.IdentityModel.Metadata.MetadataSerializationException\n  - System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException\n  - System.IdentityModel.Selectors.CardSpaceException\n  - System.IdentityModel.Selectors.IdentityValidationException\n  - System.IdentityModel.Selectors.PolicyValidationException\n  - System.IdentityModel.Selectors.ServiceBusyException\n  - System.IdentityModel.Selectors.ServiceNotStartedException\n  - System.IdentityModel.Selectors.StsCommunicationException\n  - System.IdentityModel.Selectors.UnsupportedPolicyOptionsException\n  - System.IdentityModel.Selectors.UntrustedRecipientException\n  - System.IdentityModel.Selectors.UserCancellationException\n  - System.IdentityModel.Services.AsynchronousOperationException\n  - System.IdentityModel.Services.FederatedAuthenticationSessionEndingException\n  - System.IdentityModel.Services.FederationException\n  - System.IdentityModel.Services.WSFederationMessageException\n  - System.IO.InvalidDataException\n  - System.IO.IOException\n  - System.IO.IsolatedStorage.IsolatedStorageException\n  - System.IO.Log.SequenceFullException\n  - System.Management.Instrumentation.InstrumentationBaseException\n  - System.Management.Instrumentation.WmiProviderInstallationException\n  - System.Net.Http.HttpRequestException\n  - System.Net.Mail.SmtpException\n  - System.Net.NetworkInformation.NetworkInformationException\n  - System.Net.PeerToPeer.PeerToPeerException\n  - System.Net.Sockets.SocketException\n  - System.Net.WebSockets.WebSocketException\n  - System.Reflection.AmbiguousMatchException\n  - System.Reflection.InvalidFilterCriteriaException\n  - System.Reflection.ReflectionTypeLoadException\n  - System.Reflection.TargetException\n  - System.Reflection.TargetInvocationException\n  - System.Reflection.TargetParameterCountException\n  - System.Reflection.Metadata.ImageFormatLimitationException\n  - System.Resources.MissingManifestResourceException\n  - System.Runtime.CompilerServices.RuntimeWrappedException\n  - System.Runtime.DurableInstancing.InstancePersistenceException\n  - System.Runtime.InteropServices.COMException\n  - System.Runtime.InteropServices.InvalidComObjectException\n  - System.Runtime.InteropServices.InvalidOleVariantTypeException\n  - System.Runtime.InteropServices.MarshalDirectiveException\n  - System.Runtime.InteropServices.SafeArrayRankMismatchException\n  - System.Runtime.InteropServices.SafeArrayTypeMismatchException\n  - System.Runtime.InteropServices.SEHException\n  - System.Runtime.Remoting.MetadataServices.SUDSGeneratorException\n  - System.Runtime.Remoting.MetadataServices.SUDSParserException\n  - System.Runtime.Serialization.InvalidDataContractException\n  - System.Runtime.Serialization.SerializationException\n  - System.Security.SecurityException\n  - System.Security.VerificationException\n  - System.Security.Authentication.AuthenticationException\n  - System.Security.Cryptography.CryptographicException\n  - System.Security.Principal.IdentityNotMappedException\n  - System.Security.RightsManagement.RightsManagementException\n  - System.ServiceModel.Channels.InvalidChannelBindingException\n  - System.ServiceProcess.TimeoutException\n  - System.Threading.AbandonedMutexException\n  - System.Threading.BarrierPostPhaseException\n  - System.Threading.LockRecursionException\n  - System.Threading.SemaphoreFullException\n  - System.Threading.SynchronizationLockException\n  - System.Threading.ThreadStartException\n  - System.Threading.ThreadStateException\n  - System.Threading.WaitHandleCannotBeOpenedException\n  - System.Threading.Tasks.TaskSchedulerException\n  - System.Web.Query.Dynamic.ParseException\n  - System.Web.Security.MembershipCreateUserException\n  - System.Web.Security.MembershipPasswordException\n  - System.Web.UI.ViewStateException\n  - System.Web.UI.WebControls.EntityDataSourceValidationException\n  - System.Web.UI.WebControls.LinqDataSourceValidationException\n  - System.Windows.Automation.NoClickablePointException\n  - System.Windows.Automation.ProxyAssemblyNotLoadedException\n  - System.Windows.Controls.PrintDialogException\n  - System.Windows.Forms.AxHost.InvalidActiveXStateException\n  - System.Windows.Xps.XpsException\n  - System.Windows.Xps.XpsWriterException\n  - System.Workflow.Activities.Rules.RuleException\n  - System.Workflow.ComponentModel.WorkflowTerminatedException\n  - System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException\n  - System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException\n  - System.Workflow.Runtime.WorkflowOwnershipException\n  - System.Xaml.XamlException\n  - System.Xml.XmlException\n  - System.Xml.XPath.XPathException\n  implements:\n  - System.Runtime.InteropServices._Exception\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.#ctor\n  commentId: M:System.Exception.#ctor\n  id: '#ctor'\n  parent: System.Exception\n  langs:\n  - csharp\n  name: Exception()\n  nameWithType: Exception.Exception()\n  fullName: Exception.Exception()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Exception\"></xref> class.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.  \\n  \\n All the derived classes should provide this default constructor. The following table shows the initial property values for an instance of <xref:System.Exception>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|A system-supplied localized description.|\"\n  example:\n  - \"The following code example derives an `Exception` that uses a predefined message. The code demonstrates the use of the parameterless constructor for the derived class and the base `Exception` class.  \\n  \\n [!code-cpp[System.Exception.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/new.cpp#1)]\\n [!code-csharp[System.Exception.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/new.cs#1)]\\n [!code-vb[System.Exception.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/new.vb#1)]\"\n  syntax:\n    content: public Exception ();\n    parameters: []\n  overload: System.Exception.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.#ctor(System.String)\n  commentId: M:System.Exception.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Exception\n  langs:\n  - csharp\n  name: Exception(String)\n  nameWithType: Exception.Exception(String)\n  fullName: Exception.Exception(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with a specified error message.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter. If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.Exception>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  example:\n  - \"The following code example derives an `Exception` for a specific condition. The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base `Exception` class.  \\n  \\n [!code-cpp[System.Exception.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/news.cpp#2)]\\n [!code-csharp[System.Exception.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/news.cs#2)]\\n [!code-vb[System.Exception.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/news.vb#2)]\"\n  syntax:\n    content: public Exception (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the error.\n  overload: System.Exception.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Exception\n  langs:\n  - csharp\n  name: Exception(SerializationInfo, StreamingContext)\n  nameWithType: Exception.Exception(SerializationInfo, StreamingContext)\n  fullName: Exception.Exception(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with serialized data.\n  remarks: This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).\n  example:\n  - \"The following code example defines a derived serializable `Exception` class. The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) constructor. The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.  \\n  \\n [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]\\n [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]\\n [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]\"\n  syntax:\n    content: protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.\n  overload: System.Exception.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is `null`.\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: The class name is `null` or <xref href=\"System.Exception.HResult\"></xref> is zero (0).\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.#ctor(System.String,System.Exception)\n  commentId: M:System.Exception.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Exception\n  langs:\n  - csharp\n  name: Exception(String, Exception)\n  nameWithType: Exception.Exception(String, Exception)\n  fullName: Exception.Exception(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.Exception\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.\n  remarks: \"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.Exception>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  example:\n  - \"The following code example derives an `Exception` for a specific condition. The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base `Exception` class.  \\n  \\n [!code-cpp[System.Exception.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/newsi.cpp#3)]\\n [!code-csharp[System.Exception.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/newsi.cs#3)]\\n [!code-vb[System.Exception.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/newsi.vb#3)]\"\n  syntax:\n    content: public Exception (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for the exception.\n    - id: innerException\n      type: System.Exception\n      description: The exception that is the cause of the current exception, or a null reference (`Nothing` in Visual Basic) if no inner exception is specified.\n  overload: System.Exception.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.Data\n  commentId: P:System.Exception.Data\n  id: Data\n  parent: System.Exception\n  langs:\n  - csharp\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a collection of key/value pairs that provide additional user-defined information about the exception.\n  remarks: \"Use the <xref:System.Collections.IDictionary?displayProperty=fullName> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception. The information is in the form of an arbitrary number of user-defined key/value pairs. The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.  \\n  \\n## Key/Value Pair Security  \\n The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure. If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers. If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler. This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.  \\n  \\n## Key Conflicts  \\n A key conflict occurs when different exception handlers specify the same key to access a key/value pair. Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors. However, if you are cautious you can use key conflicts to enhance your application.  \\n  \\n## Avoiding Key Conflicts  \\n Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs. For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.  \\n  \\n Suppose two applications, named Products and Suppliers, each has a method named Sales. The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product. The Sales method in the Suppliers application provides the identification number, or SID, of a supplier. Consequently, the naming convention for this example yields the keys, \\\"Products.Sales.SKU\\\" and \\\"Suppliers.Sales.SID\\\".  \\n  \\n## Exploiting Key Conflicts  \\n Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing. Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers. If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.  \\n  \\n Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler. In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.  \\n  \\n Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler. After the update process is complete, the exception handler throws the exception to the next higher-level exception handler. Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.\"\n  example:\n  - \"The following example demonstrates how to add and retrieve information using the <xref:System.Exception.Data%2A> property.  \\n  \\n [!code-cpp[exception.data#1](~/samples/snippets/cpp/VS_Snippets_CLR/exception.data/CPP/data.cpp#1)]\\n [!code-csharp[exception.data#1](~/samples/snippets/csharp/VS_Snippets_CLR/exception.data/CS/data.cs#1)]\\n [!code-vb[exception.data#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/exception.data/VB/data.vb#1)]\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public virtual System.Collections.IDictionary Data { get; }\n    return:\n      type: System.Collections.IDictionary\n      description: An object that implements the <xref href=\"System.Collections.IDictionary\"></xref> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.\n  overload: System.Exception.Data*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.GetBaseException\n  commentId: M:System.Exception.GetBaseException\n  id: GetBaseException\n  parent: System.Exception\n  langs:\n  - csharp\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: When overridden in a derived class, returns the <xref href=\"System.Exception\"></xref> that is the root cause of one or more subsequent exceptions.\n  remarks: \"A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property. For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain. This exception is called the base exception and its `InnerException` property always contains a null reference.  \\n  \\n For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).  \\n  \\n Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.\"\n  example:\n  - \"The following code example defines two derived `Exception` classes. It forces an exception and then throws it again with each of the derived classes. The code shows the use of the `GetBaseException` method to retrieve the original exception.  \\n  \\n [!code-cpp[System.Exception.GetBaseException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CPP/getbaseexc.cpp#1)]\\n [!code-csharp[System.Exception.GetBaseException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CS/getbaseexc.cs#1)]\\n [!code-vb[System.Exception.GetBaseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetBaseException/VB/getbaseexc.vb#1)]\"\n  syntax:\n    content: public virtual Exception GetBaseException ();\n    parameters: []\n    return:\n      type: System.Exception\n      description: The first exception thrown in a chain of exceptions. If the <xref href=\"System.Exception.InnerException\"></xref> property of the current exception is a null reference (`Nothing` in Visual Basic), this property returns the current exception.\n  overload: System.Exception.GetBaseException*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: When overridden in a derived class, sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> with information about the exception.\n  remarks: '`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.'\n  example:\n  - \"The following code example defines a derived serializable `Exception` class that implements `GetObjectData`, which makes minor changes to two properties and then calls the base class to perform the serialization. The example forces a divide-by-0 error and then creates an instance of the derived exception. The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.  \\n  \\n [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]\\n [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]\\n [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.\n  overload: System.Exception.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is a null reference (`Nothing` in Visual Basic).\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.GetType\n  commentId: M:System.Exception.GetType\n  id: GetType\n  parent: System.Exception\n  langs:\n  - csharp\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the runtime type of the current instance.\n  remarks: The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=fullName>.\n  syntax:\n    content: public Type GetType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the exact runtime type of the current instance.\n  overload: System.Exception.GetType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.HelpLink\n  commentId: P:System.Exception.HelpLink\n  id: HelpLink\n  parent: System.Exception\n  langs:\n  - csharp\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets or sets a link to the help file associated with this exception.\n  remarks: \"The return value, which represents a help file, is a URN or URL. For example, the `HelpLink` value could be:  \\n  \\n \\\"file:///C:/Applications/Bazzal/help.html#ErrorNum42\\\"\"\n  example:\n  - \"The following code example throws an `Exception` that sets the `HelpLink` property in its constructor and then catches the exception and displays `HelpLink`.  \\n  \\n [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]\\n [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]\\n [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]\"\n  syntax:\n    content: public virtual string HelpLink { get; set; }\n    return:\n      type: System.String\n      description: The Uniform Resource Name (URN) or Uniform Resource Locator (URL).\n  overload: System.Exception.HelpLink*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.HResult\n  commentId: P:System.Exception.HResult\n  id: HResult\n  parent: System.Exception\n  langs:\n  - csharp\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.\n  remarks: \"HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code. The severity code indicates whether the return value represents information, warning, or error. The facility code identifies the area of the system responsible for the error. The error code is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT. When managed code throws an exception, the runtime passes the HRESULT to the COM client. When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime. For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md). See [Common HRESULT Values](http://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.  \\n  \\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.  In previous versions of the .NET Framework, both getter and setter are protected.\"\n  example:\n  - \"The following code example defines a derived `Exception` class that sets the `HResult` property to a custom value in its constructor.  \\n  \\n [!code-cpp[System.Exception.HResult#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.HResult/CPP/hresult.cpp#1)]\\n [!code-csharp[System.Exception.HResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.HResult/CS/hresult.cs#1)]\\n [!code-vb[System.Exception.HResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.HResult/VB/hresult.vb#1)]\"\n  syntax:\n    content: public int HResult { get; protected set; }\n    return:\n      type: System.Int32\n      description: The HRESULT value.\n  overload: System.Exception.HResult*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.InnerException\n  commentId: P:System.Exception.InnerException\n  id: InnerException\n  parent: System.Exception\n  langs:\n  - csharp\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets the <xref href=\"System.Exception\"></xref> instance that caused the current exception.\n  remarks: \"When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.  \\n  \\n Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.  \\n  \\n You can create a new exception that catches an earlier exception. The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.  \\n  \\n Suppose that there is a function that reads a file and formats the data from that file. In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown. The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>. The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.  \\n  \\n The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.\"\n  example:\n  - \"The following example demonstrates throwing and catching an exception that references an inner exception.  \\n  \\n [!code-cpp[InnerEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/InnerEx/CPP/innerex.cpp#1)]\\n [!code-csharp[InnerEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/InnerEx/CS/innerex.cs#1)]\\n [!code-vb[InnerEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InnerEx/VB/innerex.vb#1)]\"\n  syntax:\n    content: public Exception InnerException { get; }\n    return:\n      type: System.Exception\n      description: An object that describes the error that caused the current exception. The <xref href=\"System.Exception.InnerException\"></xref> property returns the same value as was passed into the <xref href=\"System.Exception.#ctor(System.String,System.Exception)\"></xref> constructor, or `null` if the inner exception value was not supplied to the constructor. This property is read-only.\n  overload: System.Exception.InnerException*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.Message\n  commentId: P:System.Exception.Message\n  id: Message\n  parent: System.Exception\n  langs:\n  - csharp\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a message that describes the current exception.\n  remarks: \"Error messages target the developer who is handling the exception. The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error. Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period. Do not use question marks or exclamation points. If your application uses localized exception messages, you should ensure that they are accurately translated.  \\n  \\n> [!IMPORTANT]\\n>  Do not disclose sensitive information in exception messages without checking for the appropriate permissions.  \\n  \\n The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>. If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.  \\n  \\n## Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  \\n Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved. In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.\"\n  example:\n  - \"The following code example throws and then catches an <xref:System.Exception>Exception and displays the exception's text message using the <xref:System.Exception.Message%2A> property.  \\n  \\n [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]\\n [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]\\n [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]\"\n  syntax:\n    content: public virtual string Message { get; }\n    return:\n      type: System.String\n      description: The error message that explains the reason for the exception, or an empty string (\"\").\n  overload: System.Exception.Message*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.SerializeObjectState\n  commentId: E:System.Exception.SerializeObjectState\n  id: SerializeObjectState\n  parent: System.Exception\n  langs:\n  - csharp\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n  type: Event\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.\n  remarks: \"The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.  \\n  \\n When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception. The exception's constructor is not run, and the exception state is also deserialized. The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.  \\n  \\n The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data. Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.  \\n  \\n If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.  \\n  \\n Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization. But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception. To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=fullName> method. See the Examples section for an illustration.\"\n  example:\n  - \"The following example defines a `BadDivisionException` that handles the <xref:System.Exception.SerializeObjectState> event. It also contains a state object, which is a nested structure named `BadDivisionExceptionState` that implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.  \\n  \\n [!code-csharp[System.Exception.SerializeObjectState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.serializeobjectstate/cs/example2.cs#1)]\\n [!code-vb[System.Exception.SerializeObjectState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.serializeobjectstate/vb/example2.vb#1)]  \\n  \\n The `BadDivisionException` exception is thrown when a floating-point division by zero occurs. During the first division by zero, the example instantiates a `BadDivisionException` object, serializes it, and throws the exception. When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception. To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <xref:System.Exception.SerializeObjectState> event handler both in the `BadDivisionException` class constructor and in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=fullName> implementation.\"\n  syntax:\n    content: protected event EventHandler<System.Runtime.Serialization.SafeSerializationEventArgs> SerializeObjectState;\n    return:\n      type: System.EventHandler{System.Runtime.Serialization.SafeSerializationEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.Source\n  commentId: P:System.Exception.Source\n  id: Source\n  parent: System.Exception\n  langs:\n  - csharp\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets or sets the name of the application or the object that causes the error.\n  remarks: If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.\n  example:\n  - \"The following example throws an `Exception` that sets the `Source` property in its constructor and then catches the exception and displays `Source`.  \\n  \\n [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]\\n [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]\\n [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]\"\n  syntax:\n    content: public virtual string Source { get; set; }\n    return:\n      type: System.String\n      description: The name of the application or the object that causes the error.\n  overload: System.Exception.Source*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The object must be a runtime <xref href=\"System.Reflection\"></xref> object\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.StackTrace\n  commentId: P:System.Exception.StackTrace\n  id: StackTrace\n  parent: System.Exception\n  langs:\n  - csharp\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets a string representation of the immediate frames on the call stack.\n  remarks: \"The execution stack keeps track of all the methods that are in execution at a given instant. A trace of the method calls is called a stack trace. The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.  \\n  \\n The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown. You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=fullName> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=fullName> method.  \\n  \\n The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword). If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown. If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.  \\n  \\n The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.\"\n  example:\n  - \"The following code example throws an `Exception` and then catches it and displays a stack trace using the `StackTrace` property.  \\n  \\n [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]\\n [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]\\n [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]\"\n  syntax:\n    content: public virtual string StackTrace { get; }\n    return:\n      type: System.String\n      description: A string that describes the immediate frames of the call stack.\n  overload: System.Exception.StackTrace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.TargetSite\n  commentId: P:System.Exception.TargetSite\n  id: TargetSite\n  parent: System.Exception\n  langs:\n  - csharp\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Gets the method that throws the current exception.\n  remarks: \"If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace. If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.\"\n  example:\n  - \"The following code example throws an `Exception` and then catches it and displays the originating method using the `TargetSite` property.  \\n  \\n [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]\\n [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]\\n [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public System.Reflection.MethodBase TargetSite { get; }\n    return:\n      type: System.Reflection.MethodBase\n      description: The <xref href=\"System.Reflection.MethodBase\"></xref> that threw the current exception.\n  overload: System.Exception.TargetSite*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Exception.ToString\n  commentId: M:System.Exception.ToString\n  id: ToString\n  parent: System.Exception\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Creates and returns a string representation of the current exception.\n  remarks: \"<xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans. Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture. Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.  \\n  \\n The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=fullName>. If any of these members is `null`, its value is not included in the returned string.  \\n  \\n If there is no error message or if it is an empty string (\\\"\\\"), then no error message is returned. The name of the inner exception and the stack trace are returned only if they are not `null`.  \\n  \\n This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example causes an exception and displays the result of calling <xref:System.Exception.ToString%2A> on that exception. Note that the <xref:System.Exception.ToString%2A?displayProperty=fullName> method is called implicitly when the Exception class instance appears in the argument list of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method.  \\n  \\n [!code-cpp[System.Exception.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.exception.tostring/cpp/ToStringEx1.cpp#1)]\\n [!code-csharp[System.Exception.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.tostring/cs/ToStringEx1.cs#1)]\\n [!code-vb[System.Exception.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.tostring/vb/ToStringEx1.vb#1)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string representation of the current exception.\n  overload: System.Exception.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Runtime.Serialization.SerializationException\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationException\n  nameWithType: SerializationException\n  fullName: System.Runtime.Serialization.SerializationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Exception.#ctor\n  parent: System.Exception\n  isExternal: false\n  name: Exception()\n  nameWithType: Exception.Exception()\n  fullName: Exception.Exception()\n- uid: System.Exception.#ctor(System.String)\n  parent: System.Exception\n  isExternal: false\n  name: Exception(String)\n  nameWithType: Exception.Exception(String)\n  fullName: Exception.Exception(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: Exception(SerializationInfo, StreamingContext)\n  nameWithType: Exception.Exception(SerializationInfo, StreamingContext)\n  fullName: Exception.Exception(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Exception.#ctor(System.String,System.Exception)\n  parent: System.Exception\n  isExternal: false\n  name: Exception(String, Exception)\n  nameWithType: Exception.Exception(String, Exception)\n  fullName: Exception.Exception(String, Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  nameWithType: IDictionary\n  fullName: System.Collections.IDictionary\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Runtime.Serialization.SafeSerializationEventArgs\n  name: SafeSerializationEventArgs\n  nameWithType: SafeSerializationEventArgs\n  fullName: System.Runtime.Serialization.SafeSerializationEventArgs\n- uid: System.EventHandler{System.Runtime.Serialization.SafeSerializationEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<SafeSerializationEventArgs>\n  nameWithType: EventHandler<SafeSerializationEventArgs>\n  fullName: System.EventHandler<System.Runtime.Serialization.SafeSerializationEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Runtime.Serialization.SafeSerializationEventArgs\n    name: SafeSerializationEventArgs\n    nameWithType: SafeSerializationEventArgs\n    fullName: System.Runtime.Serialization.SafeSerializationEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.#ctor*\n  parent: System.Exception\n  isExternal: false\n  name: Exception\n  nameWithType: Exception.Exception\n  fullName: Exception.Exception\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.Data*\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.GetBaseException*\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException\n  nameWithType: Exception.GetBaseException\n  fullName: Exception.GetBaseException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.GetObjectData*\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData\n  nameWithType: Exception.GetObjectData\n  fullName: Exception.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.GetType*\n  parent: System.Exception\n  isExternal: false\n  name: GetType\n  nameWithType: Exception.GetType\n  fullName: Exception.GetType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.HelpLink*\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.HResult*\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.InnerException*\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.Message*\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.Source*\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.StackTrace*\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.TargetSite*\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Exception.ToString*\n  parent: System.Exception\n  isExternal: false\n  name: ToString\n  nameWithType: Exception.ToString\n  fullName: Exception.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Exception.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Runtime.InteropServices._Exception\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _Exception\n  nameWithType: _Exception\n  fullName: System.Runtime.InteropServices._Exception\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}