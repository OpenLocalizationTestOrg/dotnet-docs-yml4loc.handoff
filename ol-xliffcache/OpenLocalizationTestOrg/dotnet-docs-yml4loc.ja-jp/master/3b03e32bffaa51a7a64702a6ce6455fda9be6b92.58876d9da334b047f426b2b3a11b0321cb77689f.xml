{"nodes":[{"content":"Provides access to a queue on a Message Queuing server.","nodes":[{"pos":[0,55],"content":"Provides access to a queue on a Message Queuing server.","nodes":[{"content":"Provides access to a queue on a Message Queuing server.","pos":[0,55]}]}],"pos":[8825,8881],"yaml":true},{"content":"The Message Queuing technology allows applications running at different times to communicate across heterogeneous networks and systems that might be temporarily offline. Applications send, receive, or peek (read without removing) messages from queues. Message Queuing is an optional component of [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] and Windows NT, and must be installed separately.  \n  \n The <xref:System.Messaging.MessageQueue> class is a wrapper around Message Queuing. There are multiple versions of Message Queuing, and using the <xref:System.Messaging.MessageQueue> class can result in slightly different behavior, depending on the operating system you are using. For information about specific features of each version of Message Queuing, see the topic \"What's New in Message Queuing\" in the Platform SDK in MSDN.  \n  \n The <xref:System.Messaging.MessageQueue> class provides a reference to a Message Queuing queue. You can specify a path in the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor to connect to an existing resource, or you can create a new queue on the server. Before you can call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, you must associate the new instance of the <xref:System.Messaging.MessageQueue> class with an existing queue. At that point, you can manipulate the queue properties such as <xref:System.Messaging.MessageQueue.Category%2A> and <xref:System.Messaging.MessageQueue.Label%2A>.  \n  \n <xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. The asynchronous methods, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A>, allow the main application tasks to continue in a separate thread until a message arrives in the queue. These methods work by using callback objects and state objects to communicate information between threads.  \n  \n When you create a new instance of the <xref:System.Messaging.MessageQueue> class, you are not creating a new Message Queuing queue. Instead, you can use the <xref:System.Messaging.MessageQueue.Create%28System.String%29>, <xref:System.Messaging.MessageQueue.Delete%28System.String%29>, and <xref:System.Messaging.MessageQueue.Purge%2A> methods to manage queues on the server.  \n  \n Unlike <xref:System.Messaging.MessageQueue.Purge%2A>, <xref:System.Messaging.MessageQueue.Create%28System.String%29> and <xref:System.Messaging.MessageQueue.Delete%28System.String%29> are `static` members, so you can call them without creating a new instance of the <xref:System.Messaging.MessageQueue> class.  \n  \n You can set the <xref:System.Messaging.MessageQueue> object's <xref:System.Messaging.MessageQueue.Path%2A> property with one of three names: the friendly name, the <xref:System.Messaging.MessageQueue.FormatName%2A>, or the <xref:System.Messaging.MessageQueue.Label%2A>. The friendly name, which is defined by the queue's <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties, is <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a public queue, and <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\`Private$`\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a private queue. The <xref:System.Messaging.MessageQueue.FormatName%2A> property allows offline access to message queues. Lastly, you can use the queue's <xref:System.Messaging.MessageQueue.Label%2A> property to set the queue's <xref:System.Messaging.MessageQueue.Path%2A>.  \n  \n For a list of initial property values for an instance of <xref:System.Messaging.MessageQueue>, see the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor.","nodes":[{"pos":[0,399],"content":"The Message Queuing technology allows applications running at different times to communicate across heterogeneous networks and systems that might be temporarily offline. Applications send, receive, or peek (read without removing) messages from queues. Message Queuing is an optional component of [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] and Windows NT, and must be installed separately.","nodes":[{"content":"The Message Queuing technology allows applications running at different times to communicate across heterogeneous networks and systems that might be temporarily offline.","pos":[0,169]},{"content":"Applications send, receive, or peek (read without removing) messages from queues.","pos":[170,251]},{"content":"Message Queuing is an optional component of <ph id=\"ph1\">[!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)]</ph> and Windows NT, and must be installed separately.","pos":[252,399],"source":" Message Queuing is an optional component of [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] and Windows NT, and must be installed separately."}]},{"pos":[406,837],"content":"The <xref:System.Messaging.MessageQueue> class is a wrapper around Message Queuing. There are multiple versions of Message Queuing, and using the <xref:System.Messaging.MessageQueue> class can result in slightly different behavior, depending on the operating system you are using. For information about specific features of each version of Message Queuing, see the topic \"What's New in Message Queuing\" in the Platform SDK in MSDN.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue> class is a wrapper around Message Queuing. There are multiple versions of Message Queuing, and using the <xref:System.Messaging.MessageQueue> class can result in slightly different behavior, depending on the operating system you are using. For information about specific features of each version of Message Queuing, see the topic \"What's New in Message Queuing\" in the Platform SDK in MSDN.","pos":[0,431],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class is a wrapper around Message Queuing.","pos":[0,83],"source":"The <xref:System.Messaging.MessageQueue> class is a wrapper around Message Queuing."},{"content":"There are multiple versions of Message Queuing, and using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class can result in slightly different behavior, depending on the operating system you are using.","pos":[84,280],"source":" There are multiple versions of Message Queuing, and using the <xref:System.Messaging.MessageQueue> class can result in slightly different behavior, depending on the operating system you are using."},{"content":"For information about specific features of each version of Message Queuing, see the topic \"What's New in Message Queuing\" in the Platform SDK in MSDN.","pos":[281,431]}]}]},{"pos":[844,1563],"content":"The <xref:System.Messaging.MessageQueue> class provides a reference to a Message Queuing queue. You can specify a path in the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor to connect to an existing resource, or you can create a new queue on the server. Before you can call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, you must associate the new instance of the <xref:System.Messaging.MessageQueue> class with an existing queue. At that point, you can manipulate the queue properties such as <xref:System.Messaging.MessageQueue.Category%2A> and <xref:System.Messaging.MessageQueue.Label%2A>.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue> class provides a reference to a Message Queuing queue. You can specify a path in the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor to connect to an existing resource, or you can create a new queue on the server. Before you can call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, you must associate the new instance of the <xref:System.Messaging.MessageQueue> class with an existing queue. At that point, you can manipulate the queue properties such as <xref:System.Messaging.MessageQueue.Category%2A> and <xref:System.Messaging.MessageQueue.Label%2A>.","pos":[0,719],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class provides a reference to a Message Queuing queue.","pos":[0,95],"source":"The <xref:System.Messaging.MessageQueue> class provides a reference to a Message Queuing queue."},{"content":"You can specify a path in the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt;</ph> constructor to connect to an existing resource, or you can create a new queue on the server.","pos":[96,266],"source":" You can specify a path in the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor to connect to an existing resource, or you can create a new queue on the server."},{"content":"Before you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, you must associate the new instance of the <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class with an existing queue.","pos":[267,556],"source":" Before you can call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, you must associate the new instance of the <xref:System.Messaging.MessageQueue> class with an existing queue."},{"content":"At that point, you can manipulate the queue properties such as <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph>.","pos":[557,719],"source":" At that point, you can manipulate the queue properties such as <xref:System.Messaging.MessageQueue.Category%2A> and <xref:System.Messaging.MessageQueue.Label%2A>."}]}]},{"pos":[1570,2246],"content":"<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. The asynchronous methods, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A>, allow the main application tasks to continue in a separate thread until a message arrives in the queue. These methods work by using callback objects and state objects to communicate information between threads.","nodes":[{"content":"<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. The asynchronous methods, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A>, allow the main application tasks to continue in a separate thread until a message arrives in the queue. These methods work by using callback objects and state objects to communicate information between threads.","pos":[0,676],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> supports two types of message retrieval: synchronous and asynchronous.","pos":[0,107],"source":"<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous."},{"content":"The synchronous methods, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, cause the process thread to wait a specified time interval for a new message to arrive in the queue.","pos":[108,331],"source":" The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue."},{"content":"The asynchronous methods, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, allow the main application tasks to continue in a separate thread until a message arrives in the queue.","pos":[332,569],"source":" The asynchronous methods, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A>, allow the main application tasks to continue in a separate thread until a message arrives in the queue."},{"content":"These methods work by using callback objects and state objects to communicate information between threads.","pos":[570,676]}]}]},{"pos":[2253,2627],"content":"When you create a new instance of the <xref:System.Messaging.MessageQueue> class, you are not creating a new Message Queuing queue. Instead, you can use the <xref:System.Messaging.MessageQueue.Create%28System.String%29>, <xref:System.Messaging.MessageQueue.Delete%28System.String%29>, and <xref:System.Messaging.MessageQueue.Purge%2A> methods to manage queues on the server.","nodes":[{"content":"When you create a new instance of the <xref:System.Messaging.MessageQueue> class, you are not creating a new Message Queuing queue. Instead, you can use the <xref:System.Messaging.MessageQueue.Create%28System.String%29>, <xref:System.Messaging.MessageQueue.Delete%28System.String%29>, and <xref:System.Messaging.MessageQueue.Purge%2A> methods to manage queues on the server.","pos":[0,374],"nodes":[{"content":"When you create a new instance of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class, you are not creating a new Message Queuing queue.","pos":[0,131],"source":"When you create a new instance of the <xref:System.Messaging.MessageQueue> class, you are not creating a new Message Queuing queue."},{"content":"Instead, you can use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Delete%28System.String%29&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Purge%2A&gt;</ph> methods to manage queues on the server.","pos":[132,374],"source":" Instead, you can use the <xref:System.Messaging.MessageQueue.Create%28System.String%29>, <xref:System.Messaging.MessageQueue.Delete%28System.String%29>, and <xref:System.Messaging.MessageQueue.Purge%2A> methods to manage queues on the server."}]}]},{"pos":[2634,2943],"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Purge%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Delete%28System.String%29&gt;</ph> are <ph id=\"ph4\">`static`</ph> members, so you can call them without creating a new instance of the <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class.","source":"Unlike <xref:System.Messaging.MessageQueue.Purge%2A>, <xref:System.Messaging.MessageQueue.Create%28System.String%29> and <xref:System.Messaging.MessageQueue.Delete%28System.String%29> are `static` members, so you can call them without creating a new instance of the <xref:System.Messaging.MessageQueue> class."},{"pos":[2950,3911],"content":"You can set the <xref:System.Messaging.MessageQueue> object's <xref:System.Messaging.MessageQueue.Path%2A> property with one of three names: the friendly name, the <xref:System.Messaging.MessageQueue.FormatName%2A>, or the <xref:System.Messaging.MessageQueue.Label%2A>. The friendly name, which is defined by the queue's <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties, is <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a public queue, and <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\`Private$`\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a private queue. The <xref:System.Messaging.MessageQueue.FormatName%2A> property allows offline access to message queues. Lastly, you can use the queue's <xref:System.Messaging.MessageQueue.Label%2A> property to set the queue's <xref:System.Messaging.MessageQueue.Path%2A>.","nodes":[{"content":"You can set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> object's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property with one of three names: the friendly name, the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph>, or the <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph>.","pos":[0,269],"source":"You can set the <xref:System.Messaging.MessageQueue> object's <xref:System.Messaging.MessageQueue.Path%2A> property with one of three names: the friendly name, the <xref:System.Messaging.MessageQueue.FormatName%2A>, or the <xref:System.Messaging.MessageQueue.Label%2A>."},{"content":"The friendly name, which is defined by the queue's <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> properties, is <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph><ph id=\"ph4\">\\\\</ph><ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> for a public queue, and <ph id=\"ph6\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph><ph id=\"ph7\">\\\\</ph><ph id=\"ph8\">`Private$`</ph><ph id=\"ph9\">\\\\</ph><ph id=\"ph10\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> for a private queue.","pos":[270,704],"source":" The friendly name, which is defined by the queue's <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties, is <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a public queue, and <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\`Private$`\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a private queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> property allows offline access to message queues.","pos":[705,809],"source":" The <xref:System.Messaging.MessageQueue.FormatName%2A> property allows offline access to message queues."},{"content":"Lastly, you can use the queue's <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> property to set the queue's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph>.","pos":[810,961],"source":" Lastly, you can use the queue's <xref:System.Messaging.MessageQueue.Label%2A> property to set the queue's <xref:System.Messaging.MessageQueue.Path%2A>."}]},{"pos":[3918,4081],"content":"For a list of initial property values for an instance of <xref:System.Messaging.MessageQueue>, see the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor.","nodes":[{"content":"For a list of initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, see the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt;</ph> constructor.","pos":[0,163],"source":"For a list of initial property values for an instance of <xref:System.Messaging.MessageQueue>, see the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor."}]}],"pos":[8892,12998],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class. After the default constructor initializes the new instance, you must set the instance's <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property before you can use the instance.","nodes":[{"pos":[0,277],"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class. After the default constructor initializes the new instance, you must set the instance's <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property before you can use the instance.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,91],"source":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class."},{"content":"After the default constructor initializes the new instance, you must set the instance's <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property before you can use the instance.","pos":[92,277],"source":" After the default constructor initializes the new instance, you must set the instance's <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property before you can use the instance."}]}],"pos":[16750,17028],"yaml":true},{"content":"Use this overload to create a new instance of the <xref:System.Messaging.MessageQueue> class that is not immediately tied to a queue on the Message Queuing server. Before using this instance, you must connect it to an existing Message Queuing queue by setting the <xref:System.Messaging.MessageQueue.Path%2A> property. Alternatively, you can set the <xref:System.Messaging.MessageQueue> reference to the <xref:System.Messaging.MessageQueue.Create%28System.String%29> method's return value, thereby creating a new Message Queuing queue.  \n  \n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|  \n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class. All the filter values are set to `true`.|  \n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|","nodes":[{"pos":[0,535],"content":"Use this overload to create a new instance of the <xref:System.Messaging.MessageQueue> class that is not immediately tied to a queue on the Message Queuing server. Before using this instance, you must connect it to an existing Message Queuing queue by setting the <xref:System.Messaging.MessageQueue.Path%2A> property. Alternatively, you can set the <xref:System.Messaging.MessageQueue> reference to the <xref:System.Messaging.MessageQueue.Create%28System.String%29> method's return value, thereby creating a new Message Queuing queue.","nodes":[{"content":"Use this overload to create a new instance of the <xref:System.Messaging.MessageQueue> class that is not immediately tied to a queue on the Message Queuing server. Before using this instance, you must connect it to an existing Message Queuing queue by setting the <xref:System.Messaging.MessageQueue.Path%2A> property. Alternatively, you can set the <xref:System.Messaging.MessageQueue> reference to the <xref:System.Messaging.MessageQueue.Create%28System.String%29> method's return value, thereby creating a new Message Queuing queue.","pos":[0,535],"nodes":[{"content":"Use this overload to create a new instance of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class that is not immediately tied to a queue on the Message Queuing server.","pos":[0,163],"source":"Use this overload to create a new instance of the <xref:System.Messaging.MessageQueue> class that is not immediately tied to a queue on the Message Queuing server."},{"content":"Before using this instance, you must connect it to an existing Message Queuing queue by setting the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property.","pos":[164,318],"source":" Before using this instance, you must connect it to an existing Message Queuing queue by setting the <xref:System.Messaging.MessageQueue.Path%2A> property."},{"content":"Alternatively, you can set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> reference to the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph> method's return value, thereby creating a new Message Queuing queue.","pos":[319,535],"source":" Alternatively, you can set the <xref:System.Messaging.MessageQueue> reference to the <xref:System.Messaging.MessageQueue.Create%28System.String%29> method's return value, thereby creating a new Message Queuing queue."}]}]},{"pos":[542,732],"content":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt;</ph> constructor instantiates a new instance of the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class; it does not create a new Message Queuing queue.","pos":[0,190],"source":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue."}]},{"pos":[739,845],"content":"The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>.","nodes":[{"content":"The following table shows initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,106],"source":"The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>."}]},{"pos":[852,860],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[861,874],"content":"Initial value","nodes":[{"content":"Initial value","pos":[0,13]}]},{"pos":[918,981],"content":"<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>","nodes":[]},{"pos":[982,1085],"content":"The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.","nodes":[{"content":"The values set by the default constructor of the <ph id=\"ph1\">&lt;xref:System.Messaging.DefaultPropertiesToSend&gt;</ph> class.","pos":[0,103],"source":"The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class."}]},{"pos":[1090,1139],"content":"<xref:System.Messaging.MessageQueue.Formatter%2A>","nodes":[]},{"pos":[1140,1183],"content":"<xref:System.Messaging.XmlMessageFormatter>","nodes":[]},{"pos":[1188,1253],"content":"<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>","nodes":[]},{"pos":[1254,1396],"content":"The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class. All the filter values are set to `true`.","nodes":[{"content":"The values set by the default constructor of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessagePropertyFilter&gt;</ph> class.","pos":[0,101],"source":"The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class."},{"content":"All the filter values are set to <ph id=\"ph1\">`true`</ph>.","pos":[102,142],"source":" All the filter values are set to `true`."}]},{"pos":[1401,1458],"content":"<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>","nodes":[]}],"pos":[17039,18520],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class that references the Message Queuing queue at the specified path.","nodes":[{"pos":[0,155],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> class that references the Message Queuing queue at the specified path.","source":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class that references the Message Queuing queue at the specified path."}],"pos":[19823,19979],"yaml":true},{"content":"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> instance to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, you must set the <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property to `true` or use the constructor that passes a read-access restriction parameter.  \n  \n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n The syntax of the `path` parameter depends on the type of queue it references, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.  \n  \n|Reference|Syntax|Example|  \n|---------------|------------|-------------|  \n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`|  \n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \n  \n To work offline, you must use the format name syntax, not the path name syntax for the constructor. Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue with the path specified by the `path` parameter.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.MessageQueue.Authenticate%2A>|`false`|  \n|<xref:System.Messaging.MessageQueue.BasePriority%2A>|0|  \n|<xref:System.Messaging.MessageQueue.Category%2A>|<xref:System.Guid.Empty>|  \n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \n|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|`true`, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, `false`.|  \n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|  \n|<xref:System.Messaging.MessageQueue.Label%2A>|<xref:System.String.Empty>|  \n|<xref:System.Messaging.MessageQueue.MachineName%2A>|The value of the Message Queuing queue's computer name property.|  \n|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  \n|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  \n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.|  \n|<xref:System.Messaging.MessageQueue.Path%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.QueueName%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|  \n|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.|","nodes":[{"pos":[0,439],"content":"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> instance to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, you must set the <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property to `true` or use the constructor that passes a read-access restriction parameter.","nodes":[{"content":"Use this overload when you want to tie the new <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instance to a particular Message Queuing queue, for which you know the path, format name, or label.","pos":[0,183],"source":"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> instance to a particular Message Queuing queue, for which you know the path, format name, or label."},{"content":"If you want to grant exclusive access to the first application that references the queue, you must set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> or use the constructor that passes a read-access restriction parameter.","pos":[184,439],"source":" If you want to grant exclusive access to the first application that references the queue, you must set the <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property to `true` or use the constructor that passes a read-access restriction parameter."}]},{"pos":[446,746],"content":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","pos":[0,300],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt;</ph> constructor instantiates a new instance of the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class; it does not create a new Message Queuing queue.","pos":[0,190],"source":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue."},{"content":"To create a new queue in Message Queuing, use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph>.","pos":[191,300],"source":" To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>."}]}]},{"pos":[753,864],"content":"The syntax of the <ph id=\"ph1\">`path`</ph> parameter depends on the type of queue it references, as shown in the following table.","source":"The syntax of the `path` parameter depends on the type of queue it references, as shown in the following table."},{"pos":[871,881],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[882,888],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[927,939],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[971,984],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[1028,1041],"content":"Journal queue","nodes":[{"content":"Journal queue","pos":[0,13]}]},{"pos":[1085,1106],"content":"Machine journal queue","nodes":[{"content":"Machine journal queue","pos":[0,21]}]},{"pos":[1137,1162],"content":"Machine dead-letter queue","nodes":[{"content":"Machine dead-letter queue","pos":[0,25]}]},{"pos":[1196,1235],"content":"Machine transactional dead-letter queue","nodes":[{"content":"Machine transactional dead-letter queue","pos":[0,39]}]},{"pos":[1276,1467],"content":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.","nodes":[{"content":"Alternatively, you can use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> to describe the queue path, as shown in the following table.","pos":[0,191],"source":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table."}]},{"pos":[1474,1483],"content":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"pos":[1484,1490],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1491,1498],"content":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1550,1561],"content":"Format name","nodes":[{"content":"Format name","pos":[0,11]}]},{"pos":[1562,1593],"content":"<ph id=\"ph1\">`FormatName:`</ph> [ <bpt id=\"p1\">*</bpt>format name<ept id=\"p1\">*</ept> ]","source":"`FormatName:` [ *format name* ]"},{"pos":[1594,1856],"content":"`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`","nodes":[{"content":"<ph id=\"ph1\">`FormatName:Public=`</ph> 5A5F7535-AE9A-41d4-935C-845C2AFF7112","pos":[0,57],"source":"`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112"},{"content":"<ph id=\"ph1\">`FormatName:DIRECT=SPX:`</ph> <ph id=\"ph2\">`NetworkNumber`</ph>; <ph id=\"ph3\">`HostNumber`</ph><ph id=\"ph4\">\\\\</ph><ph id=\"ph5\">`QueueName`</ph>","pos":[70,137],"source":"`FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`"},{"content":"<ph id=\"ph1\">`FormatName:DIRECT=TCP:`</ph> <ph id=\"ph2\">`IPAddress`</ph><ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">`QueueName`</ph>","pos":[150,199],"source":"`FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`"},{"content":"<ph id=\"ph1\">`FormatName:DIRECT=OS:`</ph> <ph id=\"ph2\">`MachineName`</ph><ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">`QueueName`</ph>","pos":[212,262],"source":"`FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`"}]},{"pos":[1861,1866],"content":"Label","nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[1867,1887],"content":"<ph id=\"ph1\">`Label:`</ph> [ <bpt id=\"p1\">*</bpt>label<ept id=\"p1\">*</ept> ]","source":"`Label:` [ *label* ]"},{"pos":[1888,1905],"content":"<ph id=\"ph1\">`Label:`</ph> TheLabel","source":"`Label:` TheLabel"},{"pos":[1913,2141],"content":"To work offline, you must use the format name syntax, not the path name syntax for the constructor. Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.","nodes":[{"content":"To work offline, you must use the format name syntax, not the path name syntax for the constructor. Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.","pos":[0,228],"nodes":[{"content":"To work offline, you must use the format name syntax, not the path name syntax for the constructor.","pos":[0,99]},{"content":"Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.","pos":[100,228]}]}]},{"pos":[2148,2373],"content":"The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue with the path specified by the `path` parameter.","nodes":[{"content":"The following table shows initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,106],"source":"The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>."},{"content":"These values are based on the properties of the Message Queuing queue with the path specified by the <ph id=\"ph1\">`path`</ph> parameter.","pos":[107,225],"source":" These values are based on the properties of the Message Queuing queue with the path specified by the `path` parameter."}]},{"pos":[2380,2388],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[2389,2402],"content":"Initial value","nodes":[{"content":"Initial value","pos":[0,13]}]},{"pos":[2446,2498],"content":"<xref:System.Messaging.MessageQueue.Authenticate%2A>","nodes":[]},{"pos":[2511,2563],"content":"<xref:System.Messaging.MessageQueue.BasePriority%2A>","nodes":[]},{"pos":[2564,2565],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[2570,2618],"content":"<xref:System.Messaging.MessageQueue.Category%2A>","nodes":[]},{"pos":[2619,2643],"content":"<xref:System.Guid.Empty>","nodes":[]},{"pos":[2648,2711],"content":"<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>","nodes":[]},{"pos":[2712,2815],"content":"The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.","nodes":[{"content":"The values set by the default constructor of the <ph id=\"ph1\">&lt;xref:System.Messaging.DefaultPropertiesToSend&gt;</ph> class.","pos":[0,103],"source":"The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class."}]},{"pos":[2820,2878],"content":"<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>","nodes":[]},{"pos":[2879,2970],"content":"<ph id=\"ph1\">`true`</ph>, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true`, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, `false`."},{"pos":[2975,3024],"content":"<xref:System.Messaging.MessageQueue.Formatter%2A>","nodes":[]},{"pos":[3025,3068],"content":"<xref:System.Messaging.XmlMessageFormatter>","nodes":[]},{"pos":[3073,3118],"content":"<xref:System.Messaging.MessageQueue.Label%2A>","nodes":[]},{"pos":[3119,3145],"content":"<xref:System.String.Empty>","nodes":[]},{"pos":[3150,3201],"content":"<xref:System.Messaging.MessageQueue.MachineName%2A>","nodes":[]},{"pos":[3202,3266],"content":"The value of the Message Queuing queue's computer name property.","nodes":[{"content":"The value of the Message Queuing queue's computer name property.","pos":[0,64]}]},{"pos":[3271,3329],"content":"<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>","nodes":[]},{"pos":[3330,3384],"content":"<xref:System.Messaging.MessageQueue.InfiniteQueueSize>","nodes":[]},{"pos":[3389,3445],"content":"<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>","nodes":[]},{"pos":[3446,3500],"content":"<xref:System.Messaging.MessageQueue.InfiniteQueueSize>","nodes":[]},{"pos":[3505,3570],"content":"<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>","nodes":[]},{"pos":[3571,3672],"content":"The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.","nodes":[{"content":"The values set by the default constructor of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessagePropertyFilter&gt;</ph> class.","pos":[0,101],"source":"The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class."}]},{"pos":[3677,3721],"content":"<xref:System.Messaging.MessageQueue.Path%2A>","nodes":[]},{"pos":[3722,3780],"content":"<xref:System.String.Empty>, if not set by the constructor.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph>, if not set by the constructor.","pos":[0,58],"source":"<xref:System.String.Empty>, if not set by the constructor."}]},{"pos":[3785,3834],"content":"<xref:System.Messaging.MessageQueue.QueueName%2A>","nodes":[]},{"pos":[3835,3893],"content":"<xref:System.String.Empty>, if not set by the constructor.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph>, if not set by the constructor.","pos":[0,58],"source":"<xref:System.String.Empty>, if not set by the constructor."}]},{"pos":[3898,3955],"content":"<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>","nodes":[]},{"pos":[3968,4023],"content":"<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>","nodes":[]},{"pos":[4024,4111],"content":"<ph id=\"ph1\">`true`</ph>, if the Message Queuing object's journal setting is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`."}],"pos":[19990,24171],"yaml":true,"extradata":"MT"},{"content":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.","nodes":[{"pos":[0,96],"content":"The location of the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","source":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>."}],"pos":[24892,24989],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property is not valid, possibly because it has not been set.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property is not valid, possibly because it has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property is not valid, possibly because it has not been set."}],"pos":[25146,25267],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class that references the Message Queuing queue at the specified path and with the specified read-access restriction.","nodes":[{"pos":[0,202],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> class that references the Message Queuing queue at the specified path and with the specified read-access restriction.","source":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class that references the Message Queuing queue at the specified path and with the specified read-access restriction."}],"pos":[26299,26502],"yaml":true},{"content":"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, set the `sharedModeDenyReceive` parameter to `true`. Otherwise, set `sharedModeDenyReceive` to `false` or use the constructor that has only a `path` parameter.  \n  \n Setting `sharedModeDenyReceive` to `true` affects all objects that access the Message Queuing queue, including other applications. The effects of the parameter are not restricted to this application.  \n  \n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor creates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n The syntax of the `path` parameter depends on the type of queue.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Alternatively, you can use the format name or label of a Message Queuing queue to describe the queue path.  \n  \n|Reference|Syntax|Example|  \n|---------------|------------|-------------|  \n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`|  \n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \n  \n To work offline, you must use the format name syntax, rather than the friendly name syntax. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  \n  \n If a <xref:System.Messaging.MessageQueue> opens a queue with the `sharedModeDenyReceive` parameter set to `true`, any <xref:System.Messaging.MessageQueue> that subsequently tries to read from the queue generates a <xref:System.Messaging.MessageQueueException> because of a sharing violation. A <xref:System.Messaging.MessageQueueException> is also thrown if a <xref:System.Messaging.MessageQueue> tries to access the queue in exclusive mode while another <xref:System.Messaging.MessageQueue> already has non-exclusive access to the queue.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue, with the path specified by the `path` parameter.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.MessageQueue.Authenticate%2A>|`false`.|  \n|<xref:System.Messaging.MessageQueue.BasePriority%2A>|0.|  \n|<xref:System.Messaging.MessageQueue.Category%2A>|<xref:System.Guid.Empty>.|  \n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \n|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|`true`, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, `false`.|  \n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>.|  \n|<xref:System.Messaging.MessageQueue.Label%2A>|<xref:System.String.Empty>.|  \n|<xref:System.Messaging.MessageQueue.MachineName%2A>|The value of the Message Queuing queue's computer name property.|  \n|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.|  \n|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.|  \n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.|  \n|<xref:System.Messaging.MessageQueue.Path%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.QueueName%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|The value of the `sharedModeDenyReceive` parameter.|  \n|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.|","nodes":[{"pos":[0,424],"content":"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, set the `sharedModeDenyReceive` parameter to `true`. Otherwise, set `sharedModeDenyReceive` to `false` or use the constructor that has only a `path` parameter.","nodes":[{"content":"Use this overload when you want to tie the new <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> to a particular Message Queuing queue, for which you know the path, format name, or label.","pos":[0,174],"source":"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> to a particular Message Queuing queue, for which you know the path, format name, or label."},{"content":"If you want to grant exclusive access to the first application that references the queue, set the <ph id=\"ph1\">`sharedModeDenyReceive`</ph> parameter to <ph id=\"ph2\">`true`</ph>.","pos":[175,317],"source":" If you want to grant exclusive access to the first application that references the queue, set the `sharedModeDenyReceive` parameter to `true`."},{"content":"Otherwise, set <ph id=\"ph1\">`sharedModeDenyReceive`</ph> to <ph id=\"ph2\">`false`</ph> or use the constructor that has only a <ph id=\"ph3\">`path`</ph> parameter.","pos":[318,424],"source":" Otherwise, set `sharedModeDenyReceive` to `false` or use the constructor that has only a `path` parameter."}]},{"pos":[431,630],"content":"Setting `sharedModeDenyReceive` to `true` affects all objects that access the Message Queuing queue, including other applications. The effects of the parameter are not restricted to this application.","nodes":[{"content":"Setting <ph id=\"ph1\">`sharedModeDenyReceive`</ph> to <ph id=\"ph2\">`true`</ph> affects all objects that access the Message Queuing queue, including other applications.","pos":[0,130],"source":"Setting `sharedModeDenyReceive` to `true` affects all objects that access the Message Queuing queue, including other applications."},{"content":"The effects of the parameter are not restricted to this application.","pos":[131,199]}]},{"pos":[637,932],"content":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor creates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor creates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","pos":[0,295],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt;</ph> constructor creates a new instance of the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class; it does not create a new Message Queuing queue.","pos":[0,185],"source":"The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor creates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue."},{"content":"To create a new queue in Message Queuing, use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph>.","pos":[186,295],"source":" To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>."}]}]},{"pos":[939,1003],"content":"The syntax of the <ph id=\"ph1\">`path`</ph> parameter depends on the type of queue.","source":"The syntax of the `path` parameter depends on the type of queue."},{"pos":[1010,1020],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[1021,1027],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1066,1078],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[1110,1123],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[1167,1180],"content":"Journal queue","nodes":[{"content":"Journal queue","pos":[0,13]}]},{"pos":[1224,1245],"content":"Machine journal queue","nodes":[{"content":"Machine journal queue","pos":[0,21]}]},{"pos":[1276,1301],"content":"Machine dead-letter queue","nodes":[{"content":"Machine dead-letter queue","pos":[0,25]}]},{"pos":[1335,1374],"content":"Machine transactional dead-letter queue","nodes":[{"content":"Machine transactional dead-letter queue","pos":[0,39]}]},{"pos":[1415,1521],"content":"Alternatively, you can use the format name or label of a Message Queuing queue to describe the queue path.","nodes":[{"content":"Alternatively, you can use the format name or label of a Message Queuing queue to describe the queue path.","pos":[0,106]}]},{"pos":[1528,1537],"content":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"pos":[1538,1544],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1545,1552],"content":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1604,1615],"content":"Format name","nodes":[{"content":"Format name","pos":[0,11]}]},{"pos":[1616,1647],"content":"<ph id=\"ph1\">`FormatName:`</ph> [ <bpt id=\"p1\">*</bpt>format name<ept id=\"p1\">*</ept> ]","source":"`FormatName:` [ *format name* ]"},{"pos":[1648,1910],"content":"`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`","nodes":[{"content":"<ph id=\"ph1\">`FormatName:Public=`</ph> 5A5F7535-AE9A-41d4-935C-845C2AFF7112","pos":[0,57],"source":"`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112"},{"content":"<ph id=\"ph1\">`FormatName:DIRECT=SPX:`</ph> <ph id=\"ph2\">`NetworkNumber`</ph>; <ph id=\"ph3\">`HostNumber`</ph><ph id=\"ph4\">\\\\</ph><ph id=\"ph5\">`QueueName`</ph>","pos":[70,137],"source":"`FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`"},{"content":"<ph id=\"ph1\">`FormatName:DIRECT=TCP:`</ph> <ph id=\"ph2\">`IPAddress`</ph><ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">`QueueName`</ph>","pos":[150,199],"source":"`FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`"},{"content":"<ph id=\"ph1\">`FormatName:DIRECT=OS:`</ph> <ph id=\"ph2\">`MachineName`</ph><ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">`QueueName`</ph>","pos":[212,262],"source":"`FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`"}]},{"pos":[1915,1920],"content":"Label","nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[1921,1941],"content":"<ph id=\"ph1\">`Label:`</ph> [ <bpt id=\"p1\">*</bpt>label<ept id=\"p1\">*</ept> ]","source":"`Label:` [ *label* ]"},{"pos":[1942,1959],"content":"<ph id=\"ph1\">`Label:`</ph> TheLabel","source":"`Label:` TheLabel"},{"pos":[1967,2223],"content":"To work offline, you must use the format name syntax, rather than the friendly name syntax. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.","nodes":[{"content":"To work offline, you must use the format name syntax, rather than the friendly name syntax. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.","pos":[0,256],"nodes":[{"content":"To work offline, you must use the format name syntax, rather than the friendly name syntax.","pos":[0,91]},{"content":"Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.","pos":[92,256]}]}]},{"pos":[2230,2768],"content":"If a <xref:System.Messaging.MessageQueue> opens a queue with the `sharedModeDenyReceive` parameter set to `true`, any <xref:System.Messaging.MessageQueue> that subsequently tries to read from the queue generates a <xref:System.Messaging.MessageQueueException> because of a sharing violation. A <xref:System.Messaging.MessageQueueException> is also thrown if a <xref:System.Messaging.MessageQueue> tries to access the queue in exclusive mode while another <xref:System.Messaging.MessageQueue> already has non-exclusive access to the queue.","nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> opens a queue with the <ph id=\"ph2\">`sharedModeDenyReceive`</ph> parameter set to <ph id=\"ph3\">`true`</ph>, any <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> that subsequently tries to read from the queue generates a <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> because of a sharing violation.","pos":[0,291],"source":"If a <xref:System.Messaging.MessageQueue> opens a queue with the `sharedModeDenyReceive` parameter set to `true`, any <xref:System.Messaging.MessageQueue> that subsequently tries to read from the queue generates a <xref:System.Messaging.MessageQueueException> because of a sharing violation."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> is also thrown if a <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> tries to access the queue in exclusive mode while another <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> already has non-exclusive access to the queue.","pos":[292,538],"source":" A <xref:System.Messaging.MessageQueueException> is also thrown if a <xref:System.Messaging.MessageQueue> tries to access the queue in exclusive mode while another <xref:System.Messaging.MessageQueue> already has non-exclusive access to the queue."}]},{"pos":[2775,3001],"content":"The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue, with the path specified by the `path` parameter.","nodes":[{"content":"The following table shows initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,106],"source":"The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>."},{"content":"These values are based on the properties of the Message Queuing queue, with the path specified by the <ph id=\"ph1\">`path`</ph> parameter.","pos":[107,226],"source":" These values are based on the properties of the Message Queuing queue, with the path specified by the `path` parameter."}]},{"pos":[3008,3016],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[3017,3030],"content":"Initial value","nodes":[{"content":"Initial value","pos":[0,13]}]},{"pos":[3074,3126],"content":"<xref:System.Messaging.MessageQueue.Authenticate%2A>","nodes":[]},{"pos":[3127,3135],"content":"<ph id=\"ph1\">`false`</ph>.","source":"`false`."},{"pos":[3140,3192],"content":"<xref:System.Messaging.MessageQueue.BasePriority%2A>","nodes":[]},{"pos":[3193,3195],"content":"0.","nodes":[{"content":"0.","pos":[0,2]}]},{"pos":[3200,3248],"content":"<xref:System.Messaging.MessageQueue.Category%2A>","nodes":[]},{"pos":[3249,3274],"content":"<xref:System.Guid.Empty>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Guid.Empty&gt;</ph>.","pos":[0,25],"source":"<xref:System.Guid.Empty>."}]},{"pos":[3279,3342],"content":"<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>","nodes":[]},{"pos":[3343,3446],"content":"The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.","nodes":[{"content":"The values set by the default constructor of the <ph id=\"ph1\">&lt;xref:System.Messaging.DefaultPropertiesToSend&gt;</ph> class.","pos":[0,103],"source":"The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class."}]},{"pos":[3451,3509],"content":"<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>","nodes":[]},{"pos":[3510,3601],"content":"<ph id=\"ph1\">`true`</ph>, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true`, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, `false`."},{"pos":[3606,3655],"content":"<xref:System.Messaging.MessageQueue.Formatter%2A>","nodes":[]},{"pos":[3656,3700],"content":"<xref:System.Messaging.XmlMessageFormatter>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[0,44],"source":"<xref:System.Messaging.XmlMessageFormatter>."}]},{"pos":[3705,3750],"content":"<xref:System.Messaging.MessageQueue.Label%2A>","nodes":[]},{"pos":[3751,3778],"content":"<xref:System.String.Empty>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph>.","pos":[0,27],"source":"<xref:System.String.Empty>."}]},{"pos":[3783,3834],"content":"<xref:System.Messaging.MessageQueue.MachineName%2A>","nodes":[]},{"pos":[3835,3899],"content":"The value of the Message Queuing queue's computer name property.","nodes":[{"content":"The value of the Message Queuing queue's computer name property.","pos":[0,64]}]},{"pos":[3904,3962],"content":"<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>","nodes":[]},{"pos":[3963,4018],"content":"<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteQueueSize&gt;</ph>.","pos":[0,55],"source":"<xref:System.Messaging.MessageQueue.InfiniteQueueSize>."}]},{"pos":[4023,4079],"content":"<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>","nodes":[]},{"pos":[4080,4135],"content":"<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteQueueSize&gt;</ph>.","pos":[0,55],"source":"<xref:System.Messaging.MessageQueue.InfiniteQueueSize>."}]},{"pos":[4140,4205],"content":"<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>","nodes":[]},{"pos":[4206,4307],"content":"The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.","nodes":[{"content":"The values set by the default constructor of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessagePropertyFilter&gt;</ph> class.","pos":[0,101],"source":"The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class."}]},{"pos":[4312,4356],"content":"<xref:System.Messaging.MessageQueue.Path%2A>","nodes":[]},{"pos":[4357,4415],"content":"<xref:System.String.Empty>, if not set by the constructor.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph>, if not set by the constructor.","pos":[0,58],"source":"<xref:System.String.Empty>, if not set by the constructor."}]},{"pos":[4420,4469],"content":"<xref:System.Messaging.MessageQueue.QueueName%2A>","nodes":[]},{"pos":[4470,4528],"content":"<xref:System.String.Empty>, if not set by the constructor.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty&gt;</ph>, if not set by the constructor.","pos":[0,58],"source":"<xref:System.String.Empty>, if not set by the constructor."}]},{"pos":[4533,4590],"content":"<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>","nodes":[]},{"pos":[4591,4642],"content":"The value of the <ph id=\"ph1\">`sharedModeDenyReceive`</ph> parameter.","source":"The value of the `sharedModeDenyReceive` parameter."},{"pos":[4647,4702],"content":"<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>","nodes":[]},{"pos":[4703,4790],"content":"<ph id=\"ph1\">`true`</ph>, if the Message Queuing object's journal setting is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`."}],"pos":[26513,31377],"yaml":true,"extradata":"MT"},{"content":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.","nodes":[{"pos":[0,137],"content":"The location of the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>, which can be \".\" for the local computer.","source":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer."}],"pos":[32276,32414],"yaml":true},{"content":"`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> to grant exclusive read access to the first application that accesses the queue; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`."}],"pos":[32492,32602],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property is not valid, possibly because it has not been set.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property is not valid, possibly because it has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property is not valid, possibly because it has not been set."}],"pos":[32759,32880],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class.","nodes":[{"pos":[0,91],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class."}],"pos":[33990,34082],"yaml":true},{"content":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.","nodes":[{"pos":[0,137],"content":"The location of the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>, which can be \".\" for the local computer.","source":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer."}],"pos":[34261,34399],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values.","nodes":[{"pos":[0,72],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.QueueAccessMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values."}],"pos":[34484,34557],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class.","nodes":[{"pos":[0,91],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class."}],"pos":[35727,35819],"yaml":true},{"content":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.","nodes":[{"pos":[0,137],"content":"The location of the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>, which can be \".\" for the local computer.","source":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer."}],"pos":[36396,36534],"yaml":true},{"content":"`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> to grant exclusive read access to the first application that accesses the queue; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`."}],"pos":[36612,36722],"yaml":true},{"content":"`true` to create and use a connection cache; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to create and use a connection cache; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to create and use a connection cache; otherwise, `false`."}],"pos":[36790,36857],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class.","nodes":[{"pos":[0,91],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class."}],"pos":[38139,38231],"yaml":true},{"content":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.","nodes":[{"pos":[0,137],"content":"The location of the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>, which can be \".\" for the local computer.","source":"The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer."}],"pos":[38456,38594],"yaml":true},{"content":"`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> to grant exclusive read access to the first application that accesses the queue; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`."}],"pos":[38672,38782],"yaml":true},{"content":"`true` to create and use a connection cache; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to create and use a connection cache; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to create and use a connection cache; otherwise, `false`."}],"pos":[38850,38917],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values.","nodes":[{"pos":[0,72],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.QueueAccessMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values."}],"pos":[39002,39075],"yaml":true},{"content":"Gets a value that indicates the access mode for the queue.","nodes":[{"pos":[0,58],"content":"Gets a value that indicates the access mode for the queue.","nodes":[{"content":"Gets a value that indicates the access mode for the queue.","pos":[0,58]}]}],"pos":[39998,40057],"yaml":true},{"content":"The default access mode for a queue is `QueueAccessMode.SendAndReceive`, unless you specify otherwise when calling the constructor.","nodes":[{"pos":[0,131],"content":"The default access mode for a queue is <ph id=\"ph1\">`QueueAccessMode.SendAndReceive`</ph>, unless you specify otherwise when calling the constructor.","source":"The default access mode for a queue is `QueueAccessMode.SendAndReceive`, unless you specify otherwise when calling the constructor."}],"pos":[40068,40200],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values.","nodes":[{"pos":[0,72],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.QueueAccessMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values."}],"pos":[40359,40432],"yaml":true},{"content":"Gets or sets a value that indicates whether the queue accepts only authenticated messages.","nodes":[{"pos":[0,90],"content":"Gets or sets a value that indicates whether the queue accepts only authenticated messages.","nodes":[{"content":"Gets or sets a value that indicates whether the queue accepts only authenticated messages.","pos":[0,90]}]}],"pos":[41372,41463],"yaml":true},{"content":"Message authentication provides a way to ensure message integrity and to verify who sent the message. To request authentication, the sending application sets the message's authentication level.  \n  \n When you set <xref:System.Messaging.MessageQueue.Authenticate%2A> to `true`, you are restricting access to the queue on the server, not only to this <xref:System.Messaging.MessageQueue> instance. All clients working against the same Message Queuing queue will be affected.  \n  \n A queue that accepts only authenticated messages will reject a non-authenticated message. To request notification of message rejection, a sending application can set the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the message. Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,193],"content":"Message authentication provides a way to ensure message integrity and to verify who sent the message. To request authentication, the sending application sets the message's authentication level.","nodes":[{"content":"Message authentication provides a way to ensure message integrity and to verify who sent the message. To request authentication, the sending application sets the message's authentication level.","pos":[0,193],"nodes":[{"content":"Message authentication provides a way to ensure message integrity and to verify who sent the message.","pos":[0,101]},{"content":"To request authentication, the sending application sets the message's authentication level.","pos":[102,193]}]}]},{"pos":[200,472],"content":"When you set <xref:System.Messaging.MessageQueue.Authenticate%2A> to `true`, you are restricting access to the queue on the server, not only to this <xref:System.Messaging.MessageQueue> instance. All clients working against the same Message Queuing queue will be affected.","nodes":[{"content":"When you set <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Authenticate%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>, you are restricting access to the queue on the server, not only to this <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instance.","pos":[0,195],"source":"When you set <xref:System.Messaging.MessageQueue.Authenticate%2A> to `true`, you are restricting access to the queue on the server, not only to this <xref:System.Messaging.MessageQueue> instance."},{"content":"All clients working against the same Message Queuing queue will be affected.","pos":[196,272]}]},{"pos":[479,887],"content":"A queue that accepts only authenticated messages will reject a non-authenticated message. To request notification of message rejection, a sending application can set the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the message. Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.","nodes":[{"content":"A queue that accepts only authenticated messages will reject a non-authenticated message. To request notification of message rejection, a sending application can set the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the message. Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.","pos":[0,408],"nodes":[{"content":"A queue that accepts only authenticated messages will reject a non-authenticated message.","pos":[0,89]},{"content":"To request notification of message rejection, a sending application can set the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.AcknowledgeType%2A&gt;</ph> property of the message.","pos":[90,245],"source":" To request notification of message rejection, a sending application can set the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the message."},{"content":"Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.","pos":[246,408]}]}]},{"pos":[894,982],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[989,1003],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1004,1013],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1059,1073],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1074,1077],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1082,1119],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1120,1123],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1128,1143],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1144,1146],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1151,1189],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1190,1192],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[41474,42683],"yaml":true,"extradata":"MT"},{"content":"`true` if the queue accepts only authenticated messages; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,100],"content":"`true` if the queue accepts only authenticated messages; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the queue accepts only authenticated messages; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,76],"source":"`true` if the queue accepts only authenticated messages; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[77,100],"source":" The default is `false`."}]}],"pos":[43145,43248],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[43440,43499],"yaml":true},{"content":"Gets or sets the base priority Message Queuing uses to route a public queue's messages over the network.","nodes":[{"pos":[0,104],"content":"Gets or sets the base priority Message Queuing uses to route a public queue's messages over the network.","nodes":[{"content":"Gets or sets the base priority Message Queuing uses to route a public queue's messages over the network.","pos":[0,104]}]}],"pos":[44477,44582],"yaml":true},{"content":"A message queue's base priority specifies how a message en route to that queue is treated as it travels through the network. You can set the <xref:System.Messaging.MessageQueue.BasePriority%2A> property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \n  \n A message queue's <xref:System.Messaging.MessageQueue.BasePriority%2A> is not related to the <xref:System.Messaging.Message.Priority%2A> property of a message, which specifies the order in which an incoming message is placed in the queue.  \n  \n <xref:System.Messaging.MessageQueue.BasePriority%2A> applies only to public queues whose paths are specified using the format name. The base priority of a private queue is always zero (0).  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,470],"content":"A message queue's base priority specifies how a message en route to that queue is treated as it travels through the network. You can set the <xref:System.Messaging.MessageQueue.BasePriority%2A> property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","nodes":[{"content":"A message queue's base priority specifies how a message en route to that queue is treated as it travels through the network. You can set the <xref:System.Messaging.MessageQueue.BasePriority%2A> property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","pos":[0,470],"nodes":[{"content":"A message queue's base priority specifies how a message en route to that queue is treated as it travels through the network.","pos":[0,124]},{"content":"You can set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BasePriority%2A&gt;</ph> property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues.","pos":[125,316],"source":" You can set the <xref:System.Messaging.MessageQueue.BasePriority%2A> property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues."},{"content":"Setting this property modifies the Message Queuing queue.","pos":[317,374]},{"content":"Therefore, any other <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instances are affected by the change.","pos":[375,470],"source":" Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change."}]}]},{"pos":[477,715],"content":"A message queue's <xref:System.Messaging.MessageQueue.BasePriority%2A> is not related to the <xref:System.Messaging.Message.Priority%2A> property of a message, which specifies the order in which an incoming message is placed in the queue.","nodes":[{"content":"A message queue's <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BasePriority%2A&gt;</ph> is not related to the <ph id=\"ph2\">&lt;xref:System.Messaging.Message.Priority%2A&gt;</ph> property of a message, which specifies the order in which an incoming message is placed in the queue.","pos":[0,238],"source":"A message queue's <xref:System.Messaging.MessageQueue.BasePriority%2A> is not related to the <xref:System.Messaging.Message.Priority%2A> property of a message, which specifies the order in which an incoming message is placed in the queue."}]},{"pos":[722,910],"content":"<xref:System.Messaging.MessageQueue.BasePriority%2A> applies only to public queues whose paths are specified using the format name. The base priority of a private queue is always zero (0).","nodes":[{"content":"<xref:System.Messaging.MessageQueue.BasePriority%2A> applies only to public queues whose paths are specified using the format name. The base priority of a private queue is always zero (0).","pos":[0,188],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BasePriority%2A&gt;</ph> applies only to public queues whose paths are specified using the format name.","pos":[0,131],"source":"<xref:System.Messaging.MessageQueue.BasePriority%2A> applies only to public queues whose paths are specified using the format name."},{"content":"The base priority of a private queue is always zero (0).","pos":[132,188]}]}]},{"pos":[917,1005],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1012,1026],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1027,1036],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1082,1096],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1097,1100],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1105,1142],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1143,1146],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1151,1166],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1167,1169],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1174,1212],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1213,1215],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[44593,45825],"yaml":true,"extradata":"MT"},{"content":"The single base priority for all messages sent to the (public) queue. The default is zero (0).","nodes":[{"pos":[0,94],"content":"The single base priority for all messages sent to the (public) queue. The default is zero (0).","nodes":[{"content":"The single base priority for all messages sent to the (public) queue. The default is zero (0).","pos":[0,94],"nodes":[{"content":"The single base priority for all messages sent to the (public) queue.","pos":[0,69]},{"content":"The default is zero (0).","pos":[70,94]}]}]}],"pos":[46286,46381],"yaml":true},{"content":"The base priority was set to an invalid value.","nodes":[{"pos":[0,46],"content":"The base priority was set to an invalid value.","nodes":[{"content":"The base priority was set to an invalid value.","pos":[0,46]}]}],"pos":[46545,46592],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[46714,46773],"yaml":true},{"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,396],"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,396],"nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.","pos":[0,175]},{"content":"This overload receives notification, through a callback, of the identity of the event handler for the operation.","pos":[176,288]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[289,396]}]}]}],"pos":[47986,48383],"yaml":true},{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.  \n  \n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,437],"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.","nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.","pos":[0,437],"nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event is not raised.","pos":[0,270],"source":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised."},{"content":"The other overloads of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> rely on this component to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event.","pos":[271,437],"source":" The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event."}]}]},{"pos":[444,551],"content":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,107],"source":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue."}]},{"pos":[558,722],"content":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,164],"source":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[729,981],"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","pos":[0,252],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.","pos":[0,158],"source":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution."},{"content":"To synchronously peek the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[159,252],"source":" To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."}]}]},{"pos":[988,1208],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1215,1929],"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,714],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> that identifies the asynchronous operation that the method started.","pos":[0,154],"source":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> is called.","pos":[155,364],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[365,562],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[563,714],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[1936,2205],"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","nodes":[{"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[0,269],"nodes":[{"content":"The state object associates state information with the operation.","pos":[0,65]},{"content":"For example, if you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[66,269],"source":" For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define."}]}]},{"pos":[2212,2298],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2305,2319],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2320,2329],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2375,2389],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2390,2393],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2398,2435],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2436,2439],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2444,2459],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2460,2462],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2467,2505],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2506,2509],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[48394,50928],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[52043,52161],"yaml":true},{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"pos":[0,115],"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","pos":[0,115]}]}],"pos":[52228,52344],"yaml":true},{"content":"The <xref href=\"System.AsyncCallback\"></xref> that will receive the notification of the asynchronous operation completion.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> that will receive the notification of the asynchronous operation completion.","source":"The <xref href=\"System.AsyncCallback\"></xref> that will receive the notification of the asynchronous operation completion."}],"pos":[52415,52538],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[52601,52695],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid.","nodes":[{"pos":[0,72],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The value specified for the <code>timeout</code> parameter is not valid."}],"pos":[52856,52929],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[53051,53110],"yaml":true},{"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,283],"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,283],"nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.","pos":[0,175]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[176,283]}]}]}],"pos":[54144,54428],"yaml":true},{"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \n  \n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \n  \n Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can access this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.  \n  \n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define. For an illustration of this scenario, see the Example section.  \n  \n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \n  \n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,253],"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.","nodes":[{"content":"In asynchronous processing, you use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event when a message becomes available in the queue or when the specified interval of time has expired.","pos":[0,253],"source":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired."}]},{"pos":[260,367],"content":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,107],"source":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue."}]},{"pos":[374,682],"content":"Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can access this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.","nodes":[{"content":"Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can access this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.","pos":[0,308],"nodes":[{"content":"Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime.","pos":[0,121]},{"content":"The event handler can access this information by looking at the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> that is associated with the operation.","pos":[122,308],"source":" The event handler can access this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation."}]}]},{"pos":[689,1375],"content":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.","pos":[0,686],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate.","pos":[0,182],"source":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> initiates an asynchronous peek operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[183,450],"source":" <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> or by retrieving the result using the <ph id=\"ph3\">&lt;xref:System.Messaging.PeekCompletedEventArgs&gt;</ph>.","pos":[451,686],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>."}]}]},{"pos":[1382,1546],"content":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,164],"source":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1553,1805],"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","pos":[0,252],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.","pos":[0,158],"source":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution."},{"content":"To synchronously peek the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[159,252],"source":" To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."}]}]},{"pos":[1812,2032],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[2039,2753],"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,714],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> that identifies the asynchronous operation that the method started.","pos":[0,154],"source":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> is called.","pos":[155,364],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[365,562],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[563,714],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2760,3103],"content":"This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.","nodes":[{"content":"This overload specifies a time-out and a state object.","pos":[0,54]},{"content":"If the interval specified by the <ph id=\"ph1\">`timeout`</ph> parameter expires, this component raises the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event.","pos":[55,200],"source":" If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event."},{"content":"Because no message exists, a subsequent call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> will throw an exception.","pos":[201,343],"source":" Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception."}]},{"pos":[3110,3442],"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define. For an illustration of this scenario, see the Example section.","nodes":[{"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define. For an illustration of this scenario, see the Example section.","pos":[0,332],"nodes":[{"content":"The state object associates state information with the operation.","pos":[0,65]},{"content":"For example, if you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[66,269],"source":" For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define."},{"content":"For an illustration of this scenario, see the Example section.","pos":[270,332]}]}]},{"pos":[3449,3705],"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","nodes":[{"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[0,256],"nodes":[{"content":"You can also use the state object to pass information across process threads.","pos":[0,77]},{"content":"If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[78,256]}]}]},{"pos":[3712,3922],"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the completion event is raised, but an exception will be thrown when calling <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph>.","source":"If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>."},{"pos":[3929,4015],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[4022,4036],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[4037,4046],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[4092,4106],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[4107,4110],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4115,4152],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[4153,4156],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4161,4176],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[4177,4179],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[4184,4222],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[4223,4226],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[54439,58700],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[60379,60497],"yaml":true},{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"pos":[0,115],"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","pos":[0,115]}]}],"pos":[60564,60680],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[60743,60837],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid.","nodes":[{"pos":[0,72],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The value specified for the <code>timeout</code> parameter is not valid."}],"pos":[60998,61071],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[61193,61252],"yaml":true},{"content":"Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,471],"content":"Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,471],"nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object.","pos":[0,159]},{"content":"The state object provides associated information throughout the lifetime of the operation.","pos":[160,250]},{"content":"This overload receives notification, through a callback, of the identity of the event handler for the operation.","pos":[251,363]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[364,471]}]}]}],"pos":[62610,63082],"yaml":true},{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired. The <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.  \n  \n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation started by the method. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,437],"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired. The <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.","nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired. The <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.","pos":[0,437],"nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired.","pos":[0,194]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event is not raised.","pos":[195,270],"source":" The <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised."},{"content":"The other overloads of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> rely on this component to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event.","pos":[271,437],"source":" The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event."}]}]},{"pos":[444,551],"content":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,107],"source":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue."}]},{"pos":[558,722],"content":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,164],"source":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[729,981],"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","pos":[0,252],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.","pos":[0,158],"source":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution."},{"content":"To synchronously peek the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[159,252],"source":" To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."}]}]},{"pos":[988,1208],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1215,1923],"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation started by the method. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation started by the method. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,708],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> that identifies the asynchronous operation started by the method.","pos":[0,152],"source":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation started by the method."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> is called.","pos":[153,362],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[363,560],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[561,708],"source":" In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[1930,2199],"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","nodes":[{"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[0,269],"nodes":[{"content":"The state object associates state information with the operation.","pos":[0,65]},{"content":"For example, if you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[66,269],"source":" For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define."}]}]},{"pos":[2206,2292],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2299,2313],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2314,2323],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2369,2383],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2384,2387],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2392,2429],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2430,2433],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2438,2453],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2454,2456],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2461,2499],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2500,2503],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[63093,65621],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[65881,65999],"yaml":true},{"content":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> that maintains a specific position in the message queue.","source":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue."}],"pos":[66071,66175],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.PeekAction\"></xref> values. Indicates whether to peek at the current message in the queue, or the next message.","nodes":[{"pos":[0,151],"content":"One of the <xref href=\"System.Messaging.PeekAction\"></xref> values. Indicates whether to peek at the current message in the queue, or the next message.","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.PeekAction\"&gt;&lt;/xref&gt;</ph> values.","pos":[0,67],"source":"One of the <xref href=\"System.Messaging.PeekAction\"></xref> values."},{"content":"Indicates whether to peek at the current message in the queue, or the next message.","pos":[68,151]}]}],"pos":[66251,66403],"yaml":true},{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"pos":[0,115],"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","pos":[0,115]}]}],"pos":[66464,66580],"yaml":true},{"content":"The <xref href=\"System.AsyncCallback\"></xref> that receives the notification of the asynchronous operation completion.","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> that receives the notification of the asynchronous operation completion.","source":"The <xref href=\"System.AsyncCallback\"></xref> that receives the notification of the asynchronous operation completion."}],"pos":[66651,66770],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[66833,66927],"yaml":true},{"content":"A value other than `PeekAction.Current` or `PeekAction.Next` was specified for the <code>action</code> parameter.","nodes":[{"pos":[0,113],"content":"A value other than <ph id=\"ph1\">`PeekAction.Current`</ph> or <ph id=\"ph2\">`PeekAction.Next`</ph> was specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A value other than `PeekAction.Current` or `PeekAction.Next` was specified for the <code>action</code> parameter."}],"pos":[67108,67222],"yaml":true},{"content":"The <code>cursor</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cursor</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>cursor</code> parameter is `null`."}],"pos":[67324,67369],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid.","nodes":[{"pos":[0,72],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The value specified for the <code>timeout</code> parameter is not valid."}],"pos":[67463,67536],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[67658,67717],"yaml":true},{"content":"Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue.","nodes":[{"pos":[0,140],"content":"Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue.","nodes":[{"content":"Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue.","pos":[0,140],"nodes":[{"content":"Initiates an asynchronous peek operation that has no time-out.","pos":[0,62]},{"content":"The operation is not complete until a message becomes available in the queue.","pos":[63,140]}]}]}],"pos":[68572,68713],"yaml":true},{"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue.  \n  \n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,202],"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue.","nodes":[{"content":"In asynchronous processing, you use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event when a message becomes available in the queue.","pos":[0,202],"source":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue."}]},{"pos":[209,316],"content":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,107],"source":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue."}]},{"pos":[323,1009],"content":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.","pos":[0,686],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate.","pos":[0,182],"source":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> initiates an asynchronous peek operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[183,450],"source":" <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> or by retrieving the result using the <ph id=\"ph3\">&lt;xref:System.Messaging.PeekCompletedEventArgs&gt;</ph>.","pos":[451,686],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>."}]}]},{"pos":[1016,1180],"content":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,164],"source":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1187,1439],"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","pos":[0,252],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.","pos":[0,158],"source":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution."},{"content":"To synchronously peek the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[159,252],"source":" To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."}]}]},{"pos":[1446,1666],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1673,2389],"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,716],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> returns identifies the asynchronous operation that the method started.","pos":[0,156],"source":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> is called.","pos":[157,366],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[367,564],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[565,716],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2396,2606],"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the completion event is raised, but an exception will be thrown when calling <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph>.","source":"If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>."},{"pos":[2613,2699],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2706,2720],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2721,2730],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2776,2790],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2791,2794],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2799,2836],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2837,2840],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2845,2860],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2861,2863],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2868,2906],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2907,2910],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[68724,71661],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[72891,72985],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[73174,73233],"yaml":true},{"content":"Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,179],"content":"Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,179],"nodes":[{"content":"Initiates an asynchronous peek operation that has a specified time-out.","pos":[0,71]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[72,179]}]}]}],"pos":[74201,74381],"yaml":true},{"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \n  \n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.  \n  \n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,253],"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.","nodes":[{"content":"In asynchronous processing, you use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event when a message becomes available in the queue or when the specified interval of time has expired.","pos":[0,253],"source":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired."}]},{"pos":[260,367],"content":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,107],"source":"<xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue."}]},{"pos":[374,1060],"content":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.","pos":[0,686],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate.","pos":[0,182],"source":"To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> initiates an asynchronous peek operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[183,450],"source":" <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> or by retrieving the result using the <ph id=\"ph3\">&lt;xref:System.Messaging.PeekCompletedEventArgs&gt;</ph>.","pos":[451,686],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>."}]}]},{"pos":[1067,1231],"content":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,164],"source":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1238,1490],"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.","pos":[0,252],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> is asynchronous, you can call it to peek the queue without blocking the current thread of execution.","pos":[0,158],"source":"Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution."},{"content":"To synchronously peek the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[159,252],"source":" To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."}]}]},{"pos":[1497,1717],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1724,2440],"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,716],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> returns identifies the asynchronous operation that the method started.","pos":[0,156],"source":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> is called.","pos":[157,366],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[367,564],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[565,716],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2447,2771],"content":"This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.","nodes":[{"content":"This overload specifies a time-out.","pos":[0,35]},{"content":"If the interval specified by the <ph id=\"ph1\">`timeout`</ph> parameter expires, this component raises the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event.","pos":[36,181],"source":" If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event."},{"content":"Because no message exists, a subsequent call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> will throw an exception.","pos":[182,324],"source":" Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception."}]},{"pos":[2778,2988],"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the completion event is raised, but an exception will be thrown when calling <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph>.","source":"If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>."},{"pos":[2995,3081],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3088,3102],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3103,3112],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3158,3172],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[3173,3176],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3181,3218],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[3219,3222],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3227,3242],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[3243,3245],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[3250,3288],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[3289,3292],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[74392,77713],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[79066,79184],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[79247,79341],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid.","nodes":[{"pos":[0,72],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The value specified for the <code>timeout</code> parameter is not valid."}],"pos":[79502,79575],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[79697,79756],"yaml":true},{"content":"Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue.","nodes":[{"pos":[0,143],"content":"Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue.","nodes":[{"content":"Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue.","pos":[0,143],"nodes":[{"content":"Initiates an asynchronous receive operation that has no time-out.","pos":[0,65]},{"content":"The operation is not complete until a message becomes available in the queue.","pos":[66,143]}]}]}],"pos":[80667,80811],"yaml":true},{"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message has been removed from the queue.  \n  \n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \n  \n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \n  \n```csharp  \nmyMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();  \n```  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,209],"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message has been removed from the queue.","nodes":[{"content":"In asynchronous processing, you use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event when a message has been removed from the queue.","pos":[0,209],"source":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message has been removed from the queue."}]},{"pos":[216,326],"content":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,110],"source":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue."}]},{"pos":[333,948],"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.","pos":[0,615],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.","pos":[0,184],"source":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> initiates an asynchronous receive operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[185,461],"source":" <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph>.","pos":[462,615],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>."}]}]},{"pos":[955,1122],"content":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,167],"source":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1129,1408],"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","pos":[0,279],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.","pos":[0,179],"source":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution."},{"content":"To synchronously receive a message, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method.","pos":[180,279],"source":" To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method."}]}]},{"pos":[1415,1635],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1642,2364],"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,722],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> returns identifies the asynchronous operation that the method started.","pos":[0,159],"source":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> is called.","pos":[160,372],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[373,570],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[571,722],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2371,2584],"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the completion event is raised, but an exception will be thrown when calling <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph>.","source":"If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>."},{"pos":[2591,3057],"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","nodes":[{"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","pos":[0,466],"nodes":[{"content":"Do not use the asynchronous call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> with transactions.","pos":[0,104],"source":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions."},{"content":"If you want to perform a transactional asynchronous operation, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, and put the transaction and the (synchronous) <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method within the event handler you create for the peek operation.","pos":[105,384],"source":" If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation."},{"content":"Your event handler might contain functionality as shown in the following C# code.","pos":[385,466]}]}]},{"pos":[3190,3276],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3283,3297],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3298,3307],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3353,3367],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[3368,3371],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3376,3413],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[3414,3417],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3422,3437],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[3438,3440],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[3445,3483],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[3484,3487],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[80822,84344],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[86269,86363],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[86555,86614],"yaml":true},{"content":"Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,182],"content":"Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,182],"nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out.","pos":[0,74]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[75,182]}]}]}],"pos":[87600,87783],"yaml":true},{"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \n  \n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \n  \n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.  \n  \n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \n  \n```csharp  \nmyMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();  \n```  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,259],"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.","nodes":[{"content":"In asynchronous processing, you use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event when a message becomes available in the queue or when the specified interval of time has expired.","pos":[0,259],"source":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired."}]},{"pos":[266,376],"content":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,110],"source":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue."}]},{"pos":[383,1083],"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","pos":[0,700],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.","pos":[0,184],"source":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> initiates an asynchronous receive operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[185,461],"source":" <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> or retrieving the result using the <ph id=\"ph3\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs&gt;</ph>.","pos":[462,700],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>."}]}]},{"pos":[1090,1257],"content":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,167],"source":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1264,1543],"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","pos":[0,279],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.","pos":[0,179],"source":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution."},{"content":"To synchronously receive a message, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method.","pos":[180,279],"source":" To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method."}]}]},{"pos":[1550,1770],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1777,1990],"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the completion event is raised, but an exception will be thrown when calling <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph>.","source":"If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>."},{"pos":[1997,2719],"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,722],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> returns identifies the asynchronous operation that the method started.","pos":[0,159],"source":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> is called.","pos":[160,372],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[373,570],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[571,722],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2726,3056],"content":"This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.","nodes":[{"content":"This overload specifies a time-out.","pos":[0,35]},{"content":"If the interval specified by the <ph id=\"ph1\">`timeout`</ph> parameter expires, this component raises the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event.","pos":[36,184],"source":" If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event."},{"content":"Because no message exists, a subsequent call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> will throw an exception.","pos":[185,330],"source":" Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception."}]},{"pos":[3063,3529],"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","nodes":[{"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","pos":[0,466],"nodes":[{"content":"Do not use the asynchronous call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> with transactions.","pos":[0,104],"source":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions."},{"content":"If you want to perform a transactional asynchronous operation, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, and put the transaction and the (synchronous) <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method within the event handler you create for the peek operation.","pos":[105,384],"source":" If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation."},{"content":"Your event handler might contain functionality as shown in the following C# code.","pos":[385,466]}]}]},{"pos":[3662,3748],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3755,3769],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3770,3779],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3825,3839],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[3840,3843],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3848,3885],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[3886,3889],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3894,3909],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[3910,3912],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[3917,3955],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[3956,3959],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[87794,91790],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[92818,92936],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[92999,93093],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly because it represents a negative number.","nodes":[{"pos":[0,122],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly because it represents a negative number.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly because it represents a negative number."}],"pos":[93257,93380],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[93502,93561],"yaml":true},{"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,286],"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,286],"nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.","pos":[0,178]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[179,286]}]}]}],"pos":[94613,94900],"yaml":true},{"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \n  \n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \n  \n Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can detect this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.  \n  \n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \n  \n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \n  \n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \n  \n```csharp  \nmyMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();  \n```  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,259],"content":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.","nodes":[{"content":"In asynchronous processing, you use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event when a message becomes available in the queue or when the specified interval of time has expired.","pos":[0,259],"source":"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired."}]},{"pos":[266,376],"content":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,110],"source":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue."}]},{"pos":[383,691],"content":"Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can detect this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.","nodes":[{"content":"Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can detect this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.","pos":[0,308],"nodes":[{"content":"Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime.","pos":[0,121]},{"content":"The event handler can detect this information by looking at the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> that is associated with the operation.","pos":[122,308],"source":" The event handler can detect this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation."}]}]},{"pos":[698,1398],"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","pos":[0,700],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.","pos":[0,184],"source":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> initiates an asynchronous receive operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[185,461],"source":" <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> or retrieving the result using the <ph id=\"ph3\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs&gt;</ph>.","pos":[462,700],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>."}]}]},{"pos":[1405,1572],"content":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,167],"source":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1579,1858],"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","pos":[0,279],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.","pos":[0,179],"source":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution."},{"content":"To synchronously receive a message, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method.","pos":[180,279],"source":" To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method."}]}]},{"pos":[1865,2085],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[2092,2814],"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,722],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> returns identifies the asynchronous operation that the method started.","pos":[0,159],"source":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> is called.","pos":[160,372],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[373,570],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[571,722],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2821,3170],"content":"This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.","nodes":[{"content":"This overload specifies a time-out and a state object.","pos":[0,54]},{"content":"If the interval specified by the <ph id=\"ph1\">`timeout`</ph> parameter expires, this component raises the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event.","pos":[55,203],"source":" If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event."},{"content":"Because no message exists, a subsequent call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> will throw an exception.","pos":[204,349],"source":" Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception."}]},{"pos":[3177,3449],"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","nodes":[{"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[0,272],"nodes":[{"content":"The state object associates state information with the operation.","pos":[0,65]},{"content":"For example, if you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[66,272],"source":" For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define."}]}]},{"pos":[3456,3712],"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","nodes":[{"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[0,256],"nodes":[{"content":"You can also use the state object to pass information across process threads.","pos":[0,77]},{"content":"If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[78,256]}]}]},{"pos":[3719,4185],"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","nodes":[{"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","pos":[0,466],"nodes":[{"content":"Do not use the asynchronous call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> with transactions.","pos":[0,104],"source":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions."},{"content":"If you want to perform a transactional asynchronous operation, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, and put the transaction and the (synchronous) <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method within the event handler you create for the peek operation.","pos":[105,384],"source":" If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation."},{"content":"Your event handler might contain functionality as shown in the following C# code.","pos":[385,466]}]}]},{"pos":[4318,4404],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[4411,4425],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[4426,4435],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[4481,4495],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[4496,4499],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4504,4541],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[4542,4545],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4550,4565],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[4566,4568],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[4573,4611],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[4612,4615],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[94911,99567],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[100727,100845],"yaml":true},{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"pos":[0,115],"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","pos":[0,115]}]}],"pos":[100912,101028],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[101091,101185],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid.","nodes":[{"pos":[0,72],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The value specified for the <code>timeout</code> parameter is not valid."}],"pos":[101349,101422],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[101544,101603],"yaml":true},{"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,399],"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,399],"nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime.","pos":[0,178]},{"content":"This overload receives notification, through a callback, of the identity of the event handler for the operation.","pos":[179,291]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[292,399]}]}]}],"pos":[102763,103163],"yaml":true},{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.  \n  \n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \n  \n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \n  \n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \n  \n```csharp  \nmyMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();  \n```  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,446],"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.","nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.","pos":[0,446],"nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event is not raised.","pos":[0,273],"source":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised."},{"content":"The other overloads of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> rely on this component to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event.","pos":[274,446],"source":" The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event."}]}]},{"pos":[453,563],"content":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,110],"source":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue."}]},{"pos":[570,1270],"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","pos":[0,700],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.","pos":[0,184],"source":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> initiates an asynchronous receive operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[185,461],"source":" <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> or retrieving the result using the <ph id=\"ph3\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs&gt;</ph>.","pos":[462,700],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>."}]}]},{"pos":[1277,1444],"content":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,167],"source":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1451,1730],"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","pos":[0,279],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.","pos":[0,179],"source":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution."},{"content":"To synchronously receive a message, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method.","pos":[180,279],"source":" To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method."}]}]},{"pos":[1737,1957],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1964,2686],"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,722],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> returns identifies the asynchronous operation that the method started.","pos":[0,159],"source":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> is called.","pos":[160,372],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[373,570],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, you use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[571,722],"source":" In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2693,2965],"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","nodes":[{"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[0,272],"nodes":[{"content":"The state object associates state information with the operation.","pos":[0,65]},{"content":"For example, if you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[66,272],"source":" For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define."}]}]},{"pos":[2972,3228],"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","nodes":[{"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[0,256],"nodes":[{"content":"You can also use the state object to pass information across process threads.","pos":[0,77]},{"content":"If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[78,256]}]}]},{"pos":[3235,3701],"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","nodes":[{"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","pos":[0,466],"nodes":[{"content":"Do not use the asynchronous call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> with transactions.","pos":[0,104],"source":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions."},{"content":"If you want to perform a transactional asynchronous operation, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, and put the transaction and the (synchronous) <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method within the event handler you create for the peek operation.","pos":[105,384],"source":" If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation."},{"content":"Your event handler might contain functionality as shown in the following C# code.","pos":[385,466]}]}]},{"pos":[3834,3920],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3927,3941],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3942,3951],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3997,4011],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[4012,4015],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4020,4057],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[4058,4061],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4066,4081],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[4082,4084],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[4089,4127],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[4128,4131],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[103174,107342],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[108488,108606],"yaml":true},{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"pos":[0,115],"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","pos":[0,115]}]}],"pos":[108673,108789],"yaml":true},{"content":"The <xref href=\"System.AsyncCallback\"></xref> that will receive the notification of the asynchronous operation completion.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> that will receive the notification of the asynchronous operation completion.","source":"The <xref href=\"System.AsyncCallback\"></xref> that will receive the notification of the asynchronous operation completion."}],"pos":[108860,108983],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[109046,109140],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid.","nodes":[{"pos":[0,72],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The value specified for the <code>timeout</code> parameter is not valid."}],"pos":[109304,109377],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[109499,109558],"yaml":true},{"content":"Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"pos":[0,443],"content":"Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[0,443],"nodes":[{"content":"Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object.","pos":[0,131]},{"content":"The state object provides associated information throughout the lifetime of the operation.","pos":[132,222]},{"content":"This overload receives notification, through a callback, of the identity of the event handler for the operation.","pos":[223,335]},{"content":"The operation is not complete until either a message becomes available in the queue or the time-out occurs.","pos":[336,443]}]}]}],"pos":[110814,111258],"yaml":true},{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.  \n  \n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \n  \n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \n  \n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \n  \n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \n  \n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \n  \n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \n  \n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \n  \n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \n  \n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \n  \n```csharp  \nmyMessageQueue.BeginTransaction();  \n myMessageQueue.Receive();  \n myMessageQueue.CommitTransaction();  \n```  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,446],"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.","nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.","pos":[0,446],"nodes":[{"content":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event is not raised.","pos":[0,273],"source":"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised."},{"content":"The other overloads of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> rely on this component to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event.","pos":[274,446],"source":" The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event."}]}]},{"pos":[453,563],"content":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> is also raised if a message already exists in the queue.","pos":[0,110],"source":"<xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue."}]},{"pos":[570,1270],"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","nodes":[{"content":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.","pos":[0,700],"nodes":[{"content":"To use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate.","pos":[0,184],"source":"To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate."},{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> initiates an asynchronous receive operation; the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is notified, through the raising of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event, when a message arrives in the queue.","pos":[185,461],"source":" <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can then access the message by calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> or retrieving the result using the <ph id=\"ph3\">&lt;xref:System.Messaging.ReceiveCompletedEventArgs&gt;</ph>.","pos":[462,700],"source":" The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>."}]}]},{"pos":[1277,1444],"content":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> method returns immediately, but the asynchronous operation is not completed until the event handler is called.","pos":[0,167],"source":"The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called."}]},{"pos":[1451,1730],"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","nodes":[{"content":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.","pos":[0,279],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution.","pos":[0,179],"source":"Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution."},{"content":"To synchronously receive a message, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method.","pos":[180,279],"source":" To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method."}]}]},{"pos":[1737,1957],"content":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.","nodes":[{"content":"Once an asynchronous operation completes, you can call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> again in the event handler to keep receiving notifications.","pos":[0,220],"source":"Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications."}]},{"pos":[1964,2682],"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","nodes":[{"content":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.","pos":[0,718],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> that <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> returns identifies the asynchronous operation that the method started.","pos":[0,159],"source":"The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started."},{"content":"You can use this <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> throughout the lifetime of the operation, although you generally do not use it until <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> is called.","pos":[160,372],"source":" You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called."},{"content":"However, if you start several asynchronous operations, you can place their <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> values in an array and specify whether to wait for all operations or any operation to complete.","pos":[373,570],"source":" However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete."},{"content":"In this case, use the <ph id=\"ph1\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to identify the completed operation.","pos":[571,718],"source":" In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation."}]}]},{"pos":[2689,2961],"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","nodes":[{"content":"The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[0,272],"nodes":[{"content":"The state object associates state information with the operation.","pos":[0,65]},{"content":"For example, if you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.","pos":[66,272],"source":" For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define."}]}]},{"pos":[2968,3224],"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","nodes":[{"content":"You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[0,256],"nodes":[{"content":"You can also use the state object to pass information across process threads.","pos":[0,77]},{"content":"If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.","pos":[78,256]}]}]},{"pos":[3231,3697],"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","nodes":[{"content":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.","pos":[0,466],"nodes":[{"content":"Do not use the asynchronous call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> with transactions.","pos":[0,104],"source":"Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions."},{"content":"If you want to perform a transactional asynchronous operation, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, and put the transaction and the (synchronous) <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method within the event handler you create for the peek operation.","pos":[105,384],"source":" If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation."},{"content":"Your event handler might contain functionality as shown in the following C# code.","pos":[385,466]}]}]},{"pos":[3830,3916],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3923,3937],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3938,3947],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3993,4007],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[4008,4011],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4016,4053],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[4054,4057],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4062,4077],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[4078,4080],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[4085,4123],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[4124,4127],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[111269,115433],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the interval of time to wait for a message to become available.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available."}],"pos":[115660,115778],"yaml":true},{"content":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> that maintains a specific position in the message queue.","source":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue."}],"pos":[115850,115954],"yaml":true},{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"pos":[0,115],"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","nodes":[{"content":"A state object, specified by the application, that contains information associated with the asynchronous operation.","pos":[0,115]}]}],"pos":[116015,116131],"yaml":true},{"content":"The <xref href=\"System.AsyncCallback\"></xref> that receives the notification of the asynchronous operation completion.","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> that receives the notification of the asynchronous operation completion.","source":"The <xref href=\"System.AsyncCallback\"></xref> that receives the notification of the asynchronous operation completion."}],"pos":[116202,116321],"yaml":true},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the posted asynchronous request.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request."}],"pos":[116384,116478],"yaml":true},{"content":"The <code>cursor</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cursor</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>cursor</code> parameter is `null`."}],"pos":[116650,116695],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid.","nodes":[{"pos":[0,72],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The value specified for the <code>timeout</code> parameter is not valid."}],"pos":[116789,116862],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[116984,117043],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Messaging.MessageQueue\"></xref> can be read.","nodes":[{"pos":[0,103],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> can be read.","source":"Gets a value that indicates whether the <xref href=\"System.Messaging.MessageQueue\"></xref> can be read."}],"pos":[117882,117986],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.CanRead%2A> indicates whether the application is able to peek or receive messages from the queue. If <xref:System.Messaging.MessageQueue.CanRead%2A> is `true`, the <xref:System.Messaging.MessageQueue> can receive or peek messages from the queue. Otherwise, it cannot.  \n  \n <xref:System.Messaging.MessageQueue.CanRead%2A> is `false` if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to read from a queue when <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, access is denied.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,303],"content":"<xref:System.Messaging.MessageQueue.CanRead%2A> indicates whether the application is able to peek or receive messages from the queue. If <xref:System.Messaging.MessageQueue.CanRead%2A> is `true`, the <xref:System.Messaging.MessageQueue> can receive or peek messages from the queue. Otherwise, it cannot.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> indicates whether the application is able to peek or receive messages from the queue.","pos":[0,133],"source":"<xref:System.Messaging.MessageQueue.CanRead%2A> indicates whether the application is able to peek or receive messages from the queue."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can receive or peek messages from the queue.","pos":[134,281],"source":" If <xref:System.Messaging.MessageQueue.CanRead%2A> is `true`, the <xref:System.Messaging.MessageQueue> can receive or peek messages from the queue."},{"content":"Otherwise, it cannot.","pos":[282,303]}]},{"pos":[310,737],"content":"<xref:System.Messaging.MessageQueue.CanRead%2A> is `false` if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to read from a queue when <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, access is denied.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph> if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> requests exclusive access), or if the application does not have sufficient rights to access it.","pos":[0,297],"source":"<xref:System.Messaging.MessageQueue.CanRead%2A> is `false` if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it."},{"content":"If your application tries to read from a queue when <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanRead%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, access is denied.","pos":[298,427],"source":" If your application tries to read from a queue when <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, access is denied."}]},{"pos":[744,832],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[839,853],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[854,863],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[909,923],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[924,927],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[932,969],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[970,973],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[978,993],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[994,996],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1001,1039],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1040,1043],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[117997,119055],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Messaging.MessageQueue\"></xref> exists and the application can read from it; otherwise, `false`.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> exists and the application can read from it; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Messaging.MessageQueue\"></xref> exists and the application can read from it; otherwise, `false`."}],"pos":[119540,119672],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Messaging.MessageQueue\"></xref> can be written to.","nodes":[{"pos":[0,109],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> can be written to.","source":"Gets a value that indicates whether the <xref href=\"System.Messaging.MessageQueue\"></xref> can be written to."}],"pos":[120745,120855],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.CanWrite%2A> indicates whether the application is able to send messages to the queue. If <xref:System.Messaging.MessageQueue.CanWrite%2A> is `true`, the <xref:System.Messaging.MessageQueue> can send messages to the queue. Otherwise, it cannot.  \n  \n <xref:System.Messaging.MessageQueue.CanWrite%2A> is `false` if a queue is already open with exclusive write access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to write to a queue when <xref:System.Messaging.MessageQueue.CanWrite%2A> is `false`, access is denied.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,279],"content":"<xref:System.Messaging.MessageQueue.CanWrite%2A> indicates whether the application is able to send messages to the queue. If <xref:System.Messaging.MessageQueue.CanWrite%2A> is `true`, the <xref:System.Messaging.MessageQueue> can send messages to the queue. Otherwise, it cannot.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanWrite%2A&gt;</ph> indicates whether the application is able to send messages to the queue.","pos":[0,121],"source":"<xref:System.Messaging.MessageQueue.CanWrite%2A> indicates whether the application is able to send messages to the queue."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanWrite%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> can send messages to the queue.","pos":[122,257],"source":" If <xref:System.Messaging.MessageQueue.CanWrite%2A> is `true`, the <xref:System.Messaging.MessageQueue> can send messages to the queue."},{"content":"Otherwise, it cannot.","pos":[258,279]}]},{"pos":[286,715],"content":"<xref:System.Messaging.MessageQueue.CanWrite%2A> is `false` if a queue is already open with exclusive write access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to write to a queue when <xref:System.Messaging.MessageQueue.CanWrite%2A> is `false`, access is denied.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanWrite%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph> if a queue is already open with exclusive write access (or if it's open with non-exclusive access and this <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> requests exclusive access), or if the application does not have sufficient rights to access it.","pos":[0,299],"source":"<xref:System.Messaging.MessageQueue.CanWrite%2A> is `false` if a queue is already open with exclusive write access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it."},{"content":"If your application tries to write to a queue when <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CanWrite%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, access is denied.","pos":[300,429],"source":" If your application tries to write to a queue when <xref:System.Messaging.MessageQueue.CanWrite%2A> is `false`, access is denied."}]},{"pos":[722,810],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[817,831],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[832,841],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[887,901],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[902,905],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[910,947],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[948,951],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[956,971],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[972,974],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[979,1017],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1018,1021],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[120866,121902],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Messaging.MessageQueue\"></xref> exists and the application can write to it; otherwise, `false`.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> exists and the application can write to it; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Messaging.MessageQueue\"></xref> exists and the application can write to it; otherwise, `false`."}],"pos":[122390,122521],"yaml":true},{"content":"Gets or sets the queue category.","nodes":[{"pos":[0,32],"content":"Gets or sets the queue category.","nodes":[{"content":"Gets or sets the queue category.","pos":[0,32]}]}],"pos":[123595,123628],"yaml":true},{"content":"The queue category allows an application to categorize its queues. For example, you can place all Billing queues in one category and all Order queues in another.  \n  \n The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing Type ID property (which is read/write), accessible through the **Queue Properties** dialog box in the Computer Management Console. You can define a new category. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, such an action is unnecessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.  \n  \n It is not necessary to set the <xref:System.Messaging.MessageQueue.Category%2A>. The value can be `null`.  \n  \n Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,161],"content":"The queue category allows an application to categorize its queues. For example, you can place all Billing queues in one category and all Order queues in another.","nodes":[{"content":"The queue category allows an application to categorize its queues. For example, you can place all Billing queues in one category and all Order queues in another.","pos":[0,161],"nodes":[{"content":"The queue category allows an application to categorize its queues.","pos":[0,66]},{"content":"For example, you can place all Billing queues in one category and all Order queues in another.","pos":[67,161]}]}]},{"pos":[168,967],"content":"The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing Type ID property (which is read/write), accessible through the **Queue Properties** dialog box in the Computer Management Console. You can define a new category. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, such an action is unnecessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> property provides access to the Message Queuing Type ID property (which is read/write), accessible through the <bpt id=\"p1\">**</bpt>Queue Properties<ept id=\"p1\">**</ept> dialog box in the Computer Management Console.","pos":[0,231],"source":"The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing Type ID property (which is read/write), accessible through the **Queue Properties** dialog box in the Computer Management Console."},{"content":"You can define a new category.","pos":[232,262]},{"content":"Although you can use <ph id=\"ph1\">&lt;xref:System.Guid.NewGuid%2A&gt;</ph> to create a category value that is unique across all <ph id=\"ph2\">&lt;xref:System.Guid&gt;</ph> values, such an action is unnecessary.","pos":[263,424],"source":" Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, such an action is unnecessary."},{"content":"The category value needs to be distinct only from other categories, not from all other <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> values.","pos":[425,538],"source":" The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values."},{"content":"For example, you can assign {00000000-0000-0000-0000-000000000001} as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> for another set.","pos":[539,799],"source":" For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set."}]},{"pos":[974,1079],"content":"It is not necessary to set the <xref:System.Messaging.MessageQueue.Category%2A>. The value can be `null`.","nodes":[{"content":"It is not necessary to set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph>.","pos":[0,80],"source":"It is not necessary to set the <xref:System.Messaging.MessageQueue.Category%2A>."},{"content":"The value can be <ph id=\"ph1\">`null`</ph>.","pos":[81,105],"source":" The value can be `null`."}]},{"pos":[1086,1239],"content":"Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","nodes":[{"content":"Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","pos":[0,153],"nodes":[{"content":"Setting this property modifies the Message Queuing queue.","pos":[0,57]},{"content":"Therefore, any other <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instances are affected by the change.","pos":[58,153],"source":" Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change."}]}]},{"pos":[1246,1334],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1341,1355],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1356,1365],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1411,1425],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1426,1429],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1434,1471],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1472,1475],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1480,1495],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1496,1498],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1503,1541],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1542,1544],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[123639,125202],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Guid\"></xref> that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues. The default is `Guid.empty`.","nodes":[{"pos":[0,187],"content":"A <xref href=\"System.Guid\"></xref> that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues. The default is `Guid.empty`.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues.","pos":[0,158],"source":"A <xref href=\"System.Guid\"></xref> that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues."},{"content":"The default is <ph id=\"ph1\">`Guid.empty`</ph>.","pos":[159,187],"source":" The default is `Guid.empty`."}]}],"pos":[125649,125837],"yaml":true},{"content":"The queue category was set to an invalid value.","nodes":[{"pos":[0,47],"content":"The queue category was set to an invalid value.","nodes":[{"content":"The queue category was set to an invalid value.","pos":[0,47]}]}],"pos":[125997,126045],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[126167,126226],"yaml":true},{"content":"Clears the connection cache.","nodes":[{"pos":[0,28],"content":"Clears the connection cache.","nodes":[{"content":"Clears the connection cache.","pos":[0,28]}]}],"pos":[127256,127285],"yaml":true},{"content":"When you call <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, the format names stored in the cache are removed and handles opened and stored in the cache are closed.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,179],"content":"When you call <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, the format names stored in the cache are removed and handles opened and stored in the cache are closed.","nodes":[{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ClearConnectionCache%2A&gt;</ph>, the format names stored in the cache are removed and handles opened and stored in the cache are closed.","pos":[0,179],"source":"When you call <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, the format names stored in the cache are removed and handles opened and stored in the cache are closed."}]},{"pos":[186,272],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[279,293],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[294,303],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[349,363],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[364,367],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[372,409],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[410,413],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[418,433],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[434,437],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[442,480],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[481,484],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[127296,127793],"yaml":true,"extradata":"MT"},{"content":"Frees all resources allocated by the <xref href=\"System.Messaging.MessageQueue\"></xref>.","nodes":[{"pos":[0,88],"content":"Frees all resources allocated by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","source":"Frees all resources allocated by the <xref href=\"System.Messaging.MessageQueue\"></xref>."}],"pos":[129056,129145],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.Close%2A> frees all resources associated with a <xref:System.Messaging.MessageQueue>, including shared resources if appropriate. The system re-acquires these resources automatically if they are still available, for example when you call the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method, as in the following C# code.  \n  \n```csharp  \nmyMessageQueue.Send(\"Text 1.\");  \nmyMessageQueue.Close();  \nmyMessageQueue.Send(\"Text 2.\"); //Resources are re-acquired.  \n```  \n  \n When you call <xref:System.Messaging.MessageQueue.Close%2A>, all <xref:System.Messaging.MessageQueue> properties that directly access the Message Queuing queue are cleared out. The <xref:System.Messaging.MessageQueue.Path%2A>, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, <xref:System.Messaging.MessageQueue.Formatter%2A>, and <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> all remain as they were.  \n  \n <xref:System.Messaging.MessageQueue.Close%2A> does not always free the read and write handles to a queue, because they might be shared. You can take any of the following steps to ensure that <xref:System.Messaging.MessageQueue.Close%2A> frees the read and write handles to a queue:  \n  \n-   Create the <xref:System.Messaging.MessageQueue> with exclusive access. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29> or <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor, and set the `sharedModeDenyReceive` parameter to `true`.  \n  \n-   Create the <xref:System.Messaging.MessageQueue> with connection caching disabled. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor and set the `enableConnectionCache` parameter to `false`.  \n  \n-   Disable connection caching. To do so, set the <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property to `false`.  \n  \n You should call <xref:System.Messaging.MessageQueue.Close%2A> for a queue before you delete the queue on the Message Queuing server. Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,374],"content":"<xref:System.Messaging.MessageQueue.Close%2A> frees all resources associated with a <xref:System.Messaging.MessageQueue>, including shared resources if appropriate. The system re-acquires these resources automatically if they are still available, for example when you call the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method, as in the following C# code.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.Close%2A> frees all resources associated with a <xref:System.Messaging.MessageQueue>, including shared resources if appropriate. The system re-acquires these resources automatically if they are still available, for example when you call the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method, as in the following C# code.","pos":[0,374],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Close%2A&gt;</ph> frees all resources associated with a <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, including shared resources if appropriate.","pos":[0,164],"source":"<xref:System.Messaging.MessageQueue.Close%2A> frees all resources associated with a <xref:System.Messaging.MessageQueue>, including shared resources if appropriate."},{"content":"The system re-acquires these resources automatically if they are still available, for example when you call the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph> method, as in the following C# code.","pos":[165,374],"source":" The system re-acquires these resources automatically if they are still available, for example when you call the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method, as in the following C# code."}]}]},{"pos":[525,962],"content":"When you call <xref:System.Messaging.MessageQueue.Close%2A>, all <xref:System.Messaging.MessageQueue> properties that directly access the Message Queuing queue are cleared out. The <xref:System.Messaging.MessageQueue.Path%2A>, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, <xref:System.Messaging.MessageQueue.Formatter%2A>, and <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> all remain as they were.","nodes":[{"content":"When you call <xref:System.Messaging.MessageQueue.Close%2A>, all <xref:System.Messaging.MessageQueue> properties that directly access the Message Queuing queue are cleared out. The <xref:System.Messaging.MessageQueue.Path%2A>, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, <xref:System.Messaging.MessageQueue.Formatter%2A>, and <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> all remain as they were.","pos":[0,437],"nodes":[{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Close%2A&gt;</ph>, all <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> properties that directly access the Message Queuing queue are cleared out.","pos":[0,176],"source":"When you call <xref:System.Messaging.MessageQueue.Close%2A>, all <xref:System.Messaging.MessageQueue> properties that directly access the Message Queuing queue are cleared out."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A&gt;</ph> all remain as they were.","pos":[177,437],"source":" The <xref:System.Messaging.MessageQueue.Path%2A>, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, <xref:System.Messaging.MessageQueue.Formatter%2A>, and <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> all remain as they were."}]}]},{"pos":[969,1250],"content":"<xref:System.Messaging.MessageQueue.Close%2A> does not always free the read and write handles to a queue, because they might be shared. You can take any of the following steps to ensure that <xref:System.Messaging.MessageQueue.Close%2A> frees the read and write handles to a queue:","nodes":[{"content":"<xref:System.Messaging.MessageQueue.Close%2A> does not always free the read and write handles to a queue, because they might be shared. You can take any of the following steps to ensure that <xref:System.Messaging.MessageQueue.Close%2A> frees the read and write handles to a queue:","pos":[0,281],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Close%2A&gt;</ph> does not always free the read and write handles to a queue, because they might be shared.","pos":[0,135],"source":"<xref:System.Messaging.MessageQueue.Close%2A> does not always free the read and write handles to a queue, because they might be shared."},{"content":"You can take any of the following steps to ensure that <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Close%2A&gt;</ph> frees the read and write handles to a queue:","pos":[136,281],"source":" You can take any of the following steps to ensure that <xref:System.Messaging.MessageQueue.Close%2A> frees the read and write handles to a queue:"}]}]},{"pos":[1260,1601],"content":"Create the <xref:System.Messaging.MessageQueue> with exclusive access. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29> or <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor, and set the `sharedModeDenyReceive` parameter to `true`.","nodes":[{"content":"Create the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with exclusive access.","pos":[0,70],"source":"Create the <xref:System.Messaging.MessageQueue> with exclusive access."},{"content":"To do so, call the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor, and set the <ph id=\"ph3\">`sharedModeDenyReceive`</ph> parameter to <ph id=\"ph4\">`true`</ph>.","pos":[71,341],"source":" To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29> or <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor, and set the `sharedModeDenyReceive` parameter to `true`."}]},{"pos":[1611,1879],"content":"Create the <xref:System.Messaging.MessageQueue> with connection caching disabled. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor and set the `enableConnectionCache` parameter to `false`.","nodes":[{"content":"Create the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with connection caching disabled.","pos":[0,81],"source":"Create the <xref:System.Messaging.MessageQueue> with connection caching disabled."},{"content":"To do so, call the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and set the <ph id=\"ph2\">`enableConnectionCache`</ph> parameter to <ph id=\"ph3\">`false`</ph>.","pos":[82,268],"source":" To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor and set the `enableConnectionCache` parameter to `false`."}]},{"pos":[1889,2017],"content":"Disable connection caching. To do so, set the <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property to `false`.","nodes":[{"content":"Disable connection caching.","pos":[0,27]},{"content":"To do so, set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EnableConnectionCache%2A&gt;</ph> property to <ph id=\"ph2\">`false`</ph>.","pos":[28,128],"source":" To do so, set the <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property to `false`."}]},{"pos":[2024,2253],"content":"You should call <xref:System.Messaging.MessageQueue.Close%2A> for a queue before you delete the queue on the Message Queuing server. Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.","nodes":[{"content":"You should call <xref:System.Messaging.MessageQueue.Close%2A> for a queue before you delete the queue on the Message Queuing server. Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.","pos":[0,229],"nodes":[{"content":"You should call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Close%2A&gt;</ph> for a queue before you delete the queue on the Message Queuing server.","pos":[0,132],"source":"You should call <xref:System.Messaging.MessageQueue.Close%2A> for a queue before you delete the queue on the Message Queuing server."},{"content":"Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.","pos":[133,229]}]}]},{"pos":[2260,2346],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2353,2367],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2368,2377],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2423,2437],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2438,2441],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2446,2483],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2484,2487],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2492,2507],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2508,2511],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2516,2554],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2555,2558],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[129156,131749],"yaml":true,"extradata":"MT"},{"content":"Creates a non-transactional Message Queuing queue at the specified path.","nodes":[{"pos":[0,72],"content":"Creates a non-transactional Message Queuing queue at the specified path.","nodes":[{"content":"Creates a non-transactional Message Queuing queue at the specified path.","pos":[0,72]}]}],"pos":[133262,133335],"yaml":true},{"content":"Use this overload to create a non-transactional Message Queuing queue.  \n  \n To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n  \n Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,70],"content":"Use this overload to create a non-transactional Message Queuing queue.","nodes":[{"content":"Use this overload to create a non-transactional Message Queuing queue.","pos":[0,70]}]},{"pos":[77,385],"content":"To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","nodes":[{"content":"To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","pos":[0,308],"nodes":[{"content":"To create a new instance of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class in your application and bind it to an existing queue, use the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt;</ph> constructor.","pos":[0,197],"source":"To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor."},{"content":"To create a new queue in Message Queuing, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph>.","pos":[198,308],"source":" To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>."}]}]},{"pos":[392,504],"content":"The syntax for the <ph id=\"ph1\">`path`</ph> parameter depends on the type of queue it references, as shown in the following table.","source":"The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table."},{"pos":[511,521],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[522,528],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[567,579],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[611,624],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[671,782],"content":"Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.","nodes":[{"content":"Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.","pos":[0,111],"nodes":[{"content":"Use \".\" for the local computer.","pos":[0,31]},{"content":"For more syntax, see the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property.","pos":[32,111],"source":" For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property."}]}]},{"pos":[789,875],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[882,896],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[897,906],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[952,966],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[967,970],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[975,1012],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1013,1016],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1021,1036],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1037,1039],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1044,1082],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1083,1085],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[133346,134463],"yaml":true,"extradata":"MT"},{"content":"The path of the queue to create.","nodes":[{"pos":[0,32],"content":"The path of the queue to create.","nodes":[{"content":"The path of the queue to create.","pos":[0,32]}]}],"pos":[135154,135187],"yaml":true},{"content":"A <xref href=\"System.Messaging.MessageQueue\"></xref> that represents the new queue.","nodes":[{"pos":[0,83],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> that represents the new queue.","source":"A <xref href=\"System.Messaging.MessageQueue\"></xref> that represents the new queue."}],"pos":[135260,135344],"yaml":true},{"content":"The <code>path</code> parameter is `null` or is an empty string (\"\").","nodes":[{"pos":[0,69],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> or is an empty string (\"\").","source":"The <code>path</code> parameter is `null` or is an empty string (\"\")."}],"pos":[135502,135572],"yaml":true},{"content":"A queue already exists at the specified path.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,45],"content":"A queue already exists at the specified path.","nodes":[{"content":"A queue already exists at the specified path.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,121],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[135694,135822],"yaml":true},{"content":"Creates a transactional or non-transactional Message Queuing queue at the specified path.","nodes":[{"pos":[0,89],"content":"Creates a transactional or non-transactional Message Queuing queue at the specified path.","nodes":[{"content":"Creates a transactional or non-transactional Message Queuing queue at the specified path.","pos":[0,89]}]}],"pos":[136832,136922],"yaml":true},{"content":"You can use this overload to create a transactional queue in Message Queuing. You can create a non-transactional queue, by setting the `transactional` parameter to `false` or by calling the other overload of <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A>constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n  \n Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,271],"content":"You can use this overload to create a transactional queue in Message Queuing. You can create a non-transactional queue, by setting the `transactional` parameter to `false` or by calling the other overload of <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","nodes":[{"content":"You can use this overload to create a transactional queue in Message Queuing.","pos":[0,77]},{"content":"You can create a non-transactional queue, by setting the <ph id=\"ph1\">`transactional`</ph> parameter to <ph id=\"ph2\">`false`</ph> or by calling the other overload of <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph>.","pos":[78,271],"source":" You can create a non-transactional queue, by setting the `transactional` parameter to `false` or by calling the other overload of <xref:System.Messaging.MessageQueue.Create%28System.String%29>."}]},{"pos":[278,585],"content":"To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A>constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","nodes":[{"content":"To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A>constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.","pos":[0,307],"nodes":[{"content":"To create a new instance of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class in your application and bind it to an existing queue, use the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt;</ph>constructor.","pos":[0,196],"source":"To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A>constructor."},{"content":"To create a new queue in Message Queuing, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Create%28System.String%29&gt;</ph>.","pos":[197,307],"source":" To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>."}]}]},{"pos":[592,704],"content":"The syntax for the <ph id=\"ph1\">`path`</ph> parameter depends on the type of queue it references, as shown in the following table.","source":"The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table."},{"pos":[711,721],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[722,728],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[767,779],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[811,824],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[871,982],"content":"Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.","nodes":[{"content":"Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.","pos":[0,111],"nodes":[{"content":"Use \".\" for the local computer.","pos":[0,31]},{"content":"For more syntax, see the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property.","pos":[32,111],"source":" For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property."}]}]},{"pos":[989,1075],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1082,1096],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1097,1106],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1152,1166],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1167,1170],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1175,1212],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1213,1216],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1221,1236],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1237,1239],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1244,1282],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1283,1285],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[136933,138250],"yaml":true,"extradata":"MT"},{"content":"The path of the queue to create.","nodes":[{"pos":[0,32],"content":"The path of the queue to create.","nodes":[{"content":"The path of the queue to create.","pos":[0,32]}]}],"pos":[139095,139128],"yaml":true},{"content":"`true` to create a transactional queue; `false` to create a non-transactional queue.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> to create a transactional queue; <ph id=\"ph2\">`false`</ph> to create a non-transactional queue.","source":"`true` to create a transactional queue; `false` to create a non-transactional queue."}],"pos":[139198,139285],"yaml":true},{"content":"A <xref href=\"System.Messaging.MessageQueue\"></xref> that represents the new queue.","nodes":[{"pos":[0,83],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> that represents the new queue.","source":"A <xref href=\"System.Messaging.MessageQueue\"></xref> that represents the new queue."}],"pos":[139358,139442],"yaml":true},{"content":"The <code>path</code> parameter is `null` or is an empty string (\"\").","nodes":[{"pos":[0,69],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> or is an empty string (\"\").","source":"The <code>path</code> parameter is `null` or is an empty string (\"\")."}],"pos":[139600,139670],"yaml":true},{"content":"A queue already exists at the specified path.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,45],"content":"A queue already exists at the specified path.","nodes":[{"content":"A queue already exists at the specified path.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,121],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[139792,139920],"yaml":true},{"content":"Creates a new <xref href=\"System.Messaging.Cursor\"></xref> for the current message queue.","nodes":[{"pos":[0,89],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> for the current message queue.","source":"Creates a new <xref href=\"System.Messaging.Cursor\"></xref> for the current message queue."}],"pos":[140831,140921],"yaml":true},{"content":"A new <xref href=\"System.Messaging.Cursor\"></xref> for the current message queue. This cursor is used to maintain a specific location in the queue when reading the queue's messages.","nodes":[{"pos":[0,181],"content":"A new <xref href=\"System.Messaging.Cursor\"></xref> for the current message queue. This cursor is used to maintain a specific location in the queue when reading the queue's messages.","nodes":[{"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> for the current message queue.","pos":[0,81],"source":"A new <xref href=\"System.Messaging.Cursor\"></xref> for the current message queue."},{"content":"This cursor is used to maintain a specific location in the queue when reading the queue's messages.","pos":[82,181]}]}],"pos":[141078,141260],"yaml":true},{"content":"Gets the time and date that the queue was created in Message Queuing.","nodes":[{"pos":[0,69],"content":"Gets the time and date that the queue was created in Message Queuing.","nodes":[{"content":"Gets the time and date that the queue was created in Message Queuing.","pos":[0,69]}]}],"pos":[142190,142260],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.CreateTime%2A> refers to the queue on the Message Queuing server, not the <xref:System.Messaging.MessageQueue> instance.  \n  \n If the queue exists, this property represents the time the queue was created, adjusted to the local time of the server on which the queue exists.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,156],"content":"<xref:System.Messaging.MessageQueue.CreateTime%2A> refers to the queue on the Message Queuing server, not the <xref:System.Messaging.MessageQueue> instance.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.CreateTime%2A&gt;</ph> refers to the queue on the Message Queuing server, not the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instance.","pos":[0,156],"source":"<xref:System.Messaging.MessageQueue.CreateTime%2A> refers to the queue on the Message Queuing server, not the <xref:System.Messaging.MessageQueue> instance."}]},{"pos":[163,308],"content":"If the queue exists, this property represents the time the queue was created, adjusted to the local time of the server on which the queue exists.","nodes":[{"content":"If the queue exists, this property represents the time the queue was created, adjusted to the local time of the server on which the queue exists.","pos":[0,145]}]},{"pos":[315,403],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[410,424],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[425,434],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[480,494],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[495,498],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[503,540],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[541,544],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[549,564],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[565,567],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[572,610],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[611,613],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[142271,142899],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.DateTime\"></xref> that represents the date and time at which the queue was created.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that represents the date and time at which the queue was created.","source":"A <xref href=\"System.DateTime\"></xref> that represents the date and time at which the queue was created."}],"pos":[143350,143455],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[143645,143704],"yaml":true},{"content":"Gets or sets the message property values to be used by default when the application sends messages to the queue.","nodes":[{"pos":[0,112],"content":"Gets or sets the message property values to be used by default when the application sends messages to the queue.","nodes":[{"content":"Gets or sets the message property values to be used by default when the application sends messages to the queue.","pos":[0,112]}]}],"pos":[144748,144861],"yaml":true},{"content":"When you send any object that is not of type <xref:System.Messaging.Message> to the queue, the <xref:System.Messaging.MessageQueue> inserts the object into a Message Queuing message. At that time, the <xref:System.Messaging.MessageQueue> applies to the message the property values you specify in the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property. Conversely, if you send a <xref:System.Messaging.Message> to the queue, these properties are already specified for the instance itself, so <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> is ignored for the <xref:System.Messaging.Message>.  \n  \n Although you set the properties through the <xref:System.Messaging.MessageQueue> object, the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> refers to the properties of the messages that are sent to the queue, not the queue itself.  \n  \n The default values for the properties are shown in the following table.  \n  \n|Property|Default value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>|`AcknowledgeType.None`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>|`null`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>|Zero (0)|  \n|<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>|`true`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>|A zero-length array of bytes|  \n|<xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.Label%2A>|Empty string (\"\")|  \n|<xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>|`MessagePriority.Normal`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>|`false`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>|`null`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>|`null`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>|`false`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>|`false`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.UseEncryption%2A>|`false`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>|`false`|  \n|<xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>|`false`|  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,628],"content":"When you send any object that is not of type <xref:System.Messaging.Message> to the queue, the <xref:System.Messaging.MessageQueue> inserts the object into a Message Queuing message. At that time, the <xref:System.Messaging.MessageQueue> applies to the message the property values you specify in the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property. Conversely, if you send a <xref:System.Messaging.Message> to the queue, these properties are already specified for the instance itself, so <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> is ignored for the <xref:System.Messaging.Message>.","nodes":[{"content":"When you send any object that is not of type <xref:System.Messaging.Message> to the queue, the <xref:System.Messaging.MessageQueue> inserts the object into a Message Queuing message. At that time, the <xref:System.Messaging.MessageQueue> applies to the message the property values you specify in the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property. Conversely, if you send a <xref:System.Messaging.Message> to the queue, these properties are already specified for the instance itself, so <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> is ignored for the <xref:System.Messaging.Message>.","pos":[0,628],"nodes":[{"content":"When you send any object that is not of type <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> to the queue, the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> inserts the object into a Message Queuing message.","pos":[0,182],"source":"When you send any object that is not of type <xref:System.Messaging.Message> to the queue, the <xref:System.Messaging.MessageQueue> inserts the object into a Message Queuing message."},{"content":"At that time, the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> applies to the message the property values you specify in the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> property.","pos":[183,373],"source":" At that time, the <xref:System.Messaging.MessageQueue> applies to the message the property values you specify in the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property."},{"content":"Conversely, if you send a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> to the queue, these properties are already specified for the instance itself, so <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> is ignored for the <ph id=\"ph3\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[374,628],"source":" Conversely, if you send a <xref:System.Messaging.Message> to the queue, these properties are already specified for the instance itself, so <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> is ignored for the <xref:System.Messaging.Message>."}]}]},{"pos":[635,882],"content":"Although you set the properties through the <xref:System.Messaging.MessageQueue> object, the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> refers to the properties of the messages that are sent to the queue, not the queue itself.","nodes":[{"content":"Although you set the properties through the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> object, the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> refers to the properties of the messages that are sent to the queue, not the queue itself.","pos":[0,247],"source":"Although you set the properties through the <xref:System.Messaging.MessageQueue> object, the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> refers to the properties of the messages that are sent to the queue, not the queue itself."}]},{"pos":[889,960],"content":"The default values for the properties are shown in the following table.","nodes":[{"content":"The default values for the properties are shown in the following table.","pos":[0,71]}]},{"pos":[967,975],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[976,989],"content":"Default value","nodes":[{"content":"Default value","pos":[0,13]}]},{"pos":[1033,1099],"content":"<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>","nodes":[]},{"pos":[1127,1197],"content":"<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>","nodes":[]},{"pos":[1209,1271],"content":"<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>","nodes":[]},{"pos":[1272,1280],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[1285,1350],"content":"<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>","nodes":[]},{"pos":[1362,1432],"content":"<xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>","nodes":[]},{"pos":[1463,1523],"content":"<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>","nodes":[]},{"pos":[1524,1552],"content":"A zero-length array of bytes","nodes":[{"content":"A zero-length array of bytes","pos":[0,28]}]},{"pos":[1557,1621],"content":"<xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>","nodes":[]},{"pos":[1646,1702],"content":"<xref:System.Messaging.DefaultPropertiesToSend.Label%2A>","nodes":[]},{"pos":[1703,1720],"content":"Empty string (\"\")","nodes":[{"content":"Empty string (\"\")","pos":[0,17]}]},{"pos":[1725,1784],"content":"<xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>","nodes":[]},{"pos":[1814,1876],"content":"<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>","nodes":[]},{"pos":[1889,1953],"content":"<xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>","nodes":[]},{"pos":[1965,2032],"content":"<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>","nodes":[]},{"pos":[2063,2130],"content":"<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>","nodes":[]},{"pos":[2161,2234],"content":"<xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>","nodes":[]},{"pos":[2246,2314],"content":"<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>","nodes":[]},{"pos":[2327,2396],"content":"<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>","nodes":[]},{"pos":[2409,2473],"content":"<xref:System.Messaging.DefaultPropertiesToSend.UseEncryption%2A>","nodes":[]},{"pos":[2486,2552],"content":"<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>","nodes":[]},{"pos":[2565,2626],"content":"<xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>","nodes":[]},{"pos":[2642,2730],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[2737,2751],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2752,2761],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2807,2821],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2822,2825],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2830,2867],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2868,2871],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2876,2891],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2892,2895],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2900,2938],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2939,2942],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[144872,147855],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.DefaultPropertiesToSend\"></xref> that contains the default Message Queuing message property values used when the application sends objects other than <xref href=\"System.Messaging.Message\"></xref> instances to the queue.","nodes":[{"pos":[0,250],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.DefaultPropertiesToSend\"&gt;&lt;/xref&gt;</ph> that contains the default Message Queuing message property values used when the application sends objects other than <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> instances to the queue.","source":"A <xref href=\"System.Messaging.DefaultPropertiesToSend\"></xref> that contains the default Message Queuing message property values used when the application sends objects other than <xref href=\"System.Messaging.Message\"></xref> instances to the queue."}],"pos":[148845,149096],"yaml":true},{"content":"The default properties could not be set for the queue, possibly because one of the properties is not valid.","nodes":[{"pos":[0,107],"content":"The default properties could not be set for the queue, possibly because one of the properties is not valid.","nodes":[{"content":"The default properties could not be set for the queue, possibly because one of the properties is not valid.","pos":[0,107]}]}],"pos":[149271,149379],"yaml":true},{"content":"Deletes a queue on a Message Queuing server.","nodes":[{"pos":[0,44],"content":"Deletes a queue on a Message Queuing server.","nodes":[{"content":"Deletes a queue on a Message Queuing server.","pos":[0,44]}]}],"pos":[150439,150484],"yaml":true},{"content":"The syntax for the `path` parameter depends on the type of queue.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n  \n For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.  \n  \n|Reference|Syntax|  \n|---------------|------------|  \n|Format name|FormatName:[ *format name* ]|  \n|Label|Label:[ *label* ]|  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,65],"content":"The syntax for the <ph id=\"ph1\">`path`</ph> parameter depends on the type of queue.","source":"The syntax for the `path` parameter depends on the type of queue."},{"pos":[72,82],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[83,89],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[128,140],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[172,185],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[232,311],"content":"For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.","nodes":[{"content":"For more syntax, see the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property.","pos":[0,79],"source":"For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property."}]},{"pos":[318,476],"content":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.","nodes":[{"content":"Alternatively, you can use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> to describe the queue path.","pos":[0,158],"source":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path."}]},{"pos":[483,492],"content":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"pos":[493,499],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[537,548],"content":"Format name","nodes":[{"content":"Format name","pos":[0,11]}]},{"pos":[549,577],"content":"FormatName:[ <bpt id=\"p1\">*</bpt>format name<ept id=\"p1\">*</ept> ]","source":"FormatName:[ *format name* ]"},{"pos":[582,587],"content":"Label","nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[588,605],"content":"Label:[ <bpt id=\"p1\">*</bpt>label<ept id=\"p1\">*</ept> ]","source":"Label:[ *label* ]"},{"pos":[613,699],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[706,720],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[721,730],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[776,790],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[791,794],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[799,836],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[837,840],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[845,860],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[861,863],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[868,906],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[907,909],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[150495,151437],"yaml":true,"extradata":"MT"},{"content":"The location of the queue to be deleted.","nodes":[{"pos":[0,40],"content":"The location of the queue to be deleted.","nodes":[{"content":"The location of the queue to be deleted.","pos":[0,40]}]}],"pos":[152100,152141],"yaml":true},{"content":"The <code>path</code> parameter is `null` or is an empty string (\"\").","nodes":[{"pos":[0,69],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> or is an empty string (\"\").","source":"The <code>path</code> parameter is `null` or is an empty string (\"\")."}],"pos":[152299,152369],"yaml":true},{"content":"The syntax for the <code>path</code> parameter is not valid.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,60],"content":"The syntax for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The syntax for the <code>path</code> parameter is not valid."},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,136],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[152491,152634],"yaml":true},{"content":"Gets or sets a value that indicates whether this <xref href=\"System.Messaging.MessageQueue\"></xref> has exclusive access to receive messages from the Message Queuing queue.","nodes":[{"pos":[0,172],"content":"Gets or sets a value that indicates whether this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> has exclusive access to receive messages from the Message Queuing queue.","source":"Gets or sets a value that indicates whether this <xref href=\"System.Messaging.MessageQueue\"></xref> has exclusive access to receive messages from the Message Queuing queue."}],"pos":[153571,153744],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.DenySharedReceive%2A> specifies the shared mode of the queue referenced by this <xref:System.Messaging.MessageQueue>. Set <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> to `true` to indicate that only this <xref:System.Messaging.MessageQueue> should have access to peek or receive messages from the queue with the specified <xref:System.Messaging.MessageQueue.Path%2A>. If another <xref:System.Messaging.MessageQueue> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them.  \n  \n If <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> is `false`, the queue is available to multiple applications for sending, peeking, or receiving messages.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,634],"content":"<xref:System.Messaging.MessageQueue.DenySharedReceive%2A> specifies the shared mode of the queue referenced by this <xref:System.Messaging.MessageQueue>. Set <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> to `true` to indicate that only this <xref:System.Messaging.MessageQueue> should have access to peek or receive messages from the queue with the specified <xref:System.Messaging.MessageQueue.Path%2A>. If another <xref:System.Messaging.MessageQueue> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A&gt;</ph> specifies the shared mode of the queue referenced by this <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,153],"source":"<xref:System.Messaging.MessageQueue.DenySharedReceive%2A> specifies the shared mode of the queue referenced by this <xref:System.Messaging.MessageQueue>."},{"content":"Set <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> to indicate that only this <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> should have access to peek or receive messages from the queue with the specified <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph>.","pos":[154,416],"source":" Set <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> to `true` to indicate that only this <xref:System.Messaging.MessageQueue> should have access to peek or receive messages from the queue with the specified <xref:System.Messaging.MessageQueue.Path%2A>."},{"content":"If another <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them.","pos":[417,634],"source":" If another <xref:System.Messaging.MessageQueue> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them."}]},{"pos":[641,806],"content":"If <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the queue is available to multiple applications for sending, peeking, or receiving messages.","source":"If <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> is `false`, the queue is available to multiple applications for sending, peeking, or receiving messages."},{"pos":[813,901],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[908,922],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[923,932],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[978,992],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[993,996],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1001,1038],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1039,1042],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1047,1062],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1063,1066],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1071,1109],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1110,1113],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[153755,154883],"yaml":true,"extradata":"MT"},{"content":"`true` if this <xref href=\"System.Messaging.MessageQueue\"></xref> has exclusive rights to receive messages from the queue; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,166],"content":"`true` if this <xref href=\"System.Messaging.MessageQueue\"></xref> has exclusive rights to receive messages from the queue; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> has exclusive rights to receive messages from the queue; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,142],"source":"`true` if this <xref href=\"System.Messaging.MessageQueue\"></xref> has exclusive rights to receive messages from the queue; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[143,166],"source":" The default is `false`."}]}],"pos":[155410,155579],"yaml":true},{"content":"Disposes of the resources (other than memory) used by the <xref href=\"System.Messaging.MessageQueue\"></xref>.","nodes":[{"pos":[0,109],"content":"Disposes of the resources (other than memory) used by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","source":"Disposes of the resources (other than memory) used by the <xref href=\"System.Messaging.MessageQueue\"></xref>."}],"pos":[156729,156839],"yaml":true},{"content":"Call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> when you are finished using the <xref:System.Messaging.MessageQueue>. The <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> method leaves the <xref:System.Messaging.MessageQueue> in an unusable state. After calling <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>, you must release all references to the <xref:System.Messaging.MessageQueue> so the memory it was occupying can be reclaimed by garbage collection.  \n  \n You should call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> before you release your last reference to the <xref:System.Messaging.MessageQueue>. Otherwise, the resources the <xref:System.Messaging.MessageQueue> is using will not be freed until garbage collection calls the <xref:System.Messaging.MessageQueue> object's destructor.","nodes":[{"pos":[0,512],"content":"Call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> when you are finished using the <xref:System.Messaging.MessageQueue>. The <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> method leaves the <xref:System.Messaging.MessageQueue> in an unusable state. After calling <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>, you must release all references to the <xref:System.Messaging.MessageQueue> so the memory it was occupying can be reclaimed by garbage collection.","nodes":[{"content":"Call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> when you are finished using the <xref:System.Messaging.MessageQueue>. The <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> method leaves the <xref:System.Messaging.MessageQueue> in an unusable state. After calling <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>, you must release all references to the <xref:System.Messaging.MessageQueue> so the memory it was occupying can be reclaimed by garbage collection.","pos":[0,512],"nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29&gt;</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,139],"source":"Call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> when you are finished using the <xref:System.Messaging.MessageQueue>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29&gt;</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> in an unusable state.","pos":[140,285],"source":" The <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> method leaves the <xref:System.Messaging.MessageQueue> in an unusable state."},{"content":"After calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29&gt;</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> so the memory it was occupying can be reclaimed by garbage collection.","pos":[286,512],"source":" After calling <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>, you must release all references to the <xref:System.Messaging.MessageQueue> so the memory it was occupying can be reclaimed by garbage collection."}]}]},{"pos":[519,869],"content":"You should call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> before you release your last reference to the <xref:System.Messaging.MessageQueue>. Otherwise, the resources the <xref:System.Messaging.MessageQueue> is using will not be freed until garbage collection calls the <xref:System.Messaging.MessageQueue> object's destructor.","nodes":[{"content":"You should call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> before you release your last reference to the <xref:System.Messaging.MessageQueue>. Otherwise, the resources the <xref:System.Messaging.MessageQueue> is using will not be freed until garbage collection calls the <xref:System.Messaging.MessageQueue> object's destructor.","pos":[0,350],"nodes":[{"content":"You should call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29&gt;</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,164],"source":"You should call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> before you release your last reference to the <xref:System.Messaging.MessageQueue>."},{"content":"Otherwise, the resources the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> is using will not be freed until garbage collection calls the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> object's destructor.","pos":[165,350],"source":" Otherwise, the resources the <xref:System.Messaging.MessageQueue> is using will not be freed until garbage collection calls the <xref:System.Messaging.MessageQueue> object's destructor."}]}]}],"pos":[156850,157724],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[157879,157982],"yaml":true},{"content":"Gets or sets a value that indicates whether a cache of connections will be maintained by the application.","nodes":[{"pos":[0,105],"content":"Gets or sets a value that indicates whether a cache of connections will be maintained by the application.","nodes":[{"content":"Gets or sets a value that indicates whether a cache of connections will be maintained by the application.","pos":[0,105]}]}],"pos":[159011,159117],"yaml":true},{"content":"A connection cache is a list of references to structures that contain read or write handles to queues. When <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> is `true`, the <xref:System.Messaging.MessageQueue> borrows handles from the cache each time you call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, rather than open new handles. This can improve performance. Using a connection cache also insulates the <xref:System.Messaging.MessageQueue> from changes in the network topology.  \n  \n If you create a new connection to a queue when the connection cache is full, the <xref:System.Messaging.MessageQueue> overwrites the least recently accessed structure with the new connection. You can clear the cache entirely by calling <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,610],"content":"A connection cache is a list of references to structures that contain read or write handles to queues. When <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> is `true`, the <xref:System.Messaging.MessageQueue> borrows handles from the cache each time you call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, rather than open new handles. This can improve performance. Using a connection cache also insulates the <xref:System.Messaging.MessageQueue> from changes in the network topology.","nodes":[{"content":"A connection cache is a list of references to structures that contain read or write handles to queues.","pos":[0,102]},{"content":"When <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EnableConnectionCache%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> borrows handles from the cache each time you call <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, rather than open new handles.","pos":[103,461],"source":" When <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> is `true`, the <xref:System.Messaging.MessageQueue> borrows handles from the cache each time you call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, rather than open new handles."},{"content":"This can improve performance.","pos":[462,491]},{"content":"Using a connection cache also insulates the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> from changes in the network topology.","pos":[492,610],"source":" Using a connection cache also insulates the <xref:System.Messaging.MessageQueue> from changes in the network topology."}]},{"pos":[617,1060],"content":"If you create a new connection to a queue when the connection cache is full, the <xref:System.Messaging.MessageQueue> overwrites the least recently accessed structure with the new connection. You can clear the cache entirely by calling <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.","nodes":[{"content":"If you create a new connection to a queue when the connection cache is full, the <xref:System.Messaging.MessageQueue> overwrites the least recently accessed structure with the new connection. You can clear the cache entirely by calling <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.","pos":[0,443],"nodes":[{"content":"If you create a new connection to a queue when the connection cache is full, the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> overwrites the least recently accessed structure with the new connection.","pos":[0,191],"source":"If you create a new connection to a queue when the connection cache is full, the <xref:System.Messaging.MessageQueue> overwrites the least recently accessed structure with the new connection."},{"content":"You can clear the cache entirely by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ClearConnectionCache%2A&gt;</ph>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.","pos":[192,443],"source":" You can clear the cache entirely by calling <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid."}]}]},{"pos":[1067,1155],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1162,1176],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1177,1186],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1232,1246],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1247,1250],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1255,1292],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1293,1296],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1301,1316],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1317,1320],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1325,1363],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1364,1367],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[159128,160510],"yaml":true,"extradata":"MT"},{"content":"`true` to create and use a connection cache; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to create and use a connection cache; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to create and use a connection cache; otherwise, `false`."}],"pos":[160981,161048],"yaml":true},{"content":"Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages.","nodes":[{"pos":[0,104],"content":"Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages.","nodes":[{"content":"Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages.","pos":[0,104]}]}],"pos":[162138,162243],"yaml":true},{"content":"When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted. The other members (for example, the <xref:System.Messaging.Message.Label%2A> and <xref:System.Messaging.Message.SenderId%2A> properties) cannot be encrypted.  \n  \n Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \n  \n Encrypting a message makes the message private. You can specify the queue's encryption requirement to be `None`, `Body`, or `Optional` by setting the <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> property appropriately. The <xref:System.Messaging.Message.UseEncryption%2A> setting of the message must correspond to the encryption requirement of the queue. If the message is not encrypted but the queue specifies `Body`, or if the message is encrypted but the queue specifies `None`, the message is rejected by the queue. If the sending application requests a negative acknowledgment message in this event, Message Queuing indicates the message's rejection to the sending application. If the <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, a message that fails encryption is sent to the dead-letter queue. Otherwise, the message is lost.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,275],"content":"When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted. The other members (for example, the <xref:System.Messaging.Message.Label%2A> and <xref:System.Messaging.Message.SenderId%2A> properties) cannot be encrypted.","nodes":[{"content":"When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted. The other members (for example, the <xref:System.Messaging.Message.Label%2A> and <xref:System.Messaging.Message.SenderId%2A> properties) cannot be encrypted.","pos":[0,275],"nodes":[{"content":"When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted.","pos":[0,117]},{"content":"The other members (for example, the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Label%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.Message.SenderId%2A&gt;</ph> properties) cannot be encrypted.","pos":[118,275],"source":" The other members (for example, the <xref:System.Messaging.Message.Label%2A> and <xref:System.Messaging.Message.SenderId%2A> properties) cannot be encrypted."}]}]},{"pos":[282,435],"content":"Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","nodes":[{"content":"Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","pos":[0,153],"nodes":[{"content":"Setting this property modifies the Message Queuing queue.","pos":[0,57]},{"content":"Therefore, any other <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instances are affected by the change.","pos":[58,153],"source":" Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change."}]}]},{"pos":[442,1317],"content":"Encrypting a message makes the message private. You can specify the queue's encryption requirement to be `None`, `Body`, or `Optional` by setting the <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> property appropriately. The <xref:System.Messaging.Message.UseEncryption%2A> setting of the message must correspond to the encryption requirement of the queue. If the message is not encrypted but the queue specifies `Body`, or if the message is encrypted but the queue specifies `None`, the message is rejected by the queue. If the sending application requests a negative acknowledgment message in this event, Message Queuing indicates the message's rejection to the sending application. If the <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, a message that fails encryption is sent to the dead-letter queue. Otherwise, the message is lost.","nodes":[{"content":"Encrypting a message makes the message private.","pos":[0,47]},{"content":"You can specify the queue's encryption requirement to be <ph id=\"ph1\">`None`</ph>, <ph id=\"ph2\">`Body`</ph>, or <ph id=\"ph3\">`Optional`</ph> by setting the <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.EncryptionRequired%2A&gt;</ph> property appropriately.","pos":[48,232],"source":" You can specify the queue's encryption requirement to be `None`, `Body`, or `Optional` by setting the <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> property appropriately."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.UseEncryption%2A&gt;</ph> setting of the message must correspond to the encryption requirement of the queue.","pos":[233,368],"source":" The <xref:System.Messaging.Message.UseEncryption%2A> setting of the message must correspond to the encryption requirement of the queue."},{"content":"If the message is not encrypted but the queue specifies <ph id=\"ph1\">`Body`</ph>, or if the message is encrypted but the queue specifies <ph id=\"ph2\">`None`</ph>, the message is rejected by the queue.","pos":[369,533],"source":" If the message is not encrypted but the queue specifies `Body`, or if the message is encrypted but the queue specifies `None`, the message is rejected by the queue."},{"content":"If the sending application requests a negative acknowledgment message in this event, Message Queuing indicates the message's rejection to the sending application.","pos":[534,696]},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.UseDeadLetterQueue%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, a message that fails encryption is sent to the dead-letter queue.","pos":[697,843],"source":" If the <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, a message that fails encryption is sent to the dead-letter queue."},{"content":"Otherwise, the message is lost.","pos":[844,875]}]},{"pos":[1324,1412],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1419,1433],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1434,1443],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1489,1503],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1504,1507],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1512,1549],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1550,1553],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1558,1573],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1574,1576],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1581,1619],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1620,1622],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[162254,163893],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.EncryptionRequired\"></xref> values. The default is `None`.","nodes":[{"pos":[0,98],"content":"One of the <xref href=\"System.Messaging.EncryptionRequired\"></xref> values. The default is `None`.","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.EncryptionRequired\"&gt;&lt;/xref&gt;</ph> values.","pos":[0,75],"source":"One of the <xref href=\"System.Messaging.EncryptionRequired\"></xref> values."},{"content":"The default is <ph id=\"ph1\">`None`</ph>.","pos":[76,98],"source":" The default is `None`."}]}],"pos":[164427,164526],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[164724,164783],"yaml":true},{"content":"Completes the specified asynchronous peek operation.","nodes":[{"pos":[0,52],"content":"Completes the specified asynchronous peek operation.","nodes":[{"content":"Completes the specified asynchronous peek operation.","pos":[0,52]}]}],"pos":[165834,165887],"yaml":true},{"content":"When the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginPeek%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> peeks the message.  \n  \n <xref:System.Messaging.MessageQueue.BeginPeek%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> throws an exception.  \n  \n <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to read the message that caused the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised.  \n  \n If you want to continue to asynchronously peek messages, you can again call <xref:System.Messaging.MessageQueue.BeginPeek%2A> after calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,351],"content":"When the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginPeek%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> peeks the message.","nodes":[{"content":"When the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginPeek%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> peeks the message.","pos":[0,351],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event is raised, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> completes the operation that was initiated by the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> call.","pos":[0,252],"source":"When the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginPeek%2A> call."},{"content":"To do so, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> peeks the message.","pos":[253,351],"source":" To do so, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> peeks the message."}]}]},{"pos":[358,756],"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> throws an exception.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> throws an exception.","pos":[0,398],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> can specify a time-out, which causes the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event to be raised if the time-out occurs before a message appears in the queue.","pos":[0,222],"source":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised if the time-out occurs before a message appears in the queue."},{"content":"When a time-out occurs without a message arriving in the queue, a subsequent call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> throws an exception.","pos":[223,398],"source":" When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> throws an exception."}]}]},{"pos":[763,947],"content":"<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to read the message that caused the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> is used to read the message that caused the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event to be raised.","pos":[0,184],"source":"<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to read the message that caused the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised."}]},{"pos":[954,1164],"content":"If you want to continue to asynchronously peek messages, you can again call <xref:System.Messaging.MessageQueue.BeginPeek%2A> after calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.","nodes":[{"content":"If you want to continue to asynchronously peek messages, you can again call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph>.","pos":[0,210],"source":"If you want to continue to asynchronously peek messages, you can again call <xref:System.Messaging.MessageQueue.BeginPeek%2A> after calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>."}]},{"pos":[1171,1257],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1264,1278],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1279,1288],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1334,1348],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1349,1352],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1357,1394],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1395,1398],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1403,1418],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1419,1421],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1426,1464],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1465,1468],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[165898,167385],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the asynchronous peek operation to finish and from which to retrieve an end result.","nodes":[{"pos":[0,144],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the asynchronous peek operation to finish and from which to retrieve an end result.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the asynchronous peek operation to finish and from which to retrieve an end result."}],"pos":[168656,168801],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> associated with the completed asynchronous operation.","nodes":[{"pos":[0,103],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> associated with the completed asynchronous operation.","source":"The <xref href=\"System.Messaging.Message\"></xref> associated with the completed asynchronous operation."}],"pos":[168869,168973],"yaml":true},{"content":"The <code>asyncResult</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>asyncResult</code> parameter is `null`."}],"pos":[169140,169190],"yaml":true},{"content":"The syntax of the <code>asyncResult</code> parameter is not valid.","nodes":[{"pos":[0,66],"content":"The syntax of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The syntax of the <code>asyncResult</code> parameter is not valid."}],"pos":[169284,169351],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[169473,169532],"yaml":true},{"content":"Completes the specified asynchronous receive operation.","nodes":[{"pos":[0,55],"content":"Completes the specified asynchronous receive operation.","nodes":[{"content":"Completes the specified asynchronous receive operation.","pos":[0,55]}]}],"pos":[170530,170586],"yaml":true},{"content":"When the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginReceive%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> receives the message.  \n  \n <xref:System.Messaging.MessageQueue.BeginReceive%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> throws an exception.  \n  \n <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to read (removing from the queue) the message that caused the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised.  \n  \n If you want to continue to asynchronously receive messages, you can again call <xref:System.Messaging.MessageQueue.BeginReceive%2A> after calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,366],"content":"When the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginReceive%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> receives the message.","nodes":[{"content":"When the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginReceive%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> receives the message.","pos":[0,366],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event is raised, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> completes the operation that was initiated by the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> call.","pos":[0,261],"source":"When the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginReceive%2A> call."},{"content":"To do so, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> receives the message.","pos":[262,366],"source":" To do so, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> receives the message."}]}]},{"pos":[373,780],"content":"<xref:System.Messaging.MessageQueue.BeginReceive%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> throws an exception.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.BeginReceive%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> throws an exception.","pos":[0,407],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> can specify a time-out, which causes the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event to be raised if the time-out occurs before a message appears in the queue.","pos":[0,228],"source":"<xref:System.Messaging.MessageQueue.BeginReceive%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised if the time-out occurs before a message appears in the queue."},{"content":"When a time-out occurs without a message arriving in the queue, a subsequent call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> throws an exception.","pos":[229,407],"source":" When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> throws an exception."}]}]},{"pos":[787,1003],"content":"<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to read (removing from the queue) the message that caused the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> is used to read (removing from the queue) the message that caused the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event to be raised.","pos":[0,216],"source":"<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to read (removing from the queue) the message that caused the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised."}]},{"pos":[1010,1229],"content":"If you want to continue to asynchronously receive messages, you can again call <xref:System.Messaging.MessageQueue.BeginReceive%2A> after calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.","nodes":[{"content":"If you want to continue to asynchronously receive messages, you can again call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph>.","pos":[0,219],"source":"If you want to continue to asynchronously receive messages, you can again call <xref:System.Messaging.MessageQueue.BeginReceive%2A> after calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>."}]},{"pos":[1236,1322],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1329,1343],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1344,1353],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1399,1413],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1414,1417],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1422,1459],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1460,1463],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1468,1483],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1484,1486],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1491,1529],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1530,1533],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[170597,172149],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the asynchronous receive operation to finish and from which to retrieve an end result.","nodes":[{"pos":[0,147],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that identifies the asynchronous receive operation to finish and from which to retrieve an end result.","source":"The <xref href=\"System.IAsyncResult\"></xref> that identifies the asynchronous receive operation to finish and from which to retrieve an end result."}],"pos":[173253,173401],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> associated with the completed asynchronous operation.","nodes":[{"pos":[0,103],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> associated with the completed asynchronous operation.","source":"The <xref href=\"System.Messaging.Message\"></xref> associated with the completed asynchronous operation."}],"pos":[173469,173573],"yaml":true},{"content":"The <code>asyncResult</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>asyncResult</code> parameter is `null`."}],"pos":[173743,173793],"yaml":true},{"content":"The syntax of the <code>asyncResult</code> parameter is not valid.","nodes":[{"pos":[0,66],"content":"The syntax of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">asyncResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","source":"The syntax of the <code>asyncResult</code> parameter is not valid."}],"pos":[173887,173954],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[174076,174135],"yaml":true},{"content":"Determines whether a Message Queuing queue exists at the specified path.","nodes":[{"pos":[0,72],"content":"Determines whether a Message Queuing queue exists at the specified path.","nodes":[{"content":"Determines whether a Message Queuing queue exists at the specified path.","pos":[0,72]}]}],"pos":[175073,175146],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method determines whether a Message Queuing queue exists at a specified path. No method exists to determine whether a queue with a specified format name exists. For more information about the format name syntax and other path syntax forms, see the <xref:System.Messaging.MessageQueue.Path%2A> property.)  \n  \n <xref:System.Messaging.MessageQueue.Exists%28System.String%29> is an expensive operation. Use it only when it is necessary within the application.  \n  \n> [!NOTE]\n>  The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method does not support the <xref:System.Messaging.MessageQueue.FormatName%2A> prefix.  \n  \n The syntax for the `path` parameter depends on the type of queue, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n  \n <xref:System.Messaging.MessageQueue.Exists%28System.String%29> cannot be called to verify the existence of a remote private queue.  \n  \n For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.  \n  \n|Reference|Syntax|  \n|---------------|------------|  \n|Label|Label:[ `label` ]|  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,370],"content":"The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method determines whether a Message Queuing queue exists at a specified path. No method exists to determine whether a queue with a specified format name exists. For more information about the format name syntax and other path syntax forms, see the <xref:System.Messaging.MessageQueue.Path%2A> property.)","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method determines whether a Message Queuing queue exists at a specified path. No method exists to determine whether a queue with a specified format name exists. For more information about the format name syntax and other path syntax forms, see the <xref:System.Messaging.MessageQueue.Path%2A> property.)","pos":[0,370],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Exists%28System.String%29&gt;</ph> method determines whether a Message Queuing queue exists at a specified path.","pos":[0,144],"source":"The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method determines whether a Message Queuing queue exists at a specified path."},{"content":"No method exists to determine whether a queue with a specified format name exists.","pos":[145,227]},{"content":"For more information about the format name syntax and other path syntax forms, see the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property.)","pos":[228,370],"source":" For more information about the format name syntax and other path syntax forms, see the <xref:System.Messaging.MessageQueue.Path%2A> property.)"}]}]},{"pos":[377,523],"content":"<xref:System.Messaging.MessageQueue.Exists%28System.String%29> is an expensive operation. Use it only when it is necessary within the application.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.Exists%28System.String%29> is an expensive operation. Use it only when it is necessary within the application.","pos":[0,146],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Exists%28System.String%29&gt;</ph> is an expensive operation.","pos":[0,89],"source":"<xref:System.Messaging.MessageQueue.Exists%28System.String%29> is an expensive operation."},{"content":"Use it only when it is necessary within the application.","pos":[90,146]}]}]},{"pos":[531,695],"content":"[!NOTE]\n The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method does not support the <xref:System.Messaging.MessageQueue.FormatName%2A> prefix.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Exists%28System.String%29&gt;</ph> method does not support the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> prefix.","pos":[9,162],"source":" The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method does not support the <xref:System.Messaging.MessageQueue.FormatName%2A> prefix."}]},{"pos":[702,800],"content":"The syntax for the <ph id=\"ph1\">`path`</ph> parameter depends on the type of queue, as shown in the following table.","source":"The syntax for the `path` parameter depends on the type of queue, as shown in the following table."},{"pos":[807,817],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[818,824],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[863,875],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[910,1040],"content":"<xref:System.Messaging.MessageQueue.Exists%28System.String%29> cannot be called to verify the existence of a remote private queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Exists%28System.String%29&gt;</ph> cannot be called to verify the existence of a remote private queue.","pos":[0,130],"source":"<xref:System.Messaging.MessageQueue.Exists%28System.String%29> cannot be called to verify the existence of a remote private queue."}]},{"pos":[1047,1126],"content":"For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.","nodes":[{"content":"For more syntax, see the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property.","pos":[0,79],"source":"For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property."}]},{"pos":[1133,1237],"content":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.","nodes":[{"content":"Alternatively, you can use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> to describe the queue path.","pos":[0,104],"source":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path."}]},{"pos":[1244,1253],"content":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"pos":[1254,1260],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1298,1303],"content":"Label","nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[1304,1321],"content":"Label:[ <ph id=\"ph1\">`label`</ph> ]","source":"Label:[ `label` ]"},{"pos":[1329,1415],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1422,1436],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1437,1446],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1492,1506],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1507,1510],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1515,1552],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1553,1555],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1560,1575],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1576,1578],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1583,1621],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1622,1624],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[175157,176817],"yaml":true,"extradata":"MT"},{"content":"The location of the queue to find.","nodes":[{"pos":[0,34],"content":"The location of the queue to find.","nodes":[{"content":"The location of the queue to find.","pos":[0,34]}]}],"pos":[177503,177538],"yaml":true},{"content":"`true` if a queue with the specified path exists; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if a queue with the specified path exists; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if a queue with the specified path exists; otherwise, `false`."}],"pos":[177596,177668],"yaml":true},{"content":"The <code>path</code> syntax is not valid.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> syntax is not valid.","source":"The <code>path</code> syntax is not valid."}],"pos":[177826,177869],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.  \n  \n -or-  \n  \n The <xref href=\"System.Messaging.MessageQueue.Exists(System.String)\"></xref> method is being called on a remote private queue","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,201],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Exists(System.String)\"&gt;&lt;/xref&gt;</ph> method is being called on a remote private queue","source":"The <xref href=\"System.Messaging.MessageQueue.Exists(System.String)\"></xref> method is being called on a remote private queue"}],"pos":[177991,178201],"yaml":true},{"content":"The application used format name syntax when verifying queue existence.","nodes":[{"pos":[0,71],"content":"The application used format name syntax when verifying queue existence.","nodes":[{"content":"The application used format name syntax when verifying queue existence.","pos":[0,71]}]}],"pos":[178311,178383],"yaml":true},{"content":"Gets the unique queue name that Message Queuing generated at the time of the queue's creation.","nodes":[{"pos":[0,94],"content":"Gets the unique queue name that Message Queuing generated at the time of the queue's creation.","nodes":[{"content":"Gets the unique queue name that Message Queuing generated at the time of the queue's creation.","pos":[0,94]}]}],"pos":[179278,179373],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.FormatName%2A> property contains the format name of the queue. Message Queuing uses the format name to identify which queue to open and how to access it. Unlike most of a queue's characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool. The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.  \n  \n If you specify a path using the path name syntax (such as `myComputer\\myQueue`) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <xref:System.Messaging.MessageQueue.Path%2A> into the associated <xref:System.Messaging.MessageQueue.FormatName%2A> before accessing the queue. If your application is working offline, you must use the format name syntax; otherwise, the primary domain controller will not be available to perform the path translation.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,528],"content":"The <xref:System.Messaging.MessageQueue.FormatName%2A> property contains the format name of the queue. Message Queuing uses the format name to identify which queue to open and how to access it. Unlike most of a queue's characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool. The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.FormatName%2A> property contains the format name of the queue. Message Queuing uses the format name to identify which queue to open and how to access it. Unlike most of a queue's characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool. The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.","pos":[0,528],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> property contains the format name of the queue.","pos":[0,102],"source":"The <xref:System.Messaging.MessageQueue.FormatName%2A> property contains the format name of the queue."},{"content":"Message Queuing uses the format name to identify which queue to open and how to access it.","pos":[103,193]},{"content":"Unlike most of a queue's characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool.","pos":[194,373]},{"content":"The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.","pos":[374,528]}]}]},{"pos":[535,1084],"content":"If you specify a path using the path name syntax (such as `myComputer\\myQueue`) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <xref:System.Messaging.MessageQueue.Path%2A> into the associated <xref:System.Messaging.MessageQueue.FormatName%2A> before accessing the queue. If your application is working offline, you must use the format name syntax; otherwise, the primary domain controller will not be available to perform the path translation.","nodes":[{"content":"If you specify a path using the path name syntax (such as <ph id=\"ph1\">`myComputer\\myQueue`</ph>) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> into the associated <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> before accessing the queue.","pos":[0,376],"source":"If you specify a path using the path name syntax (such as `myComputer\\myQueue`) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <xref:System.Messaging.MessageQueue.Path%2A> into the associated <xref:System.Messaging.MessageQueue.FormatName%2A> before accessing the queue."},{"content":"If your application is working offline, you must use the format name syntax; otherwise, the primary domain controller will not be available to perform the path translation.","pos":[377,549]}]},{"pos":[1091,1179],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1186,1200],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1201,1210],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1256,1270],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1271,1274],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1279,1316],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1317,1320],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1325,1340],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1341,1344],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1349,1387],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1388,1391],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[179384,180791],"yaml":true,"extradata":"MT"},{"content":"The name for the queue, which is unique on the network.","nodes":[{"pos":[0,55],"content":"The name for the queue, which is unique on the network.","nodes":[{"content":"The name for the queue, which is unique on the network.","pos":[0,55]}]}],"pos":[181240,181296],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> is not set.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> is not set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> is not set."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,147],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[181486,181642],"yaml":true},{"content":"Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue.","nodes":[{"pos":[0,146],"content":"Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue.","nodes":[{"content":"Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue.","pos":[0,146]}]}],"pos":[182602,182749],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.Formatter%2A> property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue.  \n  \n When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.  \n  \n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \n  \n <xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.  \n  \n When your application sends messages to the queue, the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> applies only to those messages that use the default message properties, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>. If you send a <xref:System.Messaging.Message> to the queue, Message Queuing uses the formatter defined in the <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property to serialize the body instead.  \n  \n The <xref:System.Messaging.MessageQueue> class will always use a <xref:System.Messaging.Message> to receive or peek a message from the queue. The message is deserialized using the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,184],"content":"The <xref:System.Messaging.MessageQueue.Formatter%2A> property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue.","pos":[0,184],"source":"The <xref:System.Messaging.MessageQueue.Formatter%2A> property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue."}]},{"pos":[191,494],"content":"When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.","nodes":[{"content":"When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.","pos":[0,303],"nodes":[{"content":"When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body.","pos":[0,136]},{"content":"When reading from a queue, the formatter deserializes the message data into the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Body%2A&gt;</ph> property of a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[137,303],"source":" When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>."}]}]},{"pos":[501,923],"content":"The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.","nodes":[{"content":"The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.","pos":[0,422],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.","pos":[0,170],"source":"The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.ActiveXMessageFormatter&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.BinaryMessageFormatter&gt;</ph> serialize the data into binary representation.","pos":[171,320],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.ActiveXMessageFormatter&gt;</ph> is used when sending or receiving COM components.","pos":[321,422],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components."}]}]},{"pos":[930,1236],"content":"<xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.","nodes":[{"content":"<xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.","pos":[0,306],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.BinaryMessageFormatter&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.ActiveXMessageFormatter&gt;</ph> provide faster throughput than the <ph id=\"ph3\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[0,178],"source":"<xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.ActiveXMessageFormatter&gt;</ph> allows interoperability with Visual Basic 6.0 Message Queuing applications.","pos":[179,306],"source":" The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications."}]}]},{"pos":[1243,1729],"content":"When your application sends messages to the queue, the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> applies only to those messages that use the default message properties, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>. If you send a <xref:System.Messaging.Message> to the queue, Message Queuing uses the formatter defined in the <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property to serialize the body instead.","nodes":[{"content":"When your application sends messages to the queue, the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> applies only to those messages that use the default message properties, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>. If you send a <xref:System.Messaging.Message> to the queue, Message Queuing uses the formatter defined in the <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property to serialize the body instead.","pos":[0,486],"nodes":[{"content":"When your application sends messages to the queue, the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> applies only to those messages that use the default message properties, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph>.","pos":[0,266],"source":"When your application sends messages to the queue, the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> applies only to those messages that use the default message properties, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>."},{"content":"If you send a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> to the queue, Message Queuing uses the formatter defined in the <ph id=\"ph2\">&lt;xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName&gt;</ph> property to serialize the body instead.","pos":[267,486],"source":" If you send a <xref:System.Messaging.Message> to the queue, Message Queuing uses the formatter defined in the <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property to serialize the body instead."}]}]},{"pos":[1736,2000],"content":"The <xref:System.Messaging.MessageQueue> class will always use a <xref:System.Messaging.Message> to receive or peek a message from the queue. The message is deserialized using the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue> class will always use a <xref:System.Messaging.Message> to receive or peek a message from the queue. The message is deserialized using the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","pos":[0,264],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class will always use a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> to receive or peek a message from the queue.","pos":[0,141],"source":"The <xref:System.Messaging.MessageQueue> class will always use a <xref:System.Messaging.Message> to receive or peek a message from the queue."},{"content":"The message is deserialized using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> property.","pos":[142,264],"source":" The message is deserialized using the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property."}]}]},{"pos":[2007,2095],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[2102,2116],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2117,2126],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2172,2186],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2187,2190],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2195,2232],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2233,2236],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2241,2256],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2257,2259],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2264,2302],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2303,2306],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[182760,185089],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.IMessageFormatter\"></xref> that produces a stream to be written to or read from the message body. The default is <xref href=\"System.Messaging.XmlMessageFormatter\"></xref>.","nodes":[{"pos":[0,204],"content":"The <xref href=\"System.Messaging.IMessageFormatter\"></xref> that produces a stream to be written to or read from the message body. The default is <xref href=\"System.Messaging.XmlMessageFormatter\"></xref>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.IMessageFormatter\"&gt;&lt;/xref&gt;</ph> that produces a stream to be written to or read from the message body.","pos":[0,130],"source":"The <xref href=\"System.Messaging.IMessageFormatter\"></xref> that produces a stream to be written to or read from the message body."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Messaging.XmlMessageFormatter\"&gt;&lt;/xref&gt;</ph>.","pos":[131,204],"source":" The default is <xref href=\"System.Messaging.XmlMessageFormatter\"></xref>."}]}],"pos":[186564,186769],"yaml":true},{"content":"Returns all the messages that are in the queue.","nodes":[{"pos":[0,47],"content":"Returns all the messages that are in the queue.","nodes":[{"content":"Returns all the messages that are in the queue.","pos":[0,47]}]}],"pos":[187939,187987],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a static snapshot of the messages in the queue, not dynamic links to those messages. Therefore, you cannot use the array to modify the messages in the queue. If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> method, which returns a dynamic list of the messages in the queue.  \n  \n Because <xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue.  \n  \n <xref:System.Messaging.MessageQueue.GetAllMessages%2A> retrieves only those properties not filtered out by the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,458],"content":"<xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a static snapshot of the messages in the queue, not dynamic links to those messages. Therefore, you cannot use the array to modify the messages in the queue. If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> method, which returns a dynamic list of the messages in the queue.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a static snapshot of the messages in the queue, not dynamic links to those messages. Therefore, you cannot use the array to modify the messages in the queue. If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> method, which returns a dynamic list of the messages in the queue.","pos":[0,458],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetAllMessages%2A&gt;</ph> returns a static snapshot of the messages in the queue, not dynamic links to those messages.","pos":[0,147],"source":"<xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a static snapshot of the messages in the queue, not dynamic links to those messages."},{"content":"Therefore, you cannot use the array to modify the messages in the queue.","pos":[148,220]},{"content":"If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph> method, which returns a dynamic list of the messages in the queue.","pos":[221,458],"source":" If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> method, which returns a dynamic list of the messages in the queue."}]}]},{"pos":[465,716],"content":"Because <xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue.","nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetAllMessages%2A&gt;</ph> returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue.","pos":[0,251],"source":"Because <xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue."}]},{"pos":[723,909],"content":"<xref:System.Messaging.MessageQueue.GetAllMessages%2A> retrieves only those properties not filtered out by the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetAllMessages%2A&gt;</ph> retrieves only those properties not filtered out by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A&gt;</ph> property.","pos":[0,186],"source":"<xref:System.Messaging.MessageQueue.GetAllMessages%2A> retrieves only those properties not filtered out by the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property."}]},{"pos":[916,1002],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1009,1023],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1024,1033],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1079,1093],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1094,1097],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1102,1139],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1140,1143],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1148,1163],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1164,1166],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1171,1209],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1210,1213],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[187998,189228],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Messaging.Message\"></xref> that represents all the messages in the queue, in the same order as they appear in the Message Queuing queue.","nodes":[{"pos":[0,172],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that represents all the messages in the queue, in the same order as they appear in the Message Queuing queue.","source":"An array of type <xref href=\"System.Messaging.Message\"></xref> that represents all the messages in the queue, in the same order as they appear in the Message Queuing queue."}],"pos":[189745,189918],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[190112,190171],"yaml":true},{"content":"Enumerates the messages in a queue. <xref href=\"System.Messaging.MessageQueue.GetEnumerator\"></xref> is deprecated. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead.","nodes":[{"pos":[0,212],"content":"Enumerates the messages in a queue. <xref href=\"System.Messaging.MessageQueue.GetEnumerator\"></xref> is deprecated. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead.","nodes":[{"content":"Enumerates the messages in a queue.","pos":[0,35]},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.GetEnumerator\"&gt;&lt;/xref&gt;</ph> is deprecated.","pos":[36,115],"source":"<xref href=\"System.Messaging.MessageQueue.GetEnumerator\"></xref> is deprecated."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"&gt;&lt;/xref&gt;</ph> should be used instead.","pos":[116,212],"source":"<xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead."}]}],"pos":[191088,191301],"yaml":true},{"content":"The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,86],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[93,107],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[108,117],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[163,177],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[178,181],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[186,223],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[224,227],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[232,247],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[248,250],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[255,293],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[294,297],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[191312,191620],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.IEnumerator\"></xref> that provides a dynamic connection to the messages in the queue.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that provides a dynamic connection to the messages in the queue.","source":"A <xref href=\"System.Collections.IEnumerator\"></xref> that provides a dynamic connection to the messages in the queue."}],"pos":[192177,192296],"yaml":true},{"content":"Gets the identifier of the computer on which the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> is located.","nodes":[{"pos":[0,136],"content":"Gets the identifier of the computer on which the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> is located.","source":"Gets the identifier of the computer on which the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> is located."}],"pos":[193393,193530],"yaml":true},{"content":"You can use a computer's identifier for two purposes, among others: to read the computer journal and to set security certificates. However, you cannot call <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29> for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.  \n  \n The computer identifier (or machine identifier) is a <xref:System.Guid> that Message Queuing creates when a computer is added to the enterprise. Message Queuing combines the computer identifier with the `Machine` and `Journal` keywords to create the machine journal's format name, which has the syntax `Machine=<computeridentifier>;Journal`. The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property is `true`.  \n  \n This syntax for the journal is only valid when constructing the format name for the queue. The path name syntax is `MachineName`\\\\`Journal$`.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,367],"content":"You can use a computer's identifier for two purposes, among others: to read the computer journal and to set security certificates. However, you cannot call <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29> for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.","nodes":[{"content":"You can use a computer's identifier for two purposes, among others: to read the computer journal and to set security certificates. However, you cannot call <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29> for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.","pos":[0,367],"nodes":[{"content":"You can use a computer's identifier for two purposes, among others: to read the computer journal and to set security certificates.","pos":[0,130]},{"content":"However, you cannot call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29&gt;</ph> for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.","pos":[131,367],"source":" However, you cannot call <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29> for a remote computer when you are working offline because the application must have access to the directory service on the domain controller."}]}]},{"pos":[374,934],"content":"The computer identifier (or machine identifier) is a <xref:System.Guid> that Message Queuing creates when a computer is added to the enterprise. Message Queuing combines the computer identifier with the `Machine` and `Journal` keywords to create the machine journal's format name, which has the syntax `Machine=<computeridentifier>;Journal`. The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property is `true`.","nodes":[{"content":"The computer identifier (or machine identifier) is a <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> that Message Queuing creates when a computer is added to the enterprise.","pos":[0,144],"source":"The computer identifier (or machine identifier) is a <xref:System.Guid> that Message Queuing creates when a computer is added to the enterprise."},{"content":"Message Queuing combines the computer identifier with the <ph id=\"ph1\">`Machine`</ph> and <ph id=\"ph2\">`Journal`</ph> keywords to create the machine journal's format name, which has the syntax <ph id=\"ph3\">`Machine=&lt;computeridentifier&gt;;Journal`</ph>.","pos":[145,341],"source":" Message Queuing combines the computer identifier with the `Machine` and `Journal` keywords to create the machine journal's format name, which has the syntax `Machine=<computeridentifier>;Journal`."},{"content":"The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.UseJournalQueue%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","pos":[342,560],"source":" The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property is `true`."}]},{"pos":[941,1082],"content":"This syntax for the journal is only valid when constructing the format name for the queue. The path name syntax is `MachineName`\\\\`Journal$`.","nodes":[{"content":"This syntax for the journal is only valid when constructing the format name for the queue.","pos":[0,90]},{"content":"The path name syntax is <ph id=\"ph1\">`MachineName`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`Journal$`</ph>.","pos":[91,141],"source":" The path name syntax is `MachineName`\\\\`Journal$`."}]},{"pos":[1089,1175],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1182,1196],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1197,1206],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1252,1266],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1267,1269],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1274,1311],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1312,1314],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1319,1334],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1335,1337],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1342,1380],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1381,1383],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[193541,194943],"yaml":true,"extradata":"MT"},{"content":"The name of the computer that contains the queue, without the two preceding backslashes (\\\\\\\\).","nodes":[{"pos":[0,95],"content":"The name of the computer that contains the queue, without the two preceding backslashes (\\\\\\\\).","nodes":[{"content":"The name of the computer that contains the queue, without the two preceding backslashes (<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>).","pos":[0,95],"source":"The name of the computer that contains the queue, without the two preceding backslashes (\\\\\\\\)."}]}],"pos":[195340,195436],"yaml":true},{"content":"A <xref href=\"System.Guid\"></xref> that represents a unique identifier for the computer on which the queue is located.","nodes":[{"pos":[0,118],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> that represents a unique identifier for the computer on which the queue is located.","source":"A <xref href=\"System.Guid\"></xref> that represents a unique identifier for the computer on which the queue is located."}],"pos":[195491,195610],"yaml":true},{"content":"The computer identifier could not be retrieved, possibly because the directory service is not available; for example, if you are working offline.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,145],"content":"The computer identifier could not be retrieved, possibly because the directory service is not available; for example, if you are working offline.","nodes":[{"content":"The computer identifier could not be retrieved, possibly because the directory service is not available; for example, if you are working offline.","pos":[0,145]}]},{"pos":[152,156],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[163,221],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[195802,196030],"yaml":true},{"content":"Creates an enumerator object for all the messages in the queue. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator\"></xref> is deprecated. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead.","nodes":[{"pos":[0,247],"content":"Creates an enumerator object for all the messages in the queue. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator\"></xref> is deprecated. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead.","nodes":[{"content":"Creates an enumerator object for all the messages in the queue.","pos":[0,63]},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator\"&gt;&lt;/xref&gt;</ph> is deprecated.","pos":[64,150],"source":"<xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator\"></xref> is deprecated."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"&gt;&lt;/xref&gt;</ph> should be used instead.","pos":[151,247],"source":"<xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead."}]}],"pos":[196989,197237],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> returns.  \n  \n Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.  \n  \n The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.  \n  \n If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,389],"content":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> returns.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> returns.","pos":[0,389],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> creates a dynamic list of all the messages in a queue.","pos":[0,115],"source":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> creates a dynamic list of all the messages in a queue."},{"content":"You can remove from the queue the message at the enumerator's current position by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> that <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> returns.","pos":[116,389],"source":" You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> returns."}]}]},{"pos":[396,1013],"content":"Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.","nodes":[{"content":"Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.","pos":[0,617],"nodes":[{"content":"Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position.","pos":[0,215]},{"content":"For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position.","pos":[216,403]},{"content":"However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.","pos":[404,617],"source":" However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>."}]}]},{"pos":[1020,1167],"content":"The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.","nodes":[{"content":"The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.","pos":[0,147]}]},{"pos":[1174,1472],"content":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.","nodes":[{"content":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.","pos":[0,298],"nodes":[{"content":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetAllMessages%2A&gt;</ph>.","pos":[0,161],"source":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>."},{"content":"This method returns an array of <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> objects, which represent the messages at the time the method was called.","pos":[162,298],"source":" This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called."}]}]},{"pos":[1479,1565],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1572,1586],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1587,1596],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1642,1656],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1657,1660],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1665,1702],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1703,1706],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1711,1726],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1727,1730],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1735,1773],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1774,1777],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[197248,199044],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.MessageEnumerator\"></xref> holding the messages that are contained in the queue.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageEnumerator\"&gt;&lt;/xref&gt;</ph> holding the messages that are contained in the queue.","source":"The <xref href=\"System.Messaging.MessageEnumerator\"></xref> holding the messages that are contained in the queue."}],"pos":[200015,200129],"yaml":true},{"content":"Creates an enumerator object for all the messages in the queue.","nodes":[{"pos":[0,63],"content":"Creates an enumerator object for all the messages in the queue.","nodes":[{"content":"Creates an enumerator object for all the messages in the queue.","pos":[0,63]}]}],"pos":[201224,201288],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> returns.  \n  \n Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.  \n  \n The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.  \n  \n If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,391],"content":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> returns.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> returns.","pos":[0,391],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph> creates a dynamic list of all the messages in a queue.","pos":[0,116],"source":"<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> creates a dynamic list of all the messages in a queue."},{"content":"You can remove from the queue the message at the enumerator's current position by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> that <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph> returns.","pos":[117,391],"source":" You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> returns."}]}]},{"pos":[398,1015],"content":"Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.","nodes":[{"content":"Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.","pos":[0,617],"nodes":[{"content":"Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position.","pos":[0,215]},{"content":"For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position.","pos":[216,403]},{"content":"However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.","pos":[404,617],"source":" However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>."}]}]},{"pos":[1022,1169],"content":"The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.","nodes":[{"content":"The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.","pos":[0,147]}]},{"pos":[1176,1474],"content":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.","nodes":[{"content":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.","pos":[0,298],"nodes":[{"content":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetAllMessages%2A&gt;</ph>.","pos":[0,161],"source":"If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>."},{"content":"This method returns an array of <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> objects, which represent the messages at the time the method was called.","pos":[162,298],"source":" This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called."}]}]},{"pos":[1481,1567],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1574,1588],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1589,1598],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1644,1658],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1659,1662],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1667,1704],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1705,1708],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1713,1728],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1729,1732],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1737,1775],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1776,1779],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[201299,203097],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.MessageEnumerator\"></xref> holding the messages that are contained in the queue.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageEnumerator\"&gt;&lt;/xref&gt;</ph> holding the messages that are contained in the queue.","source":"The <xref href=\"System.Messaging.MessageEnumerator\"></xref> holding the messages that are contained in the queue."}],"pos":[203285,203399],"yaml":true},{"content":"Provides forward-only cursor semantics to enumerate through all public queues on the network.","nodes":[{"pos":[0,93],"content":"Provides forward-only cursor semantics to enumerate through all public queues on the network.","nodes":[{"content":"Provides forward-only cursor semantics to enumerate through all public queues on the network.","pos":[0,93]}]}],"pos":[204470,204564],"yaml":true},{"content":"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns an enumeration of all the public queues that are on the network.  \n  \n Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor's current position. Additions or deletion of queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.  \n  \n There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.  \n  \n If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,155],"content":"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns an enumeration of all the public queues that are on the network.","nodes":[{"content":"This overload of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A&gt;</ph> returns an enumeration of all the public queues that are on the network.","pos":[0,155],"source":"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns an enumeration of all the public queues that are on the network."}]},{"pos":[162,811],"content":"Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor's current position. Additions or deletion of queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.","nodes":[{"content":"Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor's current position. Additions or deletion of queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.","pos":[0,649],"nodes":[{"content":"Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor's current position.","pos":[0,189]},{"content":"Additions or deletion of queues located before the cursor's current position are not reflected.","pos":[190,285]},{"content":"For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position.","pos":[286,425]},{"content":"However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueEnumerator.Reset%2A&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueEnumerator&gt;</ph>.","pos":[426,649],"source":" However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>."}]}]},{"pos":[818,998],"content":"There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.","nodes":[{"content":"There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.","pos":[0,180],"nodes":[{"content":"There is no defined ordering of queues in a network.","pos":[0,52]},{"content":"An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.","pos":[53,180]}]}]},{"pos":[1005,1406],"content":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called.","nodes":[{"content":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called.","pos":[0,401],"nodes":[{"content":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueues%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29&gt;</ph>.","pos":[0,247],"source":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>."},{"content":"Each of these two methods returns an array of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> objects, which represent the queues at the time the method was called.","pos":[248,401],"source":" Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called."}]}]},{"pos":[1413,1499],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1506,1520],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1521,1530],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1576,1590],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1591,1593],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1598,1635],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1636,1638],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1643,1658],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1659,1661],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1666,1704],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1705,1707],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[204575,206301],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> that provides a dynamic listing of all the public message queues on the network.","nodes":[{"pos":[0,143],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueEnumerator\"&gt;&lt;/xref&gt;</ph> that provides a dynamic listing of all the public message queues on the network.","source":"A <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> that provides a dynamic listing of all the public message queues on the network."}],"pos":[207310,207454],"yaml":true},{"content":"Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria.","nodes":[{"pos":[0,126],"content":"Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria.","nodes":[{"content":"Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria.","pos":[0,126]}]}],"pos":[208706,208833],"yaml":true},{"content":"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria. You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.  \n  \n Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor's current position. Changes to queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.  \n  \n There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.  \n  \n If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or call <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called. Calling <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provides the same results as calling <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> with the filtering criteria of <xref:System.Messaging.MessageQueue.Category%2A>, <xref:System.Messaging.MessageQueue.Label%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>, respectively.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,351],"content":"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria. You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.","nodes":[{"content":"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria. You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.","pos":[0,351],"nodes":[{"content":"This overload of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A&gt;</ph> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria.","pos":[0,199],"source":"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria."},{"content":"You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.","pos":[200,351]}]}]},{"pos":[358,972],"content":"Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor's current position. Changes to queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.","nodes":[{"content":"Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor's current position. Changes to queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.","pos":[0,614],"nodes":[{"content":"Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor's current position.","pos":[0,168]},{"content":"Changes to queues located before the cursor's current position are not reflected.","pos":[169,250]},{"content":"For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position.","pos":[251,390]},{"content":"However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueEnumerator.Reset%2A&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueEnumerator&gt;</ph>.","pos":[391,614],"source":" However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>."}]}]},{"pos":[979,1159],"content":"There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.","nodes":[{"content":"There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.","pos":[0,180],"nodes":[{"content":"There is no defined ordering of queues in a network.","pos":[0,52]},{"content":"An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.","pos":[53,180]}]}]},{"pos":[1166,2133],"content":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or call <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called. Calling <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provides the same results as calling <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> with the filtering criteria of <xref:System.Messaging.MessageQueue.Category%2A>, <xref:System.Messaging.MessageQueue.Label%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>, respectively.","nodes":[{"content":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or call <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called. Calling <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provides the same results as calling <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> with the filtering criteria of <xref:System.Messaging.MessageQueue.Category%2A>, <xref:System.Messaging.MessageQueue.Label%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>, respectively.","pos":[0,967],"nodes":[{"content":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueues%2A&gt;</ph> or call <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29&gt;</ph>.","pos":[0,268],"source":"If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or call <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>."},{"content":"Each of these two methods returns an array of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> objects, which represent the queues at the time the method was called.","pos":[269,422],"source":" Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29&gt;</ph> provides the same results as calling <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueues%2A&gt;</ph> with the filtering criteria of <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph>, and <ph id=\"ph7\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph>, respectively.","pos":[423,967],"source":" Calling <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provides the same results as calling <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> with the filtering criteria of <xref:System.Messaging.MessageQueue.Category%2A>, <xref:System.Messaging.MessageQueue.Label%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>, respectively."}]}]},{"pos":[2140,2226],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2233,2247],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2248,2257],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2303,2317],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2318,2320],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2325,2362],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2363,2365],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2370,2385],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2386,2388],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2393,2431],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2432,2434],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[208844,211297],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.MessageQueueCriteria\"></xref> that contains the criteria used to filter the available message queues.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueCriteria\"&gt;&lt;/xref&gt;</ph> that contains the criteria used to filter the available message queues.","source":"A <xref href=\"System.Messaging.MessageQueueCriteria\"></xref> that contains the criteria used to filter the available message queues."}],"pos":[212377,212510],"yaml":true},{"content":"A <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> that provides a dynamic listing of the public message queues on the network that satisfy the restrictions specified by the <code>criteria</code> parameter.","nodes":[{"pos":[0,218],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueEnumerator\"&gt;&lt;/xref&gt;</ph> that provides a dynamic listing of the public message queues on the network that satisfy the restrictions specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">criteria</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> that provides a dynamic listing of the public message queues on the network that satisfy the restrictions specified by the <code>criteria</code> parameter."}],"pos":[212593,212812],"yaml":true},{"content":"Retrieves all the private queues on the specified computer.","nodes":[{"pos":[0,59],"content":"Retrieves all the private queues on the specified computer.","nodes":[{"content":"Retrieves all the private queues on the specified computer.","pos":[0,59]}]}],"pos":[213950,214010],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues on a specified computer.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,148],"content":"<xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues on a specified computer.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29&gt;</ph> retrieves a static snapshot of the queues on a specified computer.","pos":[0,148],"source":"<xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues on a specified computer."}]},{"pos":[155,241],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[248,262],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[263,272],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[318,332],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[333,336],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[341,378],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[379,382],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[387,402],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[403,406],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[411,449],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[450,453],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[214021,214487],"yaml":true,"extradata":"MT"},{"content":"The computer from which to retrieve the private queues.","nodes":[{"pos":[0,55],"content":"The computer from which to retrieve the private queues.","nodes":[{"content":"The computer from which to retrieve the private queues.","pos":[0,55]}]}],"pos":[215199,215255],"yaml":true},{"content":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved private queues.","nodes":[{"pos":[0,115],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> objects that reference the retrieved private queues.","source":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved private queues."}],"pos":[215330,215446],"yaml":true},{"content":"The <code>machineName</code> parameter is `null` or an empty string (\"\").","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">machineName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> or an empty string (\"\").","source":"The <code>machineName</code> parameter is `null` or an empty string (\"\")."}],"pos":[215623,215697],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[215819,215878],"yaml":true},{"content":"Retrieves all the public queues on the network.","nodes":[{"pos":[0,47],"content":"Retrieves all the public queues on the network.","nodes":[{"content":"Retrieves all the public queues on the network.","pos":[0,47]}]}],"pos":[216807,216855],"yaml":true},{"content":"Use this overload if you want a complete list of all the public queues on the network. If you want to restrict the list by certain criteria, such as <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, or last modified time use another overload of this method. (Alternatively, you can use <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>.)  \n  \n <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,585],"content":"Use this overload if you want a complete list of all the public queues on the network. If you want to restrict the list by certain criteria, such as <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, or last modified time use another overload of this method. (Alternatively, you can use <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>.)","nodes":[{"content":"Use this overload if you want a complete list of all the public queues on the network. If you want to restrict the list by certain criteria, such as <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, or last modified time use another overload of this method. (Alternatively, you can use <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>.)","pos":[0,585],"nodes":[{"content":"Use this overload if you want a complete list of all the public queues on the network.","pos":[0,86]},{"content":"If you want to restrict the list by certain criteria, such as <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph>, or last modified time use another overload of this method.","pos":[87,310],"source":" If you want to restrict the list by certain criteria, such as <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, or last modified time use another overload of this method."},{"content":"(Alternatively, you can use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29&gt;</ph>.)","pos":[311,585],"source":" (Alternatively, you can use <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>.)"}]}]},{"pos":[592,808],"content":"<xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.","pos":[0,216],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueues%2A&gt;</ph> retrieves a static snapshot of the queues.","pos":[0,98],"source":"<xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues."},{"content":"To interact with a dynamic list of the queues, use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A&gt;</ph>.","pos":[99,216],"source":" To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>."}]}]},{"pos":[815,901],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[908,922],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[923,932],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[978,992],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[993,995],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1000,1037],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1038,1040],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1045,1060],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1061,1063],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1068,1106],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1107,1109],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[216866,217990],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.","nodes":[{"pos":[0,114],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> objects that reference the retrieved public queues.","source":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues."}],"pos":[218685,218800],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[218995,219054],"yaml":true},{"content":"Retrieves all the public queues on the network that meet the specified criteria.","nodes":[{"pos":[0,80],"content":"Retrieves all the public queues on the network that meet the specified criteria.","nodes":[{"content":"Retrieves all the public queues on the network that meet the specified criteria.","pos":[0,80]}]}],"pos":[220160,220241],"yaml":true},{"content":"If you want to filter all the public queues on the network by label, category, or computer name, the <xref:System.Messaging.MessageQueue> class contains specific methods that provide that functionality (<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, respectively). Use this overload to get a list of all the public queues on the network that meet more than one of these criteria (for example, if you want to specify both a label and a category). You can also filter by message criteria other than <xref:System.Messaging.MessageQueue.Label%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>. For example, you use this overload to filter by a queue's last-modified time. Simply create a new instance of the <xref:System.Messaging.MessageQueueCriteria> class, set the appropriate properties in the instance, and pass the instance as the `criteria` parameter.  \n  \n <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,1115],"content":"If you want to filter all the public queues on the network by label, category, or computer name, the <xref:System.Messaging.MessageQueue> class contains specific methods that provide that functionality (<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, respectively). Use this overload to get a list of all the public queues on the network that meet more than one of these criteria (for example, if you want to specify both a label and a category). You can also filter by message criteria other than <xref:System.Messaging.MessageQueue.Label%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>. For example, you use this overload to filter by a queue's last-modified time. Simply create a new instance of the <xref:System.Messaging.MessageQueueCriteria> class, set the appropriate properties in the instance, and pass the instance as the `criteria` parameter.","nodes":[{"content":"If you want to filter all the public queues on the network by label, category, or computer name, the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class contains specific methods that provide that functionality (<ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29&gt;</ph>, respectively).","pos":[0,464],"source":"If you want to filter all the public queues on the network by label, category, or computer name, the <xref:System.Messaging.MessageQueue> class contains specific methods that provide that functionality (<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, respectively)."},{"content":"Use this overload to get a list of all the public queues on the network that meet more than one of these criteria (for example, if you want to specify both a label and a category).","pos":[465,645]},{"content":"You can also filter by message criteria other than <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph>.","pos":[646,850],"source":" You can also filter by message criteria other than <xref:System.Messaging.MessageQueue.Label%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>."},{"content":"For example, you use this overload to filter by a queue's last-modified time.","pos":[851,928]},{"content":"Simply create a new instance of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueCriteria&gt;</ph> class, set the appropriate properties in the instance, and pass the instance as the <ph id=\"ph2\">`criteria`</ph> parameter.","pos":[929,1115],"source":" Simply create a new instance of the <xref:System.Messaging.MessageQueueCriteria> class, set the appropriate properties in the instance, and pass the instance as the `criteria` parameter."}]},{"pos":[1122,1338],"content":"<xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.","pos":[0,216],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueues%2A&gt;</ph> retrieves a static snapshot of the queues.","pos":[0,98],"source":"<xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues."},{"content":"To interact with a dynamic list of the queues, use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A&gt;</ph>.","pos":[99,216],"source":" To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>."}]}]},{"pos":[1345,1431],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1438,1452],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1453,1462],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1508,1522],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1523,1525],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1530,1567],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1568,1570],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1575,1590],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1591,1593],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1598,1636],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1637,1639],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[220252,221906],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.MessageQueueCriteria\"></xref> that contains the criteria used to filter the queues.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueCriteria\"&gt;&lt;/xref&gt;</ph> that contains the criteria used to filter the queues.","source":"A <xref href=\"System.Messaging.MessageQueueCriteria\"></xref> that contains the criteria used to filter the queues."}],"pos":[222657,222772],"yaml":true},{"content":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.","nodes":[{"pos":[0,114],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> objects that reference the retrieved public queues.","source":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues."}],"pos":[222847,222962],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[223157,223216],"yaml":true},{"content":"Retrieves all the public queues on the network that belong to the specified category.","nodes":[{"pos":[0,85],"content":"Retrieves all the public queues on the network that belong to the specified category.","nodes":[{"content":"Retrieves all the public queues on the network that belong to the specified category.","pos":[0,85]}]}],"pos":[224256,224342],"yaml":true},{"content":"Use this method to filter the public queues by category. The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, it is not necessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.  \n  \n <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the category as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,746],"content":"Use this method to filter the public queues by category. The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, it is not necessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.","nodes":[{"content":"Use this method to filter the public queues by category. The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, it is not necessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.","pos":[0,746],"nodes":[{"content":"Use this method to filter the public queues by category.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue.","pos":[57,219],"source":" The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue."},{"content":"Although you can use <ph id=\"ph1\">&lt;xref:System.Guid.NewGuid%2A&gt;</ph> to create a category value that is unique across all <ph id=\"ph2\">&lt;xref:System.Guid&gt;</ph> values, it is not necessary.","pos":[220,371],"source":" Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, it is not necessary."},{"content":"The category value needs to be distinct only from other categories, not from all other <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> values.","pos":[372,485],"source":" The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values."},{"content":"For example, you can assign {00000000-0000-0000-0000-000000000001} as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph> for another set.","pos":[486,746],"source":" For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set."}]}]},{"pos":[753,1108],"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the category as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the category as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.","pos":[0,355],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29&gt;</ph> retrieves a static snapshot of the queues.","pos":[0,122],"source":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29> retrieves a static snapshot of the queues."},{"content":"To interact with a dynamic list of the queues, use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A&gt;</ph>.","pos":[123,240],"source":" To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>."},{"content":"You can specify the category as part of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueCriteria&gt;</ph> you pass into the method.","pos":[241,355],"source":" You can specify the category as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method."}]}]},{"pos":[1115,1201],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1208,1222],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1223,1232],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1278,1292],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1293,1295],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1300,1337],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1338,1340],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1345,1360],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1361,1363],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1368,1406],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1407,1409],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[224353,225777],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Guid\"></xref> that groups the set of queues to be retrieved.","nodes":[{"pos":[0,81],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> that groups the set of queues to be retrieved.","source":"A <xref href=\"System.Guid\"></xref> that groups the set of queues to be retrieved."}],"pos":[226479,226561],"yaml":true},{"content":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.","nodes":[{"pos":[0,114],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> objects that reference the retrieved public queues.","source":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues."}],"pos":[226636,226751],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[226956,227015],"yaml":true},{"content":"Retrieves all the public queues on the network that carry the specified label.","nodes":[{"pos":[0,78],"content":"Retrieves all the public queues on the network that carry the specified label.","nodes":[{"content":"Retrieves all the public queues on the network that carry the specified label.","pos":[0,78]}]}],"pos":[228049,228128],"yaml":true},{"content":"Use this method to filter the public queues by label.  \n  \n <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the label as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,53],"content":"Use this method to filter the public queues by label.","nodes":[{"content":"Use this method to filter the public queues by label.","pos":[0,53]}]},{"pos":[60,411],"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the label as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the label as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.","pos":[0,351],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29&gt;</ph> retrieves a static snapshot of the queues.","pos":[0,121],"source":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29> retrieves a static snapshot of the queues."},{"content":"To interact with a dynamic list of the queues, use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A&gt;</ph>.","pos":[122,239],"source":" To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>."},{"content":"You can specify the label as part of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueCriteria&gt;</ph> you pass into the method.","pos":[240,351],"source":" You can specify the label as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method."}]}]},{"pos":[418,504],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[511,525],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[526,535],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[581,595],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[596,598],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[603,640],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[641,643],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[648,663],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[664,666],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[671,709],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[710,712],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[228139,228866],"yaml":true,"extradata":"MT"},{"content":"A label that groups the set of queues to be retrieved.","nodes":[{"pos":[0,54],"content":"A label that groups the set of queues to be retrieved.","nodes":[{"content":"A label that groups the set of queues to be retrieved.","pos":[0,54]}]}],"pos":[229563,229618],"yaml":true},{"content":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.","nodes":[{"pos":[0,114],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> objects that reference the retrieved public queues.","source":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues."}],"pos":[229693,229808],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[230010,230069],"yaml":true},{"content":"The <code>label</code> parameter is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">label</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>label</code> parameter is `null`."}],"pos":[230171,230215],"yaml":true},{"content":"Retrieves all the public queues that reside on the specified computer.","nodes":[{"pos":[0,70],"content":"Retrieves all the public queues that reside on the specified computer.","nodes":[{"content":"Retrieves all the public queues that reside on the specified computer.","pos":[0,70]}]}],"pos":[231261,231332],"yaml":true},{"content":"Use this method to filter the public queues by computer.  \n  \n <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the computer name as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,56],"content":"Use this method to filter the public queues by computer.","nodes":[{"content":"Use this method to filter the public queues by computer.","pos":[0,56]}]},{"pos":[63,424],"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the computer name as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the computer name as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.","pos":[0,361],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29&gt;</ph> retrieves a static snapshot of the queues.","pos":[0,123],"source":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues."},{"content":"To interact with a dynamic list of the queues, use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A&gt;</ph>.","pos":[124,241],"source":" To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>."},{"content":"You can specify the computer name as part of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueCriteria&gt;</ph> you pass into the method.","pos":[242,361],"source":" You can specify the computer name as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method."}]}]},{"pos":[431,517],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[524,538],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[539,548],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[594,608],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[609,611],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[616,653],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[654,656],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[661,676],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[677,679],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[684,722],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[723,725],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[231343,232083],"yaml":true,"extradata":"MT"},{"content":"The name of the computer that contains the set of public queues to be retrieved.","nodes":[{"pos":[0,80],"content":"The name of the computer that contains the set of public queues to be retrieved.","nodes":[{"content":"The name of the computer that contains the set of public queues to be retrieved.","pos":[0,80]}]}],"pos":[232794,232875],"yaml":true},{"content":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the public queues on the computer.","nodes":[{"pos":[0,120],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> objects that reference the public queues on the computer.","source":"An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the public queues on the computer."}],"pos":[232950,233071],"yaml":true},{"content":"The <code>machineName</code> parameter has incorrect syntax.","nodes":[{"pos":[0,60],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">machineName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter has incorrect syntax.","source":"The <code>machineName</code> parameter has incorrect syntax."}],"pos":[233247,233308],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[233430,233489],"yaml":true},{"content":"Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call.","nodes":[{"pos":[0,117],"content":"Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call.","nodes":[{"content":"Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call.","pos":[0,117]}]}],"pos":[234436,234554],"yaml":true},{"content":"A <xref href=\"System.Messaging.SecurityContext\"></xref> object that contains the security context.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.SecurityContext\"&gt;&lt;/xref&gt;</ph> object that contains the security context.","source":"A <xref href=\"System.Messaging.SecurityContext\"></xref> object that contains the security context."}],"pos":[234742,234841],"yaml":true},{"content":"Gets the unique Message Queuing identifier of the queue.","nodes":[{"pos":[0,56],"content":"Gets the unique Message Queuing identifier of the queue.","nodes":[{"content":"Gets the unique Message Queuing identifier of the queue.","pos":[0,56]}]}],"pos":[235729,235786],"yaml":true},{"content":"Message Queuing sets the <xref:System.Messaging.MessageQueue.Id%2A> property when it creates the queue. This property is only available for public queues.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,154],"content":"Message Queuing sets the <xref:System.Messaging.MessageQueue.Id%2A> property when it creates the queue. This property is only available for public queues.","nodes":[{"content":"Message Queuing sets the <xref:System.Messaging.MessageQueue.Id%2A> property when it creates the queue. This property is only available for public queues.","pos":[0,154],"nodes":[{"content":"Message Queuing sets the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Id%2A&gt;</ph> property when it creates the queue.","pos":[0,103],"source":"Message Queuing sets the <xref:System.Messaging.MessageQueue.Id%2A> property when it creates the queue."},{"content":"This property is only available for public queues.","pos":[104,154]}]}]},{"pos":[161,249],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[256,270],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[271,280],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[326,340],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[341,344],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[349,386],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[387,390],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[395,410],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[411,413],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[418,456],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[457,459],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[235797,236269],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.MessageQueue.Id\"></xref> that represents the message identifier generated by the Message Queuing application.","nodes":[{"pos":[0,140],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Id\"&gt;&lt;/xref&gt;</ph> that represents the message identifier generated by the Message Queuing application.","source":"A <xref href=\"System.Messaging.MessageQueue.Id\"></xref> that represents the message identifier generated by the Message Queuing application."}],"pos":[236694,236835],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[237017,237076],"yaml":true},{"content":"Specifies that no size restriction exists for a queue.","nodes":[{"pos":[0,54],"content":"Specifies that no size restriction exists for a queue.","nodes":[{"content":"Specifies that no size restriction exists for a queue.","pos":[0,54]}]}],"pos":[238081,238136],"yaml":true},{"content":"This member is frequently used when setting <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> or <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>.","nodes":[{"pos":[0,163],"content":"This member is frequently used when setting <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> or <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>.","nodes":[{"content":"This member is frequently used when setting <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MaximumJournalSize%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MaximumQueueSize%2A&gt;</ph>.","pos":[0,163],"source":"This member is frequently used when setting <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> or <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>."}]}],"pos":[238147,238311],"yaml":true,"extradata":"MT"},{"content":"Specifies that no time-out exists for methods that peek or receive messages.","nodes":[{"pos":[0,76],"content":"Specifies that no time-out exists for methods that peek or receive messages.","nodes":[{"content":"Specifies that no time-out exists for methods that peek or receive messages.","pos":[0,76]}]}],"pos":[239631,239708],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. If the specified time interval is <xref:System.Messaging.MessageQueue.InfiniteTimeout>, the process thread remains blocked until a new message is available. On the other hand, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.","nodes":[{"pos":[0,746],"content":"<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. If the specified time interval is <xref:System.Messaging.MessageQueue.InfiniteTimeout>, the process thread remains blocked until a new message is available. On the other hand, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.","nodes":[{"content":"<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. If the specified time interval is <xref:System.Messaging.MessageQueue.InfiniteTimeout>, the process thread remains blocked until a new message is available. On the other hand, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.","pos":[0,746],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> supports two types of message retrieval: synchronous and asynchronous.","pos":[0,107],"source":"<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous."},{"content":"The synchronous methods, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, cause the process thread to wait a specified time interval for a new message to arrive in the queue.","pos":[108,331],"source":" The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue."},{"content":"If the specified time interval is <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph>, the process thread remains blocked until a new message is available.","pos":[332,488],"source":" If the specified time interval is <xref:System.Messaging.MessageQueue.InfiniteTimeout>, the process thread remains blocked until a new message is available."},{"content":"On the other hand, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.","pos":[489,746],"source":" On the other hand, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue."}]}]}],"pos":[239719,240468],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the queue description.","nodes":[{"pos":[0,35],"content":"Gets or sets the queue description.","nodes":[{"content":"Gets or sets the queue description.","pos":[0,35]}]}],"pos":[241734,241770],"yaml":true},{"content":"The maximum length of a message queue label is 124 characters.  \n  \n The <xref:System.Messaging.MessageQueue.Label%2A> property does not need to be unique across all queues. However, if multiple queues share the same <xref:System.Messaging.MessageQueue.Label%2A>, you cannot use the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method to broadcast a message to all of them. If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,62],"content":"The maximum length of a message queue label is 124 characters.","nodes":[{"content":"The maximum length of a message queue label is 124 characters.","pos":[0,62]}]},{"pos":[69,602],"content":"The <xref:System.Messaging.MessageQueue.Label%2A> property does not need to be unique across all queues. However, if multiple queues share the same <xref:System.Messaging.MessageQueue.Label%2A>, you cannot use the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method to broadcast a message to all of them. If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Label%2A> property does not need to be unique across all queues. However, if multiple queues share the same <xref:System.Messaging.MessageQueue.Label%2A>, you cannot use the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method to broadcast a message to all of them. If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.","pos":[0,533],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> property does not need to be unique across all queues.","pos":[0,104],"source":"The <xref:System.Messaging.MessageQueue.Label%2A> property does not need to be unique across all queues."},{"content":"However, if multiple queues share the same <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph>, you cannot use the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph> method to broadcast a message to all of them.","pos":[105,320],"source":" However, if multiple queues share the same <xref:System.Messaging.MessageQueue.Label%2A>, you cannot use the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method to broadcast a message to all of them."},{"content":"If you use the label syntax for the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property when you send the message, an exception will be thrown if the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> is not unique.","pos":[321,533],"source":" If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique."}]}]},{"pos":[609,697],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[704,718],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[719,728],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[774,788],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[789,792],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[797,834],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[835,838],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[843,858],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[859,861],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[866,904],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[905,907],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[241781,242703],"yaml":true,"extradata":"MT"},{"content":"The label for the message queue. The default is an empty string (\"\").","nodes":[{"pos":[0,69],"content":"The label for the message queue. The default is an empty string (\"\").","nodes":[{"content":"The label for the message queue. The default is an empty string (\"\").","pos":[0,69],"nodes":[{"content":"The label for the message queue.","pos":[0,32]},{"content":"The default is an empty string (\"\").","pos":[33,69]}]}]}],"pos":[243147,243217],"yaml":true},{"content":"The label was set to an invalid value.","nodes":[{"pos":[0,38],"content":"The label was set to an invalid value.","nodes":[{"content":"The label was set to an invalid value.","pos":[0,38]}]}],"pos":[243374,243413],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[243535,243594],"yaml":true},{"content":"Gets the last time the properties of a queue were modified.","nodes":[{"pos":[0,59],"content":"Gets the last time the properties of a queue were modified.","nodes":[{"content":"Gets the last time the properties of a queue were modified.","pos":[0,59]}]}],"pos":[244584,244644],"yaml":true},{"content":"The last modification time includes when the queue was created and any <xref:System.Messaging.MessageQueue> property that modifies the Message Queuing queue, such as <xref:System.Messaging.MessageQueue.BasePriority%2A>. The value of the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property represents the system time of the local computer.  \n  \n You must call <xref:System.Messaging.MessageQueue.Refresh%2A> before getting the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property; otherwise, the modification time associated with this <xref:System.Messaging.MessageQueue> might not be current.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,350],"content":"The last modification time includes when the queue was created and any <xref:System.Messaging.MessageQueue> property that modifies the Message Queuing queue, such as <xref:System.Messaging.MessageQueue.BasePriority%2A>. The value of the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property represents the system time of the local computer.","nodes":[{"content":"The last modification time includes when the queue was created and any <xref:System.Messaging.MessageQueue> property that modifies the Message Queuing queue, such as <xref:System.Messaging.MessageQueue.BasePriority%2A>. The value of the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property represents the system time of the local computer.","pos":[0,350],"nodes":[{"content":"The last modification time includes when the queue was created and any <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> property that modifies the Message Queuing queue, such as <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BasePriority%2A&gt;</ph>.","pos":[0,219],"source":"The last modification time includes when the queue was created and any <xref:System.Messaging.MessageQueue> property that modifies the Message Queuing queue, such as <xref:System.Messaging.MessageQueue.BasePriority%2A>."},{"content":"The value of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.LastModifyTime%2A&gt;</ph> property represents the system time of the local computer.","pos":[220,350],"source":" The value of the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property represents the system time of the local computer."}]}]},{"pos":[357,615],"content":"You must call <xref:System.Messaging.MessageQueue.Refresh%2A> before getting the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property; otherwise, the modification time associated with this <xref:System.Messaging.MessageQueue> might not be current.","nodes":[{"content":"You must call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Refresh%2A&gt;</ph> before getting the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.LastModifyTime%2A&gt;</ph> property; otherwise, the modification time associated with this <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> might not be current.","pos":[0,258],"source":"You must call <xref:System.Messaging.MessageQueue.Refresh%2A> before getting the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property; otherwise, the modification time associated with this <xref:System.Messaging.MessageQueue> might not be current."}]},{"pos":[622,710],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[717,731],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[732,741],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[787,801],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[802,805],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[810,847],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[848,851],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[856,871],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[872,874],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[879,917],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[918,920],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[244655,245590],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.DateTime\"></xref> that indicates when the queue properties were last modified.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.DateTime\"&gt;&lt;/xref&gt;</ph> that indicates when the queue properties were last modified.","source":"A <xref href=\"System.DateTime\"></xref> that indicates when the queue properties were last modified."}],"pos":[246055,246155],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[246349,246408],"yaml":true},{"content":"Gets or sets the name of the computer where the Message Queuing queue is located.","nodes":[{"pos":[0,81],"content":"Gets or sets the name of the computer where the Message Queuing queue is located.","nodes":[{"content":"Gets or sets the name of the computer where the Message Queuing queue is located.","pos":[0,81]}]}],"pos":[247380,247462],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.MachineName%2A> is an integral component of the friendly name syntax of the queue <xref:System.Messaging.MessageQueue.Path%2A>. The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Use \".\" for the local computer when specifying the <xref:System.Messaging.MessageQueue.MachineName%2A>. Only the computer name is recognized for this property, for example, `Server0`. The <xref:System.Messaging.MessageQueue.MachineName%2A> property does not support the IP address format.  \n  \n If you define the <xref:System.Messaging.MessageQueue.Path%2A> in terms of the <xref:System.Messaging.MessageQueue.MachineName%2A>, the application throws an exception when working offline because the domain controller is required for path translation. Therefore, you must use the <xref:System.Messaging.MessageQueue.FormatName%2A> for the <xref:System.Messaging.MessageQueue.Path%2A> syntax when working offline.  \n  \n The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue. If the <xref:System.Messaging.MessageQueue.QueueName%2A> property is empty, the <xref:System.Messaging.MessageQueue.Path%2A> is set to the Journal queue of the computer you specify.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,317],"content":"The <xref:System.Messaging.MessageQueue.MachineName%2A> is an integral component of the friendly name syntax of the queue <xref:System.Messaging.MessageQueue.Path%2A>. The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.MachineName%2A> is an integral component of the friendly name syntax of the queue <xref:System.Messaging.MessageQueue.Path%2A>. The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.","pos":[0,317],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> is an integral component of the friendly name syntax of the queue <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph>.","pos":[0,167],"source":"The <xref:System.Messaging.MessageQueue.MachineName%2A> is an integral component of the friendly name syntax of the queue <xref:System.Messaging.MessageQueue.Path%2A>."},{"content":"The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.","pos":[168,317]}]}]},{"pos":[324,334],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[335,341],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[380,392],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[424,437],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[481,494],"content":"Journal queue","nodes":[{"content":"Journal queue","pos":[0,13]}]},{"pos":[538,559],"content":"Machine journal queue","nodes":[{"content":"Machine journal queue","pos":[0,21]}]},{"pos":[590,615],"content":"Machine dead-letter queue","nodes":[{"content":"Machine dead-letter queue","pos":[0,25]}]},{"pos":[649,688],"content":"Machine transactional dead-letter queue","nodes":[{"content":"Machine transactional dead-letter queue","pos":[0,39]}]},{"pos":[729,1017],"content":"Use \".\" for the local computer when specifying the <xref:System.Messaging.MessageQueue.MachineName%2A>. Only the computer name is recognized for this property, for example, `Server0`. The <xref:System.Messaging.MessageQueue.MachineName%2A> property does not support the IP address format.","nodes":[{"content":"Use \".\" for the local computer when specifying the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph>.","pos":[0,103],"source":"Use \".\" for the local computer when specifying the <xref:System.Messaging.MessageQueue.MachineName%2A>."},{"content":"Only the computer name is recognized for this property, for example, <ph id=\"ph1\">`Server0`</ph>.","pos":[104,183],"source":" Only the computer name is recognized for this property, for example, `Server0`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> property does not support the IP address format.","pos":[184,288],"source":" The <xref:System.Messaging.MessageQueue.MachineName%2A> property does not support the IP address format."}]},{"pos":[1024,1437],"content":"If you define the <xref:System.Messaging.MessageQueue.Path%2A> in terms of the <xref:System.Messaging.MessageQueue.MachineName%2A>, the application throws an exception when working offline because the domain controller is required for path translation. Therefore, you must use the <xref:System.Messaging.MessageQueue.FormatName%2A> for the <xref:System.Messaging.MessageQueue.Path%2A> syntax when working offline.","nodes":[{"content":"If you define the <xref:System.Messaging.MessageQueue.Path%2A> in terms of the <xref:System.Messaging.MessageQueue.MachineName%2A>, the application throws an exception when working offline because the domain controller is required for path translation. Therefore, you must use the <xref:System.Messaging.MessageQueue.FormatName%2A> for the <xref:System.Messaging.MessageQueue.Path%2A> syntax when working offline.","pos":[0,413],"nodes":[{"content":"If you define the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> in terms of the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph>, the application throws an exception when working offline because the domain controller is required for path translation.","pos":[0,252],"source":"If you define the <xref:System.Messaging.MessageQueue.Path%2A> in terms of the <xref:System.Messaging.MessageQueue.MachineName%2A>, the application throws an exception when working offline because the domain controller is required for path translation."},{"content":"Therefore, you must use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> for the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> syntax when working offline.","pos":[253,413],"source":" Therefore, you must use the <xref:System.Messaging.MessageQueue.FormatName%2A> for the <xref:System.Messaging.MessageQueue.Path%2A> syntax when working offline."}]}]},{"pos":[1444,2350],"content":"The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue. If the <xref:System.Messaging.MessageQueue.QueueName%2A> property is empty, the <xref:System.Messaging.MessageQueue.Path%2A> is set to the Journal queue of the computer you specify.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue. If the <xref:System.Messaging.MessageQueue.QueueName%2A> property is empty, the <xref:System.Messaging.MessageQueue.Path%2A> is set to the Journal queue of the computer you specify.","pos":[0,906],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> properties are related.","pos":[0,180],"source":"The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related."},{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> property causes the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property to change.","pos":[181,330],"source":" Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change."},{"content":"It is built from the new <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph>.","pos":[331,466],"source":" It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>."},{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> (for example, to use the format name syntax) resets the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> properties to refer to the new queue.","pos":[467,724],"source":" Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> property is empty, the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> is set to the Journal queue of the computer you specify.","pos":[725,906],"source":" If the <xref:System.Messaging.MessageQueue.QueueName%2A> property is empty, the <xref:System.Messaging.MessageQueue.Path%2A> is set to the Journal queue of the computer you specify."}]}]},{"pos":[2357,2445],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[2452,2466],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2467,2476],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2522,2536],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2537,2540],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2545,2582],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2583,2586],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2591,2606],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2607,2610],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2615,2653],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2654,2656],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[247473,250175],"yaml":true,"extradata":"MT"},{"content":"The name of the computer where the queue is located. The Message Queuing default is \".\", the local computer.","nodes":[{"pos":[0,108],"content":"The name of the computer where the queue is located. The Message Queuing default is \".\", the local computer.","nodes":[{"content":"The name of the computer where the queue is located. The Message Queuing default is \".\", the local computer.","pos":[0,108],"nodes":[{"content":"The name of the computer where the queue is located.","pos":[0,52]},{"content":"The Message Queuing default is \".\", the local computer.","pos":[53,108]}]}]}],"pos":[250685,250794],"yaml":true},{"content":"The name of the computer is not valid, possibly because the syntax is incorrect.","nodes":[{"pos":[0,80],"content":"The name of the computer is not valid, possibly because the syntax is incorrect.","nodes":[{"content":"The name of the computer is not valid, possibly because the syntax is incorrect.","pos":[0,80]}]}],"pos":[250957,251038],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[251160,251219],"yaml":true},{"content":"Gets or sets the maximum size of the journal queue.","nodes":[{"pos":[0,51],"content":"Gets or sets the maximum size of the journal queue.","nodes":[{"content":"Gets or sets the maximum size of the journal queue.","pos":[0,51]}]}],"pos":[252284,252336],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> provides access to the Message Queuing journal storage limit. It is relevant only when <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> is `true`. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change  \n  \n If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed. Messages in such a queue count toward the message quota for the computer where the queue resides. (The administrator sets the computer quota.)  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,365],"content":"<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> provides access to the Message Queuing journal storage limit. It is relevant only when <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> is `true`. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MaximumJournalSize%2A&gt;</ph> provides access to the Message Queuing journal storage limit.","pos":[0,120],"source":"<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> provides access to the Message Queuing journal storage limit."},{"content":"It is relevant only when <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.UseJournalQueue%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[121,212],"source":" It is relevant only when <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> is `true`."},{"content":"Setting this property modifies the Message Queuing queue.","pos":[213,270]},{"content":"Therefore, any other <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instances are affected by the change","pos":[271,365],"source":" Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change"}]},{"pos":[372,657],"content":"If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed. Messages in such a queue count toward the message quota for the computer where the queue resides. (The administrator sets the computer quota.)","nodes":[{"content":"If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed. Messages in such a queue count toward the message quota for the computer where the queue resides. (The administrator sets the computer quota.)","pos":[0,285],"nodes":[{"content":"If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed.","pos":[0,142]},{"content":"Messages in such a queue count toward the message quota for the computer where the queue resides.","pos":[143,240]},{"content":"(The administrator sets the computer quota.)","pos":[241,285]}]}]},{"pos":[664,752],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[759,773],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[774,783],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[829,843],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[844,847],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[852,889],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[890,893],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[898,913],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[914,916],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[921,959],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[960,962],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[252347,253324],"yaml":true,"extradata":"MT"},{"content":"The maximum size, in kilobytes, of the journal queue. The Message Queuing default specifies that no limit exists.","nodes":[{"pos":[0,113],"content":"The maximum size, in kilobytes, of the journal queue. The Message Queuing default specifies that no limit exists.","nodes":[{"content":"The maximum size, in kilobytes, of the journal queue. The Message Queuing default specifies that no limit exists.","pos":[0,113],"nodes":[{"content":"The maximum size, in kilobytes, of the journal queue.","pos":[0,53]},{"content":"The Message Queuing default specifies that no limit exists.","pos":[54,113]}]}]}],"pos":[253804,253918],"yaml":true},{"content":"The maximum journal queue size was set to an invalid value.","nodes":[{"pos":[0,59],"content":"The maximum journal queue size was set to an invalid value.","nodes":[{"content":"The maximum journal queue size was set to an invalid value.","pos":[0,59]}]}],"pos":[254088,254148],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[254270,254329],"yaml":true},{"content":"Gets or sets the maximum size of the queue.","nodes":[{"pos":[0,43],"content":"Gets or sets the maximum size of the queue.","nodes":[{"content":"Gets or sets the maximum size of the queue.","pos":[0,43]}]}],"pos":[255331,255375],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> provides access to the Message Queuing message storage limit, which is separate from the computer's message quota that the administrator defines. For more information about the message quota, see <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>.  \n  \n Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change  \n  \n If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost. When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message. Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,316],"content":"The <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> provides access to the Message Queuing message storage limit, which is separate from the computer's message quota that the administrator defines. For more information about the message quota, see <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> provides access to the Message Queuing message storage limit, which is separate from the computer's message quota that the administrator defines. For more information about the message quota, see <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>.","pos":[0,316],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MaximumQueueSize%2A&gt;</ph> provides access to the Message Queuing message storage limit, which is separate from the computer's message quota that the administrator defines.","pos":[0,206],"source":"The <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> provides access to the Message Queuing message storage limit, which is separate from the computer's message quota that the administrator defines."},{"content":"For more information about the message quota, see <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MaximumJournalSize%2A&gt;</ph>.","pos":[207,316],"source":" For more information about the message quota, see <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>."}]}]},{"pos":[323,475],"content":"Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change","nodes":[{"content":"Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change","pos":[0,152],"nodes":[{"content":"Setting this property modifies the Message Queuing queue.","pos":[0,57]},{"content":"Therefore, any other <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instances are affected by the change","pos":[58,152],"source":" Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change"}]}]},{"pos":[482,924],"content":"If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost. When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message. Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.","nodes":[{"content":"If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost. When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message. Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.","pos":[0,442],"nodes":[{"content":"If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost.","pos":[0,116]},{"content":"When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message.","pos":[117,310]},{"content":"Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.","pos":[311,442]}]}]},{"pos":[931,1019],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1026,1040],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1041,1050],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1096,1110],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1111,1114],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1119,1156],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1157,1160],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1165,1180],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1181,1183],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1188,1226],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1227,1229],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[255386,256632],"yaml":true,"extradata":"MT"},{"content":"The maximum size, in kilobytes, of the queue. The Message Queuing default specifies that no limit exists.","nodes":[{"pos":[0,105],"content":"The maximum size, in kilobytes, of the queue. The Message Queuing default specifies that no limit exists.","nodes":[{"content":"The maximum size, in kilobytes, of the queue. The Message Queuing default specifies that no limit exists.","pos":[0,105],"nodes":[{"content":"The maximum size, in kilobytes, of the queue.","pos":[0,45]},{"content":"The Message Queuing default specifies that no limit exists.","pos":[46,105]}]}]}],"pos":[257106,257212],"yaml":true},{"content":"The maximum queue size contains a negative value.","nodes":[{"pos":[0,49],"content":"The maximum queue size contains a negative value.","nodes":[{"content":"The maximum queue size contains a negative value.","pos":[0,49]}]}],"pos":[257380,257430],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[257552,257611],"yaml":true},{"content":"Gets or sets the property filter for receiving or peeking messages.","nodes":[{"pos":[0,67],"content":"Gets or sets the property filter for receiving or peeking messages.","nodes":[{"content":"Gets or sets the property filter for receiving or peeking messages.","pos":[0,67]}]}],"pos":[258667,258735],"yaml":true},{"content":"This filter is a set of Boolean values restricting the message properties that the <xref:System.Messaging.MessageQueue> receives or peeks. When the <xref:System.Messaging.MessageQueue> receives or peeks a message from the server queue, it retrieves only those properties for which the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> value is `true`.  \n  \n The following shows initial property values for the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property. These settings are identical to calling <xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A> on a <xref:System.Messaging.MessagePropertyFilter>.  \n  \n|Property|Default value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.MessagePropertyFilter.Acknowledgment%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.AcknowledgeType%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.AdministrationQueue%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.AppSpecific%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.ArrivedTime%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.AttachSenderId%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.Authenticated%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderName%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderType%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.Body%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.ConnectorType%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.CorrelationId%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.DefaultBodySize%2A>|1024 bytes|  \n|<xref:System.Messaging.MessagePropertyFilter.DefaultExtensionSize%2A>|255 bytes|  \n|<xref:System.Messaging.MessagePropertyFilter.DefaultLabelSize%2A>|255 bytes|  \n|<xref:System.Messaging.MessagePropertyFilter.DestinationQueue%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.DestinationSymmetricKey%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.DigitalSignature%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.EncryptionAlgorithm%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.Extension%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.HashAlgorithm%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.Id%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.IsFirstInTransaction%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.IsLastInTransaction%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.Label%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.MessageType%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.Priority%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.Recoverable%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.ResponseQueue%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.SenderCertificate%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.SenderId%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.SenderVersion%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.SentTime%2A>|`true`|  \n|<xref:System.Messaging.MessagePropertyFilter.SourceMachine%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.TimeToBeReceived%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.TimeToReachQueue%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.TransactionId%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.TransactionStatusQueue%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.UseAuthentication%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.UseDeadLetterQueue%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.UseEncryption%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.UseJournalQueue%2A>|`false`|  \n|<xref:System.Messaging.MessagePropertyFilter.UseTracing%2A>|`false`|  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,367],"content":"This filter is a set of Boolean values restricting the message properties that the <xref:System.Messaging.MessageQueue> receives or peeks. When the <xref:System.Messaging.MessageQueue> receives or peeks a message from the server queue, it retrieves only those properties for which the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> value is `true`.","nodes":[{"content":"This filter is a set of Boolean values restricting the message properties that the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> receives or peeks.","pos":[0,138],"source":"This filter is a set of Boolean values restricting the message properties that the <xref:System.Messaging.MessageQueue> receives or peeks."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> receives or peeks a message from the server queue, it retrieves only those properties for which the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A&gt;</ph> value is <ph id=\"ph3\">`true`</ph>.","pos":[139,367],"source":" When the <xref:System.Messaging.MessageQueue> receives or peeks a message from the server queue, it retrieves only those properties for which the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> value is `true`."}]},{"pos":[374,654],"content":"The following shows initial property values for the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property. These settings are identical to calling <xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A> on a <xref:System.Messaging.MessagePropertyFilter>.","nodes":[{"content":"The following shows initial property values for the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property. These settings are identical to calling <xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A> on a <xref:System.Messaging.MessagePropertyFilter>.","pos":[0,280],"nodes":[{"content":"The following shows initial property values for the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A&gt;</ph> property.","pos":[0,127],"source":"The following shows initial property values for the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property."},{"content":"These settings are identical to calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A&gt;</ph> on a <ph id=\"ph2\">&lt;xref:System.Messaging.MessagePropertyFilter&gt;</ph>.","pos":[128,280],"source":" These settings are identical to calling <xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A> on a <xref:System.Messaging.MessagePropertyFilter>."}]}]},{"pos":[661,669],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[670,683],"content":"Default value","nodes":[{"content":"Default value","pos":[0,13]}]},{"pos":[727,790],"content":"<xref:System.Messaging.MessagePropertyFilter.Acknowledgment%2A>","nodes":[]},{"pos":[803,867],"content":"<xref:System.Messaging.MessagePropertyFilter.AcknowledgeType%2A>","nodes":[]},{"pos":[880,948],"content":"<xref:System.Messaging.MessagePropertyFilter.AdministrationQueue%2A>","nodes":[]},{"pos":[960,1020],"content":"<xref:System.Messaging.MessagePropertyFilter.AppSpecific%2A>","nodes":[]},{"pos":[1033,1093],"content":"<xref:System.Messaging.MessagePropertyFilter.ArrivedTime%2A>","nodes":[]},{"pos":[1105,1168],"content":"<xref:System.Messaging.MessagePropertyFilter.AttachSenderId%2A>","nodes":[]},{"pos":[1181,1243],"content":"<xref:System.Messaging.MessagePropertyFilter.Authenticated%2A>","nodes":[]},{"pos":[1256,1331],"content":"<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderName%2A>","nodes":[]},{"pos":[1344,1419],"content":"<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderType%2A>","nodes":[]},{"pos":[1432,1485],"content":"<xref:System.Messaging.MessagePropertyFilter.Body%2A>","nodes":[]},{"pos":[1497,1559],"content":"<xref:System.Messaging.MessagePropertyFilter.ConnectorType%2A>","nodes":[]},{"pos":[1572,1634],"content":"<xref:System.Messaging.MessagePropertyFilter.CorrelationId%2A>","nodes":[]},{"pos":[1646,1710],"content":"<xref:System.Messaging.MessagePropertyFilter.DefaultBodySize%2A>","nodes":[]},{"pos":[1711,1721],"content":"1024 bytes","nodes":[{"content":"1024 bytes","pos":[0,10]}]},{"pos":[1726,1795],"content":"<xref:System.Messaging.MessagePropertyFilter.DefaultExtensionSize%2A>","nodes":[]},{"pos":[1796,1805],"content":"255 bytes","nodes":[{"content":"255 bytes","pos":[0,9]}]},{"pos":[1810,1875],"content":"<xref:System.Messaging.MessagePropertyFilter.DefaultLabelSize%2A>","nodes":[]},{"pos":[1876,1885],"content":"255 bytes","nodes":[{"content":"255 bytes","pos":[0,9]}]},{"pos":[1890,1955],"content":"<xref:System.Messaging.MessagePropertyFilter.DestinationQueue%2A>","nodes":[]},{"pos":[1968,2040],"content":"<xref:System.Messaging.MessagePropertyFilter.DestinationSymmetricKey%2A>","nodes":[]},{"pos":[2053,2118],"content":"<xref:System.Messaging.MessagePropertyFilter.DigitalSignature%2A>","nodes":[]},{"pos":[2131,2199],"content":"<xref:System.Messaging.MessagePropertyFilter.EncryptionAlgorithm%2A>","nodes":[]},{"pos":[2212,2270],"content":"<xref:System.Messaging.MessagePropertyFilter.Extension%2A>","nodes":[]},{"pos":[2283,2345],"content":"<xref:System.Messaging.MessagePropertyFilter.HashAlgorithm%2A>","nodes":[]},{"pos":[2358,2409],"content":"<xref:System.Messaging.MessagePropertyFilter.Id%2A>","nodes":[]},{"pos":[2421,2490],"content":"<xref:System.Messaging.MessagePropertyFilter.IsFirstInTransaction%2A>","nodes":[]},{"pos":[2503,2571],"content":"<xref:System.Messaging.MessagePropertyFilter.IsLastInTransaction%2A>","nodes":[]},{"pos":[2584,2638],"content":"<xref:System.Messaging.MessagePropertyFilter.Label%2A>","nodes":[]},{"pos":[2650,2710],"content":"<xref:System.Messaging.MessagePropertyFilter.MessageType%2A>","nodes":[]},{"pos":[2723,2780],"content":"<xref:System.Messaging.MessagePropertyFilter.Priority%2A>","nodes":[]},{"pos":[2793,2853],"content":"<xref:System.Messaging.MessagePropertyFilter.Recoverable%2A>","nodes":[]},{"pos":[2866,2928],"content":"<xref:System.Messaging.MessagePropertyFilter.ResponseQueue%2A>","nodes":[]},{"pos":[2940,3006],"content":"<xref:System.Messaging.MessagePropertyFilter.SenderCertificate%2A>","nodes":[]},{"pos":[3019,3076],"content":"<xref:System.Messaging.MessagePropertyFilter.SenderId%2A>","nodes":[]},{"pos":[3089,3151],"content":"<xref:System.Messaging.MessagePropertyFilter.SenderVersion%2A>","nodes":[]},{"pos":[3164,3221],"content":"<xref:System.Messaging.MessagePropertyFilter.SentTime%2A>","nodes":[]},{"pos":[3233,3295],"content":"<xref:System.Messaging.MessagePropertyFilter.SourceMachine%2A>","nodes":[]},{"pos":[3308,3373],"content":"<xref:System.Messaging.MessagePropertyFilter.TimeToBeReceived%2A>","nodes":[]},{"pos":[3386,3451],"content":"<xref:System.Messaging.MessagePropertyFilter.TimeToReachQueue%2A>","nodes":[]},{"pos":[3464,3526],"content":"<xref:System.Messaging.MessagePropertyFilter.TransactionId%2A>","nodes":[]},{"pos":[3539,3610],"content":"<xref:System.Messaging.MessagePropertyFilter.TransactionStatusQueue%2A>","nodes":[]},{"pos":[3623,3689],"content":"<xref:System.Messaging.MessagePropertyFilter.UseAuthentication%2A>","nodes":[]},{"pos":[3702,3769],"content":"<xref:System.Messaging.MessagePropertyFilter.UseDeadLetterQueue%2A>","nodes":[]},{"pos":[3782,3844],"content":"<xref:System.Messaging.MessagePropertyFilter.UseEncryption%2A>","nodes":[]},{"pos":[3857,3921],"content":"<xref:System.Messaging.MessagePropertyFilter.UseJournalQueue%2A>","nodes":[]},{"pos":[3934,3993],"content":"<xref:System.Messaging.MessagePropertyFilter.UseTracing%2A>","nodes":[]},{"pos":[4009,4097],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[4104,4118],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[4119,4128],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[4174,4188],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[4189,4192],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4197,4234],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[4235,4238],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4243,4258],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[4259,4262],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4267,4305],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[4306,4309],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[258746,263116],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.MessagePropertyFilter\"></xref> used by the queue to filter the set of properties it receives or peeks for each message.","nodes":[{"pos":[0,152],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessagePropertyFilter\"&gt;&lt;/xref&gt;</ph> used by the queue to filter the set of properties it receives or peeks for each message.","source":"The <xref href=\"System.Messaging.MessagePropertyFilter\"></xref> used by the queue to filter the set of properties it receives or peeks for each message."}],"pos":[264156,264309],"yaml":true},{"content":"The filter is `null`.","nodes":[{"pos":[0,21],"content":"The filter is <ph id=\"ph1\">`null`</ph>.","source":"The filter is `null`."}],"pos":[264486,264508],"yaml":true},{"content":"Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.","nodes":[{"pos":[0,85],"content":"Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.","nodes":[{"content":"Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.","pos":[0,85],"nodes":[{"content":"Introduced in MSMQ 3.0.","pos":[0,23]},{"content":"Gets or sets the multicast address associated with the queue.","pos":[24,85]}]}]}],"pos":[265561,265647],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property is used to associate a non-transactional queue with a multicast address that can be used when sending messages. You cannot associate a transactional queue with a multicast address. When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.  \n  \n IP multicast addresses must be in the class D range from 224.0.0.0 to 239.255.255.255, which corresponds to setting the first four high-order bits equal to 1110. However, only certain ranges of addresses in this range are unreserved and available for sending multicast messages. For the latest list of reserved multicast addresses, see the [Internet Assigned Number Authority (IANA) Internet Multicast Addresses](http://go.microsoft.com/fwlink/?linkid=3859) Web page. There are no restrictions on the port number.  \n  \n If several source computers are sending multicast messages and you want a specific queue to receive messages from only one source computer, each source computer must send messages to a different combination of IP address and port number.  \n  \n To dissociate a queue from a multicast address, set the <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property to a zero-length string. Do not set it to `null`, as this will result in a <xref:System.ArgumentNullException>.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,407],"content":"The <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property is used to associate a non-transactional queue with a multicast address that can be used when sending messages. You cannot associate a transactional queue with a multicast address. When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property is used to associate a non-transactional queue with a multicast address that can be used when sending messages. You cannot associate a transactional queue with a multicast address. When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.","pos":[0,407],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MulticastAddress%2A&gt;</ph> property is used to associate a non-transactional queue with a multicast address that can be used when sending messages.","pos":[0,181],"source":"The <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property is used to associate a non-transactional queue with a multicast address that can be used when sending messages."},{"content":"You cannot associate a transactional queue with a multicast address.","pos":[182,250]},{"content":"When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.","pos":[251,407]}]}]},{"pos":[414,927],"content":"IP multicast addresses must be in the class D range from 224.0.0.0 to 239.255.255.255, which corresponds to setting the first four high-order bits equal to 1110. However, only certain ranges of addresses in this range are unreserved and available for sending multicast messages. For the latest list of reserved multicast addresses, see the [Internet Assigned Number Authority (IANA) Internet Multicast Addresses](http://go.microsoft.com/fwlink/?linkid=3859) Web page. There are no restrictions on the port number.","nodes":[{"content":"IP multicast addresses must be in the class D range from 224.0.0.0 to 239.255.255.255, which corresponds to setting the first four high-order bits equal to 1110.","pos":[0,161]},{"content":"However, only certain ranges of addresses in this range are unreserved and available for sending multicast messages.","pos":[162,278]},{"content":"For the latest list of reserved multicast addresses, see the <bpt id=\"p1\">[</bpt>Internet Assigned Number Authority (IANA) Internet Multicast Addresses<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=3859)</ept> Web page.","pos":[279,467],"source":" For the latest list of reserved multicast addresses, see the [Internet Assigned Number Authority (IANA) Internet Multicast Addresses](http://go.microsoft.com/fwlink/?linkid=3859) Web page."},{"content":"There are no restrictions on the port number.","pos":[468,513]}]},{"pos":[934,1171],"content":"If several source computers are sending multicast messages and you want a specific queue to receive messages from only one source computer, each source computer must send messages to a different combination of IP address and port number.","nodes":[{"content":"If several source computers are sending multicast messages and you want a specific queue to receive messages from only one source computer, each source computer must send messages to a different combination of IP address and port number.","pos":[0,237]}]},{"pos":[1178,1411],"content":"To dissociate a queue from a multicast address, set the <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property to a zero-length string. Do not set it to `null`, as this will result in a <xref:System.ArgumentNullException>.","nodes":[{"content":"To dissociate a queue from a multicast address, set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MulticastAddress%2A&gt;</ph> property to a zero-length string.","pos":[0,146],"source":"To dissociate a queue from a multicast address, set the <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property to a zero-length string."},{"content":"Do not set it to <ph id=\"ph1\">`null`</ph>, as this will result in a <ph id=\"ph2\">&lt;xref:System.ArgumentNullException&gt;</ph>.","pos":[147,233],"source":" Do not set it to `null`, as this will result in a <xref:System.ArgumentNullException>."}]},{"pos":[1418,1506],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1513,1527],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1528,1537],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1583,1597],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1598,1601],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1606,1643],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1644,1647],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1652,1667],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1668,1670],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1675,1713],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1714,1716],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[265658,267393],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains a valid multicast address (in the form shown below) or `null`, which indicates that the queue is not associated with a multicast address.  \n  \n```  \n<address>:<port>  \n```","nodes":[{"pos":[0,188],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains a valid multicast address (in the form shown below) or <ph id=\"ph2\">`null`</ph>, which indicates that the queue is not associated with a multicast address.","source":"A <xref href=\"System.String\"></xref> that contains a valid multicast address (in the form shown below) or `null`, which indicates that the queue is not associated with a multicast address."}],"pos":[267597,267828],"yaml":true},{"content":"MSMQ 3.0 is not installed.","nodes":[{"pos":[0,26],"content":"MSMQ 3.0 is not installed.","nodes":[{"content":"MSMQ 3.0 is not installed.","pos":[0,26]}]}],"pos":[268020,268047],"yaml":true},{"content":"Gets or sets the queue's path. Setting the <xref href=\"System.Messaging.MessageQueue.Path\"></xref> causes the <xref href=\"System.Messaging.MessageQueue\"></xref> to point to a new queue.","nodes":[{"pos":[0,185],"content":"Gets or sets the queue's path. Setting the <xref href=\"System.Messaging.MessageQueue.Path\"></xref> causes the <xref href=\"System.Messaging.MessageQueue\"></xref> to point to a new queue.","nodes":[{"content":"Gets or sets the queue's path.","pos":[0,30]},{"content":"Setting the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> causes the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> to point to a new queue.","pos":[31,185],"source":" Setting the <xref href=\"System.Messaging.MessageQueue.Path\"></xref> causes the <xref href=\"System.Messaging.MessageQueue\"></xref> to point to a new queue."}]}],"pos":[268939,269125],"yaml":true},{"content":"The syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue it points to, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Use \".\" to represent the local computer.  \n  \n The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue.  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.  \n  \n|Reference|Syntax|Example|  \n|---------------|------------|-------------|  \n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112|  \n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \n  \n If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.  \n  \n To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  \n  \n Setting a new path closes the message queue and releases all handles.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|  \n  \n> [!NOTE]\n>  In workgroup mode you can only use private queues. You specify the path using the private queue syntax `MachineName`\\\\`Private$`\\\\`QueueName`.","nodes":[{"pos":[0,148],"content":"The syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue it points to, as shown in the following table.","nodes":[{"content":"The syntax for the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property depends on the type of queue it points to, as shown in the following table.","pos":[0,148],"source":"The syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue it points to, as shown in the following table."}]},{"pos":[155,165],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[166,172],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[211,223],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[255,268],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[312,325],"content":"Journal queue","nodes":[{"content":"Journal queue","pos":[0,13]}]},{"pos":[369,390],"content":"Machine journal queue","nodes":[{"content":"Machine journal queue","pos":[0,21]}]},{"pos":[421,446],"content":"Machine dead-letter queue","nodes":[{"content":"Machine dead-letter queue","pos":[0,25]}]},{"pos":[480,519],"content":"Machine transactional dead-letter queue","nodes":[{"content":"Machine transactional dead-letter queue","pos":[0,39]}]},{"pos":[560,600],"content":"Use \".\" to represent the local computer.","nodes":[{"content":"Use \".\" to represent the local computer.","pos":[0,40]}]},{"pos":[607,1331],"content":"The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue.","pos":[0,724],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> properties are related.","pos":[0,180],"source":"The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related."},{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> property causes the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property to change.","pos":[181,330],"source":" Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change."},{"content":"It is built from the new <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph>.","pos":[331,466],"source":" It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>."},{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> (for example, to use the format name syntax) resets the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> properties to refer to the new queue.","pos":[467,724],"source":" Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue."}]}]},{"pos":[1338,1529],"content":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.","nodes":[{"content":"Alternatively, you can use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.FormatName%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> to describe the queue path, as shown in the following table.","pos":[0,191],"source":"Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table."}]},{"pos":[1536,1545],"content":"Reference","nodes":[{"content":"Reference","pos":[0,9]}]},{"pos":[1546,1552],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1553,1560],"content":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1612,1623],"content":"Format name","nodes":[{"content":"Format name","pos":[0,11]}]},{"pos":[1624,1655],"content":"<ph id=\"ph1\">`FormatName:`</ph> [ <bpt id=\"p1\">*</bpt>format name<ept id=\"p1\">*</ept> ]","source":"`FormatName:` [ *format name* ]"},{"pos":[1656,1713],"content":"<ph id=\"ph1\">`FormatName:Public=`</ph> 5A5F7535-AE9A-41d4-935C-845C2AFF7112","source":"`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112"},{"pos":[1718,1723],"content":"Label","nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[1724,1744],"content":"<ph id=\"ph1\">`Label:`</ph> [ <bpt id=\"p1\">*</bpt>label<ept id=\"p1\">*</ept> ]","source":"`Label:` [ *label* ]"},{"pos":[1745,1762],"content":"<ph id=\"ph1\">`Label:`</ph> TheLabel","source":"`Label:` TheLabel"},{"pos":[1770,1982],"content":"If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.","nodes":[{"content":"If you use the label syntax for the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property when you send the message, an exception will be thrown if the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> is not unique.","pos":[0,212],"source":"If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique."}]},{"pos":[1989,2264],"content":"To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.","nodes":[{"content":"To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.","pos":[0,275],"nodes":[{"content":"To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table.","pos":[0,110]},{"content":"Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.","pos":[111,275]}]}]},{"pos":[2271,2340],"content":"Setting a new path closes the message queue and releases all handles.","nodes":[{"content":"Setting a new path closes the message queue and releases all handles.","pos":[0,69]}]},{"pos":[2347,2435],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[2442,2456],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2457,2466],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2512,2526],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2527,2530],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2535,2572],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2573,2576],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2581,2596],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2597,2600],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2605,2643],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2644,2647],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2656,2809],"content":"[!NOTE]\n In workgroup mode you can only use private queues. You specify the path using the private queue syntax `MachineName`\\\\`Private$`\\\\`QueueName`.","leadings":["","> "],"nodes":[{"content":" In workgroup mode you can only use private queues. You specify the path using the private queue syntax `MachineName`\\\\`Private$`\\\\`QueueName`.","pos":[8,151],"nodes":[{"content":"In workgroup mode you can only use private queues.","pos":[1,51]},{"content":"You specify the path using the private queue syntax <ph id=\"ph1\">`MachineName`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`Private$`</ph><ph id=\"ph4\">\\\\</ph><ph id=\"ph5\">`QueueName`</ph>.","pos":[52,143],"source":" You specify the path using the private queue syntax `MachineName`\\\\`Private$`\\\\`QueueName`."}]}]}],"pos":[269136,272008],"yaml":true,"extradata":"MT"},{"content":"The queue that is referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. The default depends on which <xref href=\"System.Messaging.MessageQueue.#ctor\"></xref> constructor you use; it is either `null` or is specified by the constructor's <code>path</code> parameter.","nodes":[{"pos":[0,280],"content":"The queue that is referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. The default depends on which <xref href=\"System.Messaging.MessageQueue.#ctor\"></xref> constructor you use; it is either `null` or is specified by the constructor's <code>path</code> parameter.","nodes":[{"content":"The queue that is referenced by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,87],"source":"The queue that is referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"The default depends on which <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.#ctor\"&gt;&lt;/xref&gt;</ph> constructor you use; it is either <ph id=\"ph2\">`null`</ph> or is specified by the constructor's <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[88,280],"source":" The default depends on which <xref href=\"System.Messaging.MessageQueue.#ctor\"></xref> constructor you use; it is either `null` or is specified by the constructor's <code>path</code> parameter."}]}],"pos":[273000,273281],"yaml":true},{"content":"The path is not valid, possibly because the syntax is not valid.","nodes":[{"pos":[0,64],"content":"The path is not valid, possibly because the syntax is not valid.","nodes":[{"content":"The path is not valid, possibly because the syntax is not valid.","pos":[0,64]}]}],"pos":[273437,273502],"yaml":true},{"content":"Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available.","nodes":[{"pos":[0,284],"content":"Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available.","nodes":[{"content":"Returns without removing (peeks) the first message in the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,134],"source":"Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Peek\"&gt;&lt;/xref&gt;</ph> method is synchronous, so it blocks the current thread until a message becomes available.","pos":[135,284],"source":" The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available."}]}],"pos":[274542,274827],"yaml":true},{"content":"Use this overload to peek a queue, or to wait until a message exists in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.  \n  \n Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.  \n  \n Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload does not specify a time-out, the application might wait indefinitely. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method. Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of <xref:System.Messaging.MessageQueue.Peek%2A> that specifies a time-out.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,82],"content":"Use this overload to peek a queue, or to wait until a message exists in the queue.","nodes":[{"content":"Use this overload to peek a queue, or to wait until a message exists in the queue.","pos":[0,82]}]},{"pos":[89,601],"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.","pos":[0,512],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method reads, but does not remove, the first message from the queue.","pos":[0,117],"source":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue."},{"content":"Therefore, repeated calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> return the same message, unless a higher priority message arrives in the queue.","pos":[118,271],"source":" Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, on the other hand, both reads and removes the first message from the queue.","pos":[272,407],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue."},{"content":"Repeated calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, therefore, return different messages.","pos":[408,512],"source":" Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages."}]}]},{"pos":[608,774],"content":"Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.","nodes":[{"content":"Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.","pos":[0,166],"nodes":[{"content":"Message Queuing orders messages in the queue according to priority and arrival time.","pos":[0,84]},{"content":"A newer message is placed before an older one only if it is of a higher priority.","pos":[85,166]}]}]},{"pos":[781,1356],"content":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload does not specify a time-out, the application might wait indefinitely. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method. Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of <xref:System.Messaging.MessageQueue.Peek%2A> that specifies a time-out.","nodes":[{"content":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload does not specify a time-out, the application might wait indefinitely. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method. Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of <xref:System.Messaging.MessageQueue.Peek%2A> that specifies a time-out.","pos":[0,575],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,160],"source":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"Because this overload does not specify a time-out, the application might wait indefinitely.","pos":[161,252]},{"content":"If you need the application processing to continue without waiting, use the asynchronous <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method.","pos":[253,399],"source":" If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method."},{"content":"Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> that specifies a time-out.","pos":[400,575],"source":" Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of <xref:System.Messaging.MessageQueue.Peek%2A> that specifies a time-out."}]}]},{"pos":[1363,1449],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1456,1470],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1471,1480],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1526,1540],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1541,1544],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1549,1586],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1587,1590],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1595,1610],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1611,1613],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1618,1656],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1657,1660],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[274838,276517],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message\"></xref> that represents the first message in the queue.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that represents the first message in the queue.","source":"The <xref href=\"System.Messaging.Message\"></xref> that represents the first message in the queue."}],"pos":[277651,277749],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[277933,277992],"yaml":true},{"content":"Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.","nodes":[{"pos":[0,317],"content":"Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.","nodes":[{"content":"Returns without removing (peeks) the first message in the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,134],"source":"Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Peek\"&gt;&lt;/xref&gt;</ph> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.","pos":[135,317],"source":" The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs."}]}],"pos":[278930,279248],"yaml":true},{"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.  \n  \n Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.  \n  \n Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,182],"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.","nodes":[{"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.","pos":[0,182],"nodes":[{"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue.","pos":[0,109]},{"content":"The method returns immediately if a message already exists in the queue.","pos":[110,182]}]}]},{"pos":[189,701],"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.","pos":[0,512],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method reads, but does not remove, the first message from the queue.","pos":[0,117],"source":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue."},{"content":"Therefore, repeated calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> return the same message, unless a higher priority message arrives in the queue.","pos":[118,271],"source":" Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, on the other hand, both reads and removes the first message from the queue.","pos":[272,407],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue."},{"content":"Repeated calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, therefore, return different messages.","pos":[408,512],"source":" Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages."}]}]},{"pos":[708,874],"content":"Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.","nodes":[{"content":"Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.","pos":[0,166],"nodes":[{"content":"Message Queuing orders messages in the queue according to priority and arrival time.","pos":[0,84]},{"content":"A newer message is placed before an older one only if it is of a higher priority.","pos":[85,166]}]}]},{"pos":[881,1338],"content":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.","nodes":[{"content":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.","pos":[0,457],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,160],"source":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"The thread will be blocked up to the specified period of time, or indefinitely if you indicated <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph>.","pos":[161,310],"source":" The thread will be blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>."},{"content":"If you need the application processing to continue without waiting, use the asynchronous <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method.","pos":[311,457],"source":" If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method."}]}]},{"pos":[1345,1431],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1438,1452],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1453,1462],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1508,1522],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1523,1526],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1531,1568],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1569,1572],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1577,1592],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1593,1595],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1600,1638],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1639,1642],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[279259,280920],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the maximum time to wait for the queue to contain a message.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the maximum time to wait for the queue to contain a message.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the maximum time to wait for the queue to contain a message."}],"pos":[281679,281794],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> that represents the first message in the queue.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that represents the first message in the queue.","source":"The <xref href=\"System.Messaging.Message\"></xref> that represents the first message in the queue."}],"pos":[281862,281960],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[282116,282358],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[282480,282539],"yaml":true},{"content":"Returns without removing (peeks) the current or next message in the queue, using the specified cursor. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.","nodes":[{"pos":[0,285],"content":"Returns without removing (peeks) the current or next message in the queue, using the specified cursor. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.","nodes":[{"content":"Returns without removing (peeks) the current or next message in the queue, using the specified cursor.","pos":[0,102]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Peek\"&gt;&lt;/xref&gt;</ph> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.","pos":[103,285],"source":" The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs."}]}],"pos":[283693,283979],"yaml":true},{"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, a message from the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes a message from the queue.  \n  \n Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,182],"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.","nodes":[{"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.","pos":[0,182],"nodes":[{"content":"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue.","pos":[0,109]},{"content":"The method returns immediately if a message already exists in the queue.","pos":[110,182]}]}]},{"pos":[189,426],"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, a message from the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes a message from the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, a message from the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes a message from the queue.","pos":[0,237],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method reads, but does not remove, a message from the queue.","pos":[0,109],"source":"The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, a message from the queue."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method, on the other hand, both reads and removes a message from the queue.","pos":[110,237],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes a message from the queue."}]}]},{"pos":[433,885],"content":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.","nodes":[{"content":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.","pos":[0,452],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,160],"source":"Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"The thread is blocked up to the specified period of time, or indefinitely if you indicated <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph>.","pos":[161,305],"source":" The thread is blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>."},{"content":"If you need the application processing to continue without waiting, use the asynchronous <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> method.","pos":[306,452],"source":" If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method."}]}]},{"pos":[892,978],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[985,999],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1000,1009],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1055,1069],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1070,1073],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1078,1115],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1116,1119],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1124,1139],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1140,1142],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1147,1185],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1186,1189],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[283990,285196],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the maximum time to wait for the queue to contain a message.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the maximum time to wait for the queue to contain a message.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the maximum time to wait for the queue to contain a message."}],"pos":[285425,285540],"yaml":true},{"content":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> that maintains a specific position in the message queue.","source":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue."}],"pos":[285612,285716],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.PeekAction\"></xref> values. Indicates whether to peek at the current message in the queue, or the next message.","nodes":[{"pos":[0,151],"content":"One of the <xref href=\"System.Messaging.PeekAction\"></xref> values. Indicates whether to peek at the current message in the queue, or the next message.","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.PeekAction\"&gt;&lt;/xref&gt;</ph> values.","pos":[0,67],"source":"One of the <xref href=\"System.Messaging.PeekAction\"></xref> values."},{"content":"Indicates whether to peek at the current message in the queue, or the next message.","pos":[68,151]}]}],"pos":[285792,285944],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that represents a message in the queue.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that represents a message in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that represents a message in the queue."}],"pos":[286012,286100],"yaml":true},{"content":"A value other than `PeekAction.Current` or `PeekAction.Next` was specified for the <code>action</code> parameter.","nodes":[{"pos":[0,113],"content":"A value other than <ph id=\"ph1\">`PeekAction.Current`</ph> or <ph id=\"ph2\">`PeekAction.Next`</ph> was specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A value other than `PeekAction.Current` or `PeekAction.Next` was specified for the <code>action</code> parameter."}],"pos":[286276,286390],"yaml":true},{"content":"The <code>cursor</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cursor</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>cursor</code> parameter is `null`."}],"pos":[286492,286537],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","pos":[0,72],"source":"The value specified for the <code>timeout</code> parameter is not valid."},{"content":"Possibly <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","pos":[73,241],"source":" Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}]}],"pos":[286631,286873],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[286995,287054],"yaml":true},{"content":"Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"pos":[0,186],"content":"Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"content":"Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","pos":[0,186]}]}],"pos":[288032,288219],"yaml":true},{"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,294],"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown.","nodes":[{"content":"This method looks in the queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,203],"source":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"If no message is found that matches the <ph id=\"ph1\">`correlationID`</ph> parameter, an exception is thrown.","pos":[204,294],"source":" If no message is found that matches the `correlationID` parameter, an exception is thrown."}]},{"pos":[301,465],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[472,771],"content":"Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","pos":[0,299],"nodes":[{"content":"Two other methods allow you to peek messages in a queue.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method is used to retrieve a message by specifying its unique identifier.","pos":[57,299],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier."}]}]},{"pos":[778,864],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[871,885],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[886,895],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[941,955],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[956,959],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[964,1001],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1002,1005],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1010,1025],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1026,1028],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1033,1071],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1072,1075],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[288230,289322],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to peek.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to peek.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to peek."}],"pos":[290178,290266],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[290334,290510],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."}],"pos":[290689,290741],"yaml":true},{"content":"The message with the specified <code>correlationId</code> could not be found.","nodes":[{"pos":[0,77],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>correlationId</code> could not be found."}],"pos":[290851,290929],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[291051,291110],"yaml":true},{"content":"Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"pos":[0,190],"content":"Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"content":"Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","pos":[0,190]}]}],"pos":[292204,292395],"yaml":true},{"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, and no new message arrives in the queue within the period specified by the `timeout` parameter, an exception is thrown.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,390],"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, and no new message arrives in the queue within the period specified by the `timeout` parameter, an exception is thrown.","nodes":[{"content":"This method looks in the queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,203],"source":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"If no message is found that matches the <ph id=\"ph1\">`correlationID`</ph> parameter, and no new message arrives in the queue within the period specified by the <ph id=\"ph2\">`timeout`</ph> parameter, an exception is thrown.","pos":[204,390],"source":" If no message is found that matches the `correlationID` parameter, and no new message arrives in the queue within the period specified by the `timeout` parameter, an exception is thrown."}]},{"pos":[397,1168],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[161,338],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[339,435]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[436,771],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter."}]},{"pos":[1175,1339],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[1346,1645],"content":"Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","pos":[0,299],"nodes":[{"content":"Two other methods allow you to peek messages in a queue.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method is used to retrieve a message by specifying its unique identifier.","pos":[57,299],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier."}]}]},{"pos":[1652,1738],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1745,1759],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1760,1769],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1815,1829],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1830,1833],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1838,1875],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1876,1879],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1884,1899],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1900,1902],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1907,1945],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1946,1949],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[292406,294374],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to peek.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to peek.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to peek."}],"pos":[294963,295051],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[295116,295236],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[295304,295480],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."}],"pos":[295659,295711],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[295805,296047],"yaml":true},{"content":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.","nodes":[{"pos":[0,133],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the queue and did not arrive before the time-out expired.","source":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired."}],"pos":[296157,296291],"yaml":true},{"content":"A message did not arrive before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,53],"content":"A message did not arrive before the time-out expired.","nodes":[{"content":"A message did not arrive before the time-out expired.","pos":[0,53]}]},{"pos":[60,64],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[71,129],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[296413,296549],"yaml":true},{"content":"Peeks the message whose message identifier matches the <code>id</code> parameter.","nodes":[{"pos":[0,81],"content":"Peeks the message whose message identifier matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"Peeks the message whose message identifier matches the <code>id</code> parameter."}],"pos":[297499,297581],"yaml":true},{"content":"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message.  \n  \n Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,410],"content":"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> to read, without removing from the queue, a message that has a known message identifier.","pos":[0,157],"source":"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier."},{"content":"The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph1\">`id`</ph> parameter.","pos":[158,323],"source":" The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"content":"This overload throws an exception if the queue does not currently contain the message.","pos":[324,410]}]},{"pos":[417,914],"content":"Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,497],"nodes":[{"content":"Two additional methods allow you to peek messages in a queue: <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph>.","pos":[0,187],"source":"Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method returns the first message in the queue; <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[188,497],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[921,1007],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1014,1028],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1029,1038],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1084,1098],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1099,1102],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1107,1144],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1145,1148],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1153,1168],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1169,1171],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1176,1214],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1215,1218],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[297592,298825],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to peek.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to peek.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to peek."}],"pos":[299334,299411],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter.","nodes":[{"pos":[0,152],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter."}],"pos":[299479,299632],"yaml":true},{"content":"The <code>id</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."}],"pos":[299800,299841],"yaml":true},{"content":"No message with the specified <code>id</code> exists.","nodes":[{"pos":[0,53],"content":"No message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> exists.","source":"No message with the specified <code>id</code> exists."}],"pos":[299951,300005],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[300127,300186],"yaml":true},{"content":"Peeks the message whose message identifier matches the <code>id</code> parameter. Waits until the message appears in the queue or a time-out occurs.","nodes":[{"pos":[0,148],"content":"Peeks the message whose message identifier matches the <code>id</code> parameter. Waits until the message appears in the queue or a time-out occurs.","nodes":[{"content":"Peeks the message whose message identifier matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[0,81],"source":"Peeks the message whose message identifier matches the <code>id</code> parameter."},{"content":"Waits until the message appears in the queue or a time-out occurs.","pos":[82,148]}]}],"pos":[301214,301363],"yaml":true},{"content":"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message and a new message does not arrive before the time-out occurs.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \n  \n Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,471],"content":"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message and a new message does not arrive before the time-out occurs.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> to read, without removing from the queue, a message that has a known message identifier.","pos":[0,157],"source":"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier."},{"content":"The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph1\">`id`</ph> parameter.","pos":[158,323],"source":" The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"content":"This overload throws an exception if the queue does not currently contain the message and a new message does not arrive before the time-out occurs.","pos":[324,471]}]},{"pos":[478,1205],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[161,316],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[317,413]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[414,727],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter."}]},{"pos":[1212,1709],"content":"Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,497],"nodes":[{"content":"Two additional methods allow you to peek messages in a queue: <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph>.","pos":[0,187],"source":"Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method returns the first message in the queue; <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[188,497],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[1716,1802],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1809,1823],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1824,1833],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1879,1893],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1894,1897],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1902,1939],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1940,1943],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1948,1963],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1964,1966],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1971,2009],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2010,2013],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[301374,303404],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to peek.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to peek.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to peek."}],"pos":[303949,304026],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[304091,304211],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter.","nodes":[{"pos":[0,152],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter."}],"pos":[304279,304432],"yaml":true},{"content":"The <code>id</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."}],"pos":[304600,304641],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[304735,304977],"yaml":true},{"content":"The message with the specified <code>id</code> does not exist in the queue and did not arrive before the period specified by the <code>timeout</code> parameter expired.","nodes":[{"pos":[0,168],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the queue and did not arrive before the period specified by the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter expired.","source":"The message with the specified <code>id</code> does not exist in the queue and did not arrive before the period specified by the <code>timeout</code> parameter expired."}],"pos":[305087,305256],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[305378,305437],"yaml":true},{"content":"Introduced in MSMQ 3.0. Peeks at the message that matches the given lookup identifier from a non-transactional queue.","nodes":[{"pos":[0,117],"content":"Introduced in MSMQ 3.0. Peeks at the message that matches the given lookup identifier from a non-transactional queue.","nodes":[{"content":"Introduced in MSMQ 3.0. Peeks at the message that matches the given lookup identifier from a non-transactional queue.","pos":[0,117],"nodes":[{"content":"Introduced in MSMQ 3.0.","pos":[0,23]},{"content":"Peeks at the message that matches the given lookup identifier from a non-transactional queue.","pos":[24,117]}]}]}],"pos":[306417,306535],"yaml":true},{"content":"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.  \n  \n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \n  \n To read a message with a specified lookup identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,180],"content":"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.","nodes":[{"content":"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.","pos":[0,180],"nodes":[{"content":"Use this method to read a message with a known lookup identifier without removing it from the queue.","pos":[0,100]},{"content":"This method throws an exception immediately if the message is not in the queue.","pos":[101,180]}]}]},{"pos":[187,401],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.LookupId%2A&gt;</ph> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`lookupId`</ph> parameter.","source":"The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter."},{"pos":[408,564],"content":"To read a message with a specified lookup identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.","nodes":[{"content":"To read a message with a specified lookup identifier and remove it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A&gt;</ph> method.","pos":[0,156],"source":"To read a message with a specified lookup identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method."}]},{"pos":[571,657],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[664,678],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[679,688],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[734,748],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[749,752],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[757,794],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[795,798],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[803,818],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[819,821],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[826,864],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[865,868],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[306546,307431],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to peek at.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.LookupId\"&gt;&lt;/xref&gt;</ph> of the message to peek at.","source":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to peek at."}],"pos":[307597,307683],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.LookupId\"></xref> property matches the <code>lookupId</code> parameter passed in.","nodes":[{"pos":[0,174],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.LookupId\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.LookupId\"></xref> property matches the <code>lookupId</code> parameter passed in."}],"pos":[307751,307926],"yaml":true},{"content":"MSMQ 3.0 is not installed.","nodes":[{"pos":[0,26],"content":"MSMQ 3.0 is not installed.","nodes":[{"content":"MSMQ 3.0 is not installed.","pos":[0,26]}]}],"pos":[308116,308143],"yaml":true},{"content":"The message with the specified <code>lookupId</code> could not be found.","nodes":[{"pos":[0,72],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>lookupId</code> could not be found."}],"pos":[308253,308326],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[308448,308507],"yaml":true},{"content":"Introduced in MSMQ 3.0. Peeks at a specific message from the queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","nodes":[{"pos":[0,172],"content":"Introduced in MSMQ 3.0. Peeks at a specific message from the queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","nodes":[{"content":"Introduced in MSMQ 3.0. Peeks at a specific message from the queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","pos":[0,172],"nodes":[{"content":"Introduced in MSMQ 3.0.","pos":[0,23]},{"content":"Peeks at a specific message from the queue.","pos":[24,67]},{"content":"The message can be specified by a lookup identifier or by its position at the front or end of the queue.","pos":[68,172]}]}]}],"pos":[309623,309796],"yaml":true},{"content":"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.  \n  \n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \n  \n To read a message with a specified identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,180],"content":"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.","nodes":[{"content":"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.","pos":[0,180],"nodes":[{"content":"Use this method to read a message with a known lookup identifier without removing it from the queue.","pos":[0,100]},{"content":"This method throws an exception immediately if the message is not in the queue.","pos":[101,180]}]}]},{"pos":[187,401],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.LookupId%2A&gt;</ph> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`lookupId`</ph> parameter.","source":"The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter."},{"pos":[408,557],"content":"To read a message with a specified identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.","nodes":[{"content":"To read a message with a specified identifier and remove it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A&gt;</ph> method.","pos":[0,149],"source":"To read a message with a specified identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method."}]},{"pos":[564,650],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[657,671],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[672,681],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[727,741],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[742,745],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[750,787],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[788,791],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[796,811],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[812,814],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[819,857],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[858,861],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[309807,310685],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue. Specify one of the following:  \n  \n `MessageLookupAction.Current`: Peeks at the message specified by <code>lookupId</code>.  \n  \n `MessageLookupAction.Next`: Peeks at the message following the message specified by <code>lookupId</code>.  \n  \n `MessageLookupAction.Previous`: Peeks at the message preceding the message specified by <code>lookupId</code>.  \n  \n `MessageLookupAction.First`: Peeks at the first message in the queue. The <code>lookupId</code> parameter must be set to 0.  \n  \n `MessageLookupAction.Last`: Peeks at the last message in the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"pos":[0,155],"content":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue. Specify one of the following:","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageLookupAction\"&gt;&lt;/xref&gt;</ph> values, specifying how the message is read in the queue.","pos":[0,125],"source":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue."},{"content":"Specify one of the following:","pos":[126,155]}]},{"pos":[162,249],"content":"<ph id=\"ph1\">`MessageLookupAction.Current`</ph>: Peeks at the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"`MessageLookupAction.Current`: Peeks at the message specified by <code>lookupId</code>."},{"pos":[256,362],"content":"<ph id=\"ph1\">`MessageLookupAction.Next`</ph>: Peeks at the message following the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"`MessageLookupAction.Next`: Peeks at the message following the message specified by <code>lookupId</code>."},{"pos":[369,479],"content":"<ph id=\"ph1\">`MessageLookupAction.Previous`</ph>: Peeks at the message preceding the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"`MessageLookupAction.Previous`: Peeks at the message preceding the message specified by <code>lookupId</code>."},{"pos":[486,609],"content":"`MessageLookupAction.First`: Peeks at the first message in the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"content":"<ph id=\"ph1\">`MessageLookupAction.First`</ph>: Peeks at the first message in the queue.","pos":[0,69],"source":"`MessageLookupAction.First`: Peeks at the first message in the queue."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter must be set to 0.","pos":[70,123],"source":" The <code>lookupId</code> parameter must be set to 0."}]},{"pos":[616,737],"content":"`MessageLookupAction.Last`: Peeks at the last message in the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"content":"<ph id=\"ph1\">`MessageLookupAction.Last`</ph>: Peeks at the last message in the queue.","pos":[0,67],"source":"`MessageLookupAction.Last`: Peeks at the last message in the queue."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter must be set to 0.","pos":[68,121],"source":" The <code>lookupId</code> parameter must be set to 0."}]}],"pos":[310918,311670],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to peek at, or 0. 0 is used when accessing the first or last message in the queue.","nodes":[{"pos":[0,156],"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to peek at, or 0. 0 is used when accessing the first or last message in the queue.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.LookupId\"&gt;&lt;/xref&gt;</ph> of the message to peek at, or 0.","pos":[0,91],"source":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to peek at, or 0."},{"content":"0 is used when accessing the first or last message in the queue.","pos":[92,156]}]}],"pos":[311733,311890],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>action</code> and <code>lookupId</code> parameters passed in.","nodes":[{"pos":[0,134],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">lookupId</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>action</code> and <code>lookupId</code> parameters passed in."}],"pos":[311958,312093],"yaml":true},{"content":"MSMQ 3.0 is not installed.","nodes":[{"pos":[0,26],"content":"MSMQ 3.0 is not installed.","nodes":[{"content":"MSMQ 3.0 is not installed.","pos":[0,26]}]}],"pos":[312283,312310],"yaml":true},{"content":"The message with the specified <code>lookupId</code> could not be found.","nodes":[{"pos":[0,72],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>lookupId</code> could not be found."}],"pos":[312420,312493],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[312615,312674],"yaml":true},{"content":"The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members.","nodes":[{"pos":[0,118],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageLookupAction\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members."}],"pos":[312820,312939],"yaml":true},{"content":"Occurs when a message is read without being removed from the queue. This is a result of the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginPeek\"></xref>.","nodes":[{"pos":[0,177],"content":"Occurs when a message is read without being removed from the queue. This is a result of the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginPeek\"></xref>.","nodes":[{"content":"Occurs when a message is read without being removed from the queue.","pos":[0,67]},{"content":"This is a result of the asynchronous operation, <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.BeginPeek\"&gt;&lt;/xref&gt;</ph>.","pos":[68,177],"source":" This is a result of the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginPeek\"></xref>."}]}],"pos":[313811,313989],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message is available in the queue.  \n  \n <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> and peek the message when the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised.  \n  \n When you create a <xref:System.Messaging.PeekCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).","nodes":[{"pos":[0,196],"content":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message is available in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> is used in asynchronous processing to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event when a message is available in the queue.","pos":[0,196],"source":"<xref:System.Messaging.MessageQueue.BeginPeek%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message is available in the queue."}]},{"pos":[203,477],"content":"<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> and peek the message when the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph> is used to complete the operation initiated by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> and peek the message when the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event is raised.","pos":[0,274],"source":"<xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> and peek the message when the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised."}]},{"pos":[484,949],"content":"When you create a <xref:System.Messaging.PeekCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).","nodes":[{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Messaging.PeekCompletedEventHandler&gt;</ph> delegate, you identify the method that will handle the event.","pos":[0,129],"source":"When you create a <xref:System.Messaging.PeekCompletedEventHandler> delegate, you identify the method that will handle the event."},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[130,223]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[224,310]},{"content":"For more information about event handler delegates, see <bpt id=\"p1\">[</bpt>NIB: Events and Delegates<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)</ept>.","pos":[311,465],"source":" For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."}]}],"pos":[314000,314956],"yaml":true,"extradata":"MT"},{"content":"Deletes all the messages contained in the queue.","nodes":[{"pos":[0,48],"content":"Deletes all the messages contained in the queue.","nodes":[{"content":"Deletes all the messages contained in the queue.","pos":[0,48]}]}],"pos":[317262,317311],"yaml":true},{"content":"Purging the queue causes Message Queuing to set the queue modification flag, which affects the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property. Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,274],"content":"Purging the queue causes Message Queuing to set the queue modification flag, which affects the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property. Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.","nodes":[{"content":"Purging the queue causes Message Queuing to set the queue modification flag, which affects the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property. Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.","pos":[0,274],"nodes":[{"content":"Purging the queue causes Message Queuing to set the queue modification flag, which affects the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.LastModifyTime%2A&gt;</ph> property.","pos":[0,159],"source":"Purging the queue causes Message Queuing to set the queue modification flag, which affects the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property."},{"content":"Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.","pos":[160,274]}]}]},{"pos":[281,367],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[374,388],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[389,398],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[444,458],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[459,462],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[467,504],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[505,508],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[513,528],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[529,531],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[536,574],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[575,578],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[317322,317913],"yaml":true,"extradata":"MT"},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[318505,318564],"yaml":true},{"content":"Gets or sets the friendly name that identifies the queue.","nodes":[{"pos":[0,57],"content":"Gets or sets the friendly name that identifies the queue.","nodes":[{"content":"Gets or sets the friendly name that identifies the queue.","pos":[0,57]}]}],"pos":[319453,319511],"yaml":true},{"content":"You can combine the <xref:System.Messaging.MessageQueue.QueueName%2A> with the <xref:System.Messaging.MessageQueue.MachineName%2A> to create a friendly <xref:System.Messaging.MessageQueue.Path%2A> name for the queue. The syntax for the friendly name variation of the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n  \n Use \".\" to represent the local computer.  \n  \n Changing the <xref:System.Messaging.MessageQueue.QueueName%2A> property affects the <xref:System.Messaging.MessageQueue.Path%2A> property. If you set the <xref:System.Messaging.MessageQueue.QueueName%2A> without setting the <xref:System.Messaging.MessageQueue.MachineName%2A> property, the <xref:System.Messaging.MessageQueue.Path%2A> property becomes .\\\\`QueueName`. Otherwise, the <xref:System.Messaging.MessageQueue.Path%2A> becomes `MachineName`\\\\`QueueName`.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,383],"content":"You can combine the <xref:System.Messaging.MessageQueue.QueueName%2A> with the <xref:System.Messaging.MessageQueue.MachineName%2A> to create a friendly <xref:System.Messaging.MessageQueue.Path%2A> name for the queue. The syntax for the friendly name variation of the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue, as shown in the following table.","nodes":[{"content":"You can combine the <xref:System.Messaging.MessageQueue.QueueName%2A> with the <xref:System.Messaging.MessageQueue.MachineName%2A> to create a friendly <xref:System.Messaging.MessageQueue.Path%2A> name for the queue. The syntax for the friendly name variation of the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue, as shown in the following table.","pos":[0,383],"nodes":[{"content":"You can combine the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> to create a friendly <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> name for the queue.","pos":[0,216],"source":"You can combine the <xref:System.Messaging.MessageQueue.QueueName%2A> with the <xref:System.Messaging.MessageQueue.MachineName%2A> to create a friendly <xref:System.Messaging.MessageQueue.Path%2A> name for the queue."},{"content":"The syntax for the friendly name variation of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property depends on the type of queue, as shown in the following table.","pos":[217,383],"source":" The syntax for the friendly name variation of the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue, as shown in the following table."}]}]},{"pos":[390,400],"content":"Queue type","nodes":[{"content":"Queue type","pos":[0,10]}]},{"pos":[401,407],"content":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[446,458],"content":"Public queue","nodes":[{"content":"Public queue","pos":[0,12]}]},{"pos":[490,503],"content":"Private queue","nodes":[{"content":"Private queue","pos":[0,13]}]},{"pos":[547,560],"content":"Journal queue","nodes":[{"content":"Journal queue","pos":[0,13]}]},{"pos":[607,647],"content":"Use \".\" to represent the local computer.","nodes":[{"content":"Use \".\" to represent the local computer.","pos":[0,40]}]},{"pos":[654,1117],"content":"Changing the <xref:System.Messaging.MessageQueue.QueueName%2A> property affects the <xref:System.Messaging.MessageQueue.Path%2A> property. If you set the <xref:System.Messaging.MessageQueue.QueueName%2A> without setting the <xref:System.Messaging.MessageQueue.MachineName%2A> property, the <xref:System.Messaging.MessageQueue.Path%2A> property becomes .\\\\`QueueName`. Otherwise, the <xref:System.Messaging.MessageQueue.Path%2A> becomes `MachineName`\\\\`QueueName`.","nodes":[{"content":"Changing the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> property affects the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property.","pos":[0,138],"source":"Changing the <xref:System.Messaging.MessageQueue.QueueName%2A> property affects the <xref:System.Messaging.MessageQueue.Path%2A> property."},{"content":"If you set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.QueueName%2A&gt;</ph> without setting the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.MachineName%2A&gt;</ph> property, the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property becomes .<ph id=\"ph4\">\\\\</ph><ph id=\"ph5\">`QueueName`</ph>.","pos":[139,367],"source":" If you set the <xref:System.Messaging.MessageQueue.QueueName%2A> without setting the <xref:System.Messaging.MessageQueue.MachineName%2A> property, the <xref:System.Messaging.MessageQueue.Path%2A> property becomes .\\\\`QueueName`."},{"content":"Otherwise, the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> becomes <ph id=\"ph2\">`MachineName`</ph><ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">`QueueName`</ph>.","pos":[368,463],"source":" Otherwise, the <xref:System.Messaging.MessageQueue.Path%2A> becomes `MachineName`\\\\`QueueName`."}]},{"pos":[1124,1212],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1219,1233],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1234,1243],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1289,1303],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1304,1307],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1312,1349],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1350,1353],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1358,1373],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1374,1377],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1382,1420],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1421,1423],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[319522,320984],"yaml":true,"extradata":"MT"},{"content":"The name that identifies the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The value cannot be `null`.","nodes":[{"pos":[0,133],"content":"The name that identifies the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The value cannot be `null`.","nodes":[{"content":"The name that identifies the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,105],"source":"The name that identifies the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"The value cannot be <ph id=\"ph1\">`null`</ph>.","pos":[106,133],"source":" The value cannot be `null`."}]}],"pos":[321488,321622],"yaml":true},{"content":"The queue name is `null`.","nodes":[{"pos":[0,25],"content":"The queue name is <ph id=\"ph1\">`null`</ph>.","source":"The queue name is `null`."}],"pos":[321783,321809],"yaml":true},{"content":"Gets the native handle used to read messages from the message queue.","nodes":[{"pos":[0,68],"content":"Gets the native handle used to read messages from the message queue.","nodes":[{"content":"Gets the native handle used to read messages from the message queue.","pos":[0,68]}]}],"pos":[322826,322895],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.ReadHandle%2A> provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue. If you change the path of the queue, the handle is closed and reopened with a new value.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,268],"content":"The <xref:System.Messaging.MessageQueue.ReadHandle%2A> provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue. If you change the path of the queue, the handle is closed and reopened with a new value.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.ReadHandle%2A> provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue. If you change the path of the queue, the handle is closed and reopened with a new value.","pos":[0,268],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReadHandle%2A&gt;</ph> provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue.","pos":[0,179],"source":"The <xref:System.Messaging.MessageQueue.ReadHandle%2A> provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue."},{"content":"If you change the path of the queue, the handle is closed and reopened with a new value.","pos":[180,268]}]}]},{"pos":[275,363],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[370,384],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[385,394],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[440,454],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[455,458],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[463,500],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[501,504],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[509,524],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[525,527],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[532,570],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[571,574],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[322906,323493],"yaml":true,"extradata":"MT"},{"content":"A handle to the native queue object that you use for peeking and receiving messages from the queue.","nodes":[{"pos":[0,99],"content":"A handle to the native queue object that you use for peeking and receiving messages from the queue.","nodes":[{"content":"A handle to the native queue object that you use for peeking and receiving messages from the queue.","pos":[0,99]}]}],"pos":[323728,323828],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[324018,324077],"yaml":true},{"content":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.","nodes":[{"pos":[0,218],"content":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.","nodes":[{"content":"Receives the first message available in the queue referenced by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,119],"source":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"This call is synchronous, and blocks the current thread of execution until a message is available.","pos":[120,218]}]}],"pos":[325080,325299],"yaml":true},{"content":"Use this overload to receive a message from a queue, or wait until there are messages in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.  \n  \n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,99],"content":"Use this overload to receive a message from a queue, or wait until there are messages in the queue.","nodes":[{"content":"Use this overload to receive a message from a queue, or wait until there are messages in the queue.","pos":[0,99]}]},{"pos":[106,402],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.","pos":[0,296],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, thereby removing it from the queue.","pos":[0,143],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> will return the messages that follow in the queue, or new, higher priority messages.","pos":[144,296],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages."}]}]},{"pos":[409,758],"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[0,349],"nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,133],"source":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[134,349],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."}]}]},{"pos":[765,1268],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","pos":[0,503],"nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"Because this overload of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method specifies an infinite time-out, the application might wait indefinitely.","pos":[174,330],"source":" Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely."},{"content":"If the application processing should continue without waiting for the message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[331,503],"source":" If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]}]},{"pos":[1275,1361],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1368,1382],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1383,1392],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1438,1452],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1453,1456],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1461,1498],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1499,1502],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1507,1522],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1523,1525],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1530,1568],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1569,1572],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[325310,326901],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[327648,327754],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[327941,328000],"yaml":true},{"content":"Receives the first message available in the transactional queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.","nodes":[{"pos":[0,232],"content":"Receives the first message available in the transactional queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.","nodes":[{"content":"Receives the first message available in the transactional queue referenced by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,133],"source":"Receives the first message available in the transactional queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"This call is synchronous, and blocks the current thread of execution until a message is available.","pos":[134,232]}]}],"pos":[329076,329309],"yaml":true},{"content":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, or wait until there are messages in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \n  \n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,191],"content":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the <ph id=\"ph1\">`transaction`</ph> parameter, or wait until there are messages in the queue.","source":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, or wait until there are messages in the queue."},{"pos":[198,460],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","pos":[0,262],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, thereby removing it from the queue.","pos":[0,143],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> will return the messages that follow in the queue.","pos":[144,262],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue."}]}]},{"pos":[467,703],"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,236],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,146]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[147,236]}]}]},{"pos":[710,1388],"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","pos":[0,678],"nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,133],"source":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[134,349],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>.","pos":[350,475],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>.","pos":[476,678],"source":" Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>."}]}]},{"pos":[1395,1898],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","pos":[0,503],"nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"Because this overload of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method specifies an infinite time-out, the application might wait indefinitely.","pos":[174,330],"source":" Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely."},{"content":"If the application processing should continue without waiting for the message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[331,503],"source":" If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]}]},{"pos":[1905,1991],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1998,2012],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2013,2022],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2068,2082],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2083,2086],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2091,2128],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2129,2132],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2137,2152],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2153,2155],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2160,2198],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2199,2202],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[329320,331543],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[332556,332630],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[332698,332804],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.  \n  \n -or-  \n  \n The queue is non-transactional.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,107],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]}],"pos":[332991,333105],"yaml":true},{"content":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.","nodes":[{"pos":[0,218],"content":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.","nodes":[{"content":"Receives the first message available in the queue referenced by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,119],"source":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"This call is synchronous, and blocks the current thread of execution until a message is available.","pos":[120,218]}]}],"pos":[334205,334424],"yaml":true},{"content":"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, or wait until there are messages in the queue.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,170],"content":"Use this overload to receive a message from a queue using a transaction context defined by the <ph id=\"ph1\">`transactionType`</ph> parameter, or wait until there are messages in the queue.","source":"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, or wait until there are messages in the queue."},{"pos":[177,555],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[562,824],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","pos":[0,262],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, thereby removing it from the queue.","pos":[0,143],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> will return the messages that follow in the queue.","pos":[144,262],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue."}]}]},{"pos":[831,1085],"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,254],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,164]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[165,254]}]}]},{"pos":[1092,1770],"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","pos":[0,678],"nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,133],"source":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[134,349],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>.","pos":[350,475],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>.","pos":[476,678],"source":" Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>."}]}]},{"pos":[1777,2280],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","pos":[0,503],"nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"Because this overload of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method specifies an infinite time-out, the application might wait indefinitely.","pos":[174,330],"source":" Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely."},{"content":"If the application processing should continue without waiting for the message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[331,503],"source":" If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]}]},{"pos":[2287,2373],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2380,2394],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2395,2404],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2450,2464],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2465,2468],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2473,2510],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2511,2514],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2519,2534],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2535,2537],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2542,2580],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2581,2584],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[334435,337042],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[337675,337834],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[337902,338008],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[338195,338254],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[338400,338536],"yaml":true},{"content":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref> and waits until either a message is available in the queue, or the time-out expires.","nodes":[{"pos":[0,203],"content":"Receives the first message available in the queue referenced by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> and waits until either a message is available in the queue, or the time-out expires.","source":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref> and waits until either a message is available in the queue, or the time-out expires."}],"pos":[339492,339696],"yaml":true},{"content":"Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.  \n  \n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,118],"content":"Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.","nodes":[{"content":"Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.","pos":[0,118]}]},{"pos":[125,413],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.","pos":[0,288],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, removing it from the queue.","pos":[0,135],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> will return the messages that follow in the queue, or new, higher priority messages.","pos":[136,288],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages."}]}]},{"pos":[420,769],"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[0,349],"nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,133],"source":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[134,349],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."}]}]},{"pos":[776,1302],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"The thread will be blocked for the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[174,355],"source":" The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter."},{"content":"If the application processing should continue without waiting for a message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[356,526],"source":" If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]},{"pos":[1309,1395],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1402,1416],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1417,1426],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1472,1486],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1487,1490],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1495,1532],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1533,1536],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1541,1556],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1557,1559],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1564,1602],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1603,1606],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[339707,341332],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[342193,342313],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[342381,342487],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[342646,342888],"yaml":true},{"content":"A message did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method","nodes":[{"pos":[0,66],"content":"A message did not arrive in the queue before the time-out expired.","nodes":[{"content":"A message did not arrive in the queue before the time-out expired.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,141],"content":"An error occurred when accessing a Message Queuing method","nodes":[{"content":"An error occurred when accessing a Message Queuing method","pos":[0,57]}]}],"pos":[343010,343158],"yaml":true},{"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","nodes":[{"pos":[0,176],"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","nodes":[{"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","pos":[0,176],"nodes":[{"content":"Receives the current message in the queue, using a specified cursor.","pos":[0,68]},{"content":"If no message is available, this method waits until either a message is available, or the time-out expires.","pos":[69,176]}]}]}],"pos":[344210,344387],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[344583,344703],"yaml":true},{"content":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> that maintains a specific position in the message queue.","source":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue."}],"pos":[344775,344879],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[344947,345053],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[345212,345454],"yaml":true},{"content":"A message did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method  \n  \n Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.","nodes":[{"pos":[0,66],"content":"A message did not arrive in the queue before the time-out expired.","nodes":[{"content":"A message did not arrive in the queue before the time-out expired.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,141],"content":"An error occurred when accessing a Message Queuing method","nodes":[{"content":"An error occurred when accessing a Message Queuing method","pos":[0,57]}]},{"pos":[148,266],"content":"Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.","nodes":[{"content":"Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.","pos":[0,118]}]}],"pos":[345576,345851],"yaml":true},{"content":"Receives the first message available in the transactional queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref> and waits until either a message is available in the queue, or the time-out expires.","nodes":[{"pos":[0,217],"content":"Receives the first message available in the transactional queue referenced by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> and waits until either a message is available in the queue, or the time-out expires.","source":"Receives the first message available in the transactional queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref> and waits until either a message is available in the queue, or the time-out expires."}],"pos":[346967,347185],"yaml":true},{"content":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \n  \n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,228],"content":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the <ph id=\"ph1\">`transaction`</ph> parameter, and return within a specified period of time if there are no messages in the queue.","source":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue."},{"pos":[235,497],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","pos":[0,262],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, thereby removing it from the queue.","pos":[0,143],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> will return the messages that follow in the queue.","pos":[144,262],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue."}]}]},{"pos":[504,740],"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,236],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,146]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[147,236]}]}]},{"pos":[747,1425],"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","pos":[0,678],"nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,133],"source":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[134,349],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>.","pos":[350,475],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>.","pos":[476,678],"source":" Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>."}]}]},{"pos":[1432,1958],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"The thread will be blocked for the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[174,355],"source":" The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter."},{"content":"If the application processing should continue without waiting for a message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[356,526],"source":" If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]},{"pos":[1965,2051],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2058,2072],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2073,2082],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2128,2142],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2143,2146],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2151,2188],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2189,2192],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2197,2212],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2213,2215],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2220,2258],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2259,2262],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[347196,349479],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[350336,350456],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[350550,350624],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[350692,350798],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[350957,351199],"yaml":true},{"content":"A message did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n The queue is non-transactional.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,66],"content":"A message did not arrive in the queue before the time-out expired.","nodes":[{"content":"A message did not arrive in the queue before the time-out expired.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,115],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]},{"pos":[122,126],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[133,191],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[351321,351523],"yaml":true},{"content":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and waits until either a message is available in the queue, or the time-out expires.","nodes":[{"pos":[0,230],"content":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and waits until either a message is available in the queue, or the time-out expires.","nodes":[{"content":"Receives the first message available in the queue referenced by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","pos":[0,119],"source":"Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>."},{"content":"This call is synchronous, and waits until either a message is available in the queue, or the time-out expires.","pos":[120,230]}]}],"pos":[352701,352932],"yaml":true},{"content":"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,203],"content":"Use this overload to receive a message from a queue using a transaction context defined by the <ph id=\"ph1\">`transactionType`</ph> parameter, and return in a specified period of time if there are no messages in the queue.","source":"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue."},{"pos":[210,588],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[595,857],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.","pos":[0,262],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, thereby removing it from the queue.","pos":[0,143],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> will return the messages that follow in the queue.","pos":[144,262],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue."}]}]},{"pos":[864,1118],"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,254],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,164]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[165,254]}]}]},{"pos":[1125,1803],"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","pos":[0,678],"nodes":[{"content":"To read the first message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,133],"source":"To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[134,349],"source":" The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>.","pos":[350,475],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>.","pos":[476,678],"source":" Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>."}]}]},{"pos":[1810,2336],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"The thread will be blocked for the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[174,355],"source":" The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter."},{"content":"If the application processing should continue without waiting for a message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[356,526],"source":" If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]},{"pos":[2343,2429],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2436,2450],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2451,2460],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2506,2520],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2521,2524],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2529,2566],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2567,2570],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2575,2590],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2591,2593],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2598,2636],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2637,2640],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[352943,355606],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[356137,356257],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[356359,356518],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[356586,356692],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[356851,357093],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[357239,357375],"yaml":true},{"content":"A message did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,66],"content":"A message did not arrive in the queue before the time-out expired.","nodes":[{"content":"A message did not arrive in the queue before the time-out expired.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,142],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[357497,357646],"yaml":true},{"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","nodes":[{"pos":[0,176],"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","nodes":[{"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","pos":[0,176],"nodes":[{"content":"Receives the current message in the queue, using a specified cursor.","pos":[0,68]},{"content":"If no message is available, this method waits until either a message is available, or the time-out expires.","pos":[69,176]}]}]}],"pos":[358896,359073],"yaml":true},{"content":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.  \n  \n Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,228],"content":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the <ph id=\"ph1\">`transaction`</ph> parameter, and return within a specified period of time if there are no messages in the queue.","source":"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue."},{"pos":[235,492],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.","pos":[0,257],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, thereby removing it from the queue.","pos":[0,143],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> return the messages that follow in the queue.","pos":[144,257],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue."}]}]},{"pos":[499,729],"content":"Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,230],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted.","pos":[0,140]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[141,230]}]}]},{"pos":[736,1184],"content":"To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","nodes":[{"content":"To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","pos":[0,448],"nodes":[{"content":"To read a message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,125],"source":"To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>.","pos":[126,251],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not remove any messages in the queue, there is nothing to roll back by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>.","pos":[252,448],"source":" Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>."}]}]},{"pos":[1191,1712],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"The thread is blocked for the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[174,350],"source":" The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter."},{"content":"If the application processing should continue without waiting for a message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[351,521],"source":" If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]},{"pos":[1719,1805],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1812,1826],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1827,1836],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1882,1896],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1897,1900],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1905,1942],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1943,1946],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1951,1966],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1967,1969],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1974,2012],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2013,2016],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[359084,361121],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[361371,361491],"yaml":true},{"content":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> that maintains a specific position in the message queue.","source":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue."}],"pos":[361563,361667],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[361761,361835],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references a message in the queue.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references a message in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references a message in the queue."}],"pos":[361903,361991],"yaml":true},{"content":"The <code>cursor</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cursor</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>cursor</code> parameter is `null`."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,111],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[362158,362276],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","pos":[0,72],"source":"The value specified for the <code>timeout</code> parameter is not valid."},{"content":"Possibly <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","pos":[73,241],"source":" Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}]}],"pos":[362370,362612],"yaml":true},{"content":"A message did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n The queue is non-transactional.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,66],"content":"A message did not arrive in the queue before the time-out expired.","nodes":[{"content":"A message did not arrive in the queue before the time-out expired.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,115],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]},{"pos":[122,126],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[133,191],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[362734,362936],"yaml":true},{"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","nodes":[{"pos":[0,176],"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","nodes":[{"content":"Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.","pos":[0,176],"nodes":[{"content":"Receives the current message in the queue, using a specified cursor.","pos":[0,68]},{"content":"If no message is available, this method waits until either a message is available, or the time-out expires.","pos":[69,176]}]}]}],"pos":[364172,364349],"yaml":true},{"content":"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \n  \n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,203],"content":"Use this overload to receive a message from a queue using a transaction context defined by the <ph id=\"ph1\">`transactionType`</ph> parameter, and return in a specified period of time if there are no messages in the queue.","source":"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue."},{"pos":[210,588],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[595,852],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.","pos":[0,257],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method allows for the synchronous reading of a message, thereby removing it from the queue.","pos":[0,143],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue."},{"content":"Subsequent calls to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> return the messages that follow in the queue.","pos":[144,257],"source":" Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue."}]}]},{"pos":[859,1107],"content":"If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,248],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted.","pos":[0,158]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[159,248]}]}]},{"pos":[1114,1562],"content":"To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","nodes":[{"content":"To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.","pos":[0,448],"nodes":[{"content":"To read a message in a queue without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method.","pos":[0,125],"source":"To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>.","pos":[126,251],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not remove any messages in the queue, there is nothing to roll back by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph>.","pos":[252,448],"source":" Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>."}]}]},{"pos":[1569,2090],"content":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.","nodes":[{"content":"Use a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.","pos":[0,173],"source":"Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue."},{"content":"The thread is blocked for the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[174,350],"source":" The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter."},{"content":"If the application processing should continue without waiting for a message, consider using the asynchronous method, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>.","pos":[351,521],"source":" If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>."}]},{"pos":[2097,2183],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2190,2204],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2205,2214],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2260,2274],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2275,2278],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2283,2320],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2321,2324],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2329,2344],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2345,2347],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2352,2390],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2391,2394],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[364360,366777],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[367035,367155],"yaml":true},{"content":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Cursor\"&gt;&lt;/xref&gt;</ph> that maintains a specific position in the message queue.","source":"A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue."}],"pos":[367227,367331],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values that describes the type of transaction context to associate with the message.","nodes":[{"pos":[0,161],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values that describes the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values that describes the type of transaction context to associate with the message."}],"pos":[367433,367595],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references a message in the queue.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references a message in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references a message in the queue."}],"pos":[367663,367751],"yaml":true},{"content":"The <code>cursor</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cursor</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>cursor</code> parameter is `null`."}],"pos":[367918,367963],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid.","pos":[0,72],"source":"The value specified for the <code>timeout</code> parameter is not valid."},{"content":"Possibly <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","pos":[73,241],"source":" Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}]}],"pos":[368057,368299],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[368445,368581],"yaml":true},{"content":"A message did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,66],"content":"A message did not arrive in the queue before the time-out expired.","nodes":[{"content":"A message did not arrive in the queue before the time-out expired.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,142],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[368703,368852],"yaml":true},{"content":"Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"pos":[0,193],"content":"Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"content":"Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","pos":[0,193]}]}],"pos":[370148,370342],"yaml":true},{"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \n  \n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,582],"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.","nodes":[{"content":"This method looks in the queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,203],"source":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"This method returns immediately if the message with the correlation identifier specified by the <ph id=\"ph1\">`correlationId`</ph> parameter is in the queue, using a transaction context defined by the <ph id=\"ph2\">`transactionType`</ph> parameter.","pos":[204,414],"source":" This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using a transaction context defined by the `transactionType` parameter."},{"content":"Otherwise, the method waits the given period of time for a new message to arrive.","pos":[415,496]},{"content":"If a new message does not arrive before the time-out expires, an exception is thrown.","pos":[497,582]}]},{"pos":[589,1739],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[161,338],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[339,435]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[436,771],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter."},{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[772,947],"source":" Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[948,1033],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[1034,1150],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[1746,2000],"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,254],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,164]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[165,254]}]}]},{"pos":[2007,2171],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[2178,2488],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","pos":[0,310],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> method is used to retrieve a message by specifying its unique identifier.","pos":[62,310],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier."}]}]},{"pos":[2495,3280],"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,785],"nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method.","pos":[0,185],"source":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[186,432],"source":" The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph>.","pos":[433,589],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[590,785],"source":" Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[3287,3373],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3380,3394],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3395,3404],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3450,3464],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[3465,3468],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3473,3510],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[3511,3514],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3519,3534],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[3535,3537],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[3542,3580],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[3581,3584],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[370353,373960],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive."}],"pos":[374668,374759],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[374824,374944],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[375046,375205],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[375273,375449],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."}],"pos":[375631,375683],"yaml":true},{"content":"The message with the specified <code>correlationId</code> could not be found.","nodes":[{"pos":[0,77],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>correlationId</code> could not be found."}],"pos":[375793,375871],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[375965,376207],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[376353,376489],"yaml":true},{"content":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,133],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the queue and did not arrive before the time-out expired.","source":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired."},{"pos":[140,144],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[151,209],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[376611,376827],"yaml":true},{"content":"Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"pos":[0,222],"content":"Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"content":"Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","pos":[0,222]}]}],"pos":[378137,378360],"yaml":true},{"content":"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using the internal transaction context defined by the `transaction` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.  \n  \n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \n  \n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,603],"content":"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using the internal transaction context defined by the `transaction` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.","nodes":[{"content":"This method looks in the transactional queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,217],"source":"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"This method returns immediately if the message with the correlation identifier specified by the <ph id=\"ph1\">`correlationId`</ph> parameter is in the queue, using the internal transaction context defined by the <ph id=\"ph2\">`transaction`</ph> parameter.","pos":[218,435],"source":" This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using the internal transaction context defined by the `transaction` parameter."},{"content":"Otherwise, the method waits the given period of time for a new message to arrive.","pos":[436,517]},{"content":"If a new message does not arrive before the time-out expires, an exception is thrown.","pos":[518,603]}]},{"pos":[610,1381],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[161,338],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[339,435]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[436,771],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter."}]},{"pos":[1388,1624],"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,236],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,146]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[147,236]}]}]},{"pos":[1631,1795],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[1802,2112],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","pos":[0,310],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> method is used to retrieve a message by specifying its unique identifier.","pos":[62,310],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier."}]}]},{"pos":[2119,2904],"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,785],"nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method.","pos":[0,185],"source":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[186,432],"source":" The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph>.","pos":[433,589],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[590,785],"source":" Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[2911,2997],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3004,3018],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3019,3028],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3074,3088],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[3089,3092],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3097,3134],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[3135,3138],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3143,3158],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[3159,3161],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[3166,3204],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[3205,3208],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[378371,381602],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive."}],"pos":[382298,382389],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[382454,382574],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[382668,382742],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[382810,382986],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,118],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[383168,383293],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[383387,383629],"yaml":true},{"content":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  \n  \n -or-  \n  \n The queue is non-transactional.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,133],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the queue and did not arrive before the time-out expired.","source":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired."},{"pos":[140,144],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[151,182],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]},{"pos":[189,193],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[200,258],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[383751,384020],"yaml":true},{"content":"Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"pos":[0,226],"content":"Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","nodes":[{"content":"Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.","pos":[0,226]}]}],"pos":[385132,385359],"yaml":true},{"content":"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \n  \n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,528],"content":"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.","nodes":[{"content":"This method looks in the non-transactional queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,221],"source":"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"This method returns immediately if the message with the correlation identifier specified by the <ph id=\"ph1\">`correlationId`</ph> parameter is in the queue.","pos":[222,360],"source":" This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue."},{"content":"Otherwise, the method waits the given period of time for a new message to arrive.","pos":[361,442]},{"content":"If a new message does not arrive before the time-out expires, an exception is thrown.","pos":[443,528]}]},{"pos":[535,1306],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[161,338],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[339,435]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the <ph id=\"ph2\">`correlationId`</ph> parameter.","pos":[436,771],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter."}]},{"pos":[1313,1477],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[1484,1794],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","pos":[0,310],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> method is used to retrieve a message by specifying its unique identifier.","pos":[62,310],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier."}]}]},{"pos":[1801,2233],"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[0,432],"nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method.","pos":[0,185],"source":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[186,432],"source":" The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."}]}]},{"pos":[2240,2326],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2333,2347],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2348,2357],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2403,2417],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2418,2421],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2426,2463],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2464,2467],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2472,2487],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2488,2490],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2495,2533],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2534,2537],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[385370,387928],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive."}],"pos":[388527,388618],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[388683,388803],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[388871,389047],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."}],"pos":[389229,389281],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[389375,389617],"yaml":true},{"content":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,133],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist in the queue and did not arrive before the time-out expired.","source":"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired."},{"pos":[140,144],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[151,209],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[389739,389955],"yaml":true},{"content":"Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"pos":[0,189],"content":"Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"content":"Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","pos":[0,189]}]}],"pos":[391211,391401],"yaml":true},{"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \n  \n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,447],"content":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.","nodes":[{"content":"This method looks in the queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,203],"source":"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"If no message is found that matches the <ph id=\"ph1\">`correlationID`</ph> parameter, an exception is thrown.","pos":[204,294],"source":" If no message is found that matches the `correlationID` parameter, an exception is thrown."},{"content":"Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the <ph id=\"ph1\">`transactionType`</ph> parameter.","pos":[295,447],"source":" Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter."}]},{"pos":[454,832],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[839,1093],"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,254],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,164]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[165,254]}]}]},{"pos":[1100,1264],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[1271,1581],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","pos":[0,310],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> method is used to retrieve a message by specifying its unique identifier.","pos":[62,310],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier."}]}]},{"pos":[1588,2373],"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,785],"nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method.","pos":[0,185],"source":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[186,432],"source":" The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph>.","pos":[433,589],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[590,785],"source":" Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[2380,2466],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2473,2487],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2488,2497],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2543,2557],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2558,2561],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2566,2603],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2604,2607],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2612,2627],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2628,2630],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2635,2673],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2674,2677],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[391412,394112],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive."}],"pos":[394784,394875],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[394977,395136],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[395204,395380],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."}],"pos":[395562,395614],"yaml":true},{"content":"The message with the specified <code>correlationId</code> could not be found.","nodes":[{"pos":[0,77],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>correlationId</code> could not be found."}],"pos":[395724,395802],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[395948,396084],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[396206,396265],"yaml":true},{"content":"Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"pos":[0,218],"content":"Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"content":"Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","pos":[0,218]}]}],"pos":[397497,397716],"yaml":true},{"content":"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the `transaction` parameter.  \n  \n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \n  \n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,468],"content":"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the `transaction` parameter.","nodes":[{"content":"This method looks in the transactional queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,217],"source":"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"If no message is found that matches the <ph id=\"ph1\">`correlationID`</ph> parameter, an exception is thrown.","pos":[218,308],"source":" If no message is found that matches the `correlationID` parameter, an exception is thrown."},{"content":"Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the <ph id=\"ph1\">`transaction`</ph> parameter.","pos":[309,468],"source":" Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the `transaction` parameter."}]},{"pos":[475,711],"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,236],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,146]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[147,236]}]}]},{"pos":[718,882],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[889,1199],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.","pos":[0,310],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> method is used to retrieve a message by specifying its unique identifier.","pos":[62,310],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier."}]}]},{"pos":[1206,1991],"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,785],"nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method.","pos":[0,185],"source":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[186,432],"source":" The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph>.","pos":[433,589],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[590,785],"source":" Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[1998,2084],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2091,2105],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2106,2115],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2161,2175],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2176,2179],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2184,2221],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2222,2225],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2230,2245],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2246,2248],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2253,2291],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2292,2295],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[397727,400043],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive."}],"pos":[400703,400794],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[400888,400962],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[401030,401206],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,118],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[401388,401513],"yaml":true},{"content":"The message with the specified <code>correlationId</code> could not be found.","nodes":[{"pos":[0,77],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>correlationId</code> could not be found."}],"pos":[401623,401701],"yaml":true},{"content":"The queue is non-transactional.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,31],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,107],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[401823,401937],"yaml":true},{"content":"Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"pos":[0,222],"content":"Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","nodes":[{"content":"Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.","pos":[0,222]}]}],"pos":[402971,403194],"yaml":true},{"content":"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application.  \n  \n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method retrieves a message by specifying its unique identifier.  \n  \n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,394],"content":"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application.","nodes":[{"content":"This method looks in the non-transactional queue referenced by the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> for a message whose <ph id=\"ph2\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> matches the specified <ph id=\"ph3\">`correlationId`</ph> parameter.","pos":[0,221],"source":"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter."},{"content":"If no message is found that matches the <ph id=\"ph1\">`correlationID`</ph> parameter, an exception is thrown.","pos":[222,312],"source":" If no message is found that matches the `correlationID` parameter, an exception is thrown."},{"content":"Otherwise, the message is removed from the queue and returned to the application.","pos":[313,394]}]},{"pos":[401,565],"content":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.CorrelationId%2A&gt;</ph> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.","pos":[0,164],"source":"The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages."}]},{"pos":[572,872],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method retrieves a message by specifying its unique identifier.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method retrieves a message by specifying its unique identifier.","pos":[0,300],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> method retrieves a message by specifying its unique identifier.","pos":[62,300],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method retrieves a message by specifying its unique identifier."}]}]},{"pos":[879,1311],"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[0,432],"nodes":[{"content":"To read a message with a specified correlation identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method.","pos":[0,185],"source":"To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[186,432],"source":" The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."}]}]},{"pos":[1318,1404],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1411,1425],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1426,1435],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1481,1495],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1496,1499],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1504,1541],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1542,1545],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1550,1565],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1566,1568],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1573,1611],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1612,1615],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[403205,404839],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive."}],"pos":[405698,405789],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.","nodes":[{"pos":[0,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.CorrelationId\"&gt;&lt;/xref&gt;</ph> matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in."}],"pos":[405857,406033],"yaml":true},{"content":"The <code>correlationId</code> parameter is `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>correlationId</code> parameter is `null`."}],"pos":[406215,406267],"yaml":true},{"content":"The message with the specified <code>correlationId</code> could not be found.","nodes":[{"pos":[0,77],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">correlationId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>correlationId</code> could not be found."}],"pos":[406377,406455],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[406577,406636],"yaml":true},{"content":"Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue.","nodes":[{"pos":[0,196],"content":"Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue.","nodes":[{"content":"Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue.","pos":[0,196]}]}],"pos":[407604,407801],"yaml":true},{"content":"Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.  \n  \n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,167],"content":"Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.","nodes":[{"content":"Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.","pos":[0,167],"nodes":[{"content":"Use this method to read a message with a known identifier and remove it from the queue.","pos":[0,87]},{"content":"This method throws an exception immediately if the message is not in the queue.","pos":[88,167]}]}]},{"pos":[174,375],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`id`</ph> parameter.","source":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"pos":[382,786],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,404],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29&gt;</ph> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[62,404],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[793,1191],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[0,398],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method.","pos":[0,162],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[163,398],"source":" The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."}]}]},{"pos":[1198,1284],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1291,1305],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1306,1315],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1361,1375],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1376,1379],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1384,1421],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1422,1425],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1430,1445],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1446,1448],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1453,1491],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1492,1495],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[407812,409326],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive."}],"pos":[409845,409925],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.","nodes":[{"pos":[0,162],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in."}],"pos":[409993,410156],"yaml":true},{"content":"The <code>id</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."}],"pos":[410327,410368],"yaml":true},{"content":"The message with the specified <code>id</code> could not be found.","nodes":[{"pos":[0,66],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>id</code> could not be found."}],"pos":[410478,410545],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[410667,410726],"yaml":true},{"content":"Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue.","nodes":[{"pos":[0,194],"content":"Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue.","nodes":[{"content":"Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue.","pos":[0,194]}]}],"pos":[411892,412087],"yaml":true},{"content":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue  \n  \n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \n  \n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,245],"content":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue","nodes":[{"content":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the <ph id=\"ph1\">`transaction`</ph> parameter.","pos":[0,166],"source":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter."},{"content":"This method throws an exception immediately if the message is not in the queue","pos":[167,245]}]},{"pos":[252,453],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`id`</ph> parameter.","source":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"pos":[460,696],"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,236],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,146]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[147,236]}]}]},{"pos":[703,1107],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,404],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29&gt;</ph> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[62,404],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[1114,1843],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,729],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method.","pos":[0,162],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[163,398],"source":" The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph>.","pos":[399,544],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[545,729],"source":" Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[1850,1936],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1943,1957],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1958,1967],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2013,2027],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2028,2031],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2036,2073],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2074,2077],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2082,2097],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2098,2100],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2105,2143],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2144,2147],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[412098,414266],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive."}],"pos":[414882,414962],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[415056,415130],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.","nodes":[{"pos":[0,162],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in."}],"pos":[415198,415361],"yaml":true},{"content":"The <code>id</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[415532,415646],"yaml":true},{"content":"The message with the specified <code>id</code> could not be found.","nodes":[{"pos":[0,66],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>id</code> could not be found."}],"pos":[415756,415823],"yaml":true},{"content":"The queue is non-transactional.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,31],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,107],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[415945,416059],"yaml":true},{"content":"Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue.","nodes":[{"pos":[0,165],"content":"Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue.","nodes":[{"content":"Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue.","pos":[0,165]}]}],"pos":[417249,417415],"yaml":true},{"content":"Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,320],"content":"Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.","nodes":[{"content":"Use this method to read a message with a known identifier and remove it from the queue.","pos":[0,87]},{"content":"This method throws an exception immediately if the message is not in the queue.","pos":[88,167]},{"content":"Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the <ph id=\"ph1\">`transactionType`</ph> parameter.","pos":[168,320],"source":" Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter."}]},{"pos":[327,705],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[712,1090],"content":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`id`</ph> parameter.","pos":[0,201],"source":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"content":"If the message with the specified identifier is in a queue other than the one associated with this <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instance, the message will not be found.","pos":[202,378],"source":" If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found."}]},{"pos":[1097,1351],"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,254],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,164]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[165,254]}]}]},{"pos":[1358,1762],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,404],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29&gt;</ph> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[62,404],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[1769,2498],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,729],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method.","pos":[0,162],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[163,398],"source":" The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph>.","pos":[399,544],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[545,729],"source":" Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[2505,2591],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2598,2612],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2613,2622],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2668,2682],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2683,2686],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2691,2728],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2729,2732],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2737,2752],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2753,2755],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2760,2798],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2799,2802],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[417426,420251],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive."}],"pos":[420879,420959],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[421061,421220],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.","nodes":[{"pos":[0,162],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in."}],"pos":[421288,421451],"yaml":true},{"content":"The <code>id</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."}],"pos":[421622,421663],"yaml":true},{"content":"The message with the specified <code>id</code> could not be found.","nodes":[{"pos":[0,66],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>id</code> could not be found."}],"pos":[421773,421840],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[421986,422122],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[422244,422303],"yaml":true},{"content":"Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.","nodes":[{"pos":[0,201],"content":"Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.","nodes":[{"content":"Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.","pos":[0,201]}]}],"pos":[423349,423551],"yaml":true},{"content":"Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \n  \n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \n  \n Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,371],"content":"Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.","nodes":[{"content":"Use this method to read a message with a known identifier and remove it from the queue.","pos":[0,87]},{"content":"This method returns immediately if the message with the identifier specified by the <ph id=\"ph1\">`id`</ph> parameter is in the queue.","pos":[88,203],"source":" This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue."},{"content":"Otherwise, the method waits the given period of time for a new message to arrive.","pos":[204,285]},{"content":"If a new message does not arrive before the time-out expires, an exception is thrown.","pos":[286,371]}]},{"pos":[378,1105],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[161,316],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[317,413]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[414,727],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter."}]},{"pos":[1112,1313],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`id`</ph> parameter.","source":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"pos":[1320,1895],"content":"Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.","nodes":[{"content":"Use this overload of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[0,268],"source":"Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter."},{"content":"The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter, or if new messages continue to arrive in the queue within the time-out period specified by the <ph id=\"ph3\">`timeout`</ph> parameter.","pos":[269,575],"source":" The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter."}]},{"pos":[1902,2306],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,404],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29&gt;</ph> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[62,404],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[2313,2711],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[0,398],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method.","pos":[0,162],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[163,398],"source":" The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."}]}]},{"pos":[2718,2804],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2811,2825],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2826,2835],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2881,2895],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2896,2899],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2904,2941],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2942,2945],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2950,2965],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2966,2968],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2973,3011],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[3012,3015],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[423562,426600],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive."}],"pos":[427155,427235],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[427300,427420],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.","nodes":[{"pos":[0,162],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in."}],"pos":[427488,427651],"yaml":true},{"content":"The <code>id</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."}],"pos":[427822,427863],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[427957,428199],"yaml":true},{"content":"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,101],"content":"A message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> did not arrive in the queue before the time-out expired.","source":"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,177],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[428321,428505],"yaml":true},{"content":"Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.","nodes":[{"pos":[0,197],"content":"Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.","nodes":[{"content":"Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.","pos":[0,197]}]}],"pos":[429749,429947],"yaml":true},{"content":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \n  \n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \n  \n Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the timeout period specified by the `timeout` parameter.  \n  \n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,450],"content":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.","nodes":[{"content":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the <ph id=\"ph1\">`transaction`</ph> parameter.","pos":[0,166],"source":"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter."},{"content":"This method returns immediately if the message with the identifier specified by the <ph id=\"ph1\">`id`</ph> parameter is in the queue.","pos":[167,282],"source":" This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue."},{"content":"Otherwise, the method waits the given period of time for a new message to arrive.","pos":[283,364]},{"content":"If a new message does not arrive before the time-out expires, an exception is thrown.","pos":[365,450]}]},{"pos":[457,1184],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[161,316],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[317,413]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[414,727],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter."}]},{"pos":[1191,1392],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`id`</ph> parameter.","source":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"pos":[1399,1973],"content":"Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the timeout period specified by the `timeout` parameter.","nodes":[{"content":"Use this overload of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[0,268],"source":"Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter."},{"content":"The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter, or if new messages continue to arrive in the queue within the timeout period specified by the <ph id=\"ph3\">`timeout`</ph> parameter.","pos":[269,574],"source":" The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the timeout period specified by the `timeout` parameter."}]},{"pos":[1980,2216],"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,236],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,146]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[147,236]}]}]},{"pos":[2223,2627],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,404],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29&gt;</ph> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[62,404],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[2634,3364],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,730],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method.","pos":[0,162],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue.","pos":[163,399],"source":" The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph>.","pos":[400,545],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[546,730],"source":" Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[3371,3457],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[3464,3478],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[3479,3488],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[3534,3548],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[3549,3552],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3557,3594],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[3595,3598],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[3603,3618],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[3619,3621],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[3626,3664],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[3665,3668],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[429958,433651],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive."}],"pos":[434303,434383],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[434448,434568],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[434662,434736],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.","nodes":[{"pos":[0,162],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in."}],"pos":[434804,434967],"yaml":true},{"content":"The <code>id</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,107],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[435138,435252],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[435346,435588],"yaml":true},{"content":"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n The queue is non-transactional.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,101],"content":"A message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> did not arrive in the queue before the time-out expired.","source":"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,150],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]},{"pos":[157,161],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[168,226],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[435710,435947],"yaml":true},{"content":"Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires.","nodes":[{"pos":[0,168],"content":"Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires.","nodes":[{"content":"Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires.","pos":[0,168]}]}],"pos":[437215,437384],"yaml":true},{"content":"Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \n  \n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.  \n  \n Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,443],"content":"Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.","nodes":[{"content":"Use this method to read a message with a known identifier and remove it from the queue.","pos":[0,87]},{"content":"This method returns immediately if the message with the identifier specified by the <ph id=\"ph1\">`id`</ph> parameter is in the queue, using a transaction context defined by the <ph id=\"ph2\">`transactionType`</ph> parameter.","pos":[88,275],"source":" This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue, using a transaction context defined by the `transactionType` parameter."},{"content":"Otherwise, the method waits the given period of time for a new message to arrive.","pos":[276,357]},{"content":"If a new message does not arrive before the time-out expires, an exception is thrown.","pos":[358,443]}]},{"pos":[450,1177],"content":"The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`timeout`</ph> parameter does not specify the total running time for this method.","pos":[0,80],"source":"The `timeout` parameter does not specify the total running time for this method."},{"content":"Rather, it specifies the time to wait for a new message to arrive in the queue.","pos":[81,160]},{"content":"Each time a new message arrives, this method examines the <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> of the new message to see if it matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[161,316],"source":" Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter."},{"content":"If not, this method starts the time-out period over and waits for another new message to arrive.","pos":[317,413]},{"content":"Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> matches the <ph id=\"ph2\">`id`</ph> parameter.","pos":[414,727],"source":" Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter."}]},{"pos":[1184,1562],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[1569,1947],"content":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.Id%2A&gt;</ph> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`id`</ph> parameter.","pos":[0,201],"source":"The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter."},{"content":"If the message with the specified identifier is in a queue other than the one associated with this <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instance, the message will not be found.","pos":[202,378],"source":" If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found."}]},{"pos":[1954,2529],"content":"Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.","nodes":[{"content":"Use this overload of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29&gt;</ph> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the <ph id=\"ph2\">`timeout`</ph> parameter.","pos":[0,268],"source":"Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter."},{"content":"The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.InfiniteTimeout&gt;</ph> for the <ph id=\"ph2\">`timeout`</ph> parameter, or if new messages continue to arrive in the queue within the time-out period specified by the <ph id=\"ph3\">`timeout`</ph> parameter.","pos":[269,575],"source":" The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter."}]},{"pos":[2536,2790],"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,254],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,164]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[165,254]}]}]},{"pos":[2797,3201],"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","nodes":[{"content":"Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[0,404],"nodes":[{"content":"Two other methods allow you to receive messages from a queue.","pos":[0,61]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method returns the first message in the queue, and the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29&gt;</ph> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.","pos":[62,404],"source":" The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue."}]}]},{"pos":[3208,3937],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,729],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method.","pos":[0,162],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.","pos":[163,398],"source":" The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph>.","pos":[399,544],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekById%28System.String%29&gt;</ph> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.","pos":[545,729],"source":" Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[3944,4030],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[4037,4051],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[4052,4061],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[4107,4121],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[4122,4125],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4130,4167],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[4168,4171],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[4176,4191],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[4192,4194],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[4199,4237],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[4238,4241],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[437395,441663],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive."}],"pos":[442327,442407],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.","nodes":[{"pos":[0,119],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that indicates the time to wait until a new message is available for inspection.","source":"A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection."}],"pos":[442472,442592],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[442694,442853],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.","nodes":[{"pos":[0,162],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.Id\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in."}],"pos":[442921,443084],"yaml":true},{"content":"The <code>id</code> parameter is `null`.","nodes":[{"pos":[0,40],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>id</code> parameter is `null`."}],"pos":[443255,443296],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.","nodes":[{"pos":[0,241],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not valid, possibly <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <ph id=\"ph3\">&lt;xref href=\"System.TimeSpan.Zero\"&gt;&lt;/xref&gt;</ph> or greater than <ph id=\"ph4\">&lt;xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>."}],"pos":[443390,443632],"yaml":true},{"content":"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,101],"content":"A message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">id</ph><ept id=\"p1\">&lt;/code&gt;</ept> did not arrive in the queue before the time-out expired.","source":"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,177],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[443754,443938],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[444084,444220],"yaml":true},{"content":"Introduced in MSMQ 3.0. Receives the message that matches the given lookup identifier from a non-transactional queue.","nodes":[{"pos":[0,117],"content":"Introduced in MSMQ 3.0. Receives the message that matches the given lookup identifier from a non-transactional queue.","nodes":[{"content":"Introduced in MSMQ 3.0. Receives the message that matches the given lookup identifier from a non-transactional queue.","pos":[0,117],"nodes":[{"content":"Introduced in MSMQ 3.0.","pos":[0,23]},{"content":"Receives the message that matches the given lookup identifier from a non-transactional queue.","pos":[24,117]}]}]}],"pos":[445218,445336],"yaml":true},{"content":"Use this method to read a message with a known lookup identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.  \n  \n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \n  \n To read a message with a specified lookup identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,174],"content":"Use this method to read a message with a known lookup identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.","nodes":[{"content":"Use this method to read a message with a known lookup identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.","pos":[0,174],"nodes":[{"content":"Use this method to read a message with a known lookup identifier and remove it from the queue.","pos":[0,94]},{"content":"This method throws an exception immediately if the message is not in the queue.","pos":[95,174]}]}]},{"pos":[181,395],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.LookupId%2A&gt;</ph> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`lookupId`</ph> parameter.","source":"The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter."},{"pos":[402,561],"content":"To read a message with a specified lookup identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method.","nodes":[{"content":"To read a message with a specified lookup identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt;</ph> method.","pos":[0,159],"source":"To read a message with a specified lookup identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method."}]},{"pos":[568,654],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[661,675],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[676,685],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[731,745],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[746,749],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[754,791],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[792,795],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[800,815],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[816,818],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[823,861],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[862,865],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[445347,446229],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.LookupId\"&gt;&lt;/xref&gt;</ph> of the message to receive.","source":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive."}],"pos":[446398,446484],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.LookupId\"></xref> property matches the <code>lookupId</code> parameter passed in.","nodes":[{"pos":[0,174],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> whose <ph id=\"ph2\">&lt;xref href=\"System.Messaging.Message.LookupId\"&gt;&lt;/xref&gt;</ph> property matches the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.LookupId\"></xref> property matches the <code>lookupId</code> parameter passed in."}],"pos":[446552,446727],"yaml":true},{"content":"MSMQ 3.0 is not installed.","nodes":[{"pos":[0,26],"content":"MSMQ 3.0 is not installed.","nodes":[{"content":"MSMQ 3.0 is not installed.","pos":[0,26]}]}],"pos":[446920,446947],"yaml":true},{"content":"The message with the specified <code>lookupId</code> could not be found.","nodes":[{"pos":[0,72],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>lookupId</code> could not be found."}],"pos":[447057,447130],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[447252,447311],"yaml":true},{"content":"Introduced in MSMQ 3.0. Receives a specific message from a transactional queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","nodes":[{"pos":[0,184],"content":"Introduced in MSMQ 3.0. Receives a specific message from a transactional queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","nodes":[{"content":"Introduced in MSMQ 3.0. Receives a specific message from a transactional queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","pos":[0,184],"nodes":[{"content":"Introduced in MSMQ 3.0.","pos":[0,23]},{"content":"Receives a specific message from a transactional queue.","pos":[24,79]},{"content":"The message can be specified by a lookup identifier or by its position at the front or end of the queue.","pos":[80,184]}]}]}],"pos":[448643,448828],"yaml":true},{"content":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue.  \n  \n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \n  \n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,242],"content":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue.","nodes":[{"content":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the <ph id=\"ph1\">`transaction`</ph> parameter.","pos":[0,162],"source":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transaction` parameter."},{"content":"This method throws an exception immediately if the message is not in the queue.","pos":[163,242]}]},{"pos":[249,463],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.LookupId%2A&gt;</ph> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`lookupId`</ph> parameter.","source":"The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter."},{"pos":[470,706],"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,236],"nodes":[{"content":"Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,146]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[147,236]}]}]},{"pos":[713,1178],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,465],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt;</ph> method.","pos":[0,152],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt;</ph>.","pos":[153,288],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt;</ph> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.","pos":[289,465],"source":" Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[1185,1271],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1278,1292],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1293,1302],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1348,1362],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1363,1366],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1371,1408],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1409,1412],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1417,1432],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1433,1435],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1440,1478],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1479,1482],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[448839,450340],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue. Specify one of the following:  \n  \n `MessageLookupAction.Current`: Receives the message specified by <code>lookupId</code> and removes it from the queue.  \n  \n `MessageLookupAction.Next`: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue.  \n  \n `MessageLookupAction.Previous`: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue.  \n  \n `MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.  \n  \n `MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"pos":[0,155],"content":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue. Specify one of the following:","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageLookupAction\"&gt;&lt;/xref&gt;</ph> values, specifying how the message is read in the queue.","pos":[0,125],"source":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue."},{"content":"Specify one of the following:","pos":[126,155]}]},{"pos":[162,279],"content":"<ph id=\"ph1\">`MessageLookupAction.Current`</ph>: Receives the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removes it from the queue.","source":"`MessageLookupAction.Current`: Receives the message specified by <code>lookupId</code> and removes it from the queue."},{"pos":[286,422],"content":"<ph id=\"ph1\">`MessageLookupAction.Next`</ph>: Receives the message following the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removes it from the queue.","source":"`MessageLookupAction.Next`: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue."},{"pos":[429,569],"content":"<ph id=\"ph1\">`MessageLookupAction.Previous`</ph>: Receives the message preceding the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removes it from the queue.","source":"`MessageLookupAction.Previous`: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue."},{"pos":[576,729],"content":"`MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"content":"<ph id=\"ph1\">`MessageLookupAction.First`</ph>: Receives the first message in the queue and removes it from the queue.","pos":[0,99],"source":"`MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter must be set to 0.","pos":[100,153],"source":" The <code>lookupId</code> parameter must be set to 0."}]},{"pos":[736,887],"content":"`MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"content":"<ph id=\"ph1\">`MessageLookupAction.Last`</ph>: Receives the last message in the queue and removes it from the queue.","pos":[0,97],"source":"`MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter must be set to 0.","pos":[98,151],"source":" The <code>lookupId</code> parameter must be set to 0."}]}],"pos":[450630,451532],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.","nodes":[{"pos":[0,156],"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.LookupId\"&gt;&lt;/xref&gt;</ph> of the message to receive, or 0.","pos":[0,91],"source":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0."},{"content":"0 is used when accessing the first or last message in the queue.","pos":[92,156]}]}],"pos":[451595,451752],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[451846,451920],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>lookupId</code> and <code>action</code> parameters passed in.","nodes":[{"pos":[0,134],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">action</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>lookupId</code> and <code>action</code> parameters passed in."}],"pos":[451988,452123],"yaml":true},{"content":"MSMQ 3.0 is not installed.","nodes":[{"pos":[0,26],"content":"MSMQ 3.0 is not installed.","nodes":[{"content":"MSMQ 3.0 is not installed.","pos":[0,26]}]}],"pos":[452316,452343],"yaml":true},{"content":"The message with the specified <code>lookupId</code> could not be found.","nodes":[{"pos":[0,72],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>lookupId</code> could not be found."}],"pos":[452453,452526],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.  \n  \n -or-  \n  \n The queue is non-transactional.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,107],"content":"The queue is non-transactional.","nodes":[{"content":"The queue is non-transactional.","pos":[0,31]}]}],"pos":[452648,452762],"yaml":true},{"content":"The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members.","nodes":[{"pos":[0,118],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageLookupAction\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members."}],"pos":[452908,453027],"yaml":true},{"content":"Introduced in MSMQ 3.0. Receives a specific message from the queue, using the specified transaction context. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","nodes":[{"pos":[0,213],"content":"Introduced in MSMQ 3.0. Receives a specific message from the queue, using the specified transaction context. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","nodes":[{"content":"Introduced in MSMQ 3.0. Receives a specific message from the queue, using the specified transaction context. The message can be specified by a lookup identifier or by its position at the front or end of the queue.","pos":[0,213],"nodes":[{"content":"Introduced in MSMQ 3.0.","pos":[0,23]},{"content":"Receives a specific message from the queue, using the specified transaction context.","pos":[24,108]},{"content":"The message can be specified by a lookup identifier or by its position at the front or end of the queue.","pos":[109,213]}]}]}],"pos":[454383,454597],"yaml":true},{"content":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transactionType` parameter. This method throws an exception immediately if the message is not in the queue.  \n  \n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \n  \n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,246],"content":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transactionType` parameter. This method throws an exception immediately if the message is not in the queue.","nodes":[{"content":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the <ph id=\"ph1\">`transactionType`</ph> parameter.","pos":[0,166],"source":"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transactionType` parameter."},{"content":"This method throws an exception immediately if the message is not in the queue.","pos":[167,246]}]},{"pos":[253,467],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message.LookupId%2A&gt;</ph> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given <ph id=\"ph2\">`lookupId`</ph> parameter.","source":"The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter."},{"pos":[474,939],"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.","nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.","pos":[0,465],"nodes":[{"content":"To read a message with a specified identifier without removing it from the queue, use the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt;</ph> method.","pos":[0,152],"source":"To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method."},{"content":"There is no transaction context associated with a message returned by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt;</ph>.","pos":[153,288],"source":" There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.PeekByLookupId%2A&gt;</ph> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.","pos":[289,465],"source":" Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted."}]}]},{"pos":[946,1324],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[1331,1585],"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.","pos":[0,254],"nodes":[{"content":"If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted.","pos":[0,164]},{"content":"The message is not permanently removed from the queue until the transaction is committed.","pos":[165,254]}]}]},{"pos":[1592,1678],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1685,1699],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1700,1709],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1755,1769],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1770,1773],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1778,1815],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1816,1819],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1824,1839],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1840,1842],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1847,1885],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1886,1889],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[454608,456518],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue. Specify one of the following:  \n  \n `MessageLookupAction.Current`: Receives the message specified by <code>lookupId</code> and removes it from the queue.  \n  \n `MessageLookupAction.Next`: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue.  \n  \n `MessageLookupAction.Previous`: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue.  \n  \n `MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.  \n  \n `MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"pos":[0,155],"content":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue. Specify one of the following:","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageLookupAction\"&gt;&lt;/xref&gt;</ph> values, specifying how the message is read in the queue.","pos":[0,125],"source":"One of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> values, specifying how the message is read in the queue."},{"content":"Specify one of the following:","pos":[126,155]}]},{"pos":[162,279],"content":"<ph id=\"ph1\">`MessageLookupAction.Current`</ph>: Receives the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removes it from the queue.","source":"`MessageLookupAction.Current`: Receives the message specified by <code>lookupId</code> and removes it from the queue."},{"pos":[286,422],"content":"<ph id=\"ph1\">`MessageLookupAction.Next`</ph>: Receives the message following the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removes it from the queue.","source":"`MessageLookupAction.Next`: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue."},{"pos":[429,569],"content":"<ph id=\"ph1\">`MessageLookupAction.Previous`</ph>: Receives the message preceding the message specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> and removes it from the queue.","source":"`MessageLookupAction.Previous`: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue."},{"pos":[576,729],"content":"`MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"content":"<ph id=\"ph1\">`MessageLookupAction.First`</ph>: Receives the first message in the queue and removes it from the queue.","pos":[0,99],"source":"`MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter must be set to 0.","pos":[100,153],"source":" The <code>lookupId</code> parameter must be set to 0."}]},{"pos":[736,887],"content":"`MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.","nodes":[{"content":"<ph id=\"ph1\">`MessageLookupAction.Last`</ph>: Receives the last message in the queue and removes it from the queue.","pos":[0,97],"source":"`MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue."},{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter must be set to 0.","pos":[98,151],"source":" The <code>lookupId</code> parameter must be set to 0."}]}],"pos":[456816,457718],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.","nodes":[{"pos":[0,156],"content":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message.LookupId\"&gt;&lt;/xref&gt;</ph> of the message to receive, or 0.","pos":[0,91],"source":"The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0."},{"content":"0 is used when accessing the first or last message in the queue.","pos":[92,156]}]}],"pos":[457781,457938],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[458040,458199],"yaml":true},{"content":"The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>action</code> and <code>lookupId</code> parameters passed in.","nodes":[{"pos":[0,134],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">lookupId</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters passed in.","source":"The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>action</code> and <code>lookupId</code> parameters passed in."}],"pos":[458267,458402],"yaml":true},{"content":"MSMQ 3.0 is not installed.","nodes":[{"pos":[0,26],"content":"MSMQ 3.0 is not installed.","nodes":[{"content":"MSMQ 3.0 is not installed.","pos":[0,26]}]}],"pos":[458595,458622],"yaml":true},{"content":"The message with the specified <code>lookupId</code> could not be found.","nodes":[{"pos":[0,72],"content":"The message with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">lookupId</ph><ept id=\"p1\">&lt;/code&gt;</ept> could not be found.","source":"The message with the specified <code>lookupId</code> could not be found."}],"pos":[458732,458805],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[458927,458986],"yaml":true},{"content":"The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members.  \n  \n -or-  \n  \n The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,118],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageLookupAction\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members."},{"pos":[125,129],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[136,271],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[459132,459414],"yaml":true},{"content":"Occurs when a message has been removed from the queue. This event is raised by the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginReceive\"></xref>.","nodes":[{"pos":[0,171],"content":"Occurs when a message has been removed from the queue. This event is raised by the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginReceive\"></xref>.","nodes":[{"content":"Occurs when a message has been removed from the queue.","pos":[0,54]},{"content":"This event is raised by the asynchronous operation, <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.BeginReceive\"&gt;&lt;/xref&gt;</ph>.","pos":[55,171],"source":" This event is raised by the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginReceive\"></xref>."}]}],"pos":[460304,460476],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.BeginReceive%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message is available in the queue.  \n  \n <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> and peek the message when the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised.  \n  \n When you create a <xref:System.Messaging.ReceiveCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).","nodes":[{"pos":[0,202],"content":"<xref:System.Messaging.MessageQueue.BeginReceive%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message is available in the queue.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> is used in asynchronous processing to raise the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event when a message is available in the queue.","pos":[0,202],"source":"<xref:System.Messaging.MessageQueue.BeginReceive%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message is available in the queue."}]},{"pos":[209,492],"content":"<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> and peek the message when the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> is used to complete the operation initiated by a call to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> and peek the message when the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> event is raised.","pos":[0,283],"source":"<xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> and peek the message when the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised."}]},{"pos":[499,967],"content":"When you create a <xref:System.Messaging.ReceiveCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).","nodes":[{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Messaging.ReceiveCompletedEventHandler&gt;</ph> delegate, you identify the method that will handle the event.","pos":[0,132],"source":"When you create a <xref:System.Messaging.ReceiveCompletedEventHandler> delegate, you identify the method that will handle the event."},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[133,226]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[227,313]},{"content":"For more information about event handler delegates, see <bpt id=\"p1\">[</bpt>NIB: Events and Delegates<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)</ept>.","pos":[314,468],"source":" For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."}]}],"pos":[460487,461461],"yaml":true,"extradata":"MT"},{"content":"Refreshes the properties presented by the <xref href=\"System.Messaging.MessageQueue\"></xref> to reflect the current state of the resource.","nodes":[{"pos":[0,138],"content":"Refreshes the properties presented by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> to reflect the current state of the resource.","source":"Refreshes the properties presented by the <xref href=\"System.Messaging.MessageQueue\"></xref> to reflect the current state of the resource."}],"pos":[463843,463982],"yaml":true},{"content":"<xref:System.Messaging.MessageQueue.Refresh%2A> synchronizes the properties of a <xref:System.Messaging.MessageQueue> with its associated Message Queuing server resource. If any property, such as <xref:System.Messaging.MessageQueue.Label%2A> or <xref:System.Messaging.MessageQueue.Category%2A>, has changed on the server since the time the <xref:System.Messaging.MessageQueue> was created, <xref:System.Messaging.MessageQueue.Refresh%2A> updates the <xref:System.Messaging.MessageQueue> with the new information.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,512],"content":"<xref:System.Messaging.MessageQueue.Refresh%2A> synchronizes the properties of a <xref:System.Messaging.MessageQueue> with its associated Message Queuing server resource. If any property, such as <xref:System.Messaging.MessageQueue.Label%2A> or <xref:System.Messaging.MessageQueue.Category%2A>, has changed on the server since the time the <xref:System.Messaging.MessageQueue> was created, <xref:System.Messaging.MessageQueue.Refresh%2A> updates the <xref:System.Messaging.MessageQueue> with the new information.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.Refresh%2A> synchronizes the properties of a <xref:System.Messaging.MessageQueue> with its associated Message Queuing server resource. If any property, such as <xref:System.Messaging.MessageQueue.Label%2A> or <xref:System.Messaging.MessageQueue.Category%2A>, has changed on the server since the time the <xref:System.Messaging.MessageQueue> was created, <xref:System.Messaging.MessageQueue.Refresh%2A> updates the <xref:System.Messaging.MessageQueue> with the new information.","pos":[0,512],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Refresh%2A&gt;</ph> synchronizes the properties of a <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with its associated Message Queuing server resource.","pos":[0,170],"source":"<xref:System.Messaging.MessageQueue.Refresh%2A> synchronizes the properties of a <xref:System.Messaging.MessageQueue> with its associated Message Queuing server resource."},{"content":"If any property, such as <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Label%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Category%2A&gt;</ph>, has changed on the server since the time the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> was created, <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.Refresh%2A&gt;</ph> updates the <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with the new information.","pos":[171,512],"source":" If any property, such as <xref:System.Messaging.MessageQueue.Label%2A> or <xref:System.Messaging.MessageQueue.Category%2A>, has changed on the server since the time the <xref:System.Messaging.MessageQueue> was created, <xref:System.Messaging.MessageQueue.Refresh%2A> updates the <xref:System.Messaging.MessageQueue> with the new information."}]}]},{"pos":[519,605],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[612,626],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[627,636],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[682,696],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[697,700],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[705,742],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[743,746],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[751,766],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[767,769],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[774,812],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[813,816],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[463993,464822],"yaml":true,"extradata":"MT"},{"content":"Resets the permission list to the operating system's default values. Removes any queue permissions you have appended to the default list.","nodes":[{"pos":[0,137],"content":"Resets the permission list to the operating system's default values. Removes any queue permissions you have appended to the default list.","nodes":[{"content":"Resets the permission list to the operating system's default values. Removes any queue permissions you have appended to the default list.","pos":[0,137],"nodes":[{"content":"Resets the permission list to the operating system's default values.","pos":[0,68]},{"content":"Removes any queue permissions you have appended to the default list.","pos":[69,137]}]}]}],"pos":[466236,466374],"yaml":true},{"content":"When you call <xref:System.Messaging.MessageQueue.ResetPermissions%2A>, you return the permission list to its default values. Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:  \n  \n-   Get the properties of the queue.  \n  \n-   Get queue permissions.  \n  \n-   Write to the queue.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,234],"content":"When you call <xref:System.Messaging.MessageQueue.ResetPermissions%2A>, you return the permission list to its default values. Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:","nodes":[{"content":"When you call <xref:System.Messaging.MessageQueue.ResetPermissions%2A>, you return the permission list to its default values. Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:","pos":[0,234],"nodes":[{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ResetPermissions%2A&gt;</ph>, you return the permission list to its default values.","pos":[0,125],"source":"When you call <xref:System.Messaging.MessageQueue.ResetPermissions%2A>, you return the permission list to its default values."},{"content":"Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:","pos":[126,234]}]}]},{"pos":[244,276],"content":"Get the properties of the queue.","nodes":[{"content":"Get the properties of the queue.","pos":[0,32]}]},{"pos":[286,308],"content":"Get queue permissions.","nodes":[{"content":"Get queue permissions.","pos":[0,22]}]},{"pos":[318,337],"content":"Write to the queue.","nodes":[{"content":"Write to the queue.","pos":[0,19]}]},{"pos":[344,430],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[437,451],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[452,461],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[507,521],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[522,525],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[530,567],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[568,571],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[576,591],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[592,594],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[599,637],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[638,640],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[466385,467044],"yaml":true,"extradata":"MT"},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[467669,467728],"yaml":true},{"content":"Sends an object to non-transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.","nodes":[{"pos":[0,113],"content":"Sends an object to non-transactional queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","source":"Sends an object to non-transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>."}],"pos":[468654,468768],"yaml":true},{"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \n  \n If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.  \n  \n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \n  \n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,372],"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.","nodes":[{"content":"Use this overload to send a message that contains the <ph id=\"ph1\">`obj`</ph> parameter to the queue referenced by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,138],"source":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>."},{"content":"The object you send to the queue can be a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> or any managed object.","pos":[139,235],"source":" The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object."},{"content":"If you send any object other than a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the object is serialized and inserted into the body of the message.","pos":[236,372],"source":" If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message."}]},{"pos":[379,728],"content":"If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.","nodes":[{"content":"If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.","pos":[0,349],"nodes":[{"content":"If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue.","pos":[0,119]},{"content":"If you want the message to be part of a transaction that contains other messages, use an overload that takes a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransactionType&gt;</ph> as a parameter.","pos":[120,349],"source":" If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter."}]}]},{"pos":[735,967],"content":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.","nodes":[{"content":"If you do not set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property before calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, the formatter defaults to the <ph id=\"ph3\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[0,232],"source":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>."}]},{"pos":[974,1819],"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","pos":[0,845],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> property applies to any object other than a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[0,144],"source":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>."},{"content":"If you specify, for example, a label or a priority using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> member, these values apply to any message that contains an object that is not of type <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> when your application sends it to the queue.","pos":[145,432],"source":" If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue."},{"content":"When sending a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the property values set for the <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> take precedence over <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> and the message's <ph id=\"ph4\">&lt;xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName&gt;</ph> property takes precedence over the queue's <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> property.","pos":[433,845],"source":" When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property."}]}]},{"pos":[1826,1912],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1919,1933],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1934,1943],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1989,2003],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2004,2007],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2012,2049],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2050,2053],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2058,2073],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2074,2076],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2081,2119],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2120,2123],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[468779,470921],"yaml":true,"extradata":"MT"},{"content":"The object to send to the queue.","nodes":[{"pos":[0,32],"content":"The object to send to the queue.","nodes":[{"content":"The object to send to the queue.","pos":[0,32]}]}],"pos":[471698,471731],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,162],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[471915,472086],"yaml":true},{"content":"Sends an object to the transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.","nodes":[{"pos":[0,113],"content":"Sends an object to the transactional queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","source":"Sends an object to the transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>."}],"pos":[473210,473324],"yaml":true},{"content":"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \n  \n If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.  \n  \n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \n  \n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \n  \n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \n  \n```vb  \n<System.MTAThreadAttribute>  \n public sub Main()  \n```  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,464],"content":"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.","nodes":[{"content":"Use this overload to send a message that contains the <ph id=\"ph1\">`obj`</ph> parameter to the transactional queue referenced by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, using an internal transaction context defined by the <ph id=\"ph3\">`transaction`</ph> parameter.","pos":[0,230],"source":"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter."},{"content":"The object you send to the queue can be a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> or any managed object.","pos":[231,327],"source":" The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object."},{"content":"If you send any object other than a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the object is serialized and inserted into the body of the message.","pos":[328,464],"source":" If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message."}]},{"pos":[471,625],"content":"If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.","nodes":[{"content":"If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.","pos":[0,154]}]},{"pos":[632,864],"content":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.","nodes":[{"content":"If you do not set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property before calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, the formatter defaults to the <ph id=\"ph3\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[0,232],"source":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>."}]},{"pos":[871,1716],"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","pos":[0,845],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> property applies to any object other than a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[0,144],"source":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>."},{"content":"If you specify, for example, a label or a priority using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> member, these values apply to any message that contains an object that is not of type <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> when your application sends it to the queue.","pos":[145,432],"source":" If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue."},{"content":"When sending a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the property values set for the <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> take precedence over <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> and the message's <ph id=\"ph4\">&lt;xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName&gt;</ph> property takes precedence over the queue's <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> property.","pos":[433,845],"source":" When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property."}]}]},{"pos":[1723,2237],"content":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> is threading apartment aware, so if your apartment state is <ph id=\"ph2\">`STA`</ph>, you cannot use the transaction in multiple threads.","pos":[0,166],"source":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads."},{"content":"Visual Basic sets the state of the main thread to <ph id=\"ph1\">`STA`</ph>, so you must apply the <ph id=\"ph2\">&lt;xref:System.MTAThreadAttribute&gt;</ph> in the <ph id=\"ph3\">`Main`</ph> subroutine.","pos":[167,304],"source":" Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine."},{"content":"Otherwise, sending a transactional message using another thread throws a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> exception.","pos":[305,434],"source":" Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception."},{"content":"You apply the <ph id=\"ph1\">&lt;xref:System.MTAThreadAttribute&gt;</ph> by using the following fragment.","pos":[435,514],"source":" You apply the <xref:System.MTAThreadAttribute> by using the following fragment."}]},{"pos":[2312,2398],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2405,2419],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2420,2429],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2475,2489],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2490,2493],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2498,2535],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2536,2539],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2544,2559],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2560,2562],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2567,2605],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2606,2609],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[473335,475970],"yaml":true,"extradata":"MT"},{"content":"The object to send to the queue.","nodes":[{"pos":[0,32],"content":"The object to send to the queue.","nodes":[{"content":"The object to send to the queue.","pos":[0,32]}]}],"pos":[476795,476828],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[476922,476996],"yaml":true},{"content":"The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[477160,477210],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set.  \n  \n -or-  \n  \n The Message Queuing application indicated an incorrect transaction use.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,175],"content":"The Message Queuing application indicated an incorrect transaction use.","nodes":[{"content":"The Message Queuing application indicated an incorrect transaction use.","pos":[0,71]}]},{"pos":[182,186],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[193,251],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[477332,477596],"yaml":true},{"content":"Sends an object to the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.","nodes":[{"pos":[0,99],"content":"Sends an object to the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph>.","source":"Sends an object to the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>."}],"pos":[478744,478844],"yaml":true},{"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.  \n  \n The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \n  \n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \n  \n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,564],"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.","nodes":[{"content":"Use this overload to send a message that contains the <ph id=\"ph1\">`obj`</ph> parameter to the queue referenced by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, using a transaction context defined by the <ph id=\"ph3\">`transactionType`</ph> parameter.","pos":[0,210],"source":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter."},{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to send the message.","pos":[211,383],"source":" Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to send the message as a single internal transaction.","pos":[384,466],"source":" Specify `Single` if you want to send the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to send a transactional message to a non-transactional thread.","pos":[467,564],"source":" You can specify `None` if you want to send a transactional message to a non-transactional thread."}]},{"pos":[571,804],"content":"The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.","nodes":[{"content":"The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.","pos":[0,233],"nodes":[{"content":"The object you send to the queue can be a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> or any managed object.","pos":[0,96],"source":"The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object."},{"content":"If you send any object other than a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the object is serialized and inserted into the body of the message.","pos":[97,233],"source":" If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message."}]}]},{"pos":[811,1043],"content":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.","nodes":[{"content":"If you do not set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property before calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, the formatter defaults to the <ph id=\"ph3\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[0,232],"source":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>."}]},{"pos":[1050,1895],"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","pos":[0,845],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> property applies to any object other than a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[0,144],"source":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>."},{"content":"If you specify, for example, a label or a priority using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> member, these values apply to any message that contains an object that is not of type <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> when your application sends it to the queue.","pos":[145,432],"source":" If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue."},{"content":"When sending a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the property values set for the <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> take precedence over <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> and the message's <ph id=\"ph4\">&lt;xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName&gt;</ph> property takes precedence over the queue's <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> property.","pos":[433,845],"source":" When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property."}]}]},{"pos":[1902,1988],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[1995,2009],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2010,2019],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2065,2079],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2080,2083],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2088,2125],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2126,2129],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2134,2149],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2150,2152],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2157,2195],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2196,2199],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[478855,481073],"yaml":true,"extradata":"MT"},{"content":"The object to send to the queue.","nodes":[{"pos":[0,32],"content":"The object to send to the queue.","nodes":[{"content":"The object to send to the queue.","pos":[0,32]}]}],"pos":[481665,481698],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[481800,481959],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[482167,482303],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,162],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[482425,482596],"yaml":true},{"content":"Sends an object to the non-transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message.","nodes":[{"pos":[0,155],"content":"Sends an object to the non-transactional queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> and specifies a label for the message.","source":"Sends an object to the non-transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message."}],"pos":[483588,483744],"yaml":true},{"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \n  \n The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  \n  \n If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.  \n  \n The <xref:System.Messaging.MessageQueue.Path%2A> property for this <xref:System.Messaging.MessageQueue> instance must be specified before you send the message. If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \n  \n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,483],"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.","nodes":[{"content":"Use this overload to send a message that contains the <ph id=\"ph1\">`obj`</ph> parameter to the queue referenced by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>.","pos":[0,138],"source":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>."},{"content":"With this overload, you can specify the string label that identifies the message.","pos":[139,220]},{"content":"The object you send to the queue can be a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, a structure, a data object, or any managed object.","pos":[221,346],"source":" The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object."},{"content":"If you send any object other than a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the object is serialized and inserted into the body of the message.","pos":[347,483],"source":" If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message."}]},{"pos":[490,632],"content":"The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.","nodes":[{"content":"The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.","pos":[0,142]}]},{"pos":[639,988],"content":"If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.","nodes":[{"content":"If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.","pos":[0,349],"nodes":[{"content":"If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue.","pos":[0,119]},{"content":"If you want the message to be part of a transaction that contains other messages, use an overload that takes a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransactionType&gt;</ph> as a parameter.","pos":[120,349],"source":" If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter."}]}]},{"pos":[995,1387],"content":"The <xref:System.Messaging.MessageQueue.Path%2A> property for this <xref:System.Messaging.MessageQueue> instance must be specified before you send the message. If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Path%2A> property for this <xref:System.Messaging.MessageQueue> instance must be specified before you send the message. If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.","pos":[0,392],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Path%2A&gt;</ph> property for this <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instance must be specified before you send the message.","pos":[0,159],"source":"The <xref:System.Messaging.MessageQueue.Path%2A> property for this <xref:System.Messaging.MessageQueue> instance must be specified before you send the message."},{"content":"If you do not set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property before calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, the formatter defaults to the <ph id=\"ph3\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[160,392],"source":" If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>."}]}]},{"pos":[1394,2239],"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","pos":[0,845],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> property applies to any object other than a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[0,144],"source":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>."},{"content":"If you specify, for example, a label or a priority using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> member, these values apply to any message that contains an object that is not of type <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> when your application sends it to the queue.","pos":[145,432],"source":" If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue."},{"content":"When sending a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the property values set for the <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> take precedence over <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> and the message's <ph id=\"ph4\">&lt;xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName&gt;</ph> property takes precedence over the queue's <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> property.","pos":[433,845],"source":" When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property."}]}]},{"pos":[2246,2332],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2339,2353],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2354,2363],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2409,2423],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2424,2427],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2432,2469],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2470,2473],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2478,2493],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2494,2496],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2501,2539],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2540,2543],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[483755,486319],"yaml":true,"extradata":"MT"},{"content":"The object to send to the queue.","nodes":[{"pos":[0,32],"content":"The object to send to the queue.","nodes":[{"content":"The object to send to the queue.","pos":[0,32]}]}],"pos":[486832,486865],"yaml":true},{"content":"The label of the message.","nodes":[{"pos":[0,25],"content":"The label of the message.","nodes":[{"content":"The label of the message.","pos":[0,25]}]}],"pos":[486926,486952],"yaml":true},{"content":"The <code>label</code> parameter is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">label</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>label</code> parameter is `null`."}],"pos":[487116,487160],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,162],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[487282,487453],"yaml":true},{"content":"Sends an object to the transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message.","nodes":[{"pos":[0,151],"content":"Sends an object to the transactional queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> and specifies a label for the message.","source":"Sends an object to the transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message."}],"pos":[488643,488795],"yaml":true},{"content":"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \n  \n The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  \n  \n If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.  \n  \n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \n  \n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property  \n  \n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \n  \n```vb  \n<System.MTAThreadAttribute>  \n public sub Main()  \n```  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,575],"content":"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.","nodes":[{"content":"Use this overload to send a message that contains the <ph id=\"ph1\">`obj`</ph> parameter to the transactional queue referenced by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, using an internal transaction context defined by the <ph id=\"ph3\">`transaction`</ph> parameter.","pos":[0,230],"source":"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter."},{"content":"With this overload, you can specify the string label that identifies the message.","pos":[231,312]},{"content":"The object you send to the queue can be a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, a structure, a data object, or any managed object.","pos":[313,438],"source":" The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object."},{"content":"If you send any object other than a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the object is serialized and inserted into the body of the message.","pos":[439,575],"source":" If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message."}]},{"pos":[582,724],"content":"The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.","nodes":[{"content":"The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.","pos":[0,142]}]},{"pos":[731,885],"content":"If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.","nodes":[{"content":"If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.","pos":[0,154]}]},{"pos":[892,1124],"content":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.","nodes":[{"content":"If you do not set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property before calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, the formatter defaults to the <ph id=\"ph3\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[0,232],"source":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>."}]},{"pos":[1131,1975],"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property","pos":[0,844],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> property applies to any object other than a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[0,144],"source":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>."},{"content":"If you specify, for example, a label or a priority using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> member, these values apply to any message that contains an object that is not of type <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> when your application sends it to the queue.","pos":[145,432],"source":" If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue."},{"content":"When sending a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the property values set for the <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> take precedence over <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> and the message's <ph id=\"ph4\">&lt;xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName&gt;</ph> property takes precedence over the queue's <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> property","pos":[433,844],"source":" When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property"}]}]},{"pos":[1982,2496],"content":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> is threading apartment aware, so if your apartment state is <ph id=\"ph2\">`STA`</ph>, you cannot use the transaction in multiple threads.","pos":[0,166],"source":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads."},{"content":"Visual Basic sets the state of the main thread to <ph id=\"ph1\">`STA`</ph>, so you must apply the <ph id=\"ph2\">&lt;xref:System.MTAThreadAttribute&gt;</ph> in the <ph id=\"ph3\">`Main`</ph> subroutine.","pos":[167,304],"source":" Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine."},{"content":"Otherwise, sending a transactional message using another thread throws a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> exception.","pos":[305,434],"source":" Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception."},{"content":"You apply the <ph id=\"ph1\">&lt;xref:System.MTAThreadAttribute&gt;</ph> by using the following fragment.","pos":[435,514],"source":" You apply the <xref:System.MTAThreadAttribute> by using the following fragment."}]},{"pos":[2571,2657],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2664,2678],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2679,2688],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2734,2748],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2749,2752],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2757,2794],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2795,2798],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2803,2818],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2819,2821],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2826,2864],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2865,2868],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[488806,491702],"yaml":true,"extradata":"MT"},{"content":"The object to send to the queue.","nodes":[{"pos":[0,32],"content":"The object to send to the queue.","nodes":[{"content":"The object to send to the queue.","pos":[0,32]}]}],"pos":[492312,492345],"yaml":true},{"content":"The label of the message.","nodes":[{"pos":[0,25],"content":"The label of the message.","nodes":[{"content":"The label of the message.","pos":[0,25]}]}],"pos":[492406,492432],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object."}],"pos":[492526,492600],"yaml":true},{"content":"The <code>label</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">label</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>label</code> parameter is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,110],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[492764,492881],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set.  \n  \n -or-  \n  \n The Message Queuing application indicated an incorrect transaction usage.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,177],"content":"The Message Queuing application indicated an incorrect transaction usage.","nodes":[{"content":"The Message Queuing application indicated an incorrect transaction usage.","pos":[0,73]}]},{"pos":[184,188],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[195,253],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[493003,493269],"yaml":true},{"content":"Sends an object to the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message.","nodes":[{"pos":[0,137],"content":"Sends an object to the queue referenced by this <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue\"&gt;&lt;/xref&gt;</ph> and specifies a label for the message.","source":"Sends an object to the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message."}],"pos":[494483,494621],"yaml":true},{"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.  \n  \n The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message. With this overload, you can specify the string label that identifies the message.  \n  \n The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  \n  \n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \n  \n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,564],"content":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.","nodes":[{"content":"Use this overload to send a message that contains the <ph id=\"ph1\">`obj`</ph> parameter to the queue referenced by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue&gt;</ph>, using a transaction context defined by the <ph id=\"ph3\">`transactionType`</ph> parameter.","pos":[0,210],"source":"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter."},{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to send the message.","pos":[211,383],"source":" Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to send the message as a single internal transaction.","pos":[384,466],"source":" Specify `Single` if you want to send the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to send a transactional message to a non-transactional thread.","pos":[467,564],"source":" You can specify `None` if you want to send a transactional message to a non-transactional thread."}]},{"pos":[571,886],"content":"The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message. With this overload, you can specify the string label that identifies the message.","nodes":[{"content":"The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message. With this overload, you can specify the string label that identifies the message.","pos":[0,315],"nodes":[{"content":"The object you send to the queue can be a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> or any managed object.","pos":[0,96],"source":"The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object."},{"content":"If you send any object other than a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the object is serialized and inserted into the body of the message.","pos":[97,233],"source":" If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message."},{"content":"With this overload, you can specify the string label that identifies the message.","pos":[234,315]}]}]},{"pos":[893,1035],"content":"The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.","nodes":[{"content":"The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.","pos":[0,142]}]},{"pos":[1042,1274],"content":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.","nodes":[{"content":"If you do not set the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A&gt;</ph> property before calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Send%28System.Object%29&gt;</ph>, the formatter defaults to the <ph id=\"ph3\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>.","pos":[0,232],"source":"If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>."}]},{"pos":[1281,2127],"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.","pos":[0,846],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> property applies to any object other than a <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph>.","pos":[0,144],"source":"The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>."},{"content":"If you specify, for example, a label or a priority using the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph> member, these values apply to any message that contains an object that is not of type <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> when your application sends it to the queue.","pos":[145,432],"source":" If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue."},{"content":"When sending a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph>, the property values set for the <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> take precedence over <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A&gt;</ph>, and the message's <ph id=\"ph4\">&lt;xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName&gt;</ph> property takes precedence over the queue's <ph id=\"ph5\">&lt;xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName&gt;</ph> property.","pos":[433,846],"source":" When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property."}]}]},{"pos":[2134,2220],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2227,2241],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2242,2251],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2297,2311],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2312,2315],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2320,2357],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2358,2361],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2366,2381],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2382,2384],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2389,2427],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2428,2431],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[494632,497084],"yaml":true,"extradata":"MT"},{"content":"The object to send to the queue.","nodes":[{"pos":[0,32],"content":"The object to send to the queue.","nodes":[{"content":"The object to send to the queue.","pos":[0,32]}]}],"pos":[497706,497739],"yaml":true},{"content":"The label of the message.","nodes":[{"pos":[0,25],"content":"The label of the message.","nodes":[{"content":"The label of the message.","pos":[0,25]}]}],"pos":[497800,497826],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[497928,498087],"yaml":true},{"content":"The <code>label</code> parameter is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">label</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>label</code> parameter is `null`."}],"pos":[498251,498295],"yaml":true},{"content":"The Message Queuing application indicated an incorrect transaction usage.","nodes":[{"pos":[0,73],"content":"The Message Queuing application indicated an incorrect transaction usage.","nodes":[{"content":"The Message Queuing application indicated an incorrect transaction usage.","pos":[0,73]}]}],"pos":[498421,498495],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[498641,498777],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set.  \n  \n -or-  \n  \n An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.Path\"&gt;&lt;/xref&gt;</ph> property has not been set.","source":"The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property has not been set."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,162],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[498899,499070],"yaml":true},{"content":"Assigns access rights to the queue based on the contents of an access control list.","nodes":[{"pos":[0,83],"content":"Assigns access rights to the queue based on the contents of an access control list.","nodes":[{"content":"Assigns access rights to the queue based on the contents of an access control list.","pos":[0,83]}]}],"pos":[500152,500236],"yaml":true},{"content":"Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information. This is used, for example, to grant permissions to multiple users at the same time.  \n  \n The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\`user`. You can specify \".\" for the trustee to indicate the local computer.  \n  \n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n When you construct the `dacl` parameter, you add <xref:System.Messaging.AccessControlEntry> instances to your <xref:System.Messaging.AccessControlList> collection. When you construct each access control entry, you can specify generic or standard access rights. The rights to a queue can be any combination of the following:  \n  \n-   Delete  \n  \n-   Read Security  \n  \n-   Write Security  \n  \n-   Synchronize  \n  \n-   Modify Owner  \n  \n-   Read  \n  \n-   Write  \n  \n-   Execute  \n  \n-   Required  \n  \n-   All  \n  \n-   None  \n  \n These rights are a set of bit flags that you can combine using the OR bitwise operator.  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,230],"content":"Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information. This is used, for example, to grant permissions to multiple users at the same time.","nodes":[{"content":"Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information. This is used, for example, to grant permissions to multiple users at the same time.","pos":[0,230],"nodes":[{"content":"Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information.","pos":[0,146]},{"content":"This is used, for example, to grant permissions to multiple users at the same time.","pos":[147,230]}]}]},{"pos":[237,493],"content":"The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\`user`. You can specify \".\" for the trustee to indicate the local computer.","nodes":[{"content":"The trustee you specify when you construct the <ph id=\"ph1\">`ace`</ph> parameter can be an individual user, a group of users, or a computer.","pos":[0,122],"source":"The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer."},{"content":"If the trustee is an individual, use the format <ph id=\"ph1\">`DOMAIN`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`user`</ph>.","pos":[123,188],"source":" If the trustee is an individual, use the format `DOMAIN`\\\\`user`."},{"content":"You can specify \".\" for the trustee to indicate the local computer.","pos":[189,256]}]},{"pos":[500,959],"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","nodes":[{"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","pos":[0,459],"nodes":[{"content":"The permissions you assign through <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph> add rights to the existing list.","pos":[0,122],"source":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list."},{"content":"By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.","pos":[123,304]},{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph>, the user and permissions information is appended to the bottom of the existing list.","pos":[305,459],"source":" When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list."}]}]},{"pos":[966,1087],"content":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:","nodes":[{"content":"The system examines each <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> in sequence until one of the following events occurs:","pos":[0,121],"source":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:"}]},{"pos":[1097,1269],"content":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","nodes":[{"content":"An access-denied <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","pos":[0,172],"source":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token."}]},{"pos":[1279,1453],"content":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","nodes":[{"content":"One or more access-allowed <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","pos":[0,174],"source":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights."}]},{"pos":[1463,1670],"content":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","nodes":[{"content":"All <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","pos":[0,207],"source":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied."}]},{"pos":[1677,2000],"content":"When you construct the `dacl` parameter, you add <xref:System.Messaging.AccessControlEntry> instances to your <xref:System.Messaging.AccessControlList> collection. When you construct each access control entry, you can specify generic or standard access rights. The rights to a queue can be any combination of the following:","nodes":[{"content":"When you construct the <ph id=\"ph1\">`dacl`</ph> parameter, you add <ph id=\"ph2\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> instances to your <ph id=\"ph3\">&lt;xref:System.Messaging.AccessControlList&gt;</ph> collection.","pos":[0,163],"source":"When you construct the `dacl` parameter, you add <xref:System.Messaging.AccessControlEntry> instances to your <xref:System.Messaging.AccessControlList> collection."},{"content":"When you construct each access control entry, you can specify generic or standard access rights.","pos":[164,260]},{"content":"The rights to a queue can be any combination of the following:","pos":[261,323]}]},{"pos":[2010,2016],"content":"Delete","nodes":[{"content":"Delete","pos":[0,6]}]},{"pos":[2026,2039],"content":"Read Security","nodes":[{"content":"Read Security","pos":[0,13]}]},{"pos":[2049,2063],"content":"Write Security","nodes":[{"content":"Write Security","pos":[0,14]}]},{"pos":[2073,2084],"content":"Synchronize","nodes":[{"content":"Synchronize","pos":[0,11]}]},{"pos":[2094,2106],"content":"Modify Owner","nodes":[{"content":"Modify Owner","pos":[0,12]}]},{"pos":[2116,2120],"content":"Read","nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[2130,2135],"content":"Write","nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[2145,2152],"content":"Execute","nodes":[{"content":"Execute","pos":[0,7]}]},{"pos":[2162,2170],"content":"Required","nodes":[{"content":"Required","pos":[0,8]}]},{"pos":[2180,2183],"content":"All","nodes":[{"content":"All","pos":[0,3]}]},{"pos":[2193,2197],"content":"None","nodes":[{"content":"None","pos":[0,4]}]},{"pos":[2204,2291],"content":"These rights are a set of bit flags that you can combine using the OR bitwise operator.","nodes":[{"content":"These rights are a set of bit flags that you can combine using the OR bitwise operator.","pos":[0,87]}]},{"pos":[2301,2313],"content":"Full Control","nodes":[{"content":"Full Control","pos":[0,12]}]},{"pos":[2323,2337],"content":"Delete Message","nodes":[{"content":"Delete Message","pos":[0,14]}]},{"pos":[2347,2362],"content":"Receive Message","nodes":[{"content":"Receive Message","pos":[0,15]}]},{"pos":[2372,2384],"content":"Peek Message","nodes":[{"content":"Peek Message","pos":[0,12]}]},{"pos":[2394,2417],"content":"Receive Journal Message","nodes":[{"content":"Receive Journal Message","pos":[0,23]}]},{"pos":[2427,2447],"content":"Get Queue Properties","nodes":[{"content":"Get Queue Properties","pos":[0,20]}]},{"pos":[2457,2477],"content":"Set Queue Properties","nodes":[{"content":"Set Queue Properties","pos":[0,20]}]},{"pos":[2487,2502],"content":"Get Permissions","nodes":[{"content":"Get Permissions","pos":[0,15]}]},{"pos":[2512,2527],"content":"Set Permissions","nodes":[{"content":"Set Permissions","pos":[0,15]}]},{"pos":[2537,2557],"content":"Take Queue Ownership","nodes":[{"content":"Take Queue Ownership","pos":[0,20]}]},{"pos":[2567,2580],"content":"Write Message","nodes":[{"content":"Write Message","pos":[0,13]}]},{"pos":[2587,2673],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2680,2694],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2695,2704],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2750,2764],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2765,2768],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2773,2810],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2811,2814],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2819,2834],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2835,2837],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2842,2880],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2881,2883],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[500247,503207],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.AccessControlList\"></xref> that contains one or more access control entries that specify the trustees and the permissions to grant.","nodes":[{"pos":[0,162],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.AccessControlList\"&gt;&lt;/xref&gt;</ph> that contains one or more access control entries that specify the trustees and the permissions to grant.","source":"A <xref href=\"System.Messaging.AccessControlList\"></xref> that contains one or more access control entries that specify the trustees and the permissions to grant."}],"pos":[503790,503953],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[504147,504206],"yaml":true},{"content":"Assigns access rights to the queue based on the contents of an access control entry.","nodes":[{"pos":[0,84],"content":"Assigns access rights to the queue based on the contents of an access control entry.","nodes":[{"content":"Assigns access rights to the queue based on the contents of an access control entry.","pos":[0,84]}]}],"pos":[505366,505451],"yaml":true},{"content":"Use this overload to grant, deny, or revoke rights by using an access control entry to specify trustee and rights information.  \n  \n The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\`user`. You can specify \".\" for the trustee to indicate the local computer.  \n  \n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n The rights to a queue, which you specify in the `rights` parameter when you construct your <xref:System.Messaging.MessageQueueAccessControlEntry>, can be any combination of the following:  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The `rights` parameter you specify in the constructor for the `ace` parameter is a flag of the <xref:System.Messaging.MessageQueueAccessRights> enumeration. It represents a set of bit flags that you can combine using the bitwise operator OR when you build the `rights` parameter.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,126],"content":"Use this overload to grant, deny, or revoke rights by using an access control entry to specify trustee and rights information.","nodes":[{"content":"Use this overload to grant, deny, or revoke rights by using an access control entry to specify trustee and rights information.","pos":[0,126]}]},{"pos":[133,389],"content":"The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\`user`. You can specify \".\" for the trustee to indicate the local computer.","nodes":[{"content":"The trustee you specify when you construct the <ph id=\"ph1\">`ace`</ph> parameter can be an individual user, a group of users, or a computer.","pos":[0,122],"source":"The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer."},{"content":"If the trustee is an individual, use the format <ph id=\"ph1\">`DOMAIN`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`user`</ph>.","pos":[123,188],"source":" If the trustee is an individual, use the format `DOMAIN`\\\\`user`."},{"content":"You can specify \".\" for the trustee to indicate the local computer.","pos":[189,256]}]},{"pos":[396,855],"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","nodes":[{"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","pos":[0,459],"nodes":[{"content":"The permissions you assign through <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph> add rights to the existing list.","pos":[0,122],"source":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list."},{"content":"By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.","pos":[123,304]},{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph>, the user and permissions information is appended to the bottom of the existing list.","pos":[305,459],"source":" When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list."}]}]},{"pos":[862,983],"content":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:","nodes":[{"content":"The system examines each <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> in sequence until one of the following events occurs:","pos":[0,121],"source":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:"}]},{"pos":[993,1165],"content":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","nodes":[{"content":"An access-denied <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","pos":[0,172],"source":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token."}]},{"pos":[1175,1349],"content":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","nodes":[{"content":"One or more access-allowed <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","pos":[0,174],"source":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights."}]},{"pos":[1359,1566],"content":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","nodes":[{"content":"All <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","pos":[0,207],"source":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied."}]},{"pos":[1573,1760],"content":"The rights to a queue, which you specify in the <ph id=\"ph1\">`rights`</ph> parameter when you construct your <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueAccessControlEntry&gt;</ph>, can be any combination of the following:","source":"The rights to a queue, which you specify in the `rights` parameter when you construct your <xref:System.Messaging.MessageQueueAccessControlEntry>, can be any combination of the following:"},{"pos":[1770,1782],"content":"Full Control","nodes":[{"content":"Full Control","pos":[0,12]}]},{"pos":[1792,1806],"content":"Delete Message","nodes":[{"content":"Delete Message","pos":[0,14]}]},{"pos":[1816,1831],"content":"Receive Message","nodes":[{"content":"Receive Message","pos":[0,15]}]},{"pos":[1841,1853],"content":"Peek Message","nodes":[{"content":"Peek Message","pos":[0,12]}]},{"pos":[1863,1886],"content":"Receive Journal Message","nodes":[{"content":"Receive Journal Message","pos":[0,23]}]},{"pos":[1896,1916],"content":"Get Queue Properties","nodes":[{"content":"Get Queue Properties","pos":[0,20]}]},{"pos":[1926,1946],"content":"Set Queue Properties","nodes":[{"content":"Set Queue Properties","pos":[0,20]}]},{"pos":[1956,1971],"content":"Get Permissions","nodes":[{"content":"Get Permissions","pos":[0,15]}]},{"pos":[1981,1996],"content":"Set Permissions","nodes":[{"content":"Set Permissions","pos":[0,15]}]},{"pos":[2006,2026],"content":"Take Queue Ownership","nodes":[{"content":"Take Queue Ownership","pos":[0,20]}]},{"pos":[2036,2049],"content":"Write Message","nodes":[{"content":"Write Message","pos":[0,13]}]},{"pos":[2056,2335],"content":"The `rights` parameter you specify in the constructor for the `ace` parameter is a flag of the <xref:System.Messaging.MessageQueueAccessRights> enumeration. It represents a set of bit flags that you can combine using the bitwise operator OR when you build the `rights` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`rights`</ph> parameter you specify in the constructor for the <ph id=\"ph2\">`ace`</ph> parameter is a flag of the <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueueAccessRights&gt;</ph> enumeration.","pos":[0,156],"source":"The `rights` parameter you specify in the constructor for the `ace` parameter is a flag of the <xref:System.Messaging.MessageQueueAccessRights> enumeration."},{"content":"It represents a set of bit flags that you can combine using the bitwise operator OR when you build the <ph id=\"ph1\">`rights`</ph> parameter.","pos":[157,279],"source":" It represents a set of bit flags that you can combine using the bitwise operator OR when you build the `rights` parameter."}]},{"pos":[2342,2428],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2435,2449],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2450,2459],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2505,2519],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2520,2523],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2528,2565],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2566,2569],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2574,2589],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2590,2592],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2597,2635],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2636,2638],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[505462,508155],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.MessageQueueAccessControlEntry\"></xref> that specifies a user, an access type, and a permission type.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueAccessControlEntry\"&gt;&lt;/xref&gt;</ph> that specifies a user, an access type, and a permission type.","source":"A <xref href=\"System.Messaging.MessageQueueAccessControlEntry\"></xref> that specifies a user, an access type, and a permission type."}],"pos":[508771,508904],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[509098,509157],"yaml":true},{"content":"Gives a computer, group, or user the specified access rights.","nodes":[{"pos":[0,61],"content":"Gives a computer, group, or user the specified access rights.","nodes":[{"content":"Gives a computer, group, or user the specified access rights.","pos":[0,61]}]}],"pos":[510347,510409],"yaml":true},{"content":"Use this overload to grant specified rights to an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter. You can specify \".\" for the `user` parameter to indicate the local computer.  \n  \n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n The rights to a queue, specified in the `rights` parameter, can be any combination of the following:  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.  \n  \n With this overload, you can only grant permissions; you cannot revoke or deny them. You must use a different overload to explicitly grant any <xref:System.Messaging.AccessControlEntryType> other than `Allow`.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,331],"content":"Use this overload to grant specified rights to an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter. You can specify \".\" for the `user` parameter to indicate the local computer.","nodes":[{"content":"Use this overload to grant specified rights to an individual user.","pos":[0,66]},{"content":"The user can be any valid trustee, which includes individual users, groups of users, or a computer.","pos":[67,166]},{"content":"If the user is an individual, use the format <ph id=\"ph1\">`DOMAIN`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`user`</ph> for the <ph id=\"ph4\">`user`</ph> parameter.","pos":[167,254],"source":" If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter."},{"content":"You can specify \".\" for the <ph id=\"ph1\">`user`</ph> parameter to indicate the local computer.","pos":[255,331],"source":" You can specify \".\" for the `user` parameter to indicate the local computer."}]},{"pos":[338,797],"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","nodes":[{"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","pos":[0,459],"nodes":[{"content":"The permissions you assign through <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph> add rights to the existing list.","pos":[0,122],"source":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list."},{"content":"By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.","pos":[123,304]},{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph>, the user and permissions information is appended to the bottom of the existing list.","pos":[305,459],"source":" When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list."}]}]},{"pos":[804,925],"content":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:","nodes":[{"content":"The system examines each <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> in sequence until one of the following events occurs:","pos":[0,121],"source":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:"}]},{"pos":[935,1107],"content":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","nodes":[{"content":"An access-denied <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","pos":[0,172],"source":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token."}]},{"pos":[1117,1291],"content":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","nodes":[{"content":"One or more access-allowed <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","pos":[0,174],"source":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights."}]},{"pos":[1301,1508],"content":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","nodes":[{"content":"All <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","pos":[0,207],"source":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied."}]},{"pos":[1515,1615],"content":"The rights to a queue, specified in the <ph id=\"ph1\">`rights`</ph> parameter, can be any combination of the following:","source":"The rights to a queue, specified in the `rights` parameter, can be any combination of the following:"},{"pos":[1625,1637],"content":"Full Control","nodes":[{"content":"Full Control","pos":[0,12]}]},{"pos":[1647,1661],"content":"Delete Message","nodes":[{"content":"Delete Message","pos":[0,14]}]},{"pos":[1671,1686],"content":"Receive Message","nodes":[{"content":"Receive Message","pos":[0,15]}]},{"pos":[1696,1708],"content":"Peek Message","nodes":[{"content":"Peek Message","pos":[0,12]}]},{"pos":[1718,1741],"content":"Receive Journal Message","nodes":[{"content":"Receive Journal Message","pos":[0,23]}]},{"pos":[1751,1771],"content":"Get Queue Properties","nodes":[{"content":"Get Queue Properties","pos":[0,20]}]},{"pos":[1781,1801],"content":"Set Queue Properties","nodes":[{"content":"Set Queue Properties","pos":[0,20]}]},{"pos":[1811,1826],"content":"Get Permissions","nodes":[{"content":"Get Permissions","pos":[0,15]}]},{"pos":[1836,1851],"content":"Set Permissions","nodes":[{"content":"Set Permissions","pos":[0,15]}]},{"pos":[1861,1881],"content":"Take Queue Ownership","nodes":[{"content":"Take Queue Ownership","pos":[0,20]}]},{"pos":[1891,1904],"content":"Write Message","nodes":[{"content":"Write Message","pos":[0,13]}]},{"pos":[1911,2089],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueAccessRights&gt;</ph> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the <ph id=\"ph2\">`rights`</ph> parameter.","source":"The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter."},{"pos":[2096,2304],"content":"With this overload, you can only grant permissions; you cannot revoke or deny them. You must use a different overload to explicitly grant any <xref:System.Messaging.AccessControlEntryType> other than `Allow`.","nodes":[{"content":"With this overload, you can only grant permissions; you cannot revoke or deny them.","pos":[0,83]},{"content":"You must use a different overload to explicitly grant any <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntryType&gt;</ph> other than <ph id=\"ph2\">`Allow`</ph>.","pos":[84,208],"source":" You must use a different overload to explicitly grant any <xref:System.Messaging.AccessControlEntryType> other than `Allow`."}]},{"pos":[2311,2397],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2404,2418],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2419,2428],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2474,2488],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2489,2492],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2497,2534],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2535,2538],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2543,2558],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2559,2561],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2566,2604],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2605,2607],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[510420,513082],"yaml":true,"extradata":"MT"},{"content":"The individual, group, or computer that gets additional rights to the queue.","nodes":[{"pos":[0,76],"content":"The individual, group, or computer that gets additional rights to the queue.","nodes":[{"content":"The individual, group, or computer that gets additional rights to the queue.","pos":[0,76]}]}],"pos":[513685,513762],"yaml":true},{"content":"A <xref href=\"System.Messaging.MessageQueueAccessRights\"></xref> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in.","nodes":[{"pos":[0,175],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueAccessRights\"&gt;&lt;/xref&gt;</ph> that indicates the set of rights to the queue that Message Queuing assigns to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">user</ph><ept id=\"p1\">&lt;/code&gt;</ept> passed in.","source":"A <xref href=\"System.Messaging.MessageQueueAccessRights\"></xref> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in."}],"pos":[513852,514028],"yaml":true},{"content":"The <code>user</code> is `null`.","nodes":[{"pos":[0,32],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">user</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>user</code> is `null`."}],"pos":[514194,514227],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[514349,514408],"yaml":true},{"content":"Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set).","nodes":[{"pos":[0,131],"content":"Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set).","nodes":[{"content":"Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set).","pos":[0,131]}]}],"pos":[515790,515922],"yaml":true},{"content":"Use this overload to grant, deny, or revoke specified rights for an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter. You can specify \".\" for the `user` parameter to indicate the local computer.  \n  \n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n The rights to a queue, specified in the `rights` parameter, can be any combination of the following:  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,349],"content":"Use this overload to grant, deny, or revoke specified rights for an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter. You can specify \".\" for the `user` parameter to indicate the local computer.","nodes":[{"content":"Use this overload to grant, deny, or revoke specified rights for an individual user.","pos":[0,84]},{"content":"The user can be any valid trustee, which includes individual users, groups of users, or a computer.","pos":[85,184]},{"content":"If the user is an individual, use the format <ph id=\"ph1\">`DOMAIN`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`user`</ph> for the <ph id=\"ph4\">`user`</ph> parameter.","pos":[185,272],"source":" If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter."},{"content":"You can specify \".\" for the <ph id=\"ph1\">`user`</ph> parameter to indicate the local computer.","pos":[273,349],"source":" You can specify \".\" for the `user` parameter to indicate the local computer."}]},{"pos":[356,815],"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","nodes":[{"content":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.","pos":[0,459],"nodes":[{"content":"The permissions you assign through <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph> add rights to the existing list.","pos":[0,122],"source":"The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list."},{"content":"By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.","pos":[123,304]},{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SetPermissions%2A&gt;</ph>, the user and permissions information is appended to the bottom of the existing list.","pos":[305,459],"source":" When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list."}]}]},{"pos":[822,943],"content":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:","nodes":[{"content":"The system examines each <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> in sequence until one of the following events occurs:","pos":[0,121],"source":"The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:"}]},{"pos":[953,1125],"content":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","nodes":[{"content":"An access-denied <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.","pos":[0,172],"source":"An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token."}]},{"pos":[1135,1309],"content":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","nodes":[{"content":"One or more access-allowed <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items for trustees listed in the thread's access token explicitly grant all the requested access rights.","pos":[0,174],"source":"One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights."}]},{"pos":[1319,1526],"content":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","nodes":[{"content":"All <ph id=\"ph1\">&lt;xref:System.Messaging.AccessControlEntry&gt;</ph> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.","pos":[0,207],"source":"All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied."}]},{"pos":[1533,1633],"content":"The rights to a queue, specified in the <ph id=\"ph1\">`rights`</ph> parameter, can be any combination of the following:","source":"The rights to a queue, specified in the `rights` parameter, can be any combination of the following:"},{"pos":[1643,1655],"content":"Full Control","nodes":[{"content":"Full Control","pos":[0,12]}]},{"pos":[1665,1679],"content":"Delete Message","nodes":[{"content":"Delete Message","pos":[0,14]}]},{"pos":[1689,1704],"content":"Receive Message","nodes":[{"content":"Receive Message","pos":[0,15]}]},{"pos":[1714,1726],"content":"Peek Message","nodes":[{"content":"Peek Message","pos":[0,12]}]},{"pos":[1736,1759],"content":"Receive Journal Message","nodes":[{"content":"Receive Journal Message","pos":[0,23]}]},{"pos":[1769,1789],"content":"Get Queue Properties","nodes":[{"content":"Get Queue Properties","pos":[0,20]}]},{"pos":[1799,1819],"content":"Set Queue Properties","nodes":[{"content":"Set Queue Properties","pos":[0,20]}]},{"pos":[1829,1844],"content":"Get Permissions","nodes":[{"content":"Get Permissions","pos":[0,15]}]},{"pos":[1854,1869],"content":"Set Permissions","nodes":[{"content":"Set Permissions","pos":[0,15]}]},{"pos":[1879,1899],"content":"Take Queue Ownership","nodes":[{"content":"Take Queue Ownership","pos":[0,20]}]},{"pos":[1909,1922],"content":"Write Message","nodes":[{"content":"Write Message","pos":[0,13]}]},{"pos":[1929,2107],"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueAccessRights&gt;</ph> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the <ph id=\"ph2\">`rights`</ph> parameter.","source":"The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter."},{"pos":[2114,2200],"content":"The following table shows whether this method is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this method is available in various Workgroup modes.","pos":[0,86]}]},{"pos":[2207,2221],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[2222,2231],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2277,2291],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[2292,2295],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2300,2337],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2338,2341],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2346,2361],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2362,2364],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2369,2407],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2408,2410],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[515933,518396],"yaml":true,"extradata":"MT"},{"content":"The individual, group, or computer that gets additional rights to the queue.","nodes":[{"pos":[0,76],"content":"The individual, group, or computer that gets additional rights to the queue.","nodes":[{"content":"The individual, group, or computer that gets additional rights to the queue.","pos":[0,76]}]}],"pos":[519092,519169],"yaml":true},{"content":"A <xref href=\"System.Messaging.MessageQueueAccessRights\"></xref> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in.","nodes":[{"pos":[0,175],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueAccessRights\"&gt;&lt;/xref&gt;</ph> that indicates the set of rights to the queue that Message Queuing assigns to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">user</ph><ept id=\"p1\">&lt;/code&gt;</ept> passed in.","source":"A <xref href=\"System.Messaging.MessageQueueAccessRights\"></xref> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in."}],"pos":[519259,519435],"yaml":true},{"content":"A <xref href=\"System.Messaging.AccessControlEntryType\"></xref> that specifies whether to grant, deny, or revoke the permissions specified by the <code>rights</code> parameter.","nodes":[{"pos":[0,175],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.AccessControlEntryType\"&gt;&lt;/xref&gt;</ph> that specifies whether to grant, deny, or revoke the permissions specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">rights</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A <xref href=\"System.Messaging.AccessControlEntryType\"></xref> that specifies whether to grant, deny, or revoke the permissions specified by the <code>rights</code> parameter."}],"pos":[519526,519702],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[519896,519955],"yaml":true},{"content":"Gets or sets the object that marshals the event-handler call resulting from a <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> or <xref href=\"System.Messaging.MessageQueue.PeekCompleted\"></xref> event.","nodes":[{"pos":[0,220],"content":"Gets or sets the object that marshals the event-handler call resulting from a <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueue.PeekCompleted\"&gt;&lt;/xref&gt;</ph> event.","source":"Gets or sets the object that marshals the event-handler call resulting from a <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> or <xref href=\"System.Messaging.MessageQueue.PeekCompleted\"></xref> event."}],"pos":[520904,521125],"yaml":true},{"content":"A <xref:System.Messaging.MessageQueue.ReceiveCompleted> or <xref:System.Messaging.MessageQueue.PeekCompleted> event results from a <xref:System.Messaging.MessageQueue.BeginReceive%2A> or <xref:System.Messaging.MessageQueue.BeginPeek%2A> request, respectively, to a specific thread. Typically, the <xref:System.Messaging.MessageQueue.SynchronizingObject%2A> is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.  \n  \n Typically, the synchronizing object marshals a method call into a single thread.","nodes":[{"pos":[0,485],"content":"A <xref:System.Messaging.MessageQueue.ReceiveCompleted> or <xref:System.Messaging.MessageQueue.PeekCompleted> event results from a <xref:System.Messaging.MessageQueue.BeginReceive%2A> or <xref:System.Messaging.MessageQueue.BeginPeek%2A> request, respectively, to a specific thread. Typically, the <xref:System.Messaging.MessageQueue.SynchronizingObject%2A> is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.","nodes":[{"content":"A <xref:System.Messaging.MessageQueue.ReceiveCompleted> or <xref:System.Messaging.MessageQueue.PeekCompleted> event results from a <xref:System.Messaging.MessageQueue.BeginReceive%2A> or <xref:System.Messaging.MessageQueue.BeginPeek%2A> request, respectively, to a specific thread. Typically, the <xref:System.Messaging.MessageQueue.SynchronizingObject%2A> is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.","pos":[0,485],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.ReceiveCompleted&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.PeekCompleted&gt;</ph> event results from a <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph> request, respectively, to a specific thread.","pos":[0,281],"source":"A <xref:System.Messaging.MessageQueue.ReceiveCompleted> or <xref:System.Messaging.MessageQueue.PeekCompleted> event results from a <xref:System.Messaging.MessageQueue.BeginReceive%2A> or <xref:System.Messaging.MessageQueue.BeginPeek%2A> request, respectively, to a specific thread."},{"content":"Typically, the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.SynchronizingObject%2A&gt;</ph> is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.","pos":[282,485],"source":" Typically, the <xref:System.Messaging.MessageQueue.SynchronizingObject%2A> is set when its related component is placed inside a control or a form, because those components are bound to a specific thread."}]}]},{"pos":[492,572],"content":"Typically, the synchronizing object marshals a method call into a single thread.","nodes":[{"content":"Typically, the synchronizing object marshals a method call into a single thread.","pos":[0,80]}]}],"pos":[521136,521713],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref>, which represents the object that marshals the event-handler call resulting from a <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> or <xref href=\"System.Messaging.MessageQueue.PeekCompleted\"></xref> event. The default is `null`.","nodes":[{"pos":[0,312],"content":"A <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref>, which represents the object that marshals the event-handler call resulting from a <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> or <xref href=\"System.Messaging.MessageQueue.PeekCompleted\"></xref> event. The default is `null`.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ISynchronizeInvoke\"&gt;&lt;/xref&gt;</ph>, which represents the object that marshals the event-handler call resulting from a <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Messaging.MessageQueue.PeekCompleted\"&gt;&lt;/xref&gt;</ph> event.","pos":[0,289],"source":"A <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref>, which represents the object that marshals the event-handler call resulting from a <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> or <xref href=\"System.Messaging.MessageQueue.PeekCompleted\"></xref> event."},{"content":"The default is <ph id=\"ph1\">`null`</ph>.","pos":[290,312],"source":" The default is `null`."}]}],"pos":[522032,522345],"yaml":true},{"content":"Gets a value that indicates whether the queue accepts only transactions.","nodes":[{"pos":[0,72],"content":"Gets a value that indicates whether the queue accepts only transactions.","nodes":[{"content":"Gets a value that indicates whether the queue accepts only transactions.","pos":[0,72]}]}],"pos":[523460,523533],"yaml":true},{"content":"Transactional messaging refers to the coupling of several related messages into a single transaction. Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.  \n  \n If a queue is transactional, it accepts only messages that are sent as part of a transaction. However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, and <xref:System.Messaging.MessageQueueTransaction.Abort%2A> syntax. If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name. In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.  \n  \n If you send a non-transactional message to a transactional queue, you will not be able to roll back the message in the event of an exception.  \n  \n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \n  \n```vb  \n<System.MTAThreadAttribute>  \n public sub Main()  \n```  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,271],"content":"Transactional messaging refers to the coupling of several related messages into a single transaction. Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.","nodes":[{"content":"Transactional messaging refers to the coupling of several related messages into a single transaction. Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.","pos":[0,271],"nodes":[{"content":"Transactional messaging refers to the coupling of several related messages into a single transaction.","pos":[0,101]},{"content":"Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.","pos":[102,271]}]}]},{"pos":[278,1073],"content":"If a queue is transactional, it accepts only messages that are sent as part of a transaction. However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, and <xref:System.Messaging.MessageQueueTransaction.Abort%2A> syntax. If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name. In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.","nodes":[{"content":"If a queue is transactional, it accepts only messages that are sent as part of a transaction. However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, and <xref:System.Messaging.MessageQueueTransaction.Abort%2A> syntax. If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name. In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.","pos":[0,795],"nodes":[{"content":"If a queue is transactional, it accepts only messages that are sent as part of a transaction.","pos":[0,93]},{"content":"However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction.Begin%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueueTransaction.Commit%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueueTransaction.Abort%2A&gt;</ph> syntax.","pos":[94,410],"source":" However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, and <xref:System.Messaging.MessageQueueTransaction.Abort%2A> syntax."},{"content":"If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name.","pos":[411,626]},{"content":"In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.","pos":[627,795]}]}]},{"pos":[1080,1221],"content":"If you send a non-transactional message to a transactional queue, you will not be able to roll back the message in the event of an exception.","nodes":[{"content":"If you send a non-transactional message to a transactional queue, you will not be able to roll back the message in the event of an exception.","pos":[0,141]}]},{"pos":[1228,1742],"content":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueTransaction&gt;</ph> is threading apartment aware, so if your apartment state is <ph id=\"ph2\">`STA`</ph>, you cannot use the transaction in multiple threads.","pos":[0,166],"source":"<xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads."},{"content":"Visual Basic sets the state of the main thread to <ph id=\"ph1\">`STA`</ph>, so you must apply the <ph id=\"ph2\">&lt;xref:System.MTAThreadAttribute&gt;</ph> in the <ph id=\"ph3\">`Main`</ph> subroutine.","pos":[167,304],"source":" Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine."},{"content":"Otherwise, sending a transactional message using another thread throws a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueueException&gt;</ph> exception.","pos":[305,434],"source":" Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception."},{"content":"You apply the <ph id=\"ph1\">&lt;xref:System.MTAThreadAttribute&gt;</ph> by using the following fragment.","pos":[435,514],"source":" You apply the <xref:System.MTAThreadAttribute> by using the following fragment."}]},{"pos":[1817,1905],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1912,1926],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1927,1936],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1982,1996],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1997,2000],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2005,2042],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[2043,2046],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[2051,2066],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[2067,2069],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2074,2112],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[2113,2115],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[523544,525683],"yaml":true,"extradata":"MT"},{"content":"`true` if the queue accepts only messages sent as part of a transaction; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if the queue accepts only messages sent as part of a transaction; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the queue accepts only messages sent as part of a transaction; otherwise, `false`."}],"pos":[526140,526235],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[526428,526487],"yaml":true},{"content":"Gets or sets a value that indicates whether received messages are copied to the journal queue.","nodes":[{"pos":[0,94],"content":"Gets or sets a value that indicates whether received messages are copied to the journal queue.","nodes":[{"content":"Gets or sets a value that indicates whether received messages are copied to the journal queue.","pos":[0,94]}]}],"pos":[527483,527578],"yaml":true},{"content":"When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location. The journal queue is used to track the messages removed from a queue. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \n  \n The journal queue does not track messages removed from the queue because their time-to-be-received timer expired, nor does it track messages purged from the queue by using a Message Queuing directory service (Information Store or Active Directory).  \n  \n Applications cannot send messages to journal queues; they are limited to read-only access of these queues. Furthermore, Message Queuing never removes messages from journal queues. The application using the queue must clear these messages either by receiving them or by purging the queue.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|","nodes":[{"pos":[0,368],"content":"When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location. The journal queue is used to track the messages removed from a queue. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","nodes":[{"content":"When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location. The journal queue is used to track the messages removed from a queue. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.","pos":[0,368],"nodes":[{"content":"When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location.","pos":[0,144]},{"content":"The journal queue is used to track the messages removed from a queue.","pos":[145,214]},{"content":"Setting this property modifies the Message Queuing queue.","pos":[215,272]},{"content":"Therefore, any other <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> instances are affected by the change.","pos":[273,368],"source":" Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change."}]}]},{"pos":[375,623],"content":"The journal queue does not track messages removed from the queue because their time-to-be-received timer expired, nor does it track messages purged from the queue by using a Message Queuing directory service (Information Store or Active Directory).","nodes":[{"content":"The journal queue does not track messages removed from the queue because their time-to-be-received timer expired, nor does it track messages purged from the queue by using a Message Queuing directory service (Information Store or Active Directory).","pos":[0,248]}]},{"pos":[630,917],"content":"Applications cannot send messages to journal queues; they are limited to read-only access of these queues. Furthermore, Message Queuing never removes messages from journal queues. The application using the queue must clear these messages either by receiving them or by purging the queue.","nodes":[{"content":"Applications cannot send messages to journal queues; they are limited to read-only access of these queues. Furthermore, Message Queuing never removes messages from journal queues. The application using the queue must clear these messages either by receiving them or by purging the queue.","pos":[0,287],"nodes":[{"content":"Applications cannot send messages to journal queues; they are limited to read-only access of these queues.","pos":[0,106]},{"content":"Furthermore, Message Queuing never removes messages from journal queues.","pos":[107,179]},{"content":"The application using the queue must clear these messages either by receiving them or by purging the queue.","pos":[180,287]}]}]},{"pos":[924,1012],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[1019,1033],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[1034,1043],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[1089,1103],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[1104,1107],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1112,1149],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[1150,1153],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[1158,1173],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[1174,1176],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[1181,1219],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[1220,1222],"content":"No","nodes":[{"content":"No","pos":[0,2]}]}],"pos":[527589,528828],"yaml":true,"extradata":"MT"},{"content":"`true` if messages received from the queue are copied to its journal queue; otherwise, `false`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">`true`</ph> if messages received from the queue are copied to its journal queue; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if messages received from the queue are copied to its journal queue; otherwise, `false`."}],"pos":[529297,529395],"yaml":true},{"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"pos":[0,58],"content":"An error occurred when accessing a Message Queuing method.","nodes":[{"content":"An error occurred when accessing a Message Queuing method.","pos":[0,58]}]}],"pos":[529590,529649],"yaml":true},{"content":"Gets the native handle used to send messages to the message queue.","nodes":[{"pos":[0,66],"content":"Gets the native handle used to send messages to the message queue.","nodes":[{"content":"Gets the native handle used to send messages to the message queue.","pos":[0,66]}]}],"pos":[530621,530688],"yaml":true},{"content":"The <xref:System.Messaging.MessageQueue.WriteHandle%2A> provides a native Windows handle to the message queue object that is used for sending messages to the queue. If you change the path of the queue, the handle is closed and reopened with a new value.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|Yes|","nodes":[{"pos":[0,253],"content":"The <xref:System.Messaging.MessageQueue.WriteHandle%2A> provides a native Windows handle to the message queue object that is used for sending messages to the queue. If you change the path of the queue, the handle is closed and reopened with a new value.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.WriteHandle%2A> provides a native Windows handle to the message queue object that is used for sending messages to the queue. If you change the path of the queue, the handle is closed and reopened with a new value.","pos":[0,253],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.WriteHandle%2A&gt;</ph> provides a native Windows handle to the message queue object that is used for sending messages to the queue.","pos":[0,164],"source":"The <xref:System.Messaging.MessageQueue.WriteHandle%2A> provides a native Windows handle to the message queue object that is used for sending messages to the queue."},{"content":"If you change the path of the queue, the handle is closed and reopened with a new value.","pos":[165,253]}]}]},{"pos":[260,348],"content":"The following table shows whether this property is available in various Workgroup modes.","nodes":[{"content":"The following table shows whether this property is available in various Workgroup modes.","pos":[0,88]}]},{"pos":[355,369],"content":"Workgroup mode","nodes":[{"content":"Workgroup mode","pos":[0,14]}]},{"pos":[370,379],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[425,439],"content":"Local computer","nodes":[{"content":"Local computer","pos":[0,14]}]},{"pos":[440,443],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[448,485],"content":"Local computer and direct format name","nodes":[{"content":"Local computer and direct format name","pos":[0,37]}]},{"pos":[486,489],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]},{"pos":[494,509],"content":"Remote computer","nodes":[{"content":"Remote computer","pos":[0,15]}]},{"pos":[510,512],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[517,555],"content":"Remote computer and direct format name","nodes":[{"content":"Remote computer and direct format name","pos":[0,38]}]},{"pos":[556,559],"content":"Yes","nodes":[{"content":"Yes","pos":[0,3]}]}],"pos":[530699,531271],"yaml":true,"extradata":"MT"},{"content":"A handle to the native queue object that you use for sending messages to the queue.","nodes":[{"pos":[0,83],"content":"A handle to the native queue object that you use for sending messages to the queue.","nodes":[{"content":"A handle to the native queue object that you use for sending messages to the queue.","pos":[0,83]}]}],"pos":[531508,531592],"yaml":true},{"content":"The message queue is not available for writing.","nodes":[{"pos":[0,47],"content":"The message queue is not available for writing.","nodes":[{"content":"The message queue is not available for writing.","pos":[0,47]}]}],"pos":[531783,531831],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.MessageQueue\n  commentId: T:System.Messaging.MessageQueue\n  id: MessageQueue\n  children:\n  - System.Messaging.MessageQueue.#ctor\n  - System.Messaging.MessageQueue.#ctor(System.String)\n  - System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)\n  - System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)\n  - System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)\n  - System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)\n  - System.Messaging.MessageQueue.AccessMode\n  - System.Messaging.MessageQueue.Authenticate\n  - System.Messaging.MessageQueue.BasePriority\n  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)\n  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)\n  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)\n  - System.Messaging.MessageQueue.BeginPeek\n  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)\n  - System.Messaging.MessageQueue.BeginReceive\n  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)\n  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)\n  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)\n  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)\n  - System.Messaging.MessageQueue.CanRead\n  - System.Messaging.MessageQueue.CanWrite\n  - System.Messaging.MessageQueue.Category\n  - System.Messaging.MessageQueue.ClearConnectionCache\n  - System.Messaging.MessageQueue.Close\n  - System.Messaging.MessageQueue.Create(System.String)\n  - System.Messaging.MessageQueue.Create(System.String,System.Boolean)\n  - System.Messaging.MessageQueue.CreateCursor\n  - System.Messaging.MessageQueue.CreateTime\n  - System.Messaging.MessageQueue.DefaultPropertiesToSend\n  - System.Messaging.MessageQueue.Delete(System.String)\n  - System.Messaging.MessageQueue.DenySharedReceive\n  - System.Messaging.MessageQueue.Dispose(System.Boolean)\n  - System.Messaging.MessageQueue.EnableConnectionCache\n  - System.Messaging.MessageQueue.EncryptionRequired\n  - System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)\n  - System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)\n  - System.Messaging.MessageQueue.Exists(System.String)\n  - System.Messaging.MessageQueue.FormatName\n  - System.Messaging.MessageQueue.Formatter\n  - System.Messaging.MessageQueue.GetAllMessages\n  - System.Messaging.MessageQueue.GetEnumerator\n  - System.Messaging.MessageQueue.GetMachineId(System.String)\n  - System.Messaging.MessageQueue.GetMessageEnumerator\n  - System.Messaging.MessageQueue.GetMessageEnumerator2\n  - System.Messaging.MessageQueue.GetMessageQueueEnumerator\n  - System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)\n  - System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)\n  - System.Messaging.MessageQueue.GetPublicQueues\n  - System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)\n  - System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)\n  - System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)\n  - System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)\n  - System.Messaging.MessageQueue.GetSecurityContext\n  - System.Messaging.MessageQueue.Id\n  - System.Messaging.MessageQueue.InfiniteQueueSize\n  - System.Messaging.MessageQueue.InfiniteTimeout\n  - System.Messaging.MessageQueue.Label\n  - System.Messaging.MessageQueue.LastModifyTime\n  - System.Messaging.MessageQueue.MachineName\n  - System.Messaging.MessageQueue.MaximumJournalSize\n  - System.Messaging.MessageQueue.MaximumQueueSize\n  - System.Messaging.MessageQueue.MessageReadPropertyFilter\n  - System.Messaging.MessageQueue.MulticastAddress\n  - System.Messaging.MessageQueue.Path\n  - System.Messaging.MessageQueue.Peek\n  - System.Messaging.MessageQueue.Peek(System.TimeSpan)\n  - System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)\n  - System.Messaging.MessageQueue.PeekByCorrelationId(System.String)\n  - System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)\n  - System.Messaging.MessageQueue.PeekById(System.String)\n  - System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)\n  - System.Messaging.MessageQueue.PeekByLookupId(System.Int64)\n  - System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)\n  - System.Messaging.MessageQueue.PeekCompleted\n  - System.Messaging.MessageQueue.Purge\n  - System.Messaging.MessageQueue.QueueName\n  - System.Messaging.MessageQueue.ReadHandle\n  - System.Messaging.MessageQueue.Receive\n  - System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.Receive(System.TimeSpan)\n  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)\n  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)\n  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)\n  - System.Messaging.MessageQueue.ReceiveById(System.String)\n  - System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)\n  - System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)\n  - System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.ReceiveCompleted\n  - System.Messaging.MessageQueue.Refresh\n  - System.Messaging.MessageQueue.ResetPermissions\n  - System.Messaging.MessageQueue.Send(System.Object)\n  - System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.Send(System.Object,System.String)\n  - System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)\n  - System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)\n  - System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)\n  - System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)\n  - System.Messaging.MessageQueue.SynchronizingObject\n  - System.Messaging.MessageQueue.Transactional\n  - System.Messaging.MessageQueue.UseJournalQueue\n  - System.Messaging.MessageQueue.WriteHandle\n  langs:\n  - csharp\n  name: MessageQueue\n  nameWithType: MessageQueue\n  fullName: System.Messaging.MessageQueue\n  type: Class\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Provides access to a queue on a Message Queuing server.\n  remarks: \"The Message Queuing technology allows applications running at different times to communicate across heterogeneous networks and systems that might be temporarily offline. Applications send, receive, or peek (read without removing) messages from queues. Message Queuing is an optional component of [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] and Windows NT, and must be installed separately.  \\n  \\n The <xref:System.Messaging.MessageQueue> class is a wrapper around Message Queuing. There are multiple versions of Message Queuing, and using the <xref:System.Messaging.MessageQueue> class can result in slightly different behavior, depending on the operating system you are using. For information about specific features of each version of Message Queuing, see the topic \\\"What's New in Message Queuing\\\" in the Platform SDK in MSDN.  \\n  \\n The <xref:System.Messaging.MessageQueue> class provides a reference to a Message Queuing queue. You can specify a path in the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor to connect to an existing resource, or you can create a new queue on the server. Before you can call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, you must associate the new instance of the <xref:System.Messaging.MessageQueue> class with an existing queue. At that point, you can manipulate the queue properties such as <xref:System.Messaging.MessageQueue.Category%2A> and <xref:System.Messaging.MessageQueue.Label%2A>.  \\n  \\n <xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. The asynchronous methods, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A>, allow the main application tasks to continue in a separate thread until a message arrives in the queue. These methods work by using callback objects and state objects to communicate information between threads.  \\n  \\n When you create a new instance of the <xref:System.Messaging.MessageQueue> class, you are not creating a new Message Queuing queue. Instead, you can use the <xref:System.Messaging.MessageQueue.Create%28System.String%29>, <xref:System.Messaging.MessageQueue.Delete%28System.String%29>, and <xref:System.Messaging.MessageQueue.Purge%2A> methods to manage queues on the server.  \\n  \\n Unlike <xref:System.Messaging.MessageQueue.Purge%2A>, <xref:System.Messaging.MessageQueue.Create%28System.String%29> and <xref:System.Messaging.MessageQueue.Delete%28System.String%29> are `static` members, so you can call them without creating a new instance of the <xref:System.Messaging.MessageQueue> class.  \\n  \\n You can set the <xref:System.Messaging.MessageQueue> object's <xref:System.Messaging.MessageQueue.Path%2A> property with one of three names: the friendly name, the <xref:System.Messaging.MessageQueue.FormatName%2A>, or the <xref:System.Messaging.MessageQueue.Label%2A>. The friendly name, which is defined by the queue's <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties, is <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a public queue, and <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\\\\\`Private$`\\\\\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a private queue. The <xref:System.Messaging.MessageQueue.FormatName%2A> property allows offline access to message queues. Lastly, you can use the queue's <xref:System.Messaging.MessageQueue.Label%2A> property to set the queue's <xref:System.Messaging.MessageQueue.Path%2A>.  \\n  \\n For a list of initial property values for an instance of <xref:System.Messaging.MessageQueue>, see the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor.\"\n  example:\n  - \"The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  \\n  \\n [!code-cpp[MessageQueue.Path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Path/CPP/mqpath.cpp#1)]\\n [!code-csharp[MessageQueue.Path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Path/CS/mqpath.cs#1)]\\n [!code-vb[MessageQueue.Path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Path/VB/mqpath.vb#1)]  \\n  \\n The following code example sends a message to a queue, and receives a message from a queue, using an application-specific class called `Order`.  \\n  \\n [!code-cpp[MessageQueue.Receive_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CPP/mqreceive_noparms.cpp#1)]\\n [!code-csharp[MessageQueue.Receive_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CS/mqreceive_noparms.cs#1)]\\n [!code-vb[MessageQueue.Receive_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_noparms/VB/mqreceive_noparms.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageQueueConverter))]\n\n      public class MessageQueue : System.ComponentModel.Component, System.Collections.IEnumerable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.#ctor\n  commentId: M:System.Messaging.MessageQueue.#ctor\n  id: '#ctor'\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MessageQueue()\n  nameWithType: MessageQueue.MessageQueue()\n  fullName: MessageQueue.MessageQueue()\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class. After the default constructor initializes the new instance, you must set the instance's <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property before you can use the instance.\n  remarks: \"Use this overload to create a new instance of the <xref:System.Messaging.MessageQueue> class that is not immediately tied to a queue on the Message Queuing server. Before using this instance, you must connect it to an existing Message Queuing queue by setting the <xref:System.Messaging.MessageQueue.Path%2A> property. Alternatively, you can set the <xref:System.Messaging.MessageQueue> reference to the <xref:System.Messaging.MessageQueue.Create%28System.String%29> method's return value, thereby creating a new Message Queuing queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue.  \\n  \\n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \\n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|  \\n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class. All the filter values are set to `true`.|  \\n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|\"\n  example:\n  - \"The following code example creates a new <xref:System.Messaging.MessageQueue>.  \\n  \\n [!code-csharp[MessageQueue#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#1)]\"\n  syntax:\n    content: public MessageQueue ();\n    parameters: []\n  overload: System.Messaging.MessageQueue.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.#ctor(System.String)\n  commentId: M:System.Messaging.MessageQueue.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MessageQueue(String)\n  nameWithType: MessageQueue.MessageQueue(String)\n  fullName: MessageQueue.MessageQueue(String)\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class that references the Message Queuing queue at the specified path.\n  remarks: \"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> instance to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, you must set the <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property to `true` or use the constructor that passes a read-access restriction parameter.  \\n  \\n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \\n  \\n The syntax of the `path` parameter depends on the type of queue it references, as shown in the following table.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n|Journal queue|`MachineName`\\\\\\\\`QueueName`\\\\\\\\`Journal$`|  \\n|Machine journal queue|`MachineName`\\\\\\\\`Journal$`|  \\n|Machine dead-letter queue|`MachineName`\\\\\\\\`Deadletter$`|  \\n|Machine transactional dead-letter queue|`MachineName`\\\\\\\\`XactDeadletter$`|  \\n  \\n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.  \\n  \\n|Reference|Syntax|Example|  \\n|---------------|------------|-------------|  \\n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\\\\\`QueueName`|  \\n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \\n  \\n To work offline, you must use the format name syntax, not the path name syntax for the constructor. Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.  \\n  \\n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue with the path specified by the `path` parameter.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.MessageQueue.Authenticate%2A>|`false`|  \\n|<xref:System.Messaging.MessageQueue.BasePriority%2A>|0|  \\n|<xref:System.Messaging.MessageQueue.Category%2A>|<xref:System.Guid.Empty>|  \\n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \\n|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|`true`, if the Message Queuing queue's privacy level setting is \\\"Body\\\"; otherwise, `false`.|  \\n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|  \\n|<xref:System.Messaging.MessageQueue.Label%2A>|<xref:System.String.Empty>|  \\n|<xref:System.Messaging.MessageQueue.MachineName%2A>|The value of the Message Queuing queue's computer name property.|  \\n|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  \\n|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  \\n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.|  \\n|<xref:System.Messaging.MessageQueue.Path%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \\n|<xref:System.Messaging.MessageQueue.QueueName%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \\n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|  \\n|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.|\"\n  example:\n  - \"The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  \\n  \\n [!code-cpp[MessageQueue.Path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Path/CPP/mqpath.cpp#1)]\\n [!code-csharp[MessageQueue.Path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Path/CS/mqpath.cs#1)]\\n [!code-vb[MessageQueue.Path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Path/VB/mqpath.vb#1)]\"\n  syntax:\n    content: public MessageQueue (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.\n  overload: System.Messaging.MessageQueue.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property is not valid, possibly because it has not been set.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)\n  commentId: M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)\n  id: '#ctor(System.String,System.Boolean)'\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MessageQueue(String, Boolean)\n  nameWithType: MessageQueue.MessageQueue(String, Boolean)\n  fullName: MessageQueue.MessageQueue(String, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class that references the Message Queuing queue at the specified path and with the specified read-access restriction.\n  remarks: \"Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, set the `sharedModeDenyReceive` parameter to `true`. Otherwise, set `sharedModeDenyReceive` to `false` or use the constructor that has only a `path` parameter.  \\n  \\n Setting `sharedModeDenyReceive` to `true` affects all objects that access the Message Queuing queue, including other applications. The effects of the parameter are not restricted to this application.  \\n  \\n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor creates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \\n  \\n The syntax of the `path` parameter depends on the type of queue.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n|Journal queue|`MachineName`\\\\\\\\`QueueName`\\\\\\\\`Journal$`|  \\n|Machine journal queue|`MachineName`\\\\\\\\`Journal$`|  \\n|Machine dead-letter queue|`MachineName`\\\\\\\\`Deadletter$`|  \\n|Machine transactional dead-letter queue|`MachineName`\\\\\\\\`XactDeadletter$`|  \\n  \\n Alternatively, you can use the format name or label of a Message Queuing queue to describe the queue path.  \\n  \\n|Reference|Syntax|Example|  \\n|---------------|------------|-------------|  \\n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\\\\\`QueueName`|  \\n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \\n  \\n To work offline, you must use the format name syntax, rather than the friendly name syntax. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  \\n  \\n If a <xref:System.Messaging.MessageQueue> opens a queue with the `sharedModeDenyReceive` parameter set to `true`, any <xref:System.Messaging.MessageQueue> that subsequently tries to read from the queue generates a <xref:System.Messaging.MessageQueueException> because of a sharing violation. A <xref:System.Messaging.MessageQueueException> is also thrown if a <xref:System.Messaging.MessageQueue> tries to access the queue in exclusive mode while another <xref:System.Messaging.MessageQueue> already has non-exclusive access to the queue.  \\n  \\n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue, with the path specified by the `path` parameter.  \\n  \\n|Property|Initial value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.MessageQueue.Authenticate%2A>|`false`.|  \\n|<xref:System.Messaging.MessageQueue.BasePriority%2A>|0.|  \\n|<xref:System.Messaging.MessageQueue.Category%2A>|<xref:System.Guid.Empty>.|  \\n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \\n|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|`true`, if the Message Queuing queue's privacy level setting is \\\"Body\\\"; otherwise, `false`.|  \\n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>.|  \\n|<xref:System.Messaging.MessageQueue.Label%2A>|<xref:System.String.Empty>.|  \\n|<xref:System.Messaging.MessageQueue.MachineName%2A>|The value of the Message Queuing queue's computer name property.|  \\n|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.|  \\n|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.|  \\n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.|  \\n|<xref:System.Messaging.MessageQueue.Path%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \\n|<xref:System.Messaging.MessageQueue.QueueName%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \\n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|The value of the `sharedModeDenyReceive` parameter.|  \\n|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.|\"\n  example:\n  - \"The following code example creates a new <xref:System.Messaging.MessageQueue> with exclusive access, sets its path, and sends a message to the queue.  \\n  \\n [!code-cpp[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ctor_PathSharedModeDenyReceive/CPP/mqctor_denysharedreceive.cpp#1)]\\n [!code-csharp[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ctor_PathSharedModeDenyReceive/CS/mqctor_denysharedreceive.cs#1)]\\n [!code-vb[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ctor_PathSharedModeDenyReceive/VB/mqctor_denysharedreceive.vb#1)]\"\n  syntax:\n    content: public MessageQueue (string path, bool sharedModeDenyReceive);\n    parameters:\n    - id: path\n      type: System.String\n      description: The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.\n    - id: sharedModeDenyReceive\n      type: System.Boolean\n      description: '`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <xref href=\"System.Messaging.MessageQueue.Path\"></xref> property is not valid, possibly because it has not been set.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)\n  commentId: M:System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)\n  id: '#ctor(System.String,System.Messaging.QueueAccessMode)'\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MessageQueue(String, QueueAccessMode)\n  nameWithType: MessageQueue.MessageQueue(String, QueueAccessMode)\n  fullName: MessageQueue.MessageQueue(String, QueueAccessMode)\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class.\n  syntax:\n    content: public MessageQueue (string path, System.Messaging.QueueAccessMode accessMode);\n    parameters:\n    - id: path\n      type: System.String\n      description: The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.\n    - id: accessMode\n      type: System.Messaging.QueueAccessMode\n      description: One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values.\n  overload: System.Messaging.MessageQueue.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)\n  id: '#ctor(System.String,System.Boolean,System.Boolean)'\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MessageQueue(String, Boolean, Boolean)\n  nameWithType: MessageQueue.MessageQueue(String, Boolean, Boolean)\n  fullName: MessageQueue.MessageQueue(String, Boolean, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example creates a new <xref:System.Messaging.MessageQueue> with exclusive read access and with connection caching enabled.  \\n  \\n [!code-cpp[MessageQueue4#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue4/cpp/class1.cpp#1)]\\n [!code-csharp[MessageQueue4#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue4/CS/class1.cs#1)]\"\n  syntax:\n    content: public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache);\n    parameters:\n    - id: path\n      type: System.String\n      description: The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.\n    - id: sharedModeDenyReceive\n      type: System.Boolean\n      description: '`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`.'\n    - id: enableCache\n      type: System.Boolean\n      description: '`true` to create and use a connection cache; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)\n  commentId: M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)\n  id: '#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)'\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MessageQueue(String, Boolean, Boolean, QueueAccessMode)\n  nameWithType: MessageQueue.MessageQueue(String, Boolean, Boolean, QueueAccessMode)\n  fullName: MessageQueue.MessageQueue(String, Boolean, Boolean, QueueAccessMode)\n  type: Constructor\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initializes a new instance of the <xref href=\"System.Messaging.MessageQueue\"></xref> class.\n  syntax:\n    content: public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache, System.Messaging.QueueAccessMode accessMode);\n    parameters:\n    - id: path\n      type: System.String\n      description: The location of the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>, which can be \".\" for the local computer.\n    - id: sharedModeDenyReceive\n      type: System.Boolean\n      description: '`true` to grant exclusive read access to the first application that accesses the queue; otherwise, `false`.'\n    - id: enableCache\n      type: System.Boolean\n      description: '`true` to create and use a connection cache; otherwise, `false`.'\n    - id: accessMode\n      type: System.Messaging.QueueAccessMode\n      description: One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values.\n  overload: System.Messaging.MessageQueue.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.AccessMode\n  commentId: P:System.Messaging.MessageQueue.AccessMode\n  id: AccessMode\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: AccessMode\n  nameWithType: MessageQueue.AccessMode\n  fullName: MessageQueue.AccessMode\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets a value that indicates the access mode for the queue.\n  remarks: The default access mode for a queue is `QueueAccessMode.SendAndReceive`, unless you specify otherwise when calling the constructor.\n  syntax:\n    content: public System.Messaging.QueueAccessMode AccessMode { get; }\n    return:\n      type: System.Messaging.QueueAccessMode\n      description: One of the <xref href=\"System.Messaging.QueueAccessMode\"></xref> values.\n  overload: System.Messaging.MessageQueue.AccessMode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Authenticate\n  commentId: P:System.Messaging.MessageQueue.Authenticate\n  id: Authenticate\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Authenticate\n  nameWithType: MessageQueue.Authenticate\n  fullName: MessageQueue.Authenticate\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether the queue accepts only authenticated messages.\n  remarks: \"Message authentication provides a way to ensure message integrity and to verify who sent the message. To request authentication, the sending application sets the message's authentication level.  \\n  \\n When you set <xref:System.Messaging.MessageQueue.Authenticate%2A> to `true`, you are restricting access to the queue on the server, not only to this <xref:System.Messaging.MessageQueue> instance. All clients working against the same Message Queuing queue will be affected.  \\n  \\n A queue that accepts only authenticated messages will reject a non-authenticated message. To request notification of message rejection, a sending application can set the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the message. Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.Authenticate%2A> property.  \\n  \\n [!code-csharp[MessageQueue#3](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#3)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_Authenticate\")]\n\n      public bool Authenticate { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the queue accepts only authenticated messages; otherwise, `false`. The default is `false`.'\n  overload: System.Messaging.MessageQueue.Authenticate*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BasePriority\n  commentId: P:System.Messaging.MessageQueue.BasePriority\n  id: BasePriority\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BasePriority\n  nameWithType: MessageQueue.BasePriority\n  fullName: MessageQueue.BasePriority\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the base priority Message Queuing uses to route a public queue's messages over the network.\n  remarks: \"A message queue's base priority specifies how a message en route to that queue is treated as it travels through the network. You can set the <xref:System.Messaging.MessageQueue.BasePriority%2A> property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \\n  \\n A message queue's <xref:System.Messaging.MessageQueue.BasePriority%2A> is not related to the <xref:System.Messaging.Message.Priority%2A> property of a message, which specifies the order in which an incoming message is placed in the queue.  \\n  \\n <xref:System.Messaging.MessageQueue.BasePriority%2A> applies only to public queues whose paths are specified using the format name. The base priority of a private queue is always zero (0).  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.BasePriority%2A> property.  \\n  \\n [!code-csharp[MessageQueue#4](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#4)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_BasePriority\")]\n\n      public short BasePriority { get; set; }\n    return:\n      type: System.Int16\n      description: The single base priority for all messages sent to the (public) queue. The default is zero (0).\n  overload: System.Messaging.MessageQueue.BasePriority*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The base priority was set to an invalid value.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)\n  commentId: M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)\n  id: BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginPeek(TimeSpan, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan, Object, AsyncCallback)\n  fullName: MessageQueue.BeginPeek(TimeSpan, Object, AsyncCallback)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.  \\n  \\n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an asynchronous peek operation. The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginPeek%28System.TimeSpan%2CSystem.Object%2CSystem.AsyncCallback%29>, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <xref:System.AsyncCallback> that identifies the event handler, `MyPeekCompleted`. When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the event handler peeks at the message and writes the message body and the integer message identifier to the screen.  \\n  \\n [!code-cpp[MessageQueueBeginPeek#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginPeek/cpp/class1.cpp#0)]\\n [!code-csharp[MessageQueueBeginPeek#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginPeek/CS/class1.cs#0)]\"\n  syntax:\n    content: public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject, AsyncCallback callback);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    - id: stateObject\n      type: System.Object\n      description: A state object, specified by the application, that contains information associated with the asynchronous operation.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref href=\"System.AsyncCallback\"></xref> that will receive the notification of the asynchronous operation completion.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginPeek*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)\n  commentId: M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)\n  id: BeginPeek(System.TimeSpan,System.Object)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginPeek(TimeSpan, Object)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan, Object)\n  fullName: MessageQueue.BeginPeek(TimeSpan, Object)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \\n  \\n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \\n  \\n Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can access this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.  \\n  \\n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define. For an illustration of this scenario, see the Example section.  \\n  \\n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \\n  \\n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an asynchronous peek operation, using the queue path \\\".\\\\myQueue\\\". It creates an event handler, `MyPeekCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called, with a time-out of one minute. Each call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> has a unique associated integer that identifies that particular operation. When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised or the time-out expired, the message, if one exists, is retrieved and its body and the operation-specific integer identifier are written to the screen. Then <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called again to initiate a new asynchronous peek operation with the same time-out and the associated integer of the just completed operation.  \\n  \\n [!code-cpp[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_TimeSpanStateObject/CPP/mqbeginpeek_timeoutstateobject.cpp#1)]\\n [!code-csharp[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_TimeSpanStateObject/CS/mqbeginpeek_timeoutstateobject.cs#1)]\\n [!code-vb[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_TimeSpanStateObject/VB/mqbeginpeek_timeoutstateobject.vb#1)]\"\n  syntax:\n    content: public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    - id: stateObject\n      type: System.Object\n      description: A state object, specified by the application, that contains information associated with the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginPeek*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)\n  commentId: M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)\n  id: BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginPeek(TimeSpan, Cursor, PeekAction, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan, Cursor, PeekAction, Object, AsyncCallback)\n  fullName: MessageQueue.BeginPeek(TimeSpan, Cursor, PeekAction, Object, AsyncCallback)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired. The <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.  \\n  \\n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation started by the method. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public IAsyncResult BeginPeek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action, object state, AsyncCallback callback);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    - id: cursor\n      type: System.Messaging.Cursor\n      description: A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.\n    - id: action\n      type: System.Messaging.PeekAction\n      description: One of the <xref href=\"System.Messaging.PeekAction\"></xref> values. Indicates whether to peek at the current message in the queue, or the next message.\n    - id: state\n      type: System.Object\n      description: A state object, specified by the application, that contains information associated with the asynchronous operation.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref href=\"System.AsyncCallback\"></xref> that receives the notification of the asynchronous operation completion.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginPeek*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: A value other than `PeekAction.Current` or `PeekAction.Next` was specified for the <code>action</code> parameter.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>cursor</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginPeek\n  commentId: M:System.Messaging.MessageQueue.BeginPeek\n  id: BeginPeek\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginPeek()\n  nameWithType: MessageQueue.BeginPeek()\n  fullName: MessageQueue.BeginPeek()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue.\n  remarks: \"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue.  \\n  \\n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path \\\".\\\\myQueue\\\". When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen. The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation.  \\n  \\n [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]\\n [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]\\n [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]\"\n  syntax:\n    content: public IAsyncResult BeginPeek ();\n    parameters: []\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginPeek*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)\n  id: BeginPeek(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginPeek(TimeSpan)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan)\n  fullName: MessageQueue.BeginPeek(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \\n  \\n <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.  \\n  \\n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an asynchronous peek operation, using the queue path \\\".\\\\myQueue\\\". It creates an event handler, `MyPeekCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called with a time-out of one minute, to initiate the asynchronous peek operation. When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised or the time-out expires, the message is retrieved if one exists, and its body is written to the screen. Then <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called again to initiate a new asynchronous peek operation with the same time-out.  \\n  \\n [!code-cpp[MessageQueue.BeginPeek_timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_timeout/CPP/mqbeginpeek_timeout.cpp#1)]\\n [!code-csharp[MessageQueue.BeginPeek_timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_timeout/CS/mqbeginpeek_timeout.cs#1)]\\n [!code-vb[MessageQueue.BeginPeek_timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_timeout/VB/mqbeginpeek_timeout.vb#1)]\"\n  syntax:\n    content: public IAsyncResult BeginPeek (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginPeek*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginReceive\n  commentId: M:System.Messaging.MessageQueue.BeginReceive\n  id: BeginReceive\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginReceive()\n  nameWithType: MessageQueue.BeginReceive()\n  fullName: MessageQueue.BeginReceive()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue.\n  remarks: \"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message has been removed from the queue.  \\n  \\n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \\n  \\n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \\n  \\n```csharp  \\nmyMessageQueue.BeginTransaction();  \\n myMessageQueue.Receive();  \\n myMessageQueue.CommitTransaction();  \\n```  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example chains asynchronous requests. It assumes there is a queue on the local computer called \\\"myQueue\\\". The `Main` function begins the asynchronous operation that is handled by the `MyReceiveCompleted` routine. `MyReceiveCompleted` processes the current message and begins a new asynchronous receive operation.  \\n  \\n [!code-cpp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CPP/mqbeginreceive_noparms_mre.cpp#1)]\\n [!code-csharp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CS/mqbeginreceive_noparms_mre.cs#1)]\\n [!code-vb[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/VB/mqbeginreceive_noparms_mre.vb#1)]  \\n  \\n The following code example queues asynchronous requests. The call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> uses the <xref:System.IAsyncResult.AsyncWaitHandle%2A> in its return value. The `Main` routine waits for all asynchronous operations to be completed before exiting.  \\n  \\n [!code-cpp[MessageQueue.BeginReceive_noparms_combined#2](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CPP/mqbeginreceive_noparms_wh.cpp#2)]\\n [!code-csharp[MessageQueue.BeginReceive_noparms_combined#2](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CS/mqbeginreceive_noparms_wh.cs#2)]\\n [!code-vb[MessageQueue.BeginReceive_noparms_combined#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/VB/mqbeginreceive_noparms_wh.vb#2)]\"\n  syntax:\n    content: public IAsyncResult BeginReceive ();\n    parameters: []\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginReceive*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)\n  id: BeginReceive(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginReceive(TimeSpan)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan)\n  fullName: MessageQueue.BeginReceive(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \\n  \\n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \\n  \\n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.  \\n  \\n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \\n  \\n```csharp  \\nmyMessageQueue.BeginTransaction();  \\n myMessageQueue.Receive();  \\n myMessageQueue.CommitTransaction();  \\n```  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an asynchronous receive operation. The code example creates an event handler, `MyReceiveCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate. The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%29>, passing in a time-out value of ten seconds. When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body to the screen.  \\n  \\n [!code-cpp[MessageQueueBeginReceive1#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginReceive1/cpp/class1.cpp#0)]\\n [!code-csharp[MessageQueueBeginReceive1#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginReceive1/CS/class1.cs#0)]\"\n  syntax:\n    content: public IAsyncResult BeginReceive (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginReceive*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly because it represents a negative number.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)\n  commentId: M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)\n  id: BeginReceive(System.TimeSpan,System.Object)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginReceive(TimeSpan, Object)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan, Object)\n  fullName: MessageQueue.BeginReceive(TimeSpan, Object)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.  \\n  \\n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \\n  \\n Use this overload to associate information with the operation that will be preserved throughout the operation's lifetime. The event handler can detect this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.  \\n  \\n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \\n  \\n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \\n  \\n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \\n  \\n```csharp  \\nmyMessageQueue.BeginTransaction();  \\n myMessageQueue.Receive();  \\n myMessageQueue.CommitTransaction();  \\n```  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an asynchronous receive operation. The code example creates an event handler, `MyReceiveCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate. The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%2CSystem.Object%29>, passing in a time-out value of ten seconds and a unique integer that identifies that particular message. When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.  \\n  \\n [!code-cpp[MessageQueueBeginReceive2#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginReceive2/cpp/class1.cpp#0)]\\n [!code-csharp[MessageQueueBeginReceive2#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginReceive2/CS/class1.cs#0)]\"\n  syntax:\n    content: public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    - id: stateObject\n      type: System.Object\n      description: A state object, specified by the application, that contains information associated with the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginReceive*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)\n  commentId: M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)\n  id: BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginReceive(TimeSpan, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan, Object, AsyncCallback)\n  fullName: MessageQueue.BeginReceive(TimeSpan, Object, AsyncCallback)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation's lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.  \\n  \\n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \\n  \\n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \\n  \\n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \\n  \\n```csharp  \\nmyMessageQueue.BeginTransaction();  \\n myMessageQueue.Receive();  \\n myMessageQueue.CommitTransaction();  \\n```  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an asynchronous receive operation. The code example sends a message to a local message queue, then calls <xref:System.Messaging.MessageQueue.BeginReceive%28System.TimeSpan%2CSystem.Object%2CSystem.AsyncCallback%29>, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <xref:System.AsyncCallback> that identifies the event handler, `MyReceiveCompleted`. When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.  \\n  \\n [!code-cpp[MessageQueueBeginReceive3#0](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueueBeginReceive3/cpp/class1.cpp#0)]\\n [!code-csharp[MessageQueueBeginReceive3#0](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueueBeginReceive3/CS/class1.cs#0)]\"\n  syntax:\n    content: public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject, AsyncCallback callback);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    - id: stateObject\n      type: System.Object\n      description: A state object, specified by the application, that contains information associated with the asynchronous operation.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref href=\"System.AsyncCallback\"></xref> that will receive the notification of the asynchronous operation completion.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginReceive*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)\n  commentId: M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)\n  id: BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: BeginReceive(TimeSpan, Cursor, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan, Cursor, Object, AsyncCallback)\n  fullName: MessageQueue.BeginReceive(TimeSpan, Cursor, Object, AsyncCallback)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.\n  remarks: \"When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.  \\n  \\n <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.  \\n  \\n To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.  \\n  \\n The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.  \\n  \\n Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.  \\n  \\n Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.  \\n  \\n The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.  \\n  \\n The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.  \\n  \\n You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.  \\n  \\n Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.  \\n  \\n```csharp  \\nmyMessageQueue.BeginTransaction();  \\n myMessageQueue.Receive();  \\n myMessageQueue.CommitTransaction();  \\n```  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public IAsyncResult BeginReceive (TimeSpan timeout, System.Messaging.Cursor cursor, object state, AsyncCallback callback);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the interval of time to wait for a message to become available.\n    - id: cursor\n      type: System.Messaging.Cursor\n      description: A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.\n    - id: state\n      type: System.Object\n      description: A state object, specified by the application, that contains information associated with the asynchronous operation.\n    - id: callback\n      type: System.AsyncCallback\n      description: The <xref href=\"System.AsyncCallback\"></xref> that receives the notification of the asynchronous operation completion.\n    return:\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the posted asynchronous request.\n  overload: System.Messaging.MessageQueue.BeginReceive*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>cursor</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.CanRead\n  commentId: P:System.Messaging.MessageQueue.CanRead\n  id: CanRead\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: MessageQueue.CanRead\n  fullName: MessageQueue.CanRead\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets a value that indicates whether the <xref href=\"System.Messaging.MessageQueue\"></xref> can be read.\n  remarks: \"<xref:System.Messaging.MessageQueue.CanRead%2A> indicates whether the application is able to peek or receive messages from the queue. If <xref:System.Messaging.MessageQueue.CanRead%2A> is `true`, the <xref:System.Messaging.MessageQueue> can receive or peek messages from the queue. Otherwise, it cannot.  \\n  \\n <xref:System.Messaging.MessageQueue.CanRead%2A> is `false` if a queue is already open with exclusive read access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to read from a queue when <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, access is denied.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.CanRead%2A> property.  \\n  \\n [!code-csharp[MessageQueue#5](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#5)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_CanRead\")]\n\n      public bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Messaging.MessageQueue\"></xref> exists and the application can read from it; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.CanRead*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.CanWrite\n  commentId: P:System.Messaging.MessageQueue.CanWrite\n  id: CanWrite\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: MessageQueue.CanWrite\n  fullName: MessageQueue.CanWrite\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets a value that indicates whether the <xref href=\"System.Messaging.MessageQueue\"></xref> can be written to.\n  remarks: \"<xref:System.Messaging.MessageQueue.CanWrite%2A> indicates whether the application is able to send messages to the queue. If <xref:System.Messaging.MessageQueue.CanWrite%2A> is `true`, the <xref:System.Messaging.MessageQueue> can send messages to the queue. Otherwise, it cannot.  \\n  \\n <xref:System.Messaging.MessageQueue.CanWrite%2A> is `false` if a queue is already open with exclusive write access (or if it's open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to write to a queue when <xref:System.Messaging.MessageQueue.CanWrite%2A> is `false`, access is denied.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.CanWrite%2A> property.  \\n  \\n [!code-csharp[MessageQueue#6](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#6)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_CanWrite\")]\n\n      public bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Messaging.MessageQueue\"></xref> exists and the application can write to it; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.CanWrite*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Category\n  commentId: P:System.Messaging.MessageQueue.Category\n  id: Category\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Category\n  nameWithType: MessageQueue.Category\n  fullName: MessageQueue.Category\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the queue category.\n  remarks: \"The queue category allows an application to categorize its queues. For example, you can place all Billing queues in one category and all Order queues in another.  \\n  \\n The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing Type ID property (which is read/write), accessible through the **Queue Properties** dialog box in the Computer Management Console. You can define a new category. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, such an action is unnecessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.  \\n  \\n It is not necessary to set the <xref:System.Messaging.MessageQueue.Category%2A>. The value can be `null`.  \\n  \\n Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.Category%2A> property.  \\n  \\n [!code-csharp[MessageQueue#7](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#7)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_Category\")]\n\n      public Guid Category { get; set; }\n    return:\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues. The default is `Guid.empty`.\n  overload: System.Messaging.MessageQueue.Category*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The queue category was set to an invalid value.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ClearConnectionCache\n  commentId: M:System.Messaging.MessageQueue.ClearConnectionCache\n  id: ClearConnectionCache\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ClearConnectionCache()\n  nameWithType: MessageQueue.ClearConnectionCache()\n  fullName: MessageQueue.ClearConnectionCache()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Clears the connection cache.\n  remarks: \"When you call <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, the format names stored in the cache are removed and handles opened and stored in the cache are closed.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example calls <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>.  \\n  \\n [!code-csharp[MessageQueue#8](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#8)]\"\n  syntax:\n    content: public static void ClearConnectionCache ();\n    parameters: []\n  overload: System.Messaging.MessageQueue.ClearConnectionCache*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Close\n  commentId: M:System.Messaging.MessageQueue.Close\n  id: Close\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: MessageQueue.Close()\n  fullName: MessageQueue.Close()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Frees all resources allocated by the <xref href=\"System.Messaging.MessageQueue\"></xref>.\n  remarks: \"<xref:System.Messaging.MessageQueue.Close%2A> frees all resources associated with a <xref:System.Messaging.MessageQueue>, including shared resources if appropriate. The system re-acquires these resources automatically if they are still available, for example when you call the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method, as in the following C# code.  \\n  \\n```csharp  \\nmyMessageQueue.Send(\\\"Text 1.\\\");  \\nmyMessageQueue.Close();  \\nmyMessageQueue.Send(\\\"Text 2.\\\"); //Resources are re-acquired.  \\n```  \\n  \\n When you call <xref:System.Messaging.MessageQueue.Close%2A>, all <xref:System.Messaging.MessageQueue> properties that directly access the Message Queuing queue are cleared out. The <xref:System.Messaging.MessageQueue.Path%2A>, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, <xref:System.Messaging.MessageQueue.Formatter%2A>, and <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> all remain as they were.  \\n  \\n <xref:System.Messaging.MessageQueue.Close%2A> does not always free the read and write handles to a queue, because they might be shared. You can take any of the following steps to ensure that <xref:System.Messaging.MessageQueue.Close%2A> frees the read and write handles to a queue:  \\n  \\n-   Create the <xref:System.Messaging.MessageQueue> with exclusive access. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29> or <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor, and set the `sharedModeDenyReceive` parameter to `true`.  \\n  \\n-   Create the <xref:System.Messaging.MessageQueue> with connection caching disabled. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor and set the `enableConnectionCache` parameter to `false`.  \\n  \\n-   Disable connection caching. To do so, set the <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property to `false`.  \\n  \\n You should call <xref:System.Messaging.MessageQueue.Close%2A> for a queue before you delete the queue on the Message Queuing server. Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example closes a Message Queuing queue.  \\n  \\n [!code-cpp[MessageQueue.Close#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Close/CPP/mqclose.cpp#1)]\\n [!code-csharp[MessageQueue.Close#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Close/CS/mqclose.cs#1)]\\n [!code-vb[MessageQueue.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Close/VB/mqclose.vb#1)]\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Messaging.MessageQueue.Close*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Create(System.String)\n  commentId: M:System.Messaging.MessageQueue.Create(System.String)\n  id: Create(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: MessageQueue.Create(String)\n  fullName: MessageQueue.Create(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Creates a non-transactional Message Queuing queue at the specified path.\n  remarks: \"Use this overload to create a non-transactional Message Queuing queue.  \\n  \\n To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \\n  \\n The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n  \\n Use \\\".\\\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example creates public and private queues. It sends a message to selected queues.  \\n  \\n [!code-cpp[MessageQueue.Create_path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Create_path/CPP/mqcreate.cpp#1)]\\n [!code-csharp[MessageQueue.Create_path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Create_path/CS/mqcreate.cs#1)]\\n [!code-vb[MessageQueue.Create_path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Create_path/VB/mqcreate.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue Create (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path of the queue to create.\n    return:\n      type: System.Messaging.MessageQueue\n      description: A <xref href=\"System.Messaging.MessageQueue\"></xref> that represents the new queue.\n  overload: System.Messaging.MessageQueue.Create*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter is `null` or is an empty string (\"\").\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A queue already exists at the specified path.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Create(System.String,System.Boolean)\n  commentId: M:System.Messaging.MessageQueue.Create(System.String,System.Boolean)\n  id: Create(System.String,System.Boolean)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Create(String, Boolean)\n  nameWithType: MessageQueue.Create(String, Boolean)\n  fullName: MessageQueue.Create(String, Boolean)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Creates a transactional or non-transactional Message Queuing queue at the specified path.\n  remarks: \"You can use this overload to create a transactional queue in Message Queuing. You can create a non-transactional queue, by setting the `transactional` parameter to `false` or by calling the other overload of <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \\n  \\n To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A>constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \\n  \\n The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n  \\n Use \\\".\\\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example creates public and private transactional queues. It sends a message to selected queues.  \\n  \\n [!code-cpp[MessageQueue.Create_PathTransactional#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Create_PathTransactional/CPP/mqcreate_transactional.cpp#1)]\\n [!code-csharp[MessageQueue.Create_PathTransactional#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Create_PathTransactional/CS/mqcreate_transactional.cs#1)]\\n [!code-vb[MessageQueue.Create_PathTransactional#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Create_PathTransactional/VB/mqcreate_transactional.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue Create (string path, bool transactional);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path of the queue to create.\n    - id: transactional\n      type: System.Boolean\n      description: '`true` to create a transactional queue; `false` to create a non-transactional queue.'\n    return:\n      type: System.Messaging.MessageQueue\n      description: A <xref href=\"System.Messaging.MessageQueue\"></xref> that represents the new queue.\n  overload: System.Messaging.MessageQueue.Create*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter is `null` or is an empty string (\"\").\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A queue already exists at the specified path.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.CreateCursor\n  commentId: M:System.Messaging.MessageQueue.CreateCursor\n  id: CreateCursor\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: CreateCursor()\n  nameWithType: MessageQueue.CreateCursor()\n  fullName: MessageQueue.CreateCursor()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Creates a new <xref href=\"System.Messaging.Cursor\"></xref> for the current message queue.\n  syntax:\n    content: public System.Messaging.Cursor CreateCursor ();\n    parameters: []\n    return:\n      type: System.Messaging.Cursor\n      description: A new <xref href=\"System.Messaging.Cursor\"></xref> for the current message queue. This cursor is used to maintain a specific location in the queue when reading the queue's messages.\n  overload: System.Messaging.MessageQueue.CreateCursor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.CreateTime\n  commentId: P:System.Messaging.MessageQueue.CreateTime\n  id: CreateTime\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: CreateTime\n  nameWithType: MessageQueue.CreateTime\n  fullName: MessageQueue.CreateTime\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the time and date that the queue was created in Message Queuing.\n  remarks: \"<xref:System.Messaging.MessageQueue.CreateTime%2A> refers to the queue on the Message Queuing server, not the <xref:System.Messaging.MessageQueue> instance.  \\n  \\n If the queue exists, this property represents the time the queue was created, adjusted to the local time of the server on which the queue exists.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.CreateTime%2A> property.  \\n  \\n [!code-csharp[MessageQueue#9](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#9)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_CreateTime\")]\n\n      public DateTime CreateTime { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> that represents the date and time at which the queue was created.\n  overload: System.Messaging.MessageQueue.CreateTime*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.DefaultPropertiesToSend\n  commentId: P:System.Messaging.MessageQueue.DefaultPropertiesToSend\n  id: DefaultPropertiesToSend\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: DefaultPropertiesToSend\n  nameWithType: MessageQueue.DefaultPropertiesToSend\n  fullName: MessageQueue.DefaultPropertiesToSend\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the message property values to be used by default when the application sends messages to the queue.\n  remarks: \"When you send any object that is not of type <xref:System.Messaging.Message> to the queue, the <xref:System.Messaging.MessageQueue> inserts the object into a Message Queuing message. At that time, the <xref:System.Messaging.MessageQueue> applies to the message the property values you specify in the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property. Conversely, if you send a <xref:System.Messaging.Message> to the queue, these properties are already specified for the instance itself, so <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> is ignored for the <xref:System.Messaging.Message>.  \\n  \\n Although you set the properties through the <xref:System.Messaging.MessageQueue> object, the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> refers to the properties of the messages that are sent to the queue, not the queue itself.  \\n  \\n The default values for the properties are shown in the following table.  \\n  \\n|Property|Default value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>|`AcknowledgeType.None`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>|`null`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>|Zero (0)|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>|`true`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>|A zero-length array of bytes|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.Label%2A>|Empty string (\\\"\\\")|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>|`MessagePriority.Normal`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>|`false`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>|`null`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>|`null`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>|`false`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>|`false`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.UseEncryption%2A>|`false`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>|`false`|  \\n|<xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>|`false`|  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example uses the priority of a message to determine default properties to send for the message.  \\n  \\n [!code-cpp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CPP/mqdefaultpropertiestosend.cpp#1)]\\n [!code-csharp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CS/mqdefaultpropertiestosend.cs#1)]\\n [!code-vb[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/VB/mqdefaultpropertiestosend.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_DefaultPropertiesToSend\")]\n\n      public System.Messaging.DefaultPropertiesToSend DefaultPropertiesToSend { get; set; }\n    return:\n      type: System.Messaging.DefaultPropertiesToSend\n      description: A <xref href=\"System.Messaging.DefaultPropertiesToSend\"></xref> that contains the default Message Queuing message property values used when the application sends objects other than <xref href=\"System.Messaging.Message\"></xref> instances to the queue.\n  overload: System.Messaging.MessageQueue.DefaultPropertiesToSend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The default properties could not be set for the queue, possibly because one of the properties is not valid.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Delete(System.String)\n  commentId: M:System.Messaging.MessageQueue.Delete(System.String)\n  id: Delete(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Delete(String)\n  nameWithType: MessageQueue.Delete(String)\n  fullName: MessageQueue.Delete(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Deletes a queue on a Message Queuing server.\n  remarks: \"The syntax for the `path` parameter depends on the type of queue.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n  \\n For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \\n  \\n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.  \\n  \\n|Reference|Syntax|  \\n|---------------|------------|  \\n|Format name|FormatName:[ *format name* ]|  \\n|Label|Label:[ *label* ]|  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example deletes a Message Queuing queue, if it exists.  \\n  \\n [!code-cpp[MessageQueue.ExistsDelete#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CPP/mqexistsdelete.cpp#1)]\\n [!code-csharp[MessageQueue.ExistsDelete#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CS/mqexistsdelete.cs#1)]\\n [!code-vb[MessageQueue.ExistsDelete#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ExistsDelete/VB/mqexistsdelete.vb#1)]\"\n  syntax:\n    content: public static void Delete (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The location of the queue to be deleted.\n  overload: System.Messaging.MessageQueue.Delete*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> parameter is `null` or is an empty string (\"\").\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The syntax for the <code>path</code> parameter is not valid.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.DenySharedReceive\n  commentId: P:System.Messaging.MessageQueue.DenySharedReceive\n  id: DenySharedReceive\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: DenySharedReceive\n  nameWithType: MessageQueue.DenySharedReceive\n  fullName: MessageQueue.DenySharedReceive\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether this <xref href=\"System.Messaging.MessageQueue\"></xref> has exclusive access to receive messages from the Message Queuing queue.\n  remarks: \"<xref:System.Messaging.MessageQueue.DenySharedReceive%2A> specifies the shared mode of the queue referenced by this <xref:System.Messaging.MessageQueue>. Set <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> to `true` to indicate that only this <xref:System.Messaging.MessageQueue> should have access to peek or receive messages from the queue with the specified <xref:System.Messaging.MessageQueue.Path%2A>. If another <xref:System.Messaging.MessageQueue> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them.  \\n  \\n If <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> is `false`, the queue is available to multiple applications for sending, peeking, or receiving messages.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property.  \\n  \\n [!code-csharp[MessageQueue#10](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#10)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_DenySharedReceive\")]\n\n      public bool DenySharedReceive { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if this <xref href=\"System.Messaging.MessageQueue\"></xref> has exclusive rights to receive messages from the queue; otherwise, `false`. The default is `false`.'\n  overload: System.Messaging.MessageQueue.DenySharedReceive*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Dispose(System.Boolean)\n  commentId: M:System.Messaging.MessageQueue.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: MessageQueue.Dispose(Boolean)\n  fullName: MessageQueue.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Disposes of the resources (other than memory) used by the <xref href=\"System.Messaging.MessageQueue\"></xref>.\n  remarks: \"Call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> when you are finished using the <xref:System.Messaging.MessageQueue>. The <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> method leaves the <xref:System.Messaging.MessageQueue> in an unusable state. After calling <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29>, you must release all references to the <xref:System.Messaging.MessageQueue> so the memory it was occupying can be reclaimed by garbage collection.  \\n  \\n You should call <xref:System.Messaging.MessageQueue.Dispose%28System.Boolean%29> before you release your last reference to the <xref:System.Messaging.MessageQueue>. Otherwise, the resources the <xref:System.Messaging.MessageQueue> is using will not be freed until garbage collection calls the <xref:System.Messaging.MessageQueue> object's destructor.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Messaging.MessageQueue.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.EnableConnectionCache\n  commentId: P:System.Messaging.MessageQueue.EnableConnectionCache\n  id: EnableConnectionCache\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: EnableConnectionCache\n  nameWithType: MessageQueue.EnableConnectionCache\n  fullName: MessageQueue.EnableConnectionCache\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether a cache of connections will be maintained by the application.\n  remarks: \"A connection cache is a list of references to structures that contain read or write handles to queues. When <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> is `true`, the <xref:System.Messaging.MessageQueue> borrows handles from the cache each time you call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, rather than open new handles. This can improve performance. Using a connection cache also insulates the <xref:System.Messaging.MessageQueue> from changes in the network topology.  \\n  \\n If you create a new connection to a queue when the connection cache is full, the <xref:System.Messaging.MessageQueue> overwrites the least recently accessed structure with the new connection. You can clear the cache entirely by calling <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property.  \\n  \\n [!code-csharp[MessageQueue#11](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#11)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public static bool EnableConnectionCache { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` to create and use a connection cache; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.EnableConnectionCache*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.EncryptionRequired\n  commentId: P:System.Messaging.MessageQueue.EncryptionRequired\n  id: EncryptionRequired\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: EncryptionRequired\n  nameWithType: MessageQueue.EncryptionRequired\n  fullName: MessageQueue.EncryptionRequired\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages.\n  remarks: \"When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted. The other members (for example, the <xref:System.Messaging.Message.Label%2A> and <xref:System.Messaging.Message.SenderId%2A> properties) cannot be encrypted.  \\n  \\n Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \\n  \\n Encrypting a message makes the message private. You can specify the queue's encryption requirement to be `None`, `Body`, or `Optional` by setting the <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> property appropriately. The <xref:System.Messaging.Message.UseEncryption%2A> setting of the message must correspond to the encryption requirement of the queue. If the message is not encrypted but the queue specifies `Body`, or if the message is encrypted but the queue specifies `None`, the message is rejected by the queue. If the sending application requests a negative acknowledgment message in this event, Message Queuing indicates the message's rejection to the sending application. If the <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, a message that fails encryption is sent to the dead-letter queue. Otherwise, the message is lost.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.EncryptionRequired%2A> property.  \\n  \\n [!code-csharp[MessageQueue#12](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#12)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_EncryptionRequired\")]\n\n      public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }\n    return:\n      type: System.Messaging.EncryptionRequired\n      description: One of the <xref href=\"System.Messaging.EncryptionRequired\"></xref> values. The default is `None`.\n  overload: System.Messaging.MessageQueue.EncryptionRequired*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)\n  commentId: M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)\n  id: EndPeek(System.IAsyncResult)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: EndPeek(IAsyncResult)\n  nameWithType: MessageQueue.EndPeek(IAsyncResult)\n  fullName: MessageQueue.EndPeek(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Completes the specified asynchronous peek operation.\n  remarks: \"When the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginPeek%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> peeks the message.  \\n  \\n <xref:System.Messaging.MessageQueue.BeginPeek%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> throws an exception.  \\n  \\n <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to read the message that caused the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised.  \\n  \\n If you want to continue to asynchronously peek messages, you can again call <xref:System.Messaging.MessageQueue.BeginPeek%2A> after calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path \\\".\\\\myQueue\\\". When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen. The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation.  \\n  \\n [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]\\n [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]\\n [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message EndPeek (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the asynchronous peek operation to finish and from which to retrieve an end result.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> associated with the completed asynchronous operation.\n  overload: System.Messaging.MessageQueue.EndPeek*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>asyncResult</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The syntax of the <code>asyncResult</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)\n  commentId: M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)\n  id: EndReceive(System.IAsyncResult)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: EndReceive(IAsyncResult)\n  nameWithType: MessageQueue.EndReceive(IAsyncResult)\n  fullName: MessageQueue.EndReceive(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Completes the specified asynchronous receive operation.\n  remarks: \"When the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginReceive%2A> call. To do so, <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> receives the message.  \\n  \\n <xref:System.Messaging.MessageQueue.BeginReceive%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> throws an exception.  \\n  \\n <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to read (removing from the queue) the message that caused the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised.  \\n  \\n If you want to continue to asynchronously receive messages, you can again call <xref:System.Messaging.MessageQueue.BeginReceive%2A> after calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example chains asynchronous requests. It assumes there is a queue on the local computer called \\\"myQueue\\\". The `Main` function begins the asynchronous operation that is handled by the `MyReceiveCompleted` routine. `MyReceiveCompleted` processes the current message and begins a new asynchronous receive operation.  \\n  \\n [!code-cpp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CPP/mqbeginreceive_noparms_mre.cpp#1)]\\n [!code-csharp[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/CS/mqbeginreceive_noparms_mre.cs#1)]\\n [!code-vb[MessageQueue.BeginReceive_noparms_combined#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginReceive_noparms_combined/VB/mqbeginreceive_noparms_mre.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message EndReceive (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The <xref href=\"System.IAsyncResult\"></xref> that identifies the asynchronous receive operation to finish and from which to retrieve an end result.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> associated with the completed asynchronous operation.\n  overload: System.Messaging.MessageQueue.EndReceive*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>asyncResult</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The syntax of the <code>asyncResult</code> parameter is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Exists(System.String)\n  commentId: M:System.Messaging.MessageQueue.Exists(System.String)\n  id: Exists(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Exists(String)\n  nameWithType: MessageQueue.Exists(String)\n  fullName: MessageQueue.Exists(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Determines whether a Message Queuing queue exists at the specified path.\n  remarks: \"The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method determines whether a Message Queuing queue exists at a specified path. No method exists to determine whether a queue with a specified format name exists. For more information about the format name syntax and other path syntax forms, see the <xref:System.Messaging.MessageQueue.Path%2A> property.)  \\n  \\n <xref:System.Messaging.MessageQueue.Exists%28System.String%29> is an expensive operation. Use it only when it is necessary within the application.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Messaging.MessageQueue.Exists%28System.String%29> method does not support the <xref:System.Messaging.MessageQueue.FormatName%2A> prefix.  \\n  \\n The syntax for the `path` parameter depends on the type of queue, as shown in the following table.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n  \\n <xref:System.Messaging.MessageQueue.Exists%28System.String%29> cannot be called to verify the existence of a remote private queue.  \\n  \\n For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \\n  \\n Alternatively, you can use the <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.  \\n  \\n|Reference|Syntax|  \\n|---------------|------------|  \\n|Label|Label:[ `label` ]|  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example verifies whether a Message Queuing queue exists, and then deletes it.  \\n  \\n [!code-cpp[MessageQueue.ExistsDelete#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CPP/mqexistsdelete.cpp#1)]\\n [!code-csharp[MessageQueue.ExistsDelete#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ExistsDelete/CS/mqexistsdelete.cs#1)]\\n [!code-vb[MessageQueue.ExistsDelete#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ExistsDelete/VB/mqexistsdelete.vb#1)]\"\n  syntax:\n    content: public static bool Exists (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The location of the queue to find.\n    return:\n      type: System.Boolean\n      description: '`true` if a queue with the specified path exists; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.Exists*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> syntax is not valid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"An error occurred when accessing a Message Queuing method.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Messaging.MessageQueue.Exists(System.String)\\\"></xref> method is being called on a remote private queue\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The application used format name syntax when verifying queue existence.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.FormatName\n  commentId: P:System.Messaging.MessageQueue.FormatName\n  id: FormatName\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: FormatName\n  nameWithType: MessageQueue.FormatName\n  fullName: MessageQueue.FormatName\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the unique queue name that Message Queuing generated at the time of the queue's creation.\n  remarks: \"The <xref:System.Messaging.MessageQueue.FormatName%2A> property contains the format name of the queue. Message Queuing uses the format name to identify which queue to open and how to access it. Unlike most of a queue's characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool. The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.  \\n  \\n If you specify a path using the path name syntax (such as `myComputer\\\\myQueue`) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <xref:System.Messaging.MessageQueue.Path%2A> into the associated <xref:System.Messaging.MessageQueue.FormatName%2A> before accessing the queue. If your application is working offline, you must use the format name syntax; otherwise, the primary domain controller will not be available to perform the path translation.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.FormatName%2A> property.  \\n  \\n [!code-csharp[MessageQueue#13](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#13)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_FormatName\")]\n\n      public string FormatName { get; }\n    return:\n      type: System.String\n      description: The name for the queue, which is unique on the network.\n  overload: System.Messaging.MessageQueue.FormatName*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The <xref href=\\\"System.Messaging.MessageQueue.Path\\\"></xref> is not set.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Formatter\n  commentId: P:System.Messaging.MessageQueue.Formatter\n  id: Formatter\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Formatter\n  nameWithType: MessageQueue.Formatter\n  fullName: MessageQueue.Formatter\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue.\n  remarks: \"The <xref:System.Messaging.MessageQueue.Formatter%2A> property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue.  \\n  \\n When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.  \\n  \\n The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.  \\n  \\n <xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.  \\n  \\n When your application sends messages to the queue, the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> applies only to those messages that use the default message properties, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>. If you send a <xref:System.Messaging.Message> to the queue, Message Queuing uses the formatter defined in the <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property to serialize the body instead.  \\n  \\n The <xref:System.Messaging.MessageQueue> class will always use a <xref:System.Messaging.Message> to receive or peek a message from the queue. The message is deserialized using the <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \\n  \\n [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]\\n [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]\\n [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  \\n  \\n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]\\n [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]\\n [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))]\n\n      [System.Messaging.MessagingDescription(\"MQ_Formatter\")]\n\n      public System.Messaging.IMessageFormatter Formatter { get; set; }\n    return:\n      type: System.Messaging.IMessageFormatter\n      description: The <xref href=\"System.Messaging.IMessageFormatter\"></xref> that produces a stream to be written to or read from the message body. The default is <xref href=\"System.Messaging.XmlMessageFormatter\"></xref>.\n  overload: System.Messaging.MessageQueue.Formatter*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetAllMessages\n  commentId: M:System.Messaging.MessageQueue.GetAllMessages\n  id: GetAllMessages\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetAllMessages()\n  nameWithType: MessageQueue.GetAllMessages()\n  fullName: MessageQueue.GetAllMessages()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Returns all the messages that are in the queue.\n  remarks: \"<xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a static snapshot of the messages in the queue, not dynamic links to those messages. Therefore, you cannot use the array to modify the messages in the queue. If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> method, which returns a dynamic list of the messages in the queue.  \\n  \\n Because <xref:System.Messaging.MessageQueue.GetAllMessages%2A> returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue.  \\n  \\n <xref:System.Messaging.MessageQueue.GetAllMessages%2A> retrieves only those properties not filtered out by the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.GetAllMessages%2A>.  \\n  \\n [!code-cpp[MessageQueue2#21](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#21)]\\n [!code-csharp[MessageQueue2#21](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#21)]\"\n  syntax:\n    content: public System.Messaging.Message[] GetAllMessages ();\n    parameters: []\n    return:\n      type: System.Messaging.Message[]\n      description: An array of type <xref href=\"System.Messaging.Message\"></xref> that represents all the messages in the queue, in the same order as they appear in the Message Queuing queue.\n  overload: System.Messaging.MessageQueue.GetAllMessages*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetEnumerator\n  commentId: M:System.Messaging.MessageQueue.GetEnumerator\n  id: GetEnumerator\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: MessageQueue.GetEnumerator()\n  fullName: MessageQueue.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Enumerates the messages in a queue. <xref href=\"System.Messaging.MessageQueue.GetEnumerator\"></xref> is deprecated. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead.\n  remarks: \"The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.GetEnumerator%2A>.  \\n  \\n [!code-cpp[MessageQueue2#22](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#22)]\\n [!code-csharp[MessageQueue2#22](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#22)]\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: A <xref href=\"System.Collections.IEnumerator\"></xref> that provides a dynamic connection to the messages in the queue.\n  overload: System.Messaging.MessageQueue.GetEnumerator*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetMachineId(System.String)\n  commentId: M:System.Messaging.MessageQueue.GetMachineId(System.String)\n  id: GetMachineId(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetMachineId(String)\n  nameWithType: MessageQueue.GetMachineId(String)\n  fullName: MessageQueue.GetMachineId(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the identifier of the computer on which the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> is located.\n  remarks: \"You can use a computer's identifier for two purposes, among others: to read the computer journal and to set security certificates. However, you cannot call <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29> for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.  \\n  \\n The computer identifier (or machine identifier) is a <xref:System.Guid> that Message Queuing creates when a computer is added to the enterprise. Message Queuing combines the computer identifier with the `Machine` and `Journal` keywords to create the machine journal's format name, which has the syntax `Machine=<computeridentifier>;Journal`. The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property is `true`.  \\n  \\n This syntax for the journal is only valid when constructing the format name for the queue. The path name syntax is `MachineName`\\\\\\\\`Journal$`.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example calls <xref:System.Messaging.MessageQueue.GetMachineId%28System.String%29>.  \\n  \\n [!code-csharp[MessageQueue#14](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#14)]\"\n  syntax:\n    content: public static Guid GetMachineId (string machineName);\n    parameters:\n    - id: machineName\n      type: System.String\n      description: The name of the computer that contains the queue, without the two preceding backslashes (\\\\\\\\).\n    return:\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> that represents a unique identifier for the computer on which the queue is located.\n  overload: System.Messaging.MessageQueue.GetMachineId*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The computer identifier could not be retrieved, possibly because the directory service is not available; for example, if you are working offline.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetMessageEnumerator\n  commentId: M:System.Messaging.MessageQueue.GetMessageEnumerator\n  id: GetMessageEnumerator\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetMessageEnumerator()\n  nameWithType: MessageQueue.GetMessageEnumerator()\n  fullName: MessageQueue.GetMessageEnumerator()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Creates an enumerator object for all the messages in the queue. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator\"></xref> is deprecated. <xref href=\"System.Messaging.MessageQueue.GetMessageEnumerator2\"></xref> should be used instead.\n  remarks: \"<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> returns.  \\n  \\n Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.  \\n  \\n The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.  \\n  \\n If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \\n  \\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]\\n [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]\\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public System.Messaging.MessageEnumerator GetMessageEnumerator ();\n    parameters: []\n    return:\n      type: System.Messaging.MessageEnumerator\n      description: The <xref href=\"System.Messaging.MessageEnumerator\"></xref> holding the messages that are contained in the queue.\n  overload: System.Messaging.MessageQueue.GetMessageEnumerator*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetMessageEnumerator2\n  commentId: M:System.Messaging.MessageQueue.GetMessageEnumerator2\n  id: GetMessageEnumerator2\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetMessageEnumerator2()\n  nameWithType: MessageQueue.GetMessageEnumerator2()\n  fullName: MessageQueue.GetMessageEnumerator2()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Creates an enumerator object for all the messages in the queue.\n  remarks: \"<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator's current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> returns.  \\n  \\n Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor's current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.  \\n  \\n The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.  \\n  \\n If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.MessageEnumerator GetMessageEnumerator2 ();\n    parameters: []\n    return:\n      type: System.Messaging.MessageEnumerator\n      description: The <xref href=\"System.Messaging.MessageEnumerator\"></xref> holding the messages that are contained in the queue.\n  overload: System.Messaging.MessageQueue.GetMessageEnumerator2*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator\n  commentId: M:System.Messaging.MessageQueue.GetMessageQueueEnumerator\n  id: GetMessageQueueEnumerator\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetMessageQueueEnumerator()\n  nameWithType: MessageQueue.GetMessageQueueEnumerator()\n  fullName: MessageQueue.GetMessageQueueEnumerator()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Provides forward-only cursor semantics to enumerate through all public queues on the network.\n  remarks: \"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns an enumeration of all the public queues that are on the network.  \\n  \\n Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor's current position. Additions or deletion of queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.  \\n  \\n There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.  \\n  \\n If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \\n  \\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CPP/mqgetmessagequeueenumerator.cpp#1)]\\n [!code-csharp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CS/mqgetmessagequeueenumerator.cs#1)]\\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/VB/mqgetmessagequeueenumerator.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator ();\n    parameters: []\n    return:\n      type: System.Messaging.MessageQueueEnumerator\n      description: A <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> that provides a dynamic listing of all the public message queues on the network.\n  overload: System.Messaging.MessageQueue.GetMessageQueueEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)\n  commentId: M:System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)\n  id: GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetMessageQueueEnumerator(MessageQueueCriteria)\n  nameWithType: MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)\n  fullName: MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria.\n  remarks: \"This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria. You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.  \\n  \\n Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor's current position. Changes to queues located before the cursor's current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.  \\n  \\n There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.  \\n  \\n If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or call <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called. Calling <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provides the same results as calling <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> with the filtering criteria of <xref:System.Messaging.MessageQueue.Category%2A>, <xref:System.Messaging.MessageQueue.Label%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>, respectively.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example iterates through message queues and displays the path of each queue that was created in the last day and that exists on the computer \\\"MyComputer\\\".  \\n  \\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_criteria/CPP/mqgetmessagequeueenumerator_criteria.cpp#1)]\\n [!code-csharp[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_criteria/CS/mqgetmessagequeueenumerator_criteria.cs#1)]\\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_criteria/VB/mqgetmessagequeueenumerator_criteria.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator (System.Messaging.MessageQueueCriteria criteria);\n    parameters:\n    - id: criteria\n      type: System.Messaging.MessageQueueCriteria\n      description: A <xref href=\"System.Messaging.MessageQueueCriteria\"></xref> that contains the criteria used to filter the available message queues.\n    return:\n      type: System.Messaging.MessageQueueEnumerator\n      description: A <xref href=\"System.Messaging.MessageQueueEnumerator\"></xref> that provides a dynamic listing of the public message queues on the network that satisfy the restrictions specified by the <code>criteria</code> parameter.\n  overload: System.Messaging.MessageQueue.GetMessageQueueEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)\n  commentId: M:System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)\n  id: GetPrivateQueuesByMachine(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetPrivateQueuesByMachine(String)\n  nameWithType: MessageQueue.GetPrivateQueuesByMachine(String)\n  fullName: MessageQueue.GetPrivateQueuesByMachine(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Retrieves all the private queues on the specified computer.\n  remarks: \"<xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues on a specified computer.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example retrieves lists of queues.  \\n  \\n [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]\\n [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]\\n [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue[] GetPrivateQueuesByMachine (string machineName);\n    parameters:\n    - id: machineName\n      type: System.String\n      description: The computer from which to retrieve the private queues.\n    return:\n      type: System.Messaging.MessageQueue[]\n      description: An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved private queues.\n  overload: System.Messaging.MessageQueue.GetPrivateQueuesByMachine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>machineName</code> parameter is `null` or an empty string (\"\").\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetPublicQueues\n  commentId: M:System.Messaging.MessageQueue.GetPublicQueues\n  id: GetPublicQueues\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetPublicQueues()\n  nameWithType: MessageQueue.GetPublicQueues()\n  fullName: MessageQueue.GetPublicQueues()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Retrieves all the public queues on the network.\n  remarks: \"Use this overload if you want a complete list of all the public queues on the network. If you want to restrict the list by certain criteria, such as <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, or last modified time use another overload of this method. (Alternatively, you can use <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>.)  \\n  \\n <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example retrieves lists of queues.  \\n  \\n [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]\\n [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]\\n [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue[] GetPublicQueues ();\n    parameters: []\n    return:\n      type: System.Messaging.MessageQueue[]\n      description: An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.\n  overload: System.Messaging.MessageQueue.GetPublicQueues*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)\n  commentId: M:System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)\n  id: GetPublicQueues(System.Messaging.MessageQueueCriteria)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetPublicQueues(MessageQueueCriteria)\n  nameWithType: MessageQueue.GetPublicQueues(MessageQueueCriteria)\n  fullName: MessageQueue.GetPublicQueues(MessageQueueCriteria)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Retrieves all the public queues on the network that meet the specified criteria.\n  remarks: \"If you want to filter all the public queues on the network by label, category, or computer name, the <xref:System.Messaging.MessageQueue> class contains specific methods that provide that functionality (<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, respectively). Use this overload to get a list of all the public queues on the network that meet more than one of these criteria (for example, if you want to specify both a label and a category). You can also filter by message criteria other than <xref:System.Messaging.MessageQueue.Label%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>. For example, you use this overload to filter by a queue's last-modified time. Simply create a new instance of the <xref:System.Messaging.MessageQueueCriteria> class, set the appropriate properties in the instance, and pass the instance as the `criteria` parameter.  \\n  \\n <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example retrieves lists of queues.  \\n  \\n [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]\\n [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]\\n [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue[] GetPublicQueues (System.Messaging.MessageQueueCriteria criteria);\n    parameters:\n    - id: criteria\n      type: System.Messaging.MessageQueueCriteria\n      description: A <xref href=\"System.Messaging.MessageQueueCriteria\"></xref> that contains the criteria used to filter the queues.\n    return:\n      type: System.Messaging.MessageQueue[]\n      description: An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.\n  overload: System.Messaging.MessageQueue.GetPublicQueues*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)\n  commentId: M:System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)\n  id: GetPublicQueuesByCategory(System.Guid)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetPublicQueuesByCategory(Guid)\n  nameWithType: MessageQueue.GetPublicQueuesByCategory(Guid)\n  fullName: MessageQueue.GetPublicQueuesByCategory(Guid)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Retrieves all the public queues on the network that belong to the specified category.\n  remarks: \"Use this method to filter the public queues by category. The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, it is not necessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.  \\n  \\n <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the category as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example retrieves lists of queues.  \\n  \\n [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]\\n [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]\\n [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue[] GetPublicQueuesByCategory (Guid category);\n    parameters:\n    - id: category\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> that groups the set of queues to be retrieved.\n    return:\n      type: System.Messaging.MessageQueue[]\n      description: An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.\n  overload: System.Messaging.MessageQueue.GetPublicQueuesByCategory*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)\n  commentId: M:System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)\n  id: GetPublicQueuesByLabel(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetPublicQueuesByLabel(String)\n  nameWithType: MessageQueue.GetPublicQueuesByLabel(String)\n  fullName: MessageQueue.GetPublicQueuesByLabel(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Retrieves all the public queues on the network that carry the specified label.\n  remarks: \"Use this method to filter the public queues by label.  \\n  \\n <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the label as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example retrieves lists of queues.  \\n  \\n [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]\\n [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]\\n [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue[] GetPublicQueuesByLabel (string label);\n    parameters:\n    - id: label\n      type: System.String\n      description: A label that groups the set of queues to be retrieved.\n    return:\n      type: System.Messaging.MessageQueue[]\n      description: An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the retrieved public queues.\n  overload: System.Messaging.MessageQueue.GetPublicQueuesByLabel*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>label</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)\n  commentId: M:System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)\n  id: GetPublicQueuesByMachine(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetPublicQueuesByMachine(String)\n  nameWithType: MessageQueue.GetPublicQueuesByMachine(String)\n  fullName: MessageQueue.GetPublicQueuesByMachine(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Retrieves all the public queues that reside on the specified computer.\n  remarks: \"Use this method to filter the public queues by computer.  \\n  \\n <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the computer name as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|No|  \\n|Local computer and direct format name|No|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example retrieves lists of queues.  \\n  \\n [!code-cpp[MessageQueue.GetQueueLists#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CPP/mqgetqueuelists.cpp#1)]\\n [!code-csharp[MessageQueue.GetQueueLists#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetQueueLists/CS/mqgetqueuelists.cs#1)]\\n [!code-vb[MessageQueue.GetQueueLists#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetQueueLists/VB/mqgetqueuelists.vb#1)]\"\n  syntax:\n    content: public static System.Messaging.MessageQueue[] GetPublicQueuesByMachine (string machineName);\n    parameters:\n    - id: machineName\n      type: System.String\n      description: The name of the computer that contains the set of public queues to be retrieved.\n    return:\n      type: System.Messaging.MessageQueue[]\n      description: An array of <xref href=\"System.Messaging.MessageQueue\"></xref> objects that reference the public queues on the computer.\n  overload: System.Messaging.MessageQueue.GetPublicQueuesByMachine*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>machineName</code> parameter has incorrect syntax.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.GetSecurityContext\n  commentId: M:System.Messaging.MessageQueue.GetSecurityContext\n  id: GetSecurityContext\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: GetSecurityContext()\n  nameWithType: MessageQueue.GetSecurityContext()\n  fullName: MessageQueue.GetSecurityContext()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call.\n  syntax:\n    content: public static System.Messaging.SecurityContext GetSecurityContext ();\n    parameters: []\n    return:\n      type: System.Messaging.SecurityContext\n      description: A <xref href=\"System.Messaging.SecurityContext\"></xref> object that contains the security context.\n  overload: System.Messaging.MessageQueue.GetSecurityContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Id\n  commentId: P:System.Messaging.MessageQueue.Id\n  id: Id\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Id\n  nameWithType: MessageQueue.Id\n  fullName: MessageQueue.Id\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the unique Message Queuing identifier of the queue.\n  remarks: \"Message Queuing sets the <xref:System.Messaging.MessageQueue.Id%2A> property when it creates the queue. This property is only available for public queues.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.Id%2A> property.  \\n  \\n [!code-csharp[MessageQueue#15](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#15)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_GuidId\")]\n\n      public Guid Id { get; }\n    return:\n      type: System.Guid\n      description: A <xref href=\"System.Messaging.MessageQueue.Id\"></xref> that represents the message identifier generated by the Message Queuing application.\n  overload: System.Messaging.MessageQueue.Id*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.InfiniteQueueSize\n  commentId: F:System.Messaging.MessageQueue.InfiniteQueueSize\n  id: InfiniteQueueSize\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: InfiniteQueueSize\n  nameWithType: MessageQueue.InfiniteQueueSize\n  fullName: MessageQueue.InfiniteQueueSize\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Specifies that no size restriction exists for a queue.\n  remarks: This member is frequently used when setting <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> or <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Messaging.MessageQueue.InfiniteQueueSize> member.  \\n  \\n [!code-csharp[MessageQueue#16](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#16)]\"\n  syntax:\n    content: public static readonly long InfiniteQueueSize;\n    return:\n      type: System.Int64\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.InfiniteTimeout\n  commentId: F:System.Messaging.MessageQueue.InfiniteTimeout\n  id: InfiniteTimeout\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: InfiniteTimeout\n  nameWithType: MessageQueue.InfiniteTimeout\n  fullName: MessageQueue.InfiniteTimeout\n  type: Field\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Specifies that no time-out exists for methods that peek or receive messages.\n  remarks: '<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. If the specified time interval is <xref:System.Messaging.MessageQueue.InfiniteTimeout>, the process thread remains blocked until a new message is available. On the other hand, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.'\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Messaging.MessageQueue.InfiniteTimeout> member.  \\n  \\n [!code-csharp[MessageQueue#17](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#17)]\"\n  syntax:\n    content: public static readonly TimeSpan InfiniteTimeout;\n    return:\n      type: System.TimeSpan\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Label\n  commentId: P:System.Messaging.MessageQueue.Label\n  id: Label\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Label\n  nameWithType: MessageQueue.Label\n  fullName: MessageQueue.Label\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the queue description.\n  remarks: \"The maximum length of a message queue label is 124 characters.  \\n  \\n The <xref:System.Messaging.MessageQueue.Label%2A> property does not need to be unique across all queues. However, if multiple queues share the same <xref:System.Messaging.MessageQueue.Label%2A>, you cannot use the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method to broadcast a message to all of them. If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.Label%2A> property.  \\n  \\n [!code-csharp[MessageQueue#18](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#18)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_Label\")]\n\n      public string Label { get; set; }\n    return:\n      type: System.String\n      description: The label for the message queue. The default is an empty string (\"\").\n  overload: System.Messaging.MessageQueue.Label*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The label was set to an invalid value.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.LastModifyTime\n  commentId: P:System.Messaging.MessageQueue.LastModifyTime\n  id: LastModifyTime\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: LastModifyTime\n  nameWithType: MessageQueue.LastModifyTime\n  fullName: MessageQueue.LastModifyTime\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the last time the properties of a queue were modified.\n  remarks: \"The last modification time includes when the queue was created and any <xref:System.Messaging.MessageQueue> property that modifies the Message Queuing queue, such as <xref:System.Messaging.MessageQueue.BasePriority%2A>. The value of the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property represents the system time of the local computer.  \\n  \\n You must call <xref:System.Messaging.MessageQueue.Refresh%2A> before getting the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property; otherwise, the modification time associated with this <xref:System.Messaging.MessageQueue> might not be current.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property.  \\n  \\n [!code-csharp[MessageQueue#19](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#19)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_LastModifyTime\")]\n\n      public DateTime LastModifyTime { get; }\n    return:\n      type: System.DateTime\n      description: A <xref href=\"System.DateTime\"></xref> that indicates when the queue properties were last modified.\n  overload: System.Messaging.MessageQueue.LastModifyTime*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.MachineName\n  commentId: P:System.Messaging.MessageQueue.MachineName\n  id: MachineName\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MachineName\n  nameWithType: MessageQueue.MachineName\n  fullName: MessageQueue.MachineName\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the name of the computer where the Message Queuing queue is located.\n  remarks: \"The <xref:System.Messaging.MessageQueue.MachineName%2A> is an integral component of the friendly name syntax of the queue <xref:System.Messaging.MessageQueue.Path%2A>. The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n|Journal queue|`MachineName`\\\\\\\\`QueueName`\\\\\\\\`Journal$`|  \\n|Machine journal queue|`MachineName`\\\\\\\\`Journal$`|  \\n|Machine dead-letter queue|`MachineName`\\\\\\\\`Deadletter$`|  \\n|Machine transactional dead-letter queue|`MachineName`\\\\\\\\`XactDeadletter$`|  \\n  \\n Use \\\".\\\" for the local computer when specifying the <xref:System.Messaging.MessageQueue.MachineName%2A>. Only the computer name is recognized for this property, for example, `Server0`. The <xref:System.Messaging.MessageQueue.MachineName%2A> property does not support the IP address format.  \\n  \\n If you define the <xref:System.Messaging.MessageQueue.Path%2A> in terms of the <xref:System.Messaging.MessageQueue.MachineName%2A>, the application throws an exception when working offline because the domain controller is required for path translation. Therefore, you must use the <xref:System.Messaging.MessageQueue.FormatName%2A> for the <xref:System.Messaging.MessageQueue.Path%2A> syntax when working offline.  \\n  \\n The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue. If the <xref:System.Messaging.MessageQueue.QueueName%2A> property is empty, the <xref:System.Messaging.MessageQueue.Path%2A> is set to the Journal queue of the computer you specify.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.MachineName%2A> property.  \\n  \\n [!code-csharp[MessageQueue#20](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#20)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_MachineName\")]\n\n      public string MachineName { get; set; }\n    return:\n      type: System.String\n      description: The name of the computer where the queue is located. The Message Queuing default is \".\", the local computer.\n  overload: System.Messaging.MessageQueue.MachineName*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The name of the computer is not valid, possibly because the syntax is incorrect.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.MaximumJournalSize\n  commentId: P:System.Messaging.MessageQueue.MaximumJournalSize\n  id: MaximumJournalSize\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MaximumJournalSize\n  nameWithType: MessageQueue.MaximumJournalSize\n  fullName: MessageQueue.MaximumJournalSize\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the maximum size of the journal queue.\n  remarks: \"<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> provides access to the Message Queuing journal storage limit. It is relevant only when <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> is `true`. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change  \\n  \\n If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed. Messages in such a queue count toward the message quota for the computer where the queue resides. (The administrator sets the computer quota.)  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> property.  \\n  \\n [!code-csharp[MessageQueue#21](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#21)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_MaximumJournalSize\")]\n\n      public long MaximumJournalSize { get; set; }\n    return:\n      type: System.Int64\n      description: The maximum size, in kilobytes, of the journal queue. The Message Queuing default specifies that no limit exists.\n  overload: System.Messaging.MessageQueue.MaximumJournalSize*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The maximum journal queue size was set to an invalid value.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.MaximumQueueSize\n  commentId: P:System.Messaging.MessageQueue.MaximumQueueSize\n  id: MaximumQueueSize\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MaximumQueueSize\n  nameWithType: MessageQueue.MaximumQueueSize\n  fullName: MessageQueue.MaximumQueueSize\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the maximum size of the queue.\n  remarks: \"The <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> provides access to the Message Queuing message storage limit, which is separate from the computer's message quota that the administrator defines. For more information about the message quota, see <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>.  \\n  \\n Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change  \\n  \\n If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost. When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message. Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A> property.  \\n  \\n [!code-csharp[MessageQueue#22](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#22)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_MaximumQueueSize\")]\n\n      public long MaximumQueueSize { get; set; }\n    return:\n      type: System.Int64\n      description: The maximum size, in kilobytes, of the queue. The Message Queuing default specifies that no limit exists.\n  overload: System.Messaging.MessageQueue.MaximumQueueSize*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The maximum queue size contains a negative value.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.MessageReadPropertyFilter\n  commentId: P:System.Messaging.MessageQueue.MessageReadPropertyFilter\n  id: MessageReadPropertyFilter\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MessageReadPropertyFilter\n  nameWithType: MessageQueue.MessageReadPropertyFilter\n  fullName: MessageQueue.MessageReadPropertyFilter\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the property filter for receiving or peeking messages.\n  remarks: \"This filter is a set of Boolean values restricting the message properties that the <xref:System.Messaging.MessageQueue> receives or peeks. When the <xref:System.Messaging.MessageQueue> receives or peeks a message from the server queue, it retrieves only those properties for which the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> value is `true`.  \\n  \\n The following shows initial property values for the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property. These settings are identical to calling <xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A> on a <xref:System.Messaging.MessagePropertyFilter>.  \\n  \\n|Property|Default value|  \\n|--------------|-------------------|  \\n|<xref:System.Messaging.MessagePropertyFilter.Acknowledgment%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.AcknowledgeType%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.AdministrationQueue%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.AppSpecific%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.ArrivedTime%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.AttachSenderId%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.Authenticated%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderName%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderType%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.Body%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.ConnectorType%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.CorrelationId%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.DefaultBodySize%2A>|1024 bytes|  \\n|<xref:System.Messaging.MessagePropertyFilter.DefaultExtensionSize%2A>|255 bytes|  \\n|<xref:System.Messaging.MessagePropertyFilter.DefaultLabelSize%2A>|255 bytes|  \\n|<xref:System.Messaging.MessagePropertyFilter.DestinationQueue%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.DestinationSymmetricKey%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.DigitalSignature%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.EncryptionAlgorithm%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.Extension%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.HashAlgorithm%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.Id%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.IsFirstInTransaction%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.IsLastInTransaction%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.Label%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.MessageType%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.Priority%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.Recoverable%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.ResponseQueue%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.SenderCertificate%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.SenderId%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.SenderVersion%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.SentTime%2A>|`true`|  \\n|<xref:System.Messaging.MessagePropertyFilter.SourceMachine%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.TimeToBeReceived%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.TimeToReachQueue%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.TransactionId%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.TransactionStatusQueue%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.UseAuthentication%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.UseDeadLetterQueue%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.UseEncryption%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.UseJournalQueue%2A>|`false`|  \\n|<xref:System.Messaging.MessagePropertyFilter.UseTracing%2A>|`false`|  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example uses the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> to restrict the message properties received.  \\n  \\n [!code-cpp[MessageQueue.MessageReadPropertyFilter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.MessageReadPropertyFilter/CPP/mqmessagereadpropertyfilter.cpp#1)]\\n [!code-csharp[MessageQueue.MessageReadPropertyFilter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.MessageReadPropertyFilter/CS/mqmessagereadpropertyfilter.cs#1)]\\n [!code-vb[MessageQueue.MessageReadPropertyFilter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.MessageReadPropertyFilter/VB/mqmessagereadpropertyfilter.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_MessageReadPropertyFilter\")]\n\n      public System.Messaging.MessagePropertyFilter MessageReadPropertyFilter { get; set; }\n    return:\n      type: System.Messaging.MessagePropertyFilter\n      description: The <xref href=\"System.Messaging.MessagePropertyFilter\"></xref> used by the queue to filter the set of properties it receives or peeks for each message.\n  overload: System.Messaging.MessageQueue.MessageReadPropertyFilter*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The filter is `null`.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.MulticastAddress\n  commentId: P:System.Messaging.MessageQueue.MulticastAddress\n  id: MulticastAddress\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: MulticastAddress\n  nameWithType: MessageQueue.MulticastAddress\n  fullName: MessageQueue.MulticastAddress\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.\n  remarks: \"The <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property is used to associate a non-transactional queue with a multicast address that can be used when sending messages. You cannot associate a transactional queue with a multicast address. When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.  \\n  \\n IP multicast addresses must be in the class D range from 224.0.0.0 to 239.255.255.255, which corresponds to setting the first four high-order bits equal to 1110. However, only certain ranges of addresses in this range are unreserved and available for sending multicast messages. For the latest list of reserved multicast addresses, see the [Internet Assigned Number Authority (IANA) Internet Multicast Addresses](http://go.microsoft.com/fwlink/?linkid=3859) Web page. There are no restrictions on the port number.  \\n  \\n If several source computers are sending multicast messages and you want a specific queue to receive messages from only one source computer, each source computer must send messages to a different combination of IP address and port number.  \\n  \\n To dissociate a queue from a multicast address, set the <xref:System.Messaging.MessageQueue.MulticastAddress%2A> property to a zero-length string. Do not set it to `null`, as this will result in a <xref:System.ArgumentNullException>.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_MulticastAddress\")]\n\n      public string MulticastAddress { get; set; }\n    return:\n      type: System.String\n      description: \"A <xref href=\\\"System.String\\\"></xref> that contains a valid multicast address (in the form shown below) or `null`, which indicates that the queue is not associated with a multicast address.  \\n  \\n```  \\n<address>:<port>  \\n```\"\n  overload: System.Messaging.MessageQueue.MulticastAddress*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: MSMQ 3.0 is not installed.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Path\n  commentId: P:System.Messaging.MessageQueue.Path\n  id: Path\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Path\n  nameWithType: MessageQueue.Path\n  fullName: MessageQueue.Path\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the queue's path. Setting the <xref href=\"System.Messaging.MessageQueue.Path\"></xref> causes the <xref href=\"System.Messaging.MessageQueue\"></xref> to point to a new queue.\n  remarks: \"The syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue it points to, as shown in the following table.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n|Journal queue|`MachineName`\\\\\\\\`QueueName`\\\\\\\\`Journal$`|  \\n|Machine journal queue|`MachineName`\\\\\\\\`Journal$`|  \\n|Machine dead-letter queue|`MachineName`\\\\\\\\`Deadletter$`|  \\n|Machine transactional dead-letter queue|`MachineName`\\\\\\\\`XactDeadletter$`|  \\n  \\n Use \\\".\\\" to represent the local computer.  \\n  \\n The <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue.  \\n  \\n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.  \\n  \\n|Reference|Syntax|Example|  \\n|---------------|------------|-------------|  \\n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112|  \\n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \\n  \\n If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.  \\n  \\n To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  \\n  \\n Setting a new path closes the message queue and releases all handles.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|Yes|  \\n  \\n> [!NOTE]\\n>  In workgroup mode you can only use private queues. You specify the path using the private queue syntax `MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`.\"\n  example:\n  - \"The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  \\n  \\n [!code-cpp[MessageQueue.Path#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Path/CPP/mqpath.cpp#1)]\\n [!code-csharp[MessageQueue.Path#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Path/CS/mqpath.cs#1)]\\n [!code-vb[MessageQueue.Path#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Path/VB/mqpath.vb#1)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.ComponentModel.TypeConverter(\"System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.Messaging.MessagingDescription(\"MQ_Path\")]\n\n      public string Path { get; set; }\n    return:\n      type: System.String\n      description: The queue that is referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. The default depends on which <xref href=\"System.Messaging.MessageQueue.#ctor\"></xref> constructor you use; it is either `null` or is specified by the constructor's <code>path</code> parameter.\n  overload: System.Messaging.MessageQueue.Path*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The path is not valid, possibly because the syntax is not valid.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Peek\n  commentId: M:System.Messaging.MessageQueue.Peek\n  id: Peek\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Peek()\n  nameWithType: MessageQueue.Peek()\n  fullName: MessageQueue.Peek()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available.\n  remarks: \"Use this overload to peek a queue, or to wait until a message exists in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.  \\n  \\n Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.  \\n  \\n Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload does not specify a time-out, the application might wait indefinitely. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method. Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of <xref:System.Messaging.MessageQueue.Peek%2A> that specifies a time-out.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following examples use the <xref:System.Messaging.MessageQueue.Peek%2A> method on a queue.  \\n  \\n In the first example, the application waits until a message becomes available in the queue. Note that the first example does not access the message that arrives; it merely pauses processing until a message arrives. If a message already exists in the queue, it will return immediately.  \\n  \\n In the second example, a message that contains an application-defined `Order` class is sent to the queue, and then peeked from the queue.  \\n  \\n [!code-cpp[MessageQueue.Peek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Peek_noparms/CPP/mqpeek_noparms.cpp#1)]\\n [!code-csharp[MessageQueue.Peek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Peek_noparms/CS/mqpeek_noparms.cs#1)]\\n [!code-vb[MessageQueue.Peek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Peek_noparms/VB/mqpeek_noparms.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message Peek ();\n    parameters: []\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> that represents the first message in the queue.\n  overload: System.Messaging.MessageQueue.Peek*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.Peek(System.TimeSpan)\n  id: Peek(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Peek(TimeSpan)\n  nameWithType: MessageQueue.Peek(TimeSpan)\n  fullName: MessageQueue.Peek(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Returns without removing (peeks) the first message in the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.\n  remarks: \"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.  \\n  \\n Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.  \\n  \\n Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example uses the <xref:System.Messaging.MessageQueue.Peek%2A> method with a time-out of zero to check whether the queue is empty.  \\n  \\n [!code-cpp[MessageQueue.Peek_timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Peek_timeout/CPP/mqpeek_timeout.cpp#1)]\\n [!code-csharp[MessageQueue.Peek_timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Peek_timeout/CS/mqpeek_timeout.cs#1)]\\n [!code-vb[MessageQueue.Peek_timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Peek_timeout/VB/mqpeek_timeout.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message Peek (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the maximum time to wait for the queue to contain a message.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> that represents the first message in the queue.\n  overload: System.Messaging.MessageQueue.Peek*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)\n  commentId: M:System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)\n  id: Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Peek(TimeSpan, Cursor, PeekAction)\n  nameWithType: MessageQueue.Peek(TimeSpan, Cursor, PeekAction)\n  fullName: MessageQueue.Peek(TimeSpan, Cursor, PeekAction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Returns without removing (peeks) the current or next message in the queue, using the specified cursor. The <xref href=\"System.Messaging.MessageQueue.Peek\"></xref> method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs.\n  remarks: \"Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, a message from the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes a message from the queue.  \\n  \\n Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message Peek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the maximum time to wait for the queue to contain a message.\n    - id: cursor\n      type: System.Messaging.Cursor\n      description: A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.\n    - id: action\n      type: System.Messaging.PeekAction\n      description: One of the <xref href=\"System.Messaging.PeekAction\"></xref> values. Indicates whether to peek at the current message in the queue, or the next message.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that represents a message in the queue.\n  overload: System.Messaging.MessageQueue.Peek*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: A value other than `PeekAction.Current` or `PeekAction.Next` was specified for the <code>action</code> parameter.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>cursor</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String)\n  commentId: M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)\n  id: PeekByCorrelationId(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: PeekByCorrelationId(String)\n  nameWithType: MessageQueue.PeekByCorrelationId(String)\n  fullName: MessageQueue.PeekByCorrelationId(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.\n  remarks: \"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \\n  \\n [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]\\n [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]\\n [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message PeekByCorrelationId (string correlationId);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to peek.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.PeekByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>correlationId</code> parameter is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>correlationId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)\n  id: PeekByCorrelationId(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: PeekByCorrelationId(String, TimeSpan)\n  nameWithType: MessageQueue.PeekByCorrelationId(String, TimeSpan)\n  fullName: MessageQueue.PeekByCorrelationId(String, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.\n  remarks: \"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, and no new message arrives in the queue within the period specified by the `timeout` parameter, an exception is thrown.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%2CSystem.TimeSpan%29>.  \\n  \\n [!code-cpp[MessageQueue2#5](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#5)]\\n [!code-csharp[MessageQueue2#5](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#5)]\"\n  syntax:\n    content: public System.Messaging.Message PeekByCorrelationId (string correlationId, TimeSpan timeout);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to peek.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.PeekByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>correlationId</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message did not arrive before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.PeekById(System.String)\n  commentId: M:System.Messaging.MessageQueue.PeekById(System.String)\n  id: PeekById(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: PeekById(String)\n  nameWithType: MessageQueue.PeekById(String)\n  fullName: MessageQueue.PeekById(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Peeks the message whose message identifier matches the <code>id</code> parameter.\n  remarks: \"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message.  \\n  \\n Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>.  \\n  \\n [!code-cpp[MessageQueue2#6](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#6)]\\n [!code-csharp[MessageQueue2#6](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#6)]\"\n  syntax:\n    content: public System.Messaging.Message PeekById (string id);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to peek.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter.\n  overload: System.Messaging.MessageQueue.PeekById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>id</code> parameter is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: No message with the specified <code>id</code> exists.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)\n  id: PeekById(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: PeekById(String, TimeSpan)\n  nameWithType: MessageQueue.PeekById(String, TimeSpan)\n  fullName: MessageQueue.PeekById(String, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Peeks the message whose message identifier matches the <code>id</code> parameter. Waits until the message appears in the queue or a time-out occurs.\n  remarks: \"Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message and a new message does not arrive before the time-out occurs.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \\n  \\n Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.PeekById%28System.String%2CSystem.TimeSpan%29>.  \\n  \\n [!code-cpp[MessageQueue2#7](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#7)]\\n [!code-csharp[MessageQueue2#7](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#7)]\"\n  syntax:\n    content: public System.Messaging.Message PeekById (string id, TimeSpan timeout);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to peek.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter.\n  overload: System.Messaging.MessageQueue.PeekById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>id</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>id</code> does not exist in the queue and did not arrive before the period specified by the <code>timeout</code> parameter expired.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Int64)\n  commentId: M:System.Messaging.MessageQueue.PeekByLookupId(System.Int64)\n  id: PeekByLookupId(System.Int64)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: PeekByLookupId(Int64)\n  nameWithType: MessageQueue.PeekByLookupId(Int64)\n  fullName: MessageQueue.PeekByLookupId(Int64)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Introduced in MSMQ 3.0. Peeks at the message that matches the given lookup identifier from a non-transactional queue.\n  remarks: \"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.  \\n  \\n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \\n  \\n To read a message with a specified lookup identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message PeekByLookupId (long lookupId);\n    parameters:\n    - id: lookupId\n      type: System.Int64\n      description: The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to peek at.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.LookupId\"></xref> property matches the <code>lookupId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.PeekByLookupId*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: MSMQ 3.0 is not installed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>lookupId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)\n  commentId: M:System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)\n  id: PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: PeekByLookupId(MessageLookupAction, Int64)\n  nameWithType: MessageQueue.PeekByLookupId(MessageLookupAction, Int64)\n  fullName: MessageQueue.PeekByLookupId(MessageLookupAction, Int64)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Introduced in MSMQ 3.0. Peeks at a specific message from the queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.\n  remarks: \"Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.  \\n  \\n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \\n  \\n To read a message with a specified identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message PeekByLookupId (System.Messaging.MessageLookupAction action, long lookupId);\n    parameters:\n    - id: action\n      type: System.Messaging.MessageLookupAction\n      description: \"One of the <xref href=\\\"System.Messaging.MessageLookupAction\\\"></xref> values, specifying how the message is read in the queue. Specify one of the following:  \\n  \\n `MessageLookupAction.Current`: Peeks at the message specified by <code>lookupId</code>.  \\n  \\n `MessageLookupAction.Next`: Peeks at the message following the message specified by <code>lookupId</code>.  \\n  \\n `MessageLookupAction.Previous`: Peeks at the message preceding the message specified by <code>lookupId</code>.  \\n  \\n `MessageLookupAction.First`: Peeks at the first message in the queue. The <code>lookupId</code> parameter must be set to 0.  \\n  \\n `MessageLookupAction.Last`: Peeks at the last message in the queue. The <code>lookupId</code> parameter must be set to 0.\"\n    - id: lookupId\n      type: System.Int64\n      description: The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to peek at, or 0. 0 is used when accessing the first or last message in the queue.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>action</code> and <code>lookupId</code> parameters passed in.\n  overload: System.Messaging.MessageQueue.PeekByLookupId*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: MSMQ 3.0 is not installed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>lookupId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.PeekCompleted\n  commentId: E:System.Messaging.MessageQueue.PeekCompleted\n  id: PeekCompleted\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: PeekCompleted\n  nameWithType: MessageQueue.PeekCompleted\n  fullName: MessageQueue.PeekCompleted\n  type: Event\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Occurs when a message is read without being removed from the queue. This is a result of the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginPeek\"></xref>.\n  remarks: \"<xref:System.Messaging.MessageQueue.BeginPeek%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message is available in the queue.  \\n  \\n <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> and peek the message when the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised.  \\n  \\n When you create a <xref:System.Messaging.PeekCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).\"\n  example:\n  - \"The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path \\\".\\\\myQueue\\\". When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen. The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation  \\n  \\n [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]\\n [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]\\n [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_PeekCompleted\")]\n\n      public event System.Messaging.PeekCompletedEventHandler PeekCompleted;\n    return:\n      type: System.Messaging.PeekCompletedEventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Purge\n  commentId: M:System.Messaging.MessageQueue.Purge\n  id: Purge\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Purge()\n  nameWithType: MessageQueue.Purge()\n  fullName: MessageQueue.Purge()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Deletes all the messages contained in the queue.\n  remarks: \"Purging the queue causes Message Queuing to set the queue modification flag, which affects the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property. Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Purge%2A>.  \\n  \\n [!code-cpp[MessageQueue2#29](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#29)]\\n [!code-csharp[MessageQueue2#29](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#29)]\"\n  syntax:\n    content: public void Purge ();\n    parameters: []\n  overload: System.Messaging.MessageQueue.Purge*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.QueueName\n  commentId: P:System.Messaging.MessageQueue.QueueName\n  id: QueueName\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: QueueName\n  nameWithType: MessageQueue.QueueName\n  fullName: MessageQueue.QueueName\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the friendly name that identifies the queue.\n  remarks: \"You can combine the <xref:System.Messaging.MessageQueue.QueueName%2A> with the <xref:System.Messaging.MessageQueue.MachineName%2A> to create a friendly <xref:System.Messaging.MessageQueue.Path%2A> name for the queue. The syntax for the friendly name variation of the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue, as shown in the following table.  \\n  \\n|Queue type|Syntax|  \\n|----------------|------------|  \\n|Public queue|`MachineName`\\\\\\\\`QueueName`|  \\n|Private queue|`MachineName`\\\\\\\\`Private$`\\\\\\\\`QueueName`|  \\n|Journal queue|`MachineName`\\\\\\\\`QueueName`\\\\\\\\`Journal$`|  \\n  \\n Use \\\".\\\" to represent the local computer.  \\n  \\n Changing the <xref:System.Messaging.MessageQueue.QueueName%2A> property affects the <xref:System.Messaging.MessageQueue.Path%2A> property. If you set the <xref:System.Messaging.MessageQueue.QueueName%2A> without setting the <xref:System.Messaging.MessageQueue.MachineName%2A> property, the <xref:System.Messaging.MessageQueue.Path%2A> property becomes .\\\\\\\\`QueueName`. Otherwise, the <xref:System.Messaging.MessageQueue.Path%2A> becomes `MachineName`\\\\\\\\`QueueName`.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|Yes|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.QueueName%2A> property.  \\n  \\n [!code-csharp[MessageQueue#24](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#24)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_QueueName\")]\n\n      public string QueueName { get; set; }\n    return:\n      type: System.String\n      description: The name that identifies the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>. The value cannot be `null`.\n  overload: System.Messaging.MessageQueue.QueueName*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The queue name is `null`.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReadHandle\n  commentId: P:System.Messaging.MessageQueue.ReadHandle\n  id: ReadHandle\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReadHandle\n  nameWithType: MessageQueue.ReadHandle\n  fullName: MessageQueue.ReadHandle\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the native handle used to read messages from the message queue.\n  remarks: \"The <xref:System.Messaging.MessageQueue.ReadHandle%2A> provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue. If you change the path of the queue, the handle is closed and reopened with a new value.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_ReadHandle\")]\n\n      public IntPtr ReadHandle { get; }\n    return:\n      type: System.IntPtr\n      description: A handle to the native queue object that you use for peeking and receiving messages from the queue.\n  overload: System.Messaging.MessageQueue.ReadHandle*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive\n  commentId: M:System.Messaging.MessageQueue.Receive\n  id: Receive\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive()\n  nameWithType: MessageQueue.Receive()\n  fullName: MessageQueue.Receive()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.\n  remarks: \"Use this overload to receive a message from a queue, or wait until there are messages in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.  \\n  \\n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example receives a message from a queue and outputs information about that message to the screen.  \\n  \\n [!code-cpp[MessageQueue.Receive_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CPP/mqreceive_noparms.cpp#1)]\\n [!code-csharp[MessageQueue.Receive_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_noparms/CS/mqreceive_noparms.cs#1)]\\n [!code-vb[MessageQueue.Receive_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_noparms/VB/mqreceive_noparms.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message Receive ();\n    parameters: []\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)\n  id: Receive(System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(MessageQueueTransaction)\n  nameWithType: MessageQueue.Receive(MessageQueueTransaction)\n  fullName: MessageQueue.Receive(MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the first message available in the transactional queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.\n  remarks: \"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, or wait until there are messages in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \\n  \\n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example connects to a transactional queue on the local computer and sends a message to the queue. It then receives the message that contains an order. If it encounters a non-transactional queue, it will throw and exception and rollback the transaction.  \\n  \\n [!code-cpp[MessageQueue.Receive_transaction#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_transaction/CPP/mqreceive_transaction.cpp#1)]\\n [!code-csharp[MessageQueue.Receive_transaction#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_transaction/CS/mqreceive_transaction.cs#1)]\\n [!code-vb[MessageQueue.Receive_transaction#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_transaction/VB/mqreceive_transaction.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message Receive (System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"An error occurred when accessing a Message Queuing method.  \\n  \\n -or-  \\n  \\n The queue is non-transactional.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)\n  id: Receive(System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(MessageQueueTransactionType)\n  nameWithType: MessageQueue.Receive(MessageQueueTransactionType)\n  fullName: MessageQueue.Receive(MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and blocks the current thread of execution until a message is available.\n  remarks: \"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, or wait until there are messages in the queue.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Receive%28System.Messaging.MessageQueueTransactionType%29>.  \\n  \\n [!code-cpp[MessageQueue2#9](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#9)]\\n [!code-csharp[MessageQueue2#9](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#9)]\"\n  syntax:\n    content: public System.Messaging.Message Receive (System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.TimeSpan)\n  id: Receive(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(TimeSpan)\n  nameWithType: MessageQueue.Receive(TimeSpan)\n  fullName: MessageQueue.Receive(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref> and waits until either a message is available in the queue, or the time-out expires.\n  remarks: \"Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.  \\n  \\n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example receives a message from a queue and outputs information about that message to the screen. The example pauses execution for up to five seconds while waiting for a message to arrive in the queue.  \\n  \\n [!code-cpp[MessageQueue.Receive_timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_timeout/CPP/mqreceive_timeout.cpp#1)]\\n [!code-csharp[MessageQueue.Receive_timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_timeout/CS/mqreceive_timeout.cs#1)]\\n [!code-vb[MessageQueue.Receive_timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_timeout/VB/mqreceive_timeout.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message Receive (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)\n  id: Receive(System.TimeSpan,System.Messaging.Cursor)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(TimeSpan, Cursor)\n  nameWithType: MessageQueue.Receive(TimeSpan, Cursor)\n  fullName: MessageQueue.Receive(TimeSpan, Cursor)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.\n  syntax:\n    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: cursor\n      type: System.Messaging.Cursor\n      description: A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method  \\n  \\n Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  id: Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageQueue.Receive(TimeSpan, MessageQueueTransaction)\n  fullName: MessageQueue.Receive(TimeSpan, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the first message available in the transactional queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref> and waits until either a message is available in the queue, or the time-out expires.\n  remarks: \"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \\n  \\n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of this method.  \\n  \\n [!code-cpp[MessageQueue.Receive_TimeoutTransaction#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Receive_TimeoutTransaction/CPP/mqreceive_timeouttransaction.cpp#1)]\\n [!code-csharp[MessageQueue.Receive_TimeoutTransaction#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Receive_TimeoutTransaction/CS/mqreceive_timeouttransaction.cs#1)]\\n [!code-vb[MessageQueue.Receive_TimeoutTransaction#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Receive_TimeoutTransaction/VB/mqreceive_timeouttransaction.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n The queue is non-transactional.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  id: Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Receive(TimeSpan, MessageQueueTransactionType)\n  fullName: MessageQueue.Receive(TimeSpan, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the first message available in the queue referenced by the <xref href=\"System.Messaging.MessageQueue\"></xref>. This call is synchronous, and waits until either a message is available in the queue, or the time-out expires.\n  remarks: \"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of this method.  \\n  \\n [!code-cpp[MessageQueue2#8](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#8)]\\n [!code-csharp[MessageQueue2#8](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#8)]\"\n  syntax:\n    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)\n  id: Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(TimeSpan, Cursor, MessageQueueTransaction)\n  nameWithType: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransaction)\n  fullName: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.\n  remarks: \"Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.  \\n  \\n Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: cursor\n      type: System.Messaging.Cursor\n      description: A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references a message in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>cursor</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>transaction</code> parameter is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n The queue is non-transactional.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)\n  id: Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Receive(TimeSpan, Cursor, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransactionType)\n  fullName: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires.\n  remarks: \"Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.  \\n  \\n Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: cursor\n      type: System.Messaging.Cursor\n      description: A <xref href=\"System.Messaging.Cursor\"></xref> that maintains a specific position in the message queue.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values that describes the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references a message in the queue.\n  overload: System.Messaging.MessageQueue.Receive*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>cursor</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid. Possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  id: ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.\n  remarks: \"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \\n  \\n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransactionType%29>.  \\n  \\n [!code-cpp[MessageQueue2#12](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#12)]\\n [!code-csharp[MessageQueue2#12](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#12)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>correlationId</code> parameter is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>correlationId</code> could not be found.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  id: ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.\n  remarks: \"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using the internal transaction context defined by the `transaction` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.  \\n  \\n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \\n  \\n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransaction%29>.  \\n  \\n [!code-cpp[MessageQueue2#13](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#13)]\\n [!code-csharp[MessageQueue2#13](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#13)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>correlationId</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>transaction</code> parameter is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  \\n  \\n -or-  \\n  \\n The queue is non-transactional.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)\n  id: ReceiveByCorrelationId(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByCorrelationId(String, TimeSpan)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, TimeSpan)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires.\n  remarks: \"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \\n  \\n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.TimeSpan%29>.  \\n  \\n [!code-cpp[MessageQueue2#10](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#10)]\\n [!code-csharp[MessageQueue2#10](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#10)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>correlationId</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The message with the specified <code>correlationId</code> does not exist in the queue and did not arrive before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)\n  id: ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByCorrelationId(String, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.\n  remarks: \"This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \\n  \\n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.Messaging.MessageQueueTransactionType%29>.  \\n  \\n [!code-cpp[MessageQueue2#11](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#11)]\\n [!code-csharp[MessageQueue2#11](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#11)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>correlationId</code> parameter is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>correlationId</code> could not be found.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)\n  id: ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByCorrelationId(String, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.\n  remarks: \"This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the `transaction` parameter.  \\n  \\n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.  \\n  \\n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%2CSystem.Messaging.MessageQueueTransaction%29>.  \\n  \\n [!code-cpp[MessageQueue2#14](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#14)]\\n [!code-csharp[MessageQueue2#14](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#14)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>correlationId</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>transaction</code> parameter is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>correlationId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The queue is non-transactional.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)\n  id: ReceiveByCorrelationId(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByCorrelationId(String)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String)\n  fullName: MessageQueue.ReceiveByCorrelationId(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue.\n  remarks: \"This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application.  \\n  \\n The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method retrieves a message by specifying its unique identifier.  \\n  \\n To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \\n  \\n [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]\\n [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]\\n [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId);\n    parameters:\n    - id: correlationId\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.CorrelationId\"></xref> of the message to receive.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.CorrelationId\"></xref> matches the <code>correlationId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>correlationId</code> parameter is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>correlationId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String)\n  commentId: M:System.Messaging.MessageQueue.ReceiveById(System.String)\n  id: ReceiveById(System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveById(String)\n  nameWithType: MessageQueue.ReceiveById(String)\n  fullName: MessageQueue.ReceiveById(String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue.\n  remarks: \"Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.  \\n  \\n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29>.  \\n  \\n [!code-cpp[MessageQueue2#16](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#16)]\\n [!code-csharp[MessageQueue2#16](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#16)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveById (string id);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>id</code> parameter is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>id</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)\n  id: ReceiveById(System.String,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveById(String, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveById(String, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveById(String, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue.\n  remarks: \"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue  \\n  \\n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \\n  \\n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.Messaging.MessageQueueTransaction%29>.  \\n  \\n [!code-cpp[MessageQueue2#17](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#17)]\\n [!code-csharp[MessageQueue2#17](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#17)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>id</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>transaction</code> parameter is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>id</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The queue is non-transactional.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)\n  id: ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveById(String, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveById(String, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveById(String, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue.\n  remarks: \"Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.Messaging.MessageQueueTransactionType%29>.  \\n  \\n [!code-cpp[MessageQueue2#15](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#15)]\\n [!code-csharp[MessageQueue2#15](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#15)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>id</code> parameter is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>id</code> could not be found.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)\n  commentId: M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)\n  id: ReceiveById(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveById(String, TimeSpan)\n  nameWithType: MessageQueue.ReceiveById(String, TimeSpan)\n  fullName: MessageQueue.ReceiveById(String, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.\n  remarks: \"Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \\n  \\n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \\n  \\n Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%29>.  \\n  \\n [!code-cpp[MessageQueue2#20](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#20)]\\n [!code-csharp[MessageQueue2#20](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#20)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveById (string id, TimeSpan timeout);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>id</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  id: ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveById(String, TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires.\n  remarks: \"Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \\n  \\n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.  \\n  \\n Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the timeout period specified by the `timeout` parameter.  \\n  \\n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransaction%29>.  \\n  \\n [!code-cpp[MessageQueue2#18](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#18)]\\n [!code-csharp[MessageQueue2#18](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#18)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>id</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>transaction</code> parameter is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n The queue is non-transactional.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  id: ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveById(String, TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires.\n  remarks: \"Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.  \\n  \\n The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.  \\n  \\n Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%2CSystem.TimeSpan%2CSystem.Messaging.MessageQueueTransactionType%29>.  \\n  \\n [!code-cpp[MessageQueue2#19](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#19)]\\n [!code-csharp[MessageQueue2#19](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#19)]\"\n  syntax:\n    content: public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: id\n      type: System.String\n      description: The <xref href=\"System.Messaging.Message.Id\"></xref> of the message to receive.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that indicates the time to wait until a new message is available for inspection.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.Id\"></xref> property matches the <code>id</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveById*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>id</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is not valid, possibly <code>timeout</code> is less than <xref href=\"System.TimeSpan.Zero\"></xref> or greater than <xref href=\"System.Messaging.MessageQueue.InfiniteTimeout\"></xref>.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"A message with the specified <code>id</code> did not arrive in the queue before the time-out expired.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)\n  id: ReceiveByLookupId(System.Int64)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByLookupId(Int64)\n  nameWithType: MessageQueue.ReceiveByLookupId(Int64)\n  fullName: MessageQueue.ReceiveByLookupId(Int64)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Introduced in MSMQ 3.0. Receives the message that matches the given lookup identifier from a non-transactional queue.\n  remarks: \"Use this method to read a message with a known lookup identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.  \\n  \\n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \\n  \\n To read a message with a specified lookup identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByLookupId (long lookupId);\n    parameters:\n    - id: lookupId\n      type: System.Int64\n      description: The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> whose <xref href=\"System.Messaging.Message.LookupId\"></xref> property matches the <code>lookupId</code> parameter passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByLookupId*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: MSMQ 3.0 is not installed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>lookupId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)\n  id: ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Introduced in MSMQ 3.0. Receives a specific message from a transactional queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue.\n  remarks: \"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue.  \\n  \\n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \\n  \\n Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: action\n      type: System.Messaging.MessageLookupAction\n      description: \"One of the <xref href=\\\"System.Messaging.MessageLookupAction\\\"></xref> values, specifying how the message is read in the queue. Specify one of the following:  \\n  \\n `MessageLookupAction.Current`: Receives the message specified by <code>lookupId</code> and removes it from the queue.  \\n  \\n `MessageLookupAction.Next`: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue.  \\n  \\n `MessageLookupAction.Previous`: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue.  \\n  \\n `MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.  \\n  \\n `MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.\"\n    - id: lookupId\n      type: System.Int64\n      description: The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>lookupId</code> and <code>action</code> parameters passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByLookupId*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: MSMQ 3.0 is not installed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>lookupId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"An error occurred when accessing a Message Queuing method.  \\n  \\n -or-  \\n  \\n The queue is non-transactional.\"\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>action</code> parameter is not one of the <xref href=\"System.Messaging.MessageLookupAction\"></xref> members.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)\n  id: ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Introduced in MSMQ 3.0. Receives a specific message from the queue, using the specified transaction context. The message can be specified by a lookup identifier or by its position at the front or end of the queue.\n  remarks: \"Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transactionType` parameter. This method throws an exception immediately if the message is not in the queue.  \\n  \\n The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.  \\n  \\n To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: action\n      type: System.Messaging.MessageLookupAction\n      description: \"One of the <xref href=\\\"System.Messaging.MessageLookupAction\\\"></xref> values, specifying how the message is read in the queue. Specify one of the following:  \\n  \\n `MessageLookupAction.Current`: Receives the message specified by <code>lookupId</code> and removes it from the queue.  \\n  \\n `MessageLookupAction.Next`: Receives the message following the message specified by <code>lookupId</code> and removes it from the queue.  \\n  \\n `MessageLookupAction.Previous`: Receives the message preceding the message specified by <code>lookupId</code> and removes it from the queue.  \\n  \\n `MessageLookupAction.First`: Receives the first message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.  \\n  \\n `MessageLookupAction.Last`: Receives the last message in the queue and removes it from the queue. The <code>lookupId</code> parameter must be set to 0.\"\n    - id: lookupId\n      type: System.Int64\n      description: The <xref href=\"System.Messaging.Message.LookupId\"></xref> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: The <xref href=\"System.Messaging.Message\"></xref> specified by the <code>action</code> and <code>lookupId</code> parameters passed in.\n  overload: System.Messaging.MessageQueue.ReceiveByLookupId*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: MSMQ 3.0 is not installed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The message with the specified <code>lookupId</code> could not be found.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: \"The <code>action</code> parameter is not one of the <xref href=\\\"System.Messaging.MessageLookupAction\\\"></xref> members.  \\n  \\n -or-  \\n  \\n The <code>transactionType</code> parameter is not one of the <xref href=\\\"System.Messaging.MessageQueueTransactionType\\\"></xref> members.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ReceiveCompleted\n  commentId: E:System.Messaging.MessageQueue.ReceiveCompleted\n  id: ReceiveCompleted\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ReceiveCompleted\n  nameWithType: MessageQueue.ReceiveCompleted\n  fullName: MessageQueue.ReceiveCompleted\n  type: Event\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Occurs when a message has been removed from the queue. This event is raised by the asynchronous operation, <xref href=\"System.Messaging.MessageQueue.BeginReceive\"></xref>.\n  remarks: \"<xref:System.Messaging.MessageQueue.BeginReceive%2A> is used in asynchronous processing to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message is available in the queue.  \\n  \\n <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> and peek the message when the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised.  \\n  \\n When you create a <xref:System.Messaging.ReceiveCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115).\"\n  example:\n  - \"The following code example creates an event handler named `MyReceiveCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginReceive%2A> to initiate an asynchronous receive operation on the queue that is located at the path \\\".\\\\myQueue\\\". When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the example receives the message and writes its body to the screen. The example then calls <xref:System.Messaging.MessageQueue.BeginReceive%2A> again to initiate a new asynchronous receive operation.  \\n  \\n [!code-cpp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CPP/mqreceivecompletedeventhandler.cpp#1)]\\n [!code-csharp[MessageQueue.ReceiveCompleted#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/CS/mqreceivecompletedeventhandler.cs#1)]\\n [!code-vb[MessageQueue.ReceiveCompleted#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.ReceiveCompleted/VB/mqreceivecompletedeventhandler.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_ReceiveCompleted\")]\n\n      public event System.Messaging.ReceiveCompletedEventHandler ReceiveCompleted;\n    return:\n      type: System.Messaging.ReceiveCompletedEventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Refresh\n  commentId: M:System.Messaging.MessageQueue.Refresh\n  id: Refresh\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Refresh()\n  nameWithType: MessageQueue.Refresh()\n  fullName: MessageQueue.Refresh()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Refreshes the properties presented by the <xref href=\"System.Messaging.MessageQueue\"></xref> to reflect the current state of the resource.\n  remarks: \"<xref:System.Messaging.MessageQueue.Refresh%2A> synchronizes the properties of a <xref:System.Messaging.MessageQueue> with its associated Message Queuing server resource. If any property, such as <xref:System.Messaging.MessageQueue.Label%2A> or <xref:System.Messaging.MessageQueue.Category%2A>, has changed on the server since the time the <xref:System.Messaging.MessageQueue> was created, <xref:System.Messaging.MessageQueue.Refresh%2A> updates the <xref:System.Messaging.MessageQueue> with the new information.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Refresh%2A>.  \\n  \\n [!code-cpp[MessageQueue2#28](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#28)]\\n [!code-csharp[MessageQueue2#28](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#28)]\"\n  syntax:\n    content: public void Refresh ();\n    parameters: []\n  overload: System.Messaging.MessageQueue.Refresh*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.ResetPermissions\n  commentId: M:System.Messaging.MessageQueue.ResetPermissions\n  id: ResetPermissions\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: ResetPermissions()\n  nameWithType: MessageQueue.ResetPermissions()\n  fullName: MessageQueue.ResetPermissions()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Resets the permission list to the operating system's default values. Removes any queue permissions you have appended to the default list.\n  remarks: \"When you call <xref:System.Messaging.MessageQueue.ResetPermissions%2A>, you return the permission list to its default values. Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:  \\n  \\n-   Get the properties of the queue.  \\n  \\n-   Get queue permissions.  \\n  \\n-   Write to the queue.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.ResetPermissions%2A>.  \\n  \\n [!code-cpp[MessageQueue2#27](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#27)]\\n [!code-csharp[MessageQueue2#27](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#27)]\"\n  syntax:\n    content: public void ResetPermissions ();\n    parameters: []\n  overload: System.Messaging.MessageQueue.ResetPermissions*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Send(System.Object)\n  commentId: M:System.Messaging.MessageQueue.Send(System.Object)\n  id: Send(System.Object)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Send(Object)\n  nameWithType: MessageQueue.Send(Object)\n  fullName: MessageQueue.Send(Object)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Sends an object to non-transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.\n  remarks: \"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \\n  \\n If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.  \\n  \\n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example connects to a message queue and sends a message to the queue.  \\n  \\n [!code-cpp[MessageQueue.Send_obj#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Send_obj/CPP/mqsend_generic.cpp#1)]\\n [!code-csharp[MessageQueue.Send_obj#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Send_obj/CS/mqsend_generic.cs#1)]\\n [!code-vb[MessageQueue.Send_obj#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Send_obj/VB/mqsend_generic.vb#1)]  \\n  \\n The following code example sends an application-defined `Order` class to a queue and then receives a message from that queue.\"\n  syntax:\n    content: public void Send (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to send to the queue.\n  overload: System.Messaging.MessageQueue.Send*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The <xref href=\\\"System.Messaging.MessageQueue.Path\\\"></xref> property has not been set.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)\n  id: Send(System.Object,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Send(Object, MessageQueueTransaction)\n  nameWithType: MessageQueue.Send(Object, MessageQueueTransaction)\n  fullName: MessageQueue.Send(Object, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Sends an object to the transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.\n  remarks: \"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \\n  \\n If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.  \\n  \\n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \\n  \\n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \\n  \\n```vb  \\n<System.MTAThreadAttribute>  \\n public sub Main()  \\n```  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example sends a string to a transactional queue and then receives a message from that queue.  \\n  \\n [!code-cpp[MessageQueue.Send_ObjectTransaction#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.Send_ObjectTransaction/CPP/mqsend_objtransaction.cpp#1)]\\n [!code-csharp[MessageQueue.Send_ObjectTransaction#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.Send_ObjectTransaction/CS/mqsend_objtransaction.cs#1)]\\n [!code-vb[MessageQueue.Send_ObjectTransaction#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.Send_ObjectTransaction/VB/mqsend_objtransaction.vb#1)]\"\n  syntax:\n    content: public void Send (object obj, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to send to the queue.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n  overload: System.Messaging.MessageQueue.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>transaction</code> parameter is `null`.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The <xref href=\\\"System.Messaging.MessageQueue.Path\\\"></xref> property has not been set.  \\n  \\n -or-  \\n  \\n The Message Queuing application indicated an incorrect transaction use.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)\n  id: Send(System.Object,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Send(Object, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Send(Object, MessageQueueTransactionType)\n  fullName: MessageQueue.Send(Object, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Sends an object to the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref>.\n  remarks: \"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.  \\n  \\n The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \\n  \\n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.Messaging.MessageQueueTransactionType%29>.  \\n  \\n [!code-cpp[MessageQueue2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#2)]\\n [!code-csharp[MessageQueue2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#2)]\"\n  syntax:\n    content: public void Send (object obj, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to send to the queue.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n  overload: System.Messaging.MessageQueue.Send*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The <xref href=\\\"System.Messaging.MessageQueue.Path\\\"></xref> property has not been set.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.String)\n  commentId: M:System.Messaging.MessageQueue.Send(System.Object,System.String)\n  id: Send(System.Object,System.String)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Send(Object, String)\n  nameWithType: MessageQueue.Send(Object, String)\n  fullName: MessageQueue.Send(Object, String)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Sends an object to the non-transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message.\n  remarks: \"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \\n  \\n The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  \\n  \\n If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.  \\n  \\n The <xref:System.Messaging.MessageQueue.Path%2A> property for this <xref:System.Messaging.MessageQueue> instance must be specified before you send the message. If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%29>.  \\n  \\n [!code-cpp[MessageQueue2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#1)]\\n [!code-csharp[MessageQueue2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#1)]\"\n  syntax:\n    content: public void Send (object obj, string label);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to send to the queue.\n    - id: label\n      type: System.String\n      description: The label of the message.\n  overload: System.Messaging.MessageQueue.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>label</code> parameter is `null`.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The <xref href=\\\"System.Messaging.MessageQueue.Path\\\"></xref> property has not been set.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)\n  id: Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Send(Object, String, MessageQueueTransaction)\n  nameWithType: MessageQueue.Send(Object, String, MessageQueueTransaction)\n  fullName: MessageQueue.Send(Object, String, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Sends an object to the transactional queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message.\n  remarks: \"Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.  \\n  \\n The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  \\n  \\n If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.  \\n  \\n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property  \\n  \\n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \\n  \\n```vb  \\n<System.MTAThreadAttribute>  \\n public sub Main()  \\n```  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%2CSystem.Messaging.MessageQueueTransaction%29>.  \\n  \\n [!code-cpp[MessageQueue2#4](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#4)]\\n [!code-csharp[MessageQueue2#4](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#4)]\"\n  syntax:\n    content: public void Send (object obj, string label, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to send to the queue.\n    - id: label\n      type: System.String\n      description: The label of the message.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object.\n  overload: System.Messaging.MessageQueue.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>label</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>transaction</code> parameter is `null`.\"\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The <xref href=\\\"System.Messaging.MessageQueue.Path\\\"></xref> property has not been set.  \\n  \\n -or-  \\n  \\n The Message Queuing application indicated an incorrect transaction usage.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)\n  id: Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Send(Object, String, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Send(Object, String, MessageQueueTransactionType)\n  fullName: MessageQueue.Send(Object, String, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Sends an object to the queue referenced by this <xref href=\"System.Messaging.MessageQueue\"></xref> and specifies a label for the message.\n  remarks: \"Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.  \\n  \\n The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message. With this overload, you can specify the string label that identifies the message.  \\n  \\n The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.  \\n  \\n If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.  \\n  \\n The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, and the message's <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue's <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.Send%28System.Object%2CSystem.String%2CSystem.Messaging.MessageQueueTransactionType%29>.  \\n  \\n [!code-cpp[MessageQueue2#3](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#3)]\\n [!code-csharp[MessageQueue2#3](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#3)]\"\n  syntax:\n    content: public void Send (object obj, string label, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to send to the queue.\n    - id: label\n      type: System.String\n      description: The label of the message.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n  overload: System.Messaging.MessageQueue.Send*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>label</code> parameter is `null`.\n  - type: System.Messaging.MessageQueueTransaction\n    commentId: T:System.Messaging.MessageQueueTransaction\n    description: The Message Queuing application indicated an incorrect transaction usage.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"The <xref href=\\\"System.Messaging.MessageQueue.Path\\\"></xref> property has not been set.  \\n  \\n -or-  \\n  \\n An error occurred when accessing a Message Queuing method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)\n  commentId: M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)\n  id: SetPermissions(System.Messaging.AccessControlList)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: SetPermissions(AccessControlList)\n  nameWithType: MessageQueue.SetPermissions(AccessControlList)\n  fullName: MessageQueue.SetPermissions(AccessControlList)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Assigns access rights to the queue based on the contents of an access control list.\n  remarks: \"Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information. This is used, for example, to grant permissions to multiple users at the same time.  \\n  \\n The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\\\\\`user`. You can specify \\\".\\\" for the trustee to indicate the local computer.  \\n  \\n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \\n  \\n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \\n  \\n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \\n  \\n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \\n  \\n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \\n  \\n When you construct the `dacl` parameter, you add <xref:System.Messaging.AccessControlEntry> instances to your <xref:System.Messaging.AccessControlList> collection. When you construct each access control entry, you can specify generic or standard access rights. The rights to a queue can be any combination of the following:  \\n  \\n-   Delete  \\n  \\n-   Read Security  \\n  \\n-   Write Security  \\n  \\n-   Synchronize  \\n  \\n-   Modify Owner  \\n  \\n-   Read  \\n  \\n-   Write  \\n  \\n-   Execute  \\n  \\n-   Required  \\n  \\n-   All  \\n  \\n-   None  \\n  \\n These rights are a set of bit flags that you can combine using the OR bitwise operator.  \\n  \\n-   Full Control  \\n  \\n-   Delete Message  \\n  \\n-   Receive Message  \\n  \\n-   Peek Message  \\n  \\n-   Receive Journal Message  \\n  \\n-   Get Queue Properties  \\n  \\n-   Set Queue Properties  \\n  \\n-   Get Permissions  \\n  \\n-   Set Permissions  \\n  \\n-   Take Queue Ownership  \\n  \\n-   Write Message  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.Messaging.AccessControlList%29>.      \\n  \\n [!code-cpp[MessageQueue2#26](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#26)]\\n [!code-csharp[MessageQueue2#26](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#26)]\"\n  syntax:\n    content: public void SetPermissions (System.Messaging.AccessControlList dacl);\n    parameters:\n    - id: dacl\n      type: System.Messaging.AccessControlList\n      description: A <xref href=\"System.Messaging.AccessControlList\"></xref> that contains one or more access control entries that specify the trustees and the permissions to grant.\n  overload: System.Messaging.MessageQueue.SetPermissions*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)\n  commentId: M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)\n  id: SetPermissions(System.Messaging.MessageQueueAccessControlEntry)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: SetPermissions(MessageQueueAccessControlEntry)\n  nameWithType: MessageQueue.SetPermissions(MessageQueueAccessControlEntry)\n  fullName: MessageQueue.SetPermissions(MessageQueueAccessControlEntry)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Assigns access rights to the queue based on the contents of an access control entry.\n  remarks: \"Use this overload to grant, deny, or revoke rights by using an access control entry to specify trustee and rights information.  \\n  \\n The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\\\\\`user`. You can specify \\\".\\\" for the trustee to indicate the local computer.  \\n  \\n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \\n  \\n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \\n  \\n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \\n  \\n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \\n  \\n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \\n  \\n The rights to a queue, which you specify in the `rights` parameter when you construct your <xref:System.Messaging.MessageQueueAccessControlEntry>, can be any combination of the following:  \\n  \\n-   Full Control  \\n  \\n-   Delete Message  \\n  \\n-   Receive Message  \\n  \\n-   Peek Message  \\n  \\n-   Receive Journal Message  \\n  \\n-   Get Queue Properties  \\n  \\n-   Set Queue Properties  \\n  \\n-   Get Permissions  \\n  \\n-   Set Permissions  \\n  \\n-   Take Queue Ownership  \\n  \\n-   Write Message  \\n  \\n The `rights` parameter you specify in the constructor for the `ace` parameter is a flag of the <xref:System.Messaging.MessageQueueAccessRights> enumeration. It represents a set of bit flags that you can combine using the bitwise operator OR when you build the `rights` parameter.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.Messaging.MessageQueueAccessControlEntry%29>.  \\n  \\n [!code-cpp[MessageQueue2#24](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#24)]\\n [!code-csharp[MessageQueue2#24](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#24)]\"\n  syntax:\n    content: public void SetPermissions (System.Messaging.MessageQueueAccessControlEntry ace);\n    parameters:\n    - id: ace\n      type: System.Messaging.MessageQueueAccessControlEntry\n      description: A <xref href=\"System.Messaging.MessageQueueAccessControlEntry\"></xref> that specifies a user, an access type, and a permission type.\n  overload: System.Messaging.MessageQueue.SetPermissions*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)\n  commentId: M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)\n  id: SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: SetPermissions(String, MessageQueueAccessRights)\n  nameWithType: MessageQueue.SetPermissions(String, MessageQueueAccessRights)\n  fullName: MessageQueue.SetPermissions(String, MessageQueueAccessRights)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gives a computer, group, or user the specified access rights.\n  remarks: \"Use this overload to grant specified rights to an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\\\\\`user` for the `user` parameter. You can specify \\\".\\\" for the `user` parameter to indicate the local computer.  \\n  \\n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \\n  \\n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \\n  \\n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \\n  \\n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \\n  \\n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \\n  \\n The rights to a queue, specified in the `rights` parameter, can be any combination of the following:  \\n  \\n-   Full Control  \\n  \\n-   Delete Message  \\n  \\n-   Receive Message  \\n  \\n-   Peek Message  \\n  \\n-   Receive Journal Message  \\n  \\n-   Get Queue Properties  \\n  \\n-   Set Queue Properties  \\n  \\n-   Get Permissions  \\n  \\n-   Set Permissions  \\n  \\n-   Take Queue Ownership  \\n  \\n-   Write Message  \\n  \\n The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.  \\n  \\n With this overload, you can only grant permissions; you cannot revoke or deny them. You must use a different overload to explicitly grant any <xref:System.Messaging.AccessControlEntryType> other than `Allow`.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.String%2CSystem.Messaging.MessageQueueAccessRights%29>.  \\n  \\n [!code-cpp[MessageQueue2#23](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#23)]\\n [!code-csharp[MessageQueue2#23](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#23)]\"\n  syntax:\n    content: public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights);\n    parameters:\n    - id: user\n      type: System.String\n      description: The individual, group, or computer that gets additional rights to the queue.\n    - id: rights\n      type: System.Messaging.MessageQueueAccessRights\n      description: A <xref href=\"System.Messaging.MessageQueueAccessRights\"></xref> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in.\n  overload: System.Messaging.MessageQueue.SetPermissions*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>user</code> is `null`.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)\n  commentId: M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)\n  id: SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: SetPermissions(String, MessageQueueAccessRights, AccessControlEntryType)\n  nameWithType: MessageQueue.SetPermissions(String, MessageQueueAccessRights, AccessControlEntryType)\n  fullName: MessageQueue.SetPermissions(String, MessageQueueAccessRights, AccessControlEntryType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set).\n  remarks: \"Use this overload to grant, deny, or revoke specified rights for an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\\\\\`user` for the `user` parameter. You can specify \\\".\\\" for the `user` parameter to indicate the local computer.  \\n  \\n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \\n  \\n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \\n  \\n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \\n  \\n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \\n  \\n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \\n  \\n The rights to a queue, specified in the `rights` parameter, can be any combination of the following:  \\n  \\n-   Full Control  \\n  \\n-   Delete Message  \\n  \\n-   Receive Message  \\n  \\n-   Peek Message  \\n  \\n-   Receive Journal Message  \\n  \\n-   Get Queue Properties  \\n  \\n-   Set Queue Properties  \\n  \\n-   Get Permissions  \\n  \\n-   Set Permissions  \\n  \\n-   Take Queue Ownership  \\n  \\n-   Write Message  \\n  \\n The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.  \\n  \\n The following table shows whether this method is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example demonstrates the use of <xref:System.Messaging.MessageQueue.SetPermissions%28System.String%2CSystem.Messaging.MessageQueueAccessRights%2CSystem.Messaging.AccessControlEntryType%29>.  \\n  \\n [!code-cpp[MessageQueue2#25](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue2/cpp/class1.cpp#25)]\\n [!code-csharp[MessageQueue2#25](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue2/CS/class1.cs#25)]\"\n  syntax:\n    content: public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights, System.Messaging.AccessControlEntryType entryType);\n    parameters:\n    - id: user\n      type: System.String\n      description: The individual, group, or computer that gets additional rights to the queue.\n    - id: rights\n      type: System.Messaging.MessageQueueAccessRights\n      description: A <xref href=\"System.Messaging.MessageQueueAccessRights\"></xref> that indicates the set of rights to the queue that Message Queuing assigns to the <code>user</code> passed in.\n    - id: entryType\n      type: System.Messaging.AccessControlEntryType\n      description: A <xref href=\"System.Messaging.AccessControlEntryType\"></xref> that specifies whether to grant, deny, or revoke the permissions specified by the <code>rights</code> parameter.\n  overload: System.Messaging.MessageQueue.SetPermissions*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.SynchronizingObject\n  commentId: P:System.Messaging.MessageQueue.SynchronizingObject\n  id: SynchronizingObject\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: SynchronizingObject\n  nameWithType: MessageQueue.SynchronizingObject\n  fullName: MessageQueue.SynchronizingObject\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets the object that marshals the event-handler call resulting from a <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> or <xref href=\"System.Messaging.MessageQueue.PeekCompleted\"></xref> event.\n  remarks: \"A <xref:System.Messaging.MessageQueue.ReceiveCompleted> or <xref:System.Messaging.MessageQueue.PeekCompleted> event results from a <xref:System.Messaging.MessageQueue.BeginReceive%2A> or <xref:System.Messaging.MessageQueue.BeginPeek%2A> request, respectively, to a specific thread. Typically, the <xref:System.Messaging.MessageQueue.SynchronizingObject%2A> is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.  \\n  \\n Typically, the synchronizing object marshals a method call into a single thread.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_SynchronizingObject\")]\n\n      public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }\n    return:\n      type: System.ComponentModel.ISynchronizeInvoke\n      description: A <xref href=\"System.ComponentModel.ISynchronizeInvoke\"></xref>, which represents the object that marshals the event-handler call resulting from a <xref href=\"System.Messaging.MessageQueue.ReceiveCompleted\"></xref> or <xref href=\"System.Messaging.MessageQueue.PeekCompleted\"></xref> event. The default is `null`.\n  overload: System.Messaging.MessageQueue.SynchronizingObject*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.Transactional\n  commentId: P:System.Messaging.MessageQueue.Transactional\n  id: Transactional\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: Transactional\n  nameWithType: MessageQueue.Transactional\n  fullName: MessageQueue.Transactional\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets a value that indicates whether the queue accepts only transactions.\n  remarks: \"Transactional messaging refers to the coupling of several related messages into a single transaction. Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.  \\n  \\n If a queue is transactional, it accepts only messages that are sent as part of a transaction. However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, and <xref:System.Messaging.MessageQueueTransaction.Abort%2A> syntax. If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name. In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.  \\n  \\n If you send a non-transactional message to a transactional queue, you will not be able to roll back the message in the event of an exception.  \\n  \\n <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.  \\n  \\n```vb  \\n<System.MTAThreadAttribute>  \\n public sub Main()  \\n```  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example displays the value of a message queue's <xref:System.Messaging.MessageQueue.Transactional%2A> property.  \\n  \\n [!code-csharp[MessageQueue#27](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#27)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_Transactional\")]\n\n      public bool Transactional { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the queue accepts only messages sent as part of a transaction; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.Transactional*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.UseJournalQueue\n  commentId: P:System.Messaging.MessageQueue.UseJournalQueue\n  id: UseJournalQueue\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: UseJournalQueue\n  nameWithType: MessageQueue.UseJournalQueue\n  fullName: MessageQueue.UseJournalQueue\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets or sets a value that indicates whether received messages are copied to the journal queue.\n  remarks: \"When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location. The journal queue is used to track the messages removed from a queue. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.  \\n  \\n The journal queue does not track messages removed from the queue because their time-to-be-received timer expired, nor does it track messages purged from the queue by using a Message Queuing directory service (Information Store or Active Directory).  \\n  \\n Applications cannot send messages to journal queues; they are limited to read-only access of these queues. Furthermore, Message Queuing never removes messages from journal queues. The application using the queue must clear these messages either by receiving them or by purging the queue.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|No|\"\n  example:\n  - \"The following code example gets and sets the value of a message queue's <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property.  \\n  \\n [!code-csharp[MessageQueue#28](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue/CS/class1.cs#28)]\"\n  syntax:\n    content: >-\n      [System.Messaging.MessagingDescription(\"MQ_WriteHandle\")]\n\n      public bool UseJournalQueue { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if messages received from the queue are copied to its journal queue; otherwise, `false`.'\n  overload: System.Messaging.MessageQueue.UseJournalQueue*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An error occurred when accessing a Message Queuing method.\n  attributes:\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageQueue.WriteHandle\n  commentId: P:System.Messaging.MessageQueue.WriteHandle\n  id: WriteHandle\n  parent: System.Messaging.MessageQueue\n  langs:\n  - csharp\n  name: WriteHandle\n  nameWithType: MessageQueue.WriteHandle\n  fullName: MessageQueue.WriteHandle\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the native handle used to send messages to the message queue.\n  remarks: \"The <xref:System.Messaging.MessageQueue.WriteHandle%2A> provides a native Windows handle to the message queue object that is used for sending messages to the queue. If you change the path of the queue, the handle is closed and reopened with a new value.  \\n  \\n The following table shows whether this property is available in various Workgroup modes.  \\n  \\n|Workgroup mode|Available|  \\n|--------------------|---------------|  \\n|Local computer|Yes|  \\n|Local computer and direct format name|Yes|  \\n|Remote computer|No|  \\n|Remote computer and direct format name|Yes|\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Messaging.MessagingDescription(\"MQ_WriteHandle\")]\n\n      public IntPtr WriteHandle { get; }\n    return:\n      type: System.IntPtr\n      description: A handle to the native queue object that you use for sending messages to the queue.\n  overload: System.Messaging.MessageQueue.WriteHandle*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The message queue is not available for writing.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Messaging.MessagingDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\nreferences:\n- uid: System.ComponentModel.Component\n  parent: System.ComponentModel\n  isExternal: false\n  name: Component\n  nameWithType: Component\n  fullName: System.ComponentModel.Component\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Messaging.MessageQueueException\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueException\n  nameWithType: MessageQueueException\n  fullName: System.Messaging.MessageQueueException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.Messaging.MessageQueueTransaction\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransaction\n  nameWithType: MessageQueueTransaction\n  fullName: System.Messaging.MessageQueueTransaction\n- uid: System.Messaging.MessageQueue.#ctor\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageQueue()\n  nameWithType: MessageQueue.MessageQueue()\n  fullName: MessageQueue.MessageQueue()\n- uid: System.Messaging.MessageQueue.#ctor(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageQueue(String)\n  nameWithType: MessageQueue.MessageQueue(String)\n  fullName: MessageQueue.MessageQueue(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageQueue(String, Boolean)\n  nameWithType: MessageQueue.MessageQueue(String, Boolean)\n  fullName: MessageQueue.MessageQueue(String, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageQueue(String, QueueAccessMode)\n  nameWithType: MessageQueue.MessageQueue(String, QueueAccessMode)\n  fullName: MessageQueue.MessageQueue(String, QueueAccessMode)\n- uid: System.Messaging.QueueAccessMode\n  parent: System.Messaging\n  isExternal: false\n  name: QueueAccessMode\n  nameWithType: QueueAccessMode\n  fullName: System.Messaging.QueueAccessMode\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageQueue(String, Boolean, Boolean)\n  nameWithType: MessageQueue.MessageQueue(String, Boolean, Boolean)\n  fullName: MessageQueue.MessageQueue(String, Boolean, Boolean)\n- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageQueue(String, Boolean, Boolean, QueueAccessMode)\n  nameWithType: MessageQueue.MessageQueue(String, Boolean, Boolean, QueueAccessMode)\n  fullName: MessageQueue.MessageQueue(String, Boolean, Boolean, QueueAccessMode)\n- uid: System.Messaging.MessageQueue.AccessMode\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: AccessMode\n  nameWithType: MessageQueue.AccessMode\n  fullName: MessageQueue.AccessMode\n- uid: System.Messaging.MessageQueue.Authenticate\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Authenticate\n  nameWithType: MessageQueue.Authenticate\n  fullName: MessageQueue.Authenticate\n- uid: System.Messaging.MessageQueue.BasePriority\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BasePriority\n  nameWithType: MessageQueue.BasePriority\n  fullName: MessageQueue.BasePriority\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginPeek(TimeSpan, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan, Object, AsyncCallback)\n  fullName: MessageQueue.BeginPeek(TimeSpan, Object, AsyncCallback)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginPeek(TimeSpan, Object)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan, Object)\n  fullName: MessageQueue.BeginPeek(TimeSpan, Object)\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginPeek(TimeSpan, Cursor, PeekAction, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan, Cursor, PeekAction, Object, AsyncCallback)\n  fullName: MessageQueue.BeginPeek(TimeSpan, Cursor, PeekAction, Object, AsyncCallback)\n- uid: System.Messaging.Cursor\n  parent: System.Messaging\n  isExternal: false\n  name: Cursor\n  nameWithType: Cursor\n  fullName: System.Messaging.Cursor\n- uid: System.Messaging.PeekAction\n  parent: System.Messaging\n  isExternal: false\n  name: PeekAction\n  nameWithType: PeekAction\n  fullName: System.Messaging.PeekAction\n- uid: System.Messaging.MessageQueue.BeginPeek\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginPeek()\n  nameWithType: MessageQueue.BeginPeek()\n  fullName: MessageQueue.BeginPeek()\n- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginPeek(TimeSpan)\n  nameWithType: MessageQueue.BeginPeek(TimeSpan)\n  fullName: MessageQueue.BeginPeek(TimeSpan)\n- uid: System.Messaging.MessageQueue.BeginReceive\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginReceive()\n  nameWithType: MessageQueue.BeginReceive()\n  fullName: MessageQueue.BeginReceive()\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginReceive(TimeSpan)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan)\n  fullName: MessageQueue.BeginReceive(TimeSpan)\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginReceive(TimeSpan, Object)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan, Object)\n  fullName: MessageQueue.BeginReceive(TimeSpan, Object)\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginReceive(TimeSpan, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan, Object, AsyncCallback)\n  fullName: MessageQueue.BeginReceive(TimeSpan, Object, AsyncCallback)\n- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginReceive(TimeSpan, Cursor, Object, AsyncCallback)\n  nameWithType: MessageQueue.BeginReceive(TimeSpan, Cursor, Object, AsyncCallback)\n  fullName: MessageQueue.BeginReceive(TimeSpan, Cursor, Object, AsyncCallback)\n- uid: System.Messaging.MessageQueue.CanRead\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CanRead\n  nameWithType: MessageQueue.CanRead\n  fullName: MessageQueue.CanRead\n- uid: System.Messaging.MessageQueue.CanWrite\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CanWrite\n  nameWithType: MessageQueue.CanWrite\n  fullName: MessageQueue.CanWrite\n- uid: System.Messaging.MessageQueue.Category\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Category\n  nameWithType: MessageQueue.Category\n  fullName: MessageQueue.Category\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Messaging.MessageQueue.ClearConnectionCache\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ClearConnectionCache()\n  nameWithType: MessageQueue.ClearConnectionCache()\n  fullName: MessageQueue.ClearConnectionCache()\n- uid: System.Messaging.MessageQueue.Close\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Close()\n  nameWithType: MessageQueue.Close()\n  fullName: MessageQueue.Close()\n- uid: System.Messaging.MessageQueue.Create(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Create(String)\n  nameWithType: MessageQueue.Create(String)\n  fullName: MessageQueue.Create(String)\n- uid: System.Messaging.MessageQueue\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueue\n  nameWithType: MessageQueue\n  fullName: System.Messaging.MessageQueue\n- uid: System.Messaging.MessageQueue.Create(System.String,System.Boolean)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Create(String, Boolean)\n  nameWithType: MessageQueue.Create(String, Boolean)\n  fullName: MessageQueue.Create(String, Boolean)\n- uid: System.Messaging.MessageQueue.CreateCursor\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CreateCursor()\n  nameWithType: MessageQueue.CreateCursor()\n  fullName: MessageQueue.CreateCursor()\n- uid: System.Messaging.MessageQueue.CreateTime\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CreateTime\n  nameWithType: MessageQueue.CreateTime\n  fullName: MessageQueue.CreateTime\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Messaging.MessageQueue.DefaultPropertiesToSend\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: DefaultPropertiesToSend\n  nameWithType: MessageQueue.DefaultPropertiesToSend\n  fullName: MessageQueue.DefaultPropertiesToSend\n- uid: System.Messaging.DefaultPropertiesToSend\n  parent: System.Messaging\n  isExternal: false\n  name: DefaultPropertiesToSend\n  nameWithType: DefaultPropertiesToSend\n  fullName: System.Messaging.DefaultPropertiesToSend\n- uid: System.Messaging.MessageQueue.Delete(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Delete(String)\n  nameWithType: MessageQueue.Delete(String)\n  fullName: MessageQueue.Delete(String)\n- uid: System.Messaging.MessageQueue.DenySharedReceive\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: DenySharedReceive\n  nameWithType: MessageQueue.DenySharedReceive\n  fullName: MessageQueue.DenySharedReceive\n- uid: System.Messaging.MessageQueue.Dispose(System.Boolean)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MessageQueue.Dispose(Boolean)\n  fullName: MessageQueue.Dispose(Boolean)\n- uid: System.Messaging.MessageQueue.EnableConnectionCache\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EnableConnectionCache\n  nameWithType: MessageQueue.EnableConnectionCache\n  fullName: MessageQueue.EnableConnectionCache\n- uid: System.Messaging.MessageQueue.EncryptionRequired\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EncryptionRequired\n  nameWithType: MessageQueue.EncryptionRequired\n  fullName: MessageQueue.EncryptionRequired\n- uid: System.Messaging.EncryptionRequired\n  parent: System.Messaging\n  isExternal: false\n  name: EncryptionRequired\n  nameWithType: EncryptionRequired\n  fullName: System.Messaging.EncryptionRequired\n- uid: System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EndPeek(IAsyncResult)\n  nameWithType: MessageQueue.EndPeek(IAsyncResult)\n  fullName: MessageQueue.EndPeek(IAsyncResult)\n- uid: System.Messaging.Message\n  parent: System.Messaging\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.Messaging.Message\n- uid: System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EndReceive(IAsyncResult)\n  nameWithType: MessageQueue.EndReceive(IAsyncResult)\n  fullName: MessageQueue.EndReceive(IAsyncResult)\n- uid: System.Messaging.MessageQueue.Exists(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Exists(String)\n  nameWithType: MessageQueue.Exists(String)\n  fullName: MessageQueue.Exists(String)\n- uid: System.Messaging.MessageQueue.FormatName\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: FormatName\n  nameWithType: MessageQueue.FormatName\n  fullName: MessageQueue.FormatName\n- uid: System.Messaging.MessageQueue.Formatter\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Formatter\n  nameWithType: MessageQueue.Formatter\n  fullName: MessageQueue.Formatter\n- uid: System.Messaging.IMessageFormatter\n  parent: System.Messaging\n  isExternal: false\n  name: IMessageFormatter\n  nameWithType: IMessageFormatter\n  fullName: System.Messaging.IMessageFormatter\n- uid: System.Messaging.MessageQueue.GetAllMessages\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetAllMessages()\n  nameWithType: MessageQueue.GetAllMessages()\n  fullName: MessageQueue.GetAllMessages()\n- uid: System.Messaging.Message[]\n  parent: System.Messaging\n  isExternal: false\n  name: Message[]\n  nameWithType: Message[]\n  fullName: System.Messaging.Message[]\n  spec.csharp:\n  - uid: System.Messaging.Message\n    name: Message\n    nameWithType: Message\n    fullName: System.Messaging.Message\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Messaging.MessageQueue.GetEnumerator\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: MessageQueue.GetEnumerator()\n  fullName: MessageQueue.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Messaging.MessageQueue.GetMachineId(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMachineId(String)\n  nameWithType: MessageQueue.GetMachineId(String)\n  fullName: MessageQueue.GetMachineId(String)\n- uid: System.Messaging.MessageQueue.GetMessageEnumerator\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMessageEnumerator()\n  nameWithType: MessageQueue.GetMessageEnumerator()\n  fullName: MessageQueue.GetMessageEnumerator()\n- uid: System.Messaging.MessageEnumerator\n  parent: System.Messaging\n  isExternal: false\n  name: MessageEnumerator\n  nameWithType: MessageEnumerator\n  fullName: System.Messaging.MessageEnumerator\n- uid: System.Messaging.MessageQueue.GetMessageEnumerator2\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMessageEnumerator2()\n  nameWithType: MessageQueue.GetMessageEnumerator2()\n  fullName: MessageQueue.GetMessageEnumerator2()\n- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMessageQueueEnumerator()\n  nameWithType: MessageQueue.GetMessageQueueEnumerator()\n  fullName: MessageQueue.GetMessageQueueEnumerator()\n- uid: System.Messaging.MessageQueueEnumerator\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueEnumerator\n  nameWithType: MessageQueueEnumerator\n  fullName: System.Messaging.MessageQueueEnumerator\n- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMessageQueueEnumerator(MessageQueueCriteria)\n  nameWithType: MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)\n  fullName: MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)\n- uid: System.Messaging.MessageQueueCriteria\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueCriteria\n  nameWithType: MessageQueueCriteria\n  fullName: System.Messaging.MessageQueueCriteria\n- uid: System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPrivateQueuesByMachine(String)\n  nameWithType: MessageQueue.GetPrivateQueuesByMachine(String)\n  fullName: MessageQueue.GetPrivateQueuesByMachine(String)\n- uid: System.Messaging.MessageQueue[]\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueue[]\n  nameWithType: MessageQueue[]\n  fullName: System.Messaging.MessageQueue[]\n  spec.csharp:\n  - uid: System.Messaging.MessageQueue\n    name: MessageQueue\n    nameWithType: MessageQueue\n    fullName: System.Messaging.MessageQueue\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Messaging.MessageQueue.GetPublicQueues\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueues()\n  nameWithType: MessageQueue.GetPublicQueues()\n  fullName: MessageQueue.GetPublicQueues()\n- uid: System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueues(MessageQueueCriteria)\n  nameWithType: MessageQueue.GetPublicQueues(MessageQueueCriteria)\n  fullName: MessageQueue.GetPublicQueues(MessageQueueCriteria)\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueuesByCategory(Guid)\n  nameWithType: MessageQueue.GetPublicQueuesByCategory(Guid)\n  fullName: MessageQueue.GetPublicQueuesByCategory(Guid)\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueuesByLabel(String)\n  nameWithType: MessageQueue.GetPublicQueuesByLabel(String)\n  fullName: MessageQueue.GetPublicQueuesByLabel(String)\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueuesByMachine(String)\n  nameWithType: MessageQueue.GetPublicQueuesByMachine(String)\n  fullName: MessageQueue.GetPublicQueuesByMachine(String)\n- uid: System.Messaging.MessageQueue.GetSecurityContext\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetSecurityContext()\n  nameWithType: MessageQueue.GetSecurityContext()\n  fullName: MessageQueue.GetSecurityContext()\n- uid: System.Messaging.SecurityContext\n  parent: System.Messaging\n  isExternal: false\n  name: SecurityContext\n  nameWithType: SecurityContext\n  fullName: System.Messaging.SecurityContext\n- uid: System.Messaging.MessageQueue.Id\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Id\n  nameWithType: MessageQueue.Id\n  fullName: MessageQueue.Id\n- uid: System.Messaging.MessageQueue.InfiniteQueueSize\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: InfiniteQueueSize\n  nameWithType: MessageQueue.InfiniteQueueSize\n  fullName: MessageQueue.InfiniteQueueSize\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Messaging.MessageQueue.InfiniteTimeout\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: InfiniteTimeout\n  nameWithType: MessageQueue.InfiniteTimeout\n  fullName: MessageQueue.InfiniteTimeout\n- uid: System.Messaging.MessageQueue.Label\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Label\n  nameWithType: MessageQueue.Label\n  fullName: MessageQueue.Label\n- uid: System.Messaging.MessageQueue.LastModifyTime\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: LastModifyTime\n  nameWithType: MessageQueue.LastModifyTime\n  fullName: MessageQueue.LastModifyTime\n- uid: System.Messaging.MessageQueue.MachineName\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MachineName\n  nameWithType: MessageQueue.MachineName\n  fullName: MessageQueue.MachineName\n- uid: System.Messaging.MessageQueue.MaximumJournalSize\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MaximumJournalSize\n  nameWithType: MessageQueue.MaximumJournalSize\n  fullName: MessageQueue.MaximumJournalSize\n- uid: System.Messaging.MessageQueue.MaximumQueueSize\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MaximumQueueSize\n  nameWithType: MessageQueue.MaximumQueueSize\n  fullName: MessageQueue.MaximumQueueSize\n- uid: System.Messaging.MessageQueue.MessageReadPropertyFilter\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageReadPropertyFilter\n  nameWithType: MessageQueue.MessageReadPropertyFilter\n  fullName: MessageQueue.MessageReadPropertyFilter\n- uid: System.Messaging.MessagePropertyFilter\n  parent: System.Messaging\n  isExternal: false\n  name: MessagePropertyFilter\n  nameWithType: MessagePropertyFilter\n  fullName: System.Messaging.MessagePropertyFilter\n- uid: System.Messaging.MessageQueue.MulticastAddress\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MulticastAddress\n  nameWithType: MessageQueue.MulticastAddress\n  fullName: MessageQueue.MulticastAddress\n- uid: System.Messaging.MessageQueue.Path\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Path\n  nameWithType: MessageQueue.Path\n  fullName: MessageQueue.Path\n- uid: System.Messaging.MessageQueue.Peek\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Peek()\n  nameWithType: MessageQueue.Peek()\n  fullName: MessageQueue.Peek()\n- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Peek(TimeSpan)\n  nameWithType: MessageQueue.Peek(TimeSpan)\n  fullName: MessageQueue.Peek(TimeSpan)\n- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Peek(TimeSpan, Cursor, PeekAction)\n  nameWithType: MessageQueue.Peek(TimeSpan, Cursor, PeekAction)\n  fullName: MessageQueue.Peek(TimeSpan, Cursor, PeekAction)\n- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekByCorrelationId(String)\n  nameWithType: MessageQueue.PeekByCorrelationId(String)\n  fullName: MessageQueue.PeekByCorrelationId(String)\n- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekByCorrelationId(String, TimeSpan)\n  nameWithType: MessageQueue.PeekByCorrelationId(String, TimeSpan)\n  fullName: MessageQueue.PeekByCorrelationId(String, TimeSpan)\n- uid: System.Messaging.MessageQueue.PeekById(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekById(String)\n  nameWithType: MessageQueue.PeekById(String)\n  fullName: MessageQueue.PeekById(String)\n- uid: System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekById(String, TimeSpan)\n  nameWithType: MessageQueue.PeekById(String, TimeSpan)\n  fullName: MessageQueue.PeekById(String, TimeSpan)\n- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Int64)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekByLookupId(Int64)\n  nameWithType: MessageQueue.PeekByLookupId(Int64)\n  fullName: MessageQueue.PeekByLookupId(Int64)\n- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekByLookupId(MessageLookupAction, Int64)\n  nameWithType: MessageQueue.PeekByLookupId(MessageLookupAction, Int64)\n  fullName: MessageQueue.PeekByLookupId(MessageLookupAction, Int64)\n- uid: System.Messaging.MessageLookupAction\n  parent: System.Messaging\n  isExternal: false\n  name: MessageLookupAction\n  nameWithType: MessageLookupAction\n  fullName: System.Messaging.MessageLookupAction\n- uid: System.Messaging.MessageQueue.PeekCompleted\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekCompleted\n  nameWithType: MessageQueue.PeekCompleted\n  fullName: MessageQueue.PeekCompleted\n- uid: System.Messaging.PeekCompletedEventHandler\n  parent: System.Messaging\n  isExternal: false\n  name: PeekCompletedEventHandler\n  nameWithType: PeekCompletedEventHandler\n  fullName: System.Messaging.PeekCompletedEventHandler\n- uid: System.Messaging.MessageQueue.Purge\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Purge()\n  nameWithType: MessageQueue.Purge()\n  fullName: MessageQueue.Purge()\n- uid: System.Messaging.MessageQueue.QueueName\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: QueueName\n  nameWithType: MessageQueue.QueueName\n  fullName: MessageQueue.QueueName\n- uid: System.Messaging.MessageQueue.ReadHandle\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReadHandle\n  nameWithType: MessageQueue.ReadHandle\n  fullName: MessageQueue.ReadHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Messaging.MessageQueue.Receive\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive()\n  nameWithType: MessageQueue.Receive()\n  fullName: MessageQueue.Receive()\n- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(MessageQueueTransaction)\n  nameWithType: MessageQueue.Receive(MessageQueueTransaction)\n  fullName: MessageQueue.Receive(MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(MessageQueueTransactionType)\n  nameWithType: MessageQueue.Receive(MessageQueueTransactionType)\n  fullName: MessageQueue.Receive(MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueueTransactionType\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransactionType\n  nameWithType: MessageQueueTransactionType\n  fullName: System.Messaging.MessageQueueTransactionType\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(TimeSpan)\n  nameWithType: MessageQueue.Receive(TimeSpan)\n  fullName: MessageQueue.Receive(TimeSpan)\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(TimeSpan, Cursor)\n  nameWithType: MessageQueue.Receive(TimeSpan, Cursor)\n  fullName: MessageQueue.Receive(TimeSpan, Cursor)\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageQueue.Receive(TimeSpan, MessageQueueTransaction)\n  fullName: MessageQueue.Receive(TimeSpan, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Receive(TimeSpan, MessageQueueTransactionType)\n  fullName: MessageQueue.Receive(TimeSpan, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(TimeSpan, Cursor, MessageQueueTransaction)\n  nameWithType: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransaction)\n  fullName: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive(TimeSpan, Cursor, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransactionType)\n  fullName: MessageQueue.Receive(TimeSpan, Cursor, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, TimeSpan, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByCorrelationId(String, TimeSpan)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, TimeSpan)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, TimeSpan)\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByCorrelationId(String, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByCorrelationId(String, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveByCorrelationId(String, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByCorrelationId(String)\n  nameWithType: MessageQueue.ReceiveByCorrelationId(String)\n  fullName: MessageQueue.ReceiveByCorrelationId(String)\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveById(String)\n  nameWithType: MessageQueue.ReceiveById(String)\n  fullName: MessageQueue.ReceiveById(String)\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveById(String, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveById(String, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveById(String, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveById(String, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveById(String, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveById(String, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveById(String, TimeSpan)\n  nameWithType: MessageQueue.ReceiveById(String, TimeSpan)\n  fullName: MessageQueue.ReceiveById(String, TimeSpan)\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveById(String, TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveById(String, TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveById(String, TimeSpan, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByLookupId(Int64)\n  nameWithType: MessageQueue.ReceiveByLookupId(Int64)\n  fullName: MessageQueue.ReceiveByLookupId(Int64)\n- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransaction)\n  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransaction)\n  fullName: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransactionType)\n  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransactionType)\n  fullName: MessageQueue.ReceiveByLookupId(MessageLookupAction, Int64, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.ReceiveCompleted\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveCompleted\n  nameWithType: MessageQueue.ReceiveCompleted\n  fullName: MessageQueue.ReceiveCompleted\n- uid: System.Messaging.ReceiveCompletedEventHandler\n  parent: System.Messaging\n  isExternal: false\n  name: ReceiveCompletedEventHandler\n  nameWithType: ReceiveCompletedEventHandler\n  fullName: System.Messaging.ReceiveCompletedEventHandler\n- uid: System.Messaging.MessageQueue.Refresh\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Refresh()\n  nameWithType: MessageQueue.Refresh()\n  fullName: MessageQueue.Refresh()\n- uid: System.Messaging.MessageQueue.ResetPermissions\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ResetPermissions()\n  nameWithType: MessageQueue.ResetPermissions()\n  fullName: MessageQueue.ResetPermissions()\n- uid: System.Messaging.MessageQueue.Send(System.Object)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Send(Object)\n  nameWithType: MessageQueue.Send(Object)\n  fullName: MessageQueue.Send(Object)\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Send(Object, MessageQueueTransaction)\n  nameWithType: MessageQueue.Send(Object, MessageQueueTransaction)\n  fullName: MessageQueue.Send(Object, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Send(Object, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Send(Object, MessageQueueTransactionType)\n  fullName: MessageQueue.Send(Object, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.String)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Send(Object, String)\n  nameWithType: MessageQueue.Send(Object, String)\n  fullName: MessageQueue.Send(Object, String)\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Send(Object, String, MessageQueueTransaction)\n  nameWithType: MessageQueue.Send(Object, String, MessageQueueTransaction)\n  fullName: MessageQueue.Send(Object, String, MessageQueueTransaction)\n- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Send(Object, String, MessageQueueTransactionType)\n  nameWithType: MessageQueue.Send(Object, String, MessageQueueTransactionType)\n  fullName: MessageQueue.Send(Object, String, MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: SetPermissions(AccessControlList)\n  nameWithType: MessageQueue.SetPermissions(AccessControlList)\n  fullName: MessageQueue.SetPermissions(AccessControlList)\n- uid: System.Messaging.AccessControlList\n  parent: System.Messaging\n  isExternal: false\n  name: AccessControlList\n  nameWithType: AccessControlList\n  fullName: System.Messaging.AccessControlList\n- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: SetPermissions(MessageQueueAccessControlEntry)\n  nameWithType: MessageQueue.SetPermissions(MessageQueueAccessControlEntry)\n  fullName: MessageQueue.SetPermissions(MessageQueueAccessControlEntry)\n- uid: System.Messaging.MessageQueueAccessControlEntry\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueAccessControlEntry\n  nameWithType: MessageQueueAccessControlEntry\n  fullName: System.Messaging.MessageQueueAccessControlEntry\n- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: SetPermissions(String, MessageQueueAccessRights)\n  nameWithType: MessageQueue.SetPermissions(String, MessageQueueAccessRights)\n  fullName: MessageQueue.SetPermissions(String, MessageQueueAccessRights)\n- uid: System.Messaging.MessageQueueAccessRights\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueAccessRights\n  nameWithType: MessageQueueAccessRights\n  fullName: System.Messaging.MessageQueueAccessRights\n- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: SetPermissions(String, MessageQueueAccessRights, AccessControlEntryType)\n  nameWithType: MessageQueue.SetPermissions(String, MessageQueueAccessRights, AccessControlEntryType)\n  fullName: MessageQueue.SetPermissions(String, MessageQueueAccessRights, AccessControlEntryType)\n- uid: System.Messaging.AccessControlEntryType\n  parent: System.Messaging\n  isExternal: false\n  name: AccessControlEntryType\n  nameWithType: AccessControlEntryType\n  fullName: System.Messaging.AccessControlEntryType\n- uid: System.Messaging.MessageQueue.SynchronizingObject\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: SynchronizingObject\n  nameWithType: MessageQueue.SynchronizingObject\n  fullName: MessageQueue.SynchronizingObject\n- uid: System.ComponentModel.ISynchronizeInvoke\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISynchronizeInvoke\n  nameWithType: ISynchronizeInvoke\n  fullName: System.ComponentModel.ISynchronizeInvoke\n- uid: System.Messaging.MessageQueue.Transactional\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Transactional\n  nameWithType: MessageQueue.Transactional\n  fullName: MessageQueue.Transactional\n- uid: System.Messaging.MessageQueue.UseJournalQueue\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: UseJournalQueue\n  nameWithType: MessageQueue.UseJournalQueue\n  fullName: MessageQueue.UseJournalQueue\n- uid: System.Messaging.MessageQueue.WriteHandle\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: WriteHandle\n  nameWithType: MessageQueue.WriteHandle\n  fullName: MessageQueue.WriteHandle\n- uid: System.Messaging.MessageQueue.#ctor*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageQueue\n  nameWithType: MessageQueue.MessageQueue\n  fullName: MessageQueue.MessageQueue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.AccessMode*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: AccessMode\n  nameWithType: MessageQueue.AccessMode\n  fullName: MessageQueue.AccessMode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Authenticate*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Authenticate\n  nameWithType: MessageQueue.Authenticate\n  fullName: MessageQueue.Authenticate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.BasePriority*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BasePriority\n  nameWithType: MessageQueue.BasePriority\n  fullName: MessageQueue.BasePriority\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.BeginPeek*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginPeek\n  nameWithType: MessageQueue.BeginPeek\n  fullName: MessageQueue.BeginPeek\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.BeginReceive*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: BeginReceive\n  nameWithType: MessageQueue.BeginReceive\n  fullName: MessageQueue.BeginReceive\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.CanRead*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CanRead\n  nameWithType: MessageQueue.CanRead\n  fullName: MessageQueue.CanRead\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.CanWrite*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CanWrite\n  nameWithType: MessageQueue.CanWrite\n  fullName: MessageQueue.CanWrite\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Category*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Category\n  nameWithType: MessageQueue.Category\n  fullName: MessageQueue.Category\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.ClearConnectionCache*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ClearConnectionCache\n  nameWithType: MessageQueue.ClearConnectionCache\n  fullName: MessageQueue.ClearConnectionCache\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Close*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Close\n  nameWithType: MessageQueue.Close\n  fullName: MessageQueue.Close\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Create*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Create\n  nameWithType: MessageQueue.Create\n  fullName: MessageQueue.Create\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.CreateCursor*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CreateCursor\n  nameWithType: MessageQueue.CreateCursor\n  fullName: MessageQueue.CreateCursor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.CreateTime*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: CreateTime\n  nameWithType: MessageQueue.CreateTime\n  fullName: MessageQueue.CreateTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.DefaultPropertiesToSend*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: DefaultPropertiesToSend\n  nameWithType: MessageQueue.DefaultPropertiesToSend\n  fullName: MessageQueue.DefaultPropertiesToSend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Delete*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Delete\n  nameWithType: MessageQueue.Delete\n  fullName: MessageQueue.Delete\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.DenySharedReceive*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: DenySharedReceive\n  nameWithType: MessageQueue.DenySharedReceive\n  fullName: MessageQueue.DenySharedReceive\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Dispose*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Dispose\n  nameWithType: MessageQueue.Dispose\n  fullName: MessageQueue.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.EnableConnectionCache*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EnableConnectionCache\n  nameWithType: MessageQueue.EnableConnectionCache\n  fullName: MessageQueue.EnableConnectionCache\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.EncryptionRequired*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EncryptionRequired\n  nameWithType: MessageQueue.EncryptionRequired\n  fullName: MessageQueue.EncryptionRequired\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.EndPeek*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EndPeek\n  nameWithType: MessageQueue.EndPeek\n  fullName: MessageQueue.EndPeek\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.EndReceive*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: EndReceive\n  nameWithType: MessageQueue.EndReceive\n  fullName: MessageQueue.EndReceive\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Exists*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Exists\n  nameWithType: MessageQueue.Exists\n  fullName: MessageQueue.Exists\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.FormatName*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: FormatName\n  nameWithType: MessageQueue.FormatName\n  fullName: MessageQueue.FormatName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Formatter*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Formatter\n  nameWithType: MessageQueue.Formatter\n  fullName: MessageQueue.Formatter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetAllMessages*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetAllMessages\n  nameWithType: MessageQueue.GetAllMessages\n  fullName: MessageQueue.GetAllMessages\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetEnumerator*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: MessageQueue.GetEnumerator\n  fullName: MessageQueue.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetMachineId*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMachineId\n  nameWithType: MessageQueue.GetMachineId\n  fullName: MessageQueue.GetMachineId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetMessageEnumerator*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMessageEnumerator\n  nameWithType: MessageQueue.GetMessageEnumerator\n  fullName: MessageQueue.GetMessageEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetMessageEnumerator2*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMessageEnumerator2\n  nameWithType: MessageQueue.GetMessageEnumerator2\n  fullName: MessageQueue.GetMessageEnumerator2\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetMessageQueueEnumerator\n  nameWithType: MessageQueue.GetMessageQueueEnumerator\n  fullName: MessageQueue.GetMessageQueueEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetPrivateQueuesByMachine*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPrivateQueuesByMachine\n  nameWithType: MessageQueue.GetPrivateQueuesByMachine\n  fullName: MessageQueue.GetPrivateQueuesByMachine\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetPublicQueues*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueues\n  nameWithType: MessageQueue.GetPublicQueues\n  fullName: MessageQueue.GetPublicQueues\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByCategory*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueuesByCategory\n  nameWithType: MessageQueue.GetPublicQueuesByCategory\n  fullName: MessageQueue.GetPublicQueuesByCategory\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByLabel*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueuesByLabel\n  nameWithType: MessageQueue.GetPublicQueuesByLabel\n  fullName: MessageQueue.GetPublicQueuesByLabel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetPublicQueuesByMachine*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetPublicQueuesByMachine\n  nameWithType: MessageQueue.GetPublicQueuesByMachine\n  fullName: MessageQueue.GetPublicQueuesByMachine\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.GetSecurityContext*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: GetSecurityContext\n  nameWithType: MessageQueue.GetSecurityContext\n  fullName: MessageQueue.GetSecurityContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Id*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Id\n  nameWithType: MessageQueue.Id\n  fullName: MessageQueue.Id\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Label*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Label\n  nameWithType: MessageQueue.Label\n  fullName: MessageQueue.Label\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.LastModifyTime*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: LastModifyTime\n  nameWithType: MessageQueue.LastModifyTime\n  fullName: MessageQueue.LastModifyTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.MachineName*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MachineName\n  nameWithType: MessageQueue.MachineName\n  fullName: MessageQueue.MachineName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.MaximumJournalSize*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MaximumJournalSize\n  nameWithType: MessageQueue.MaximumJournalSize\n  fullName: MessageQueue.MaximumJournalSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.MaximumQueueSize*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MaximumQueueSize\n  nameWithType: MessageQueue.MaximumQueueSize\n  fullName: MessageQueue.MaximumQueueSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.MessageReadPropertyFilter*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MessageReadPropertyFilter\n  nameWithType: MessageQueue.MessageReadPropertyFilter\n  fullName: MessageQueue.MessageReadPropertyFilter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.MulticastAddress*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: MulticastAddress\n  nameWithType: MessageQueue.MulticastAddress\n  fullName: MessageQueue.MulticastAddress\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Path*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Path\n  nameWithType: MessageQueue.Path\n  fullName: MessageQueue.Path\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Peek*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Peek\n  nameWithType: MessageQueue.Peek\n  fullName: MessageQueue.Peek\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.PeekByCorrelationId*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekByCorrelationId\n  nameWithType: MessageQueue.PeekByCorrelationId\n  fullName: MessageQueue.PeekByCorrelationId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.PeekById*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekById\n  nameWithType: MessageQueue.PeekById\n  fullName: MessageQueue.PeekById\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.PeekByLookupId*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: PeekByLookupId\n  nameWithType: MessageQueue.PeekByLookupId\n  fullName: MessageQueue.PeekByLookupId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Purge*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Purge\n  nameWithType: MessageQueue.Purge\n  fullName: MessageQueue.Purge\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.QueueName*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: QueueName\n  nameWithType: MessageQueue.QueueName\n  fullName: MessageQueue.QueueName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.ReadHandle*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReadHandle\n  nameWithType: MessageQueue.ReadHandle\n  fullName: MessageQueue.ReadHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Receive*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Receive\n  nameWithType: MessageQueue.Receive\n  fullName: MessageQueue.Receive\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByCorrelationId\n  nameWithType: MessageQueue.ReceiveByCorrelationId\n  fullName: MessageQueue.ReceiveByCorrelationId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.ReceiveById*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveById\n  nameWithType: MessageQueue.ReceiveById\n  fullName: MessageQueue.ReceiveById\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.ReceiveByLookupId*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ReceiveByLookupId\n  nameWithType: MessageQueue.ReceiveByLookupId\n  fullName: MessageQueue.ReceiveByLookupId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Refresh*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Refresh\n  nameWithType: MessageQueue.Refresh\n  fullName: MessageQueue.Refresh\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.ResetPermissions*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: ResetPermissions\n  nameWithType: MessageQueue.ResetPermissions\n  fullName: MessageQueue.ResetPermissions\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Send*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Send\n  nameWithType: MessageQueue.Send\n  fullName: MessageQueue.Send\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.SetPermissions*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: SetPermissions\n  nameWithType: MessageQueue.SetPermissions\n  fullName: MessageQueue.SetPermissions\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.SynchronizingObject*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: SynchronizingObject\n  nameWithType: MessageQueue.SynchronizingObject\n  fullName: MessageQueue.SynchronizingObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.Transactional*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: Transactional\n  nameWithType: MessageQueue.Transactional\n  fullName: MessageQueue.Transactional\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.UseJournalQueue*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: UseJournalQueue\n  nameWithType: MessageQueue.UseJournalQueue\n  fullName: MessageQueue.UseJournalQueue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Messaging.MessageQueue.WriteHandle*\n  parent: System.Messaging.MessageQueue\n  isExternal: false\n  name: WriteHandle\n  nameWithType: MessageQueue.WriteHandle\n  fullName: MessageQueue.WriteHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageQueue.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.ComponentModel.Component.ToString\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: ToString()\n  nameWithType: Component.ToString()\n  fullName: Component.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.ComponentModel.Component.CanRaiseEvents\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: CanRaiseEvents\n  nameWithType: Component.CanRaiseEvents\n  fullName: Component.CanRaiseEvents\n- uid: System.ComponentModel.Component.Container\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Container\n  nameWithType: Component.Container\n  fullName: Component.Container\n- uid: System.ComponentModel.Component.DesignMode\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: DesignMode\n  nameWithType: Component.DesignMode\n  fullName: Component.DesignMode\n- uid: System.ComponentModel.Component.Dispose\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose()\n  nameWithType: Component.Dispose()\n  fullName: Component.Dispose()\n- uid: System.ComponentModel.Component.Disposed\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Disposed\n  nameWithType: Component.Disposed\n  fullName: Component.Disposed\n- uid: System.ComponentModel.Component.Events\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Events\n  nameWithType: Component.Events\n  fullName: Component.Events\n- uid: System.ComponentModel.Component.GetService(System.Type)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: Component.GetService(Type)\n  fullName: Component.GetService(Type)\n- uid: System.ComponentModel.Component.Site\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Site\n  nameWithType: Component.Site\n  fullName: Component.Site\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n"}