{"nodes":[{"content":"Defines identifiers for a set of technologies that designer hosts support.","nodes":[{"pos":[0,74],"content":"Defines identifiers for a set of technologies that designer hosts support.","nodes":[{"content":"Defines identifiers for a set of technologies that designer hosts support.","pos":[0,74]}]}],"pos":[633,708],"yaml":true},{"content":"The view adapter model replaces and adds functionality to the <xref:System.ComponentModel.Design.ViewTechnology> feature; however, the <xref:System.ComponentModel.Design.ViewTechnology> feature is retained for both backward compatibility and future use, if you choose. For more information, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.  \n  \n <xref:System.ComponentModel.Design.ViewTechnology> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.  \n  \n You should only use the Default value in your designer hosting environment. In previous versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the <xref:System.ComponentModel.Design.ViewTechnology.Default> enumeration specified the type of UI model supported by a root designer. Because this model is not extensible, you should instead use a *view adapter* model. A view adapter is a type that adapts an object of one type to another.  \n  \n For example, an HTML designer might return a `DemoDOM` tree as its view. The HTML designer returns a view technology of Default. A Windows Forms hosting environment would have one or more view adapter classes available. If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer. If no adapter can handle the data type returned from the designer’s <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error.  \n  \n [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] has an extensible scheme for providing view adapters, so it can adapt to any UI technology. Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.  \n  \n For an example that uses view adapters, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","nodes":[{"pos":[0,426],"content":"The view adapter model replaces and adds functionality to the <xref:System.ComponentModel.Design.ViewTechnology> feature; however, the <xref:System.ComponentModel.Design.ViewTechnology> feature is retained for both backward compatibility and future use, if you choose. For more information, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","nodes":[{"content":"The view adapter model replaces and adds functionality to the <xref:System.ComponentModel.Design.ViewTechnology> feature; however, the <xref:System.ComponentModel.Design.ViewTechnology> feature is retained for both backward compatibility and future use, if you choose. For more information, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","pos":[0,426],"nodes":[{"content":"The view adapter model replaces and adds functionality to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> feature; however, the <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> feature is retained for both backward compatibility and future use, if you choose.","pos":[0,268],"source":"The view adapter model replaces and adds functionality to the <xref:System.ComponentModel.Design.ViewTechnology> feature; however, the <xref:System.ComponentModel.Design.ViewTechnology> feature is retained for both backward compatibility and future use, if you choose."},{"content":"For more information, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","pos":[269,426]}]}]},{"pos":[433,596],"content":"<xref:System.ComponentModel.Design.ViewTechnology> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.","pos":[0,163],"source":"<xref:System.ComponentModel.Design.ViewTechnology> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document."}]},{"pos":[603,1053],"content":"You should only use the Default value in your designer hosting environment. In previous versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the <xref:System.ComponentModel.Design.ViewTechnology.Default> enumeration specified the type of UI model supported by a root designer. Because this model is not extensible, you should instead use a *view adapter* model. A view adapter is a type that adapts an object of one type to another.","nodes":[{"content":"You should only use the Default value in your designer hosting environment.","pos":[0,75]},{"content":"In previous versions of the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph> enumeration specified the type of UI model supported by a root designer.","pos":[76,294],"source":" In previous versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the <xref:System.ComponentModel.Design.ViewTechnology.Default> enumeration specified the type of UI model supported by a root designer."},{"content":"Because this model is not extensible, you should instead use a <bpt id=\"p1\">*</bpt>view adapter<ept id=\"p1\">*</ept> model.","pos":[295,379],"source":" Because this model is not extensible, you should instead use a *view adapter* model."},{"content":"A view adapter is a type that adapts an object of one type to another.","pos":[380,450]}]},{"pos":[1060,1633],"content":"For example, an HTML designer might return a `DemoDOM` tree as its view. The HTML designer returns a view technology of Default. A Windows Forms hosting environment would have one or more view adapter classes available. If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer. If no adapter can handle the data type returned from the designer’s <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error.","nodes":[{"content":"For example, an HTML designer might return a <ph id=\"ph1\">`DemoDOM`</ph> tree as its view.","pos":[0,72],"source":"For example, an HTML designer might return a `DemoDOM` tree as its view."},{"content":"The HTML designer returns a view technology of Default.","pos":[73,128]},{"content":"A Windows Forms hosting environment would have one or more view adapter classes available.","pos":[129,219]},{"content":"If one such class could convert the <ph id=\"ph1\">`DemoDOM`</ph> into a Windows Forms control, the hosting application can support this type of designer.","pos":[220,354],"source":" If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer."},{"content":"If no adapter can handle the data type returned from the designer’s <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph> method, the load of the designer will fail, and the user will be presented with an error.","pos":[355,573],"source":" If no adapter can handle the data type returned from the designer’s <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error."}]},{"pos":[1640,1904],"content":"[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] has an extensible scheme for providing view adapters, so it can adapt to any UI technology. Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.","nodes":[{"content":"<ph id=\"ph1\">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> has an extensible scheme for providing view adapters, so it can adapt to any UI technology.","pos":[0,135],"source":"[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] has an extensible scheme for providing view adapters, so it can adapt to any UI technology."},{"content":"Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.","pos":[136,264]}]},{"pos":[1911,2086],"content":"For an example that uses view adapters, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","nodes":[{"content":"For an example that uses view adapters, see \".NET Shape Library: A Sample Designer\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.","pos":[0,175]}]}],"pos":[719,2822],"yaml":true,"extradata":"MT"},{"content":"Specifies the default view technology support.","nodes":[{"pos":[0,46],"content":"Specifies the default view technology support.","nodes":[{"content":"Specifies the default view technology support.","pos":[0,46]}]}],"pos":[4939,4986],"yaml":true},{"content":"The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=fullName> instance.","nodes":[{"pos":[0,389],"content":"The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=fullName> instance.","nodes":[{"content":"The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host.","pos":[0,130]},{"content":"Hosting environments such as <ph id=\"ph1\">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> provide a way to plug in new view technology adapters.","pos":[131,258],"source":" Hosting environments such as [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] provide a way to plug in new view technology adapters."},{"content":"The default view object for the Windows Forms designer is a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control?displayProperty=fullName&gt;</ph> instance.","pos":[259,389],"source":" The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=fullName> instance."}]}],"pos":[4997,5387],"yaml":true,"extradata":"MT"},{"content":"Represents a mode in which the view object is passed directly to the development environment.","nodes":[{"pos":[0,93],"content":"Represents a mode in which the view object is passed directly to the development environment.","nodes":[{"content":"Represents a mode in which the view object is passed directly to the development environment.","pos":[0,93]}]}],"pos":[7290,7384],"yaml":true},{"content":"The view object must implement any interfaces the development environment requires. The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] Integration) program. The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.","nodes":[{"pos":[0,638],"content":"The view object must implement any interfaces the development environment requires. The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] Integration) program. The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.","nodes":[{"content":"The view object must implement any interfaces the development environment requires.","pos":[0,83]},{"content":"The <ph id=\"ph1\">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through <ph id=\"ph2\">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> VSI (<ph id=\"ph3\">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> Integration) program.","pos":[84,428],"source":" The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] Integration) program."},{"content":"The <ph id=\"ph1\">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> development environment provides support for this view technology.","pos":[429,543],"source":" The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment provides support for this view technology."},{"content":"Support for this view technology is not necessarily available in all development environments.","pos":[544,638]}]}],"pos":[7395,8034],"yaml":true,"extradata":"MT"},{"content":"Represents a mode in which a Windows Forms control object provides the display for the root designer.","nodes":[{"pos":[0,101],"content":"Represents a mode in which a Windows Forms control object provides the display for the root designer.","nodes":[{"content":"Represents a mode in which a Windows Forms control object provides the display for the root designer.","pos":[0,101]}]}],"pos":[9501,9603],"yaml":true},{"content":"The designer host fills the development environment document window with the Windows Forms control.","nodes":[{"pos":[0,99],"content":"The designer host fills the development environment document window with the Windows Forms control.","nodes":[{"content":"The designer host fills the development environment document window with the Windows Forms control.","pos":[0,99]}]}],"pos":[9614,9714],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.ViewTechnology\n  commentId: T:System.ComponentModel.Design.ViewTechnology\n  id: ViewTechnology\n  children:\n  - System.ComponentModel.Design.ViewTechnology.Default\n  - System.ComponentModel.Design.ViewTechnology.Passthrough\n  - System.ComponentModel.Design.ViewTechnology.WindowsForms\n  langs:\n  - csharp\n  name: ViewTechnology\n  nameWithType: ViewTechnology\n  fullName: System.ComponentModel.Design.ViewTechnology\n  type: Enum\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Defines identifiers for a set of technologies that designer hosts support.\n  remarks: \"The view adapter model replaces and adds functionality to the <xref:System.ComponentModel.Design.ViewTechnology> feature; however, the <xref:System.ComponentModel.Design.ViewTechnology> feature is retained for both backward compatibility and future use, if you choose. For more information, see \\\".NET Shape Library: A Sample Designer\\\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.  \\n  \\n <xref:System.ComponentModel.Design.ViewTechnology> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.  \\n  \\n You should only use the Default value in your designer hosting environment. In previous versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the <xref:System.ComponentModel.Design.ViewTechnology.Default> enumeration specified the type of UI model supported by a root designer. Because this model is not extensible, you should instead use a *view adapter* model. A view adapter is a type that adapts an object of one type to another.  \\n  \\n For example, an HTML designer might return a `DemoDOM` tree as its view. The HTML designer returns a view technology of Default. A Windows Forms hosting environment would have one or more view adapter classes available. If one such class could convert the `DemoDOM` into a Windows Forms control, the hosting application can support this type of designer. If no adapter can handle the data type returned from the designer’s <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> method, the load of the designer will fail, and the user will be presented with an error.  \\n  \\n [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] has an extensible scheme for providing view adapters, so it can adapt to any UI technology. Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.  \\n  \\n For an example that uses view adapters, see \\\".NET Shape Library: A Sample Designer\\\" in the Windows Forms Knowledge Base at http://windowsforms.net/articles/shapedesigner.aspx.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.ComponentModel.Design.ViewTechnology.Default> class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> interface.  \\n  \\n [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]\\n [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]\\n [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum ViewTechnology\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/ViewTechnology.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.ViewTechnology.Default\n  commentId: F:System.ComponentModel.Design.ViewTechnology.Default\n  id: Default\n  parent: System.ComponentModel.Design.ViewTechnology\n  langs:\n  - csharp\n  name: Default\n  nameWithType: ViewTechnology.Default\n  fullName: ViewTechnology.Default\n  type: Field\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Specifies the default view technology support.\n  remarks: The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a <xref:System.Windows.Forms.Control?displayProperty=fullName> instance.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.ComponentModel.Design.ViewTechnology> class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.IRootDesigner> interface.  \\n  \\n [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]\\n [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]\\n [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]\"\n  syntax:\n    content: Default\n    return:\n      type: System.ComponentModel.Design.ViewTechnology\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/ViewTechnology.xml\n- uid: System.ComponentModel.Design.ViewTechnology.Passthrough\n  commentId: F:System.ComponentModel.Design.ViewTechnology.Passthrough\n  id: Passthrough\n  parent: System.ComponentModel.Design.ViewTechnology\n  langs:\n  - csharp\n  name: Passthrough\n  nameWithType: ViewTechnology.Passthrough\n  fullName: ViewTechnology.Passthrough\n  type: Field\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Represents a mode in which the view object is passed directly to the development environment.\n  remarks: The view object must implement any interfaces the development environment requires. The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] VSI ([!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] Integration) program. The [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202\")]\n\n      Passthrough\n    return:\n      type: System.ComponentModel.Design.ViewTechnology\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/ViewTechnology.xml\n- uid: System.ComponentModel.Design.ViewTechnology.WindowsForms\n  commentId: F:System.ComponentModel.Design.ViewTechnology.WindowsForms\n  id: WindowsForms\n  parent: System.ComponentModel.Design.ViewTechnology\n  langs:\n  - csharp\n  name: WindowsForms\n  nameWithType: ViewTechnology.WindowsForms\n  fullName: ViewTechnology.WindowsForms\n  type: Field\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design\n  summary: Represents a mode in which a Windows Forms control object provides the display for the root designer.\n  remarks: The designer host fills the development environment document window with the Windows Forms control.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.ComponentModel.Design.ViewTechnology> class in a designer. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.LocalizationExtenderProvider> class.  \\n  \\n [!code-cpp[LocalizationExtenderProviderExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CPP/class1.cpp#1)]\\n [!code-csharp[LocalizationExtenderProviderExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CS/class1.cs#1)]\\n [!code-vb[LocalizationExtenderProviderExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LocalizationExtenderProviderExample/VB/class1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202\")]\n\n      WindowsForms\n    return:\n      type: System.ComponentModel.Design.ViewTechnology\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/ViewTechnology.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.ComponentModel.Design.ViewTechnology.Default\n  parent: System.ComponentModel.Design.ViewTechnology\n  isExternal: false\n  name: Default\n  nameWithType: ViewTechnology.Default\n  fullName: ViewTechnology.Default\n- uid: System.ComponentModel.Design.ViewTechnology\n  parent: System.ComponentModel.Design\n  isExternal: false\n  name: ViewTechnology\n  nameWithType: ViewTechnology\n  fullName: System.ComponentModel.Design.ViewTechnology\n- uid: System.ComponentModel.Design.ViewTechnology.Passthrough\n  parent: System.ComponentModel.Design.ViewTechnology\n  isExternal: false\n  name: Passthrough\n  nameWithType: ViewTechnology.Passthrough\n  fullName: ViewTechnology.Passthrough\n- uid: System.ComponentModel.Design.ViewTechnology.WindowsForms\n  parent: System.ComponentModel.Design.ViewTechnology\n  isExternal: false\n  name: WindowsForms\n  nameWithType: ViewTechnology.WindowsForms\n  fullName: ViewTechnology.WindowsForms\n"}