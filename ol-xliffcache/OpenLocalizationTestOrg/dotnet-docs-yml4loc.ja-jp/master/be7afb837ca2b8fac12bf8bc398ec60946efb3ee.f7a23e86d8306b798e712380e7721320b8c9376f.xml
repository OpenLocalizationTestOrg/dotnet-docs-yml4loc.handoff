{"nodes":[{"content":"Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.","nodes":[{"pos":[0,122],"content":"Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.","nodes":[{"content":"Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.","pos":[0,122]}]}],"pos":[929,1052],"yaml":true},{"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. For details on Web Parts connections and connection points, read the topics listed in the See Also section below.  \n  \n To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:  \n  \n1.  Enable a consumer control to reference an interface instance. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance. The control need not implement the interface; only the provider must implement it. The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer. A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.  \n  \n2.  Identify a callback method. A method in the consumer must be identified as the callback method to establish a connection with the provider. This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step. The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance. When the attribute is added, the only required parameter is a display name to use for the consumer connection point. Optional parameters can also be added, such as an ID.  \n  \n3.  Process and output the data from the interface instance. Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page. A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.  \n  \n    > [!NOTE]\n    >  During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event. During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.  \n  \n After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available). To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element. If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page. A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control. If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.  \n  \n To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control. The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to. Users must select a consumer connection point to establish a connection.  \n  \n A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses. If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection. If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with. Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections. The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control. The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points. A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point. One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers. This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).  \n  \n The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.","nodes":[{"pos":[0,784],"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. For details on Web Parts connections and connection points, read the topics listed in the See Also section below.","nodes":[{"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. For details on Web Parts connections and connection points, read the topics listed in the See Also section below.","pos":[0,784],"nodes":[{"content":"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection.","pos":[0,328]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint&gt;</ph> object in general contains the details for how a control can connect to another control and the type of data it can share.","pos":[329,511],"source":" A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share."},{"content":"For a control acting as the consumer in a connection, its connection point must be a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object.","pos":[512,670],"source":" For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object."},{"content":"For details on Web Parts connections and connection points, read the topics listed in the See Also section below.","pos":[671,784]}]}]},{"pos":[791,904],"content":"To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:","nodes":[{"content":"To create a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object, several steps are required:","pos":[0,113],"source":"To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:"}]},{"pos":[914,1717],"content":"Enable a consumer control to reference an interface instance. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance. The control need not implement the interface; only the provider must implement it. The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer. A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.","nodes":[{"content":"Enable a consumer control to reference an interface instance. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance. The control need not implement the interface; only the provider must implement it. The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer. A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.","pos":[0,803],"nodes":[{"content":"Enable a consumer control to reference an interface instance.","pos":[0,61]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPart&gt;</ph> or other server control (any type of server control that will be added to a <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase&gt;</ph> zone can be used) must be able to consume data from a specific interface instance.","pos":[62,330],"source":" A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance."},{"content":"The control need not implement the interface; only the provider must implement it.","pos":[331,413]},{"content":"The consumer can either work with the exact interface type served by a provider or, if it does not, a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt;</ph> object can be used to transform data from a provider's interface type to a type understood by the consumer.","pos":[414,684],"source":" The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer."},{"content":"A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.","pos":[685,803]}]}]},{"pos":[1727,2465],"content":"Identify a callback method. A method in the consumer must be identified as the callback method to establish a connection with the provider. This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step. The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance. When the attribute is added, the only required parameter is a display name to use for the consumer connection point. Optional parameters can also be added, such as an ID.","nodes":[{"content":"Identify a callback method.","pos":[0,27]},{"content":"A method in the consumer must be identified as the callback method to establish a connection with the provider.","pos":[28,139]},{"content":"This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step.","pos":[140,297]},{"content":"The Web Parts approach for identifying a callback method in the consumer is to add a <ph id=\"ph1\">`ConnectionConsumer`</ph> metadata attribute (defined by the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute&gt;</ph> class) to the method that receives the interface instance.","pos":[298,567],"source":" The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance."},{"content":"When the attribute is added, the only required parameter is a display name to use for the consumer connection point.","pos":[568,684]},{"content":"Optional parameters can also be added, such as an ID.","pos":[685,738]}]},{"pos":[2475,2766],"content":"Process and output the data from the interface instance. Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page. A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.","nodes":[{"content":"Process and output the data from the interface instance. Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page. A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.","pos":[0,291],"nodes":[{"content":"Process and output the data from the interface instance.","pos":[0,56]},{"content":"Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page.","pos":[57,183]},{"content":"A common way of doing this is to override the control's <ph id=\"ph1\">&lt;xref:System.Web.UI.Control.OnPreRender%2A&gt;</ph> method.","pos":[184,291],"source":" A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method."}]}]},{"pos":[2778,3133],"content":"[!NOTE]\nDuring a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event. During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.","leadings":["","    >  "],"nodes":[{"content":"During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event. During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.","pos":[8,348],"nodes":[{"content":"During a synchronous request, a consumer should request data directly from the provider during or immediately after the <ph id=\"ph1\">&lt;xref:System.Web.UI.Control.PreRender&gt;</ph> event.","pos":[0,165],"source":"During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event."},{"content":"During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.","pos":[166,340]}]}]},{"pos":[3140,4204],"content":"After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available). To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element. If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page. A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control. If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.","nodes":[{"content":"After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available).","pos":[0,165]},{"content":"To create a static, declarative connection in the markup of a Web page, developers can use the <ph id=\"ph1\">`&lt;asp:webpartconnection&gt;`</ph> element.","pos":[166,295],"source":" To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element."},{"content":"If the <ph id=\"ph1\">`ConnectionConsumer`</ph> attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the <ph id=\"ph2\">`ConsumerConnectionPointID`</ph> attribute in the <ph id=\"ph3\">`&lt;asp:webpartconnection&gt;`</ph> element on a page.","pos":[296,569],"source":" If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page."},{"content":"A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control.","pos":[570,723]},{"content":"If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the <ph id=\"ph1\">`ConsumerConnectionPointID`</ph> attribute in the page either, because the connection will be created using a default value obtained from the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID&gt;</ph> field.","pos":[724,1064],"source":" If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field."}]},{"pos":[4211,5099],"content":"To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control. The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.","nodes":[{"content":"To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control. The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.","pos":[0,888],"nodes":[{"content":"To create a connection in code, developers must create a new <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A&gt;</ph> method and passing to it the ID of the consumer control, along with the ID or index of the defined <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object in the consumer control.","pos":[0,433],"source":"To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control."},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&gt;</ph> object, are all passed to the <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A&gt;</ph> method to create a new <ph id=\"ph4\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt;</ph> object.","pos":[434,888],"source":" The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object."}]}]},{"pos":[5106,5994],"content":"Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to. Users must select a consumer connection point to establish a connection.","nodes":[{"content":"Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to. Users must select a consumer connection point to establish a connection.","pos":[0,888],"nodes":[{"content":"Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI).","pos":[0,246]},{"content":"If developers declare a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionsZone&gt;</ph> control on a Web page, it provides a run-time UI for users to create connections.","pos":[247,410],"source":" If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections."},{"content":"If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to.","pos":[411,815]},{"content":"Users must select a consumer connection point to establish a connection.","pos":[816,888]}]}]},{"pos":[6001,8265],"content":"A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses. If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection. If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with. Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections. The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control. The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points. A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point. One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers. This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint&gt;</ph> class.","pos":[0,275],"source":"A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class."},{"content":"For example, in the inherited <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A&gt;</ph> property, a consumer connection point keeps the type of interface it uses.","pos":[276,455],"source":" For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses."},{"content":"If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection.","pos":[456,608]},{"content":"If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt;</ph> object to translate the provider connection point's <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A&gt;</ph> property into a type that the consumer can work with.","pos":[609,958],"source":" If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with."},{"content":"Another important inherited property is the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A&gt;</ph> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections.","pos":[959,1212],"source":" Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections."},{"content":"The display name is the required parameter when developers add a <ph id=\"ph1\">`ConnectionConsumer`</ph> attribute to the callback method in a consumer control.","pos":[1213,1354],"source":" The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control."},{"content":"The inherited <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A&gt;</ph> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points.","pos":[1355,1610],"source":" The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points."},{"content":"A consumer can have multiple <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> objects defined in it, and in this case, when developers add the <ph id=\"ph2\">`ConnectionConsumer`</ph> attribute to a method, they should specify an ID value to distinguish each connection point.","pos":[1611,1884],"source":" A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point."},{"content":"One other notable inherited property is the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A&gt;</ph> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers.","pos":[1885,2127],"source":" One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers."},{"content":"This property value is <ph id=\"ph1\">`false`</ph> by default for consumer connection points (whereas it defaults to <ph id=\"ph2\">`true`</ph> for provider connection points).","pos":[2128,2264],"source":" This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points)."}]},{"pos":[8272,8935],"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.","pos":[0,663],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> class adds several unique methods to the members it inherits from the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConnectionPoint&gt;</ph> class.","pos":[0,204],"source":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A&gt;</ph> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider.","pos":[205,399],"source":" The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A&gt;</ph> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.","pos":[400,663],"source":" The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control."}]}]}],"pos":[1063,10022],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref> class.","nodes":[{"pos":[0,120],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref> class."}],"pos":[19042,19163],"yaml":true},{"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.  \n  \n The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.  \n  \n You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.","nodes":[{"pos":[0,277],"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A&gt;</ph> constructor for the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> class simply calls the base constructor, passing to it the various parameters and initializing the base class.","pos":[0,277],"source":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class."}]},{"pos":[284,464],"content":"The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.","nodes":[{"content":"The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.","pos":[0,180],"nodes":[{"content":"The base class constructor checks a number of the parameters for a connection point and can throw several exceptions.","pos":[0,117]},{"content":"For a list of possible exceptions, see the Exceptions section.","pos":[118,180]}]}]},{"pos":[471,946],"content":"You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.","nodes":[{"content":"You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.","pos":[0,475],"nodes":[{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A&gt;</ph> constructor to create your own instance of the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> class.","pos":[0,213],"source":"You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class."},{"content":"However, in cases where you are simply establishing a connection and not extending the class, you should call the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A&gt;</ph> method to return a connection point object from a provider.","pos":[214,475],"source":" However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider."}]}]}],"pos":[19174,20127],"yaml":true,"extradata":"MT"},{"content":"The method in the consumer control that returns an interface instance to consumers to establish a connection.","nodes":[{"pos":[0,109],"content":"The method in the consumer control that returns an interface instance to consumers to establish a connection.","nodes":[{"content":"The method in the consumer control that returns an interface instance to consumers to establish a connection.","pos":[0,109]}]}],"pos":[23060,23170],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the interface that the consumer receives from a provider.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the interface that the consumer receives from a provider.","source":"The <xref href=\"System.Type\"></xref> of the interface that the consumer receives from a provider."}],"pos":[23237,23335],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the consumer control with which the consumer connection point is associated.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the consumer control with which the consumer connection point is associated.","source":"The <xref href=\"System.Type\"></xref> of the consumer control with which the consumer connection point is associated."}],"pos":[23400,23517],"yaml":true},{"content":"A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).","nodes":[{"pos":[0,118],"content":"A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).","nodes":[{"content":"A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).","pos":[0,118]}]}],"pos":[23584,23703],"yaml":true},{"content":"A unique identifier for the consumer connection point.","nodes":[{"pos":[0,54],"content":"A unique identifier for the consumer connection point.","nodes":[{"content":"A unique identifier for the consumer connection point.","pos":[0,54]}]}],"pos":[23761,23816],"yaml":true},{"content":"A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.","nodes":[{"pos":[0,123],"content":"A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.","nodes":[{"content":"A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.","pos":[0,123]}]}],"pos":[23898,24022],"yaml":true},{"content":"<code>callbackMethod</code> is `null`.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is `null`.  \n  \n \\- or -  \n  \n <code>controlType</code> is `null`.  \n  \n \\- or -  \n  \n <code>displayName</code> is `null` or an empty string (\"\").","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;callbackMethod&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>callbackMethod</code> is `null`."},{"pos":[45,52],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[59,96],"content":"<ph id=\"ph1\">&lt;code&gt;interfaceType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>interfaceType</code> is `null`."},{"pos":[103,110],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[117,152],"content":"<ph id=\"ph1\">&lt;code&gt;controlType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>controlType</code> is `null`."},{"pos":[159,166],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[173,232],"content":"<ph id=\"ph1\">&lt;code&gt;displayName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> or an empty string (\"\").","source":"<code>displayName</code> is `null` or an empty string (\"\")."}],"pos":[24216,24468],"yaml":true},{"content":"<code>controlType</code> is not the same type as the consumer control (or a valid class derived from it).","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;controlType&lt;/code&gt;</ph> is not the same type as the consumer control (or a valid class derived from it).","source":"<code>controlType</code> is not the same type as the consumer control (or a valid class derived from it)."}],"pos":[24562,24668],"yaml":true},{"content":"Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.","nodes":[{"pos":[0,111],"content":"Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.","nodes":[{"content":"Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.","pos":[0,111]}]}],"pos":[25872,25984],"yaml":true},{"content":"This method receives an interface instance from a provider that contains data for the consumer control.  \n  \n The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that is part of initiating a connection and enabling two controls to share data.  \n  \n The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.","nodes":[{"pos":[0,103],"content":"This method receives an interface instance from a provider that contains data for the consumer control.","nodes":[{"content":"This method receives an interface instance from a provider that contains data for the consumer control.","pos":[0,103]}]},{"pos":[110,423],"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that is part of initiating a connection and enabling two controls to share data.","nodes":[{"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that is part of initiating a connection and enabling two controls to share data.","pos":[0,313],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A&gt;</ph> method is called by <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartConnection&gt;</ph> objects when a connection is being activated.","pos":[0,208],"source":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated."},{"content":"This is a critical step that is part of initiating a connection and enabling two controls to share data.","pos":[209,313]}]}]},{"pos":[430,696],"content":"The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.","nodes":[{"content":"The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.","pos":[0,266],"nodes":[{"content":"The consumer control in a connection must be able to work with the same type of interface as the provider.","pos":[0,106]},{"content":"If it does not, the controls are incompatible and a <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.WebPartTransformer&gt;</ph> object must be used to establish a connection.","pos":[107,266],"source":" If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection."}]}]}],"pos":[25995,26698],"yaml":true,"extradata":"MT"},{"content":"The consumer control associated with a consumer connection point.","nodes":[{"pos":[0,65],"content":"The consumer control associated with a consumer connection point.","nodes":[{"content":"The consumer control associated with a consumer connection point.","pos":[0,65]}]}],"pos":[26884,26950],"yaml":true},{"content":"The interface instance returned from a provider control.","nodes":[{"pos":[0,56],"content":"The interface instance returned from a provider control.","nodes":[{"content":"The interface instance returned from a provider control.","pos":[0,56]}]}],"pos":[27010,27067],"yaml":true},{"content":"<code>control</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;control&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>control</code> is `null`."}],"pos":[27265,27297],"yaml":true},{"content":"Determines whether a consumer connection point is currently capable of establishing a connection.","nodes":[{"pos":[0,97],"content":"Determines whether a consumer connection point is currently capable of establishing a connection.","nodes":[{"content":"Determines whether a consumer connection point is currently capable of establishing a connection.","pos":[0,97]}]}],"pos":[28777,28875],"yaml":true},{"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class. The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.  \n  \n There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed. In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.","nodes":[{"pos":[0,493],"content":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class. The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A&gt;</ph> method as implemented always returns <ph id=\"ph2\">`true`</ph> in all cases for the <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> class.","pos":[0,229],"source":"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class."},{"content":"The intent for this method is to have it check on the state of <ph id=\"ph1\">`control`</ph> and <ph id=\"ph2\">`secondaryInterfaces`</ph> at certain critical points to determine whether a <ph id=\"ph3\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> object is presently able to create a connection.","pos":[230,493],"source":" The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection."}]},{"pos":[500,1020],"content":"There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed. In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.","nodes":[{"content":"There can be scenarios where <ph id=\"ph1\">`control`</ph> is in a state that would make it impossible to form a connection, or where <ph id=\"ph2\">`secondaryInterfaces`</ph> must exist before a connection can be formed.","pos":[0,181],"source":"There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed."},{"content":"In such cases, developers can inherit from the <ph id=\"ph1\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&gt;</ph> class, and override the <ph id=\"ph2\">&lt;xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A&gt;</ph> method, providing a custom implementation to determine when the connection point is ready to support connections.","pos":[182,520],"source":" In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections."}]}],"pos":[28886,29911],"yaml":true,"extradata":"MT"},{"content":"The consumer control associated with the <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref>.","nodes":[{"pos":[0,121],"content":"The consumer control associated with the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"&gt;&lt;/xref&gt;</ph>.","source":"The consumer control associated with the <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref>."}],"pos":[30179,30301],"yaml":true},{"content":"A <xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"></xref> of any secondary interfaces that participate in a connection.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"&gt;&lt;/xref&gt;</ph> of any secondary interfaces that participate in a connection.","source":"A <xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"></xref> of any secondary interfaces that participate in a connection."}],"pos":[30427,30577],"yaml":true},{"content":"`true` if a connection point can currently establish a connection; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,109],"content":"`true` if a connection point can currently establish a connection; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if a connection point can currently establish a connection; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,86],"source":"`true` if a connection point can currently establish a connection; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[87,109],"source":" The default is `true`."}]}],"pos":[30635,30747],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  commentId: T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  id: ConsumerConnectionPoint\n  children:\n  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)\n  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)\n  langs:\n  - csharp\n  name: ConsumerConnectionPoint\n  nameWithType: ConsumerConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Defines a connection point object that enables a server control acting as a consumer to form a connection with a provider.\n  remarks: \"In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the consumer in a connection, its connection point must be a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. For details on Web Parts connections and connection points, read the topics listed in the See Also section below.  \\n  \\n To create a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, several steps are required:  \\n  \\n1.  Enable a consumer control to reference an interface instance. A <xref:System.Web.UI.WebControls.WebParts.WebPart> or other server control (any type of server control that will be added to a <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone can be used) must be able to consume data from a specific interface instance. The control need not implement the interface; only the provider must implement it. The consumer can either work with the exact interface type served by a provider or, if it does not, a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object can be used to transform data from a provider's interface type to a type understood by the consumer. A typical way to enable a consumer is to declare a private field to contain a reference to the desired interface type.  \\n  \\n2.  Identify a callback method. A method in the consumer must be identified as the callback method to establish a connection with the provider. This method retrieves an instance of the interface that the provider implements, and assigns it to (for example) the private field created in the first step. The Web Parts approach for identifying a callback method in the consumer is to add a `ConnectionConsumer` metadata attribute (defined by the <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> class) to the method that receives the interface instance. When the attribute is added, the only required parameter is a display name to use for the consumer connection point. Optional parameters can also be added, such as an ID.  \\n  \\n3.  Process and output the data from the interface instance. Perform any internal processing as needed on the data, and then typically a consumer control will render the data to the page. A common way of doing this is to override the control's <xref:System.Web.UI.Control.OnPreRender%2A> method.  \\n  \\n    > [!NOTE]\\n    >  During a synchronous request, a consumer should request data directly from the provider during or immediately after the <xref:System.Web.UI.Control.PreRender> event. During an asynchronous request, if the provider's callback method is not called at any point during rendering, the developer can assume that no data was sent to the consumer.  \\n  \\n After a control has been equipped to act as a consumer, the control can participate in connections (assuming that a provider control is also equipped and available). To create a static, declarative connection in the markup of a Web page, developers can use the `<asp:webpartconnection>` element. If the `ConnectionConsumer` attribute in the consumer source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element on a page. A reason that a developer might specify an ID for a consumer connection point is if there are multiple connection points defined in the consumer control. If an ID is not specified for the consumer connection point in the consumer control, a value does not have to be assigned to the `ConsumerConnectionPointID` attribute in the page either, because the connection will be created using a default value obtained from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> field.  \\n  \\n To create a connection in code, developers must create a new <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method and passing to it the ID of the consumer control, along with the ID or index of the defined <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object in the consumer control. The returned <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object, along with a reference to the consumer control, a reference to the provider control, and a corresponding <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object, are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create a new <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \\n  \\n Although developers can use consumer connection points as part of establishing connections either declaratively or programmatically, users can also interact with consumer connection points to establish connections through the user interface (UI). If developers declare a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on a Web page, it provides a run-time UI for users to create connections. If users choose the provider control as the starting point for establishing the connection by clicking its connect verb (they could also choose the consumer; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display names of the available consumer connection point (or points if there are multiple ones) that the provider can send the data to. Users must select a consumer connection point to establish a connection.  \\n  \\n A <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object associates directly with a specific consumer control, and stores details about a connection in the properties it inherits from the base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. For example, in the inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property, a consumer connection point keeps the type of interface it uses. If the provider and consumer in a connection both understand the interface type, the controls are compatible and capable of forming a direct connection. If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object to translate the provider connection point's <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> property into a type that the consumer can work with. Another important inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> property, which provides a friendly name to display in the UI for users to choose a consumer connection point when creating connections. The display name is the required parameter when developers add a `ConnectionConsumer` attribute to the callback method in a consumer control. The inherited <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> property is also useful, as indicated above, because it provides a unique identifier for a consumer connection point in the event that a consumer has multiple connection points. A consumer can have multiple <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects defined in it, and in this case, when developers add the `ConnectionConsumer` attribute to a method, they should specify an ID value to distinguish each connection point. One other notable inherited property is the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> property, which indicates whether a consumer connection point can connect simultaneously to multiple providers. This property value is `false` by default for consumer connection points (whereas it defaults to `true` for provider connection points).  \\n  \\n The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class adds several unique methods to the members it inherits from the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method invokes the consumer's own defined callback method to retrieve the interface instance from the provider. The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method returns a Boolean value that indicates whether the connection point is able to establish connections, based on the current state of the associated consumer control.\"\n  example:\n  - \"The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \\n  \\n The example has four parts:  \\n  \\n-   A user control that enables you to change the Web Parts display mode on a page.  \\n  \\n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \\n  \\n-   A Web page to host all the controls and run the code example.  \\n  \\n-   An explanation of how to run the example page.  \\n  \\n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]  -->\\n <!-- TODO: review snippet reference [!code-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  -->  \\n  \\n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \\n  \\n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  \\n  \\n [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]\\n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  \\n  \\n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  -->  \\n  \\n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \\n  \\n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object; and a connection created by a user through the connection UI.\"\n  syntax:\n    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'\n  inheritance:\n  - System.Object\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID\n  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConsumerConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  commentId: M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  langs:\n  - csharp\n  name: ConsumerConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  fullName: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref> class.\n  remarks: \"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class simply calls the base constructor, passing to it the various parameters and initializing the base class.  \\n  \\n The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.  \\n  \\n You can call the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructor to create your own instance of the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method to return a connection point object from a provider.\"\n  example:\n  - \"The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \\n  \\n The code example has three parts:  \\n  \\n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \\n  \\n-   A Web page that hosts the controls in a static connection.  \\n  \\n-   An explanation of how to run the example code.  \\n  \\n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \\n  \\n [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  \\n  \\n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  -->  \\n  \\n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page.\"\n  syntax:\n    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);\n    parameters:\n    - id: callbackMethod\n      type: System.Reflection.MethodInfo\n      description: The method in the consumer control that returns an interface instance to consumers to establish a connection.\n    - id: interfaceType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the interface that the consumer receives from a provider.\n    - id: controlType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the consumer control with which the consumer connection point is associated.\n    - id: displayName\n      type: System.String\n      description: A friendly display name for the consumer connection point that appears to users in the connection user interface (UI).\n    - id: id\n      type: System.String\n      description: A unique identifier for the consumer connection point.\n    - id: allowsMultipleConnections\n      type: System.Boolean\n      description: A Boolean value indicating whether the consumer connection point can have multiple simultaneous connections with providers.\n  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>callbackMethod</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>interfaceType</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>controlType</code> is `null`.  \\n  \\n \\\\- or -  \\n  \\n <code>displayName</code> is `null` or an empty string (\\\"\\\").\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>controlType</code> is not the same type as the consumer control (or a valid class derived from it).\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConsumerConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)\n  commentId: M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)\n  id: SetObject(System.Web.UI.Control,System.Object)\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  langs:\n  - csharp\n  name: SetObject(Control, Object)\n  nameWithType: ConsumerConnectionPoint.SetObject(Control, Object)\n  fullName: ConsumerConnectionPoint.SetObject(Control, Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Invokes the callback method in a consumer control and retrieves the interface instance from a provider control.\n  remarks: \"This method receives an interface instance from a provider that contains data for the consumer control.  \\n  \\n The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> method is called by <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objects when a connection is being activated. This is a critical step that is part of initiating a connection and enabling two controls to share data.  \\n  \\n The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> object must be used to establish a connection.\"\n  syntax:\n    content: public virtual void SetObject (System.Web.UI.Control control, object data);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The consumer control associated with a consumer connection point.\n    - id: data\n      type: System.Object\n      description: The interface instance returned from a provider control.\n  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>control</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConsumerConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)\n  commentId: M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)\n  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  langs:\n  - csharp\n  name: SupportsConnection(Control, ConnectionInterfaceCollection)\n  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control, ConnectionInterfaceCollection)\n  fullName: ConsumerConnectionPoint.SupportsConnection(Control, ConnectionInterfaceCollection)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI.WebControls.WebParts\n  summary: Determines whether a consumer connection point is currently capable of establishing a connection.\n  remarks: \"The <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method as implemented always returns `true` in all cases for the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class. The intent for this method is to have it check on the state of `control` and `secondaryInterfaces` at certain critical points to determine whether a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object is presently able to create a connection.  \\n  \\n There can be scenarios where `control` is in a state that would make it impossible to form a connection, or where `secondaryInterfaces` must exist before a connection can be formed. In such cases, developers can inherit from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, and override the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> method, providing a custom implementation to determine when the connection point is ready to support connections.\"\n  syntax:\n    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);\n    parameters:\n    - id: control\n      type: System.Web.UI.Control\n      description: The consumer control associated with the <xref href=\"System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\"></xref>.\n    - id: secondaryInterfaces\n      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\n      description: A <xref href=\"System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\"></xref> of any secondary interfaces that participate in a connection.\n    return:\n      type: System.Boolean\n      description: '`true` if a connection point can currently establish a connection; otherwise, `false`. The default is `true`.'\n  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConsumerConnectionPoint.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: ConnectionPoint\n  nameWithType: ConnectionPoint\n  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  isExternal: false\n  name: ConsumerConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n  fullName: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  isExternal: false\n  name: SetObject(Control, Object)\n  nameWithType: ConsumerConnectionPoint.SetObject(Control, Object)\n  fullName: ConsumerConnectionPoint.SetObject(Control, Object)\n- uid: System.Web.UI.Control\n  parent: System.Web.UI\n  isExternal: false\n  name: Control\n  nameWithType: Control\n  fullName: System.Web.UI.Control\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  isExternal: false\n  name: SupportsConnection(Control, ConnectionInterfaceCollection)\n  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control, ConnectionInterfaceCollection)\n  fullName: ConsumerConnectionPoint.SupportsConnection(Control, ConnectionInterfaceCollection)\n- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\n  parent: System.Web.UI.WebControls.WebParts\n  isExternal: false\n  name: ConnectionInterfaceCollection\n  nameWithType: ConnectionInterfaceCollection\n  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  isExternal: false\n  name: ConsumerConnectionPoint\n  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint\n  fullName: ConsumerConnectionPoint.ConsumerConnectionPoint\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConsumerConnectionPoint.xml\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  isExternal: false\n  name: SetObject\n  nameWithType: ConsumerConnectionPoint.SetObject\n  fullName: ConsumerConnectionPoint.SetObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConsumerConnectionPoint.xml\n- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*\n  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint\n  isExternal: false\n  name: SupportsConnection\n  nameWithType: ConsumerConnectionPoint.SupportsConnection\n  fullName: ConsumerConnectionPoint.SupportsConnection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConsumerConnectionPoint.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: AllowsMultipleConnections\n  nameWithType: ConnectionPoint.AllowsMultipleConnections\n  fullName: ConnectionPoint.AllowsMultipleConnections\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: ControlType\n  nameWithType: ConnectionPoint.ControlType\n  fullName: ConnectionPoint.ControlType\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: DefaultID\n  nameWithType: ConnectionPoint.DefaultID\n  fullName: ConnectionPoint.DefaultID\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: DisplayName\n  nameWithType: ConnectionPoint.DisplayName\n  fullName: ConnectionPoint.DisplayName\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: GetEnabled(Control)\n  nameWithType: ConnectionPoint.GetEnabled(Control)\n  fullName: ConnectionPoint.GetEnabled(Control)\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: ID\n  nameWithType: ConnectionPoint.ID\n  fullName: ConnectionPoint.ID\n- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType\n  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint\n  isExternal: false\n  name: InterfaceType\n  nameWithType: ConnectionPoint.InterfaceType\n  fullName: ConnectionPoint.InterfaceType\n"}