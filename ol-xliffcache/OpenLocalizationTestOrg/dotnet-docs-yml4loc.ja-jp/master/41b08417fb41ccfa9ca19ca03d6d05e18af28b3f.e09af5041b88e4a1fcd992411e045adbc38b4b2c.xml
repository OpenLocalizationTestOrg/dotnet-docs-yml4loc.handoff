{"nodes":[{"content":"Supports a simple iteration over a generic collection.","nodes":[{"pos":[0,54],"content":"Supports a simple iteration over a generic collection.","nodes":[{"content":"Supports a simple iteration over a generic collection.","pos":[0,54]}]}],"pos":[484,539],"yaml":true},{"content":"<xref:System.Collections.Generic.IEnumerator%601> is the base interface for all generic enumerators.  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability. It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>. However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.","nodes":[{"pos":[0,100],"content":"<xref:System.Collections.Generic.IEnumerator%601> is the base interface for all generic enumerators.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> is the base interface for all generic enumerators.","pos":[0,100],"source":"<xref:System.Collections.Generic.IEnumerator%601> is the base interface for all generic enumerators."}]},{"pos":[107,331],"content":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement of the C# language (<ph id=\"ph2\">`for each`</ph> in C++, <ph id=\"ph3\">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.","pos":[0,131],"source":"The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators."},{"content":"Therefore, using <ph id=\"ph1\">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.","pos":[133,224],"source":"  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator."}]},{"pos":[338,458],"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","nodes":[{"content":"Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.","pos":[0,120]}]},{"pos":[465,871],"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","pos":[0,406],"nodes":[{"content":"Initially, the enumerator is positioned before the first element in the collection.","pos":[0,83]},{"content":"At this position, <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.","pos":[84,176],"source":" At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined."},{"content":"Therefore, you must call <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.","pos":[177,406],"source":" Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>."}]}]},{"pos":[878,1166],"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","pos":[0,288],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.","pos":[0,151],"source":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.","pos":[152,288],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element."}]}]},{"pos":[1173,1868],"content":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[0,227],"source":"If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`."},{"content":"When the enumerator is at this position, subsequent calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id=\"ph2\">`false`</ph>.","pos":[228,359],"source":" When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`."},{"content":"If the last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.","pos":[360,522],"source":" If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined."},{"content":"You cannot set <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.","pos":[523,695],"source":" You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead."}]},{"pos":[1875,2247],"content":"The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability. It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>. However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality.","nodes":[{"content":"The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability. It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>. However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality.","pos":[0,372],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method is provided for COM interoperability.","pos":[0,95],"source":"The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability."},{"content":"It does not necessarily need to be implemented; instead, the implementer can simply throw a <ph id=\"ph1\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[96,224],"source":" It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>."},{"content":"However, if you choose to do this, you should make sure no callers are relying on the <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> functionality.","pos":[225,372],"source":" However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality."}]}]},{"pos":[2254,2630],"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.","pos":[0,376],"nodes":[{"content":"An enumerator remains valid as long as the collection remains unchanged.","pos":[0,72]},{"content":"If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[73,376],"source":" If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>."}]}]},{"pos":[2637,3026],"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[0,389],"nodes":[{"content":"The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.","pos":[0,154]},{"content":"To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.","pos":[155,260]},{"content":"To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.","pos":[261,389]}]}]},{"pos":[3033,3169],"content":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.","nodes":[{"content":"Default implementations of collections in the <ph id=\"ph1\">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace are not synchronized.","pos":[0,136],"source":"Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized."}]}],"pos":[550,3740],"yaml":true,"extradata":"MT"},{"content":"The type of objects to enumerate.","nodes":[{"pos":[0,33],"content":"The type of objects to enumerate.","nodes":[{"content":"The type of objects to enumerate.","pos":[0,33]}]}],"pos":[4626,4660],"yaml":true},{"content":"Gets the element in the collection at the current position of the enumerator.","nodes":[{"pos":[0,77],"content":"Gets the element in the collection at the current position of the enumerator.","nodes":[{"content":"Gets the element in the collection at the current position of the enumerator.","pos":[0,77]}]}],"pos":[11335,11413],"yaml":true},{"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined under any of the following conditions:  \n  \n-   The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.   <xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n-   The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.  \n  \n-   The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","nodes":[{"pos":[0,112],"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined under any of the following conditions:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined under any of the following conditions:","pos":[0,112],"source":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined under any of the following conditions:"}]},{"pos":[122,461],"content":"The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.   <xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","nodes":[{"content":"The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.   <xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.","pos":[0,339],"nodes":[{"content":"The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.","pos":[0,117]},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first element of the collection before reading the value of <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.","pos":[120,339],"source":"   <xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>."}]}]},{"pos":[471,598],"content":"The last call to <ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id=\"ph2\">`false`</ph>, which indicates the end of the collection.","source":"The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection."},{"pos":[608,725],"content":"The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.","nodes":[{"content":"The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.","pos":[0,117]}]},{"pos":[732,1020],"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","nodes":[{"content":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.","pos":[0,288],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.","pos":[0,151],"source":"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.","pos":[152,288],"source":" <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element."}]}]}],"pos":[11424,12455],"yaml":true,"extradata":"MT"},{"content":"The element in the collection at the current position of the enumerator.","nodes":[{"pos":[0,72],"content":"The element in the collection at the current position of the enumerator.","nodes":[{"content":"The element in the collection at the current position of the enumerator.","pos":[0,72]}]}],"pos":[12549,12622],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.IEnumerator`1\n  commentId: T:System.Collections.Generic.IEnumerator`1\n  id: IEnumerator`1\n  children:\n  - System.Collections.Generic.IEnumerator`1.Current\n  langs:\n  - csharp\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Supports a simple iteration over a generic collection.\n  remarks: \"<xref:System.Collections.Generic.IEnumerator%601> is the base interface for all generic enumerators.  \\n  \\n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \\n  \\n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \\n  \\n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \\n  \\n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \\n  \\n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \\n  \\n The <xref:System.Collections.IEnumerator.Reset%2A> method is provided for COM interoperability. It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref:System.NotSupportedException>. However, if you choose to do this, you should make sure no callers are relying on the <xref:System.Collections.IEnumerator.Reset%2A> functionality.  \\n  \\n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.  \\n  \\n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \\n  \\n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.\"\n  example:\n  - \"The following example shows an implementation of the <xref:System.Collections.Generic.IEnumerator%601> interface for a collection class of custom objects. The custom object is an instance of the type `Box`, and the collection class is `BoxCollection`. This code example is part of a larger example provided for the <xref:System.Collections.Generic.ICollection%601> interface.  \\n  \\n [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]\\n [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]\"\n  syntax:\n    content: 'public interface IEnumerator<out T> : IDisposable, System.Collections.IEnumerator'\n    typeParameters:\n    - id: T\n      description: The type of objects to enumerate.\n  derivedClasses:\n  - Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1\n  - Microsoft.VisualC.StlClr.DequeEnumerator`1\n  - Microsoft.VisualC.StlClr.HashEnumerator`2\n  - Microsoft.VisualC.StlClr.ListEnumerator`1\n  - Microsoft.VisualC.StlClr.TreeEnumerator`2\n  - Microsoft.VisualC.StlClr.VectorEnumerator`1\n  - System.ArraySegment`1.Enumerator\n  - System.CharEnumerator\n  - System.Collections.Generic.Dictionary`2.Enumerator\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  - System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator\n  - System.Collections.Generic.HashSet`1.Enumerator\n  - System.Collections.Generic.LinkedList`1.Enumerator\n  - System.Collections.Generic.List`1.Enumerator\n  - System.Collections.Generic.Queue`1.Enumerator\n  - System.Collections.Generic.SortedDictionary`2.Enumerator\n  - System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator\n  - System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator\n  - System.Collections.Generic.SortedSet`1.Enumerator\n  - System.Collections.Generic.Stack`1.Enumerator\n  - System.Collections.Immutable.ImmutableDictionary`2.Enumerator\n  - System.Collections.Immutable.ImmutableHashSet`1.Enumerator\n  - System.Collections.Immutable.ImmutableList`1.Enumerator\n  - System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator\n  - System.Collections.Immutable.ImmutableSortedSet`1.Enumerator\n  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator\n  - System.Reflection.Metadata.AssemblyFileHandleCollection.Enumerator\n  - System.Reflection.Metadata.AssemblyReferenceHandleCollection.Enumerator\n  - System.Reflection.Metadata.BlobBuilder.Blobs\n  - System.Reflection.Metadata.CustomAttributeHandleCollection.Enumerator\n  - System.Reflection.Metadata.CustomDebugInformationHandleCollection.Enumerator\n  - System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection.Enumerator\n  - System.Reflection.Metadata.DocumentHandleCollection.Enumerator\n  - System.Reflection.Metadata.EventDefinitionHandleCollection.Enumerator\n  - System.Reflection.Metadata.ExportedTypeHandleCollection.Enumerator\n  - System.Reflection.Metadata.FieldDefinitionHandleCollection.Enumerator\n  - System.Reflection.Metadata.GenericParameterConstraintHandleCollection.Enumerator\n  - System.Reflection.Metadata.GenericParameterHandleCollection.Enumerator\n  - System.Reflection.Metadata.ImportDefinitionCollection.Enumerator\n  - System.Reflection.Metadata.ImportScopeCollection.Enumerator\n  - System.Reflection.Metadata.InterfaceImplementationHandleCollection.Enumerator\n  - System.Reflection.Metadata.LocalConstantHandleCollection.Enumerator\n  - System.Reflection.Metadata.LocalScopeHandleCollection.ChildrenEnumerator\n  - System.Reflection.Metadata.LocalScopeHandleCollection.Enumerator\n  - System.Reflection.Metadata.LocalVariableHandleCollection.Enumerator\n  - System.Reflection.Metadata.ManifestResourceHandleCollection.Enumerator\n  - System.Reflection.Metadata.MemberReferenceHandleCollection.Enumerator\n  - System.Reflection.Metadata.MethodDebugInformationHandleCollection.Enumerator\n  - System.Reflection.Metadata.MethodDefinitionHandleCollection.Enumerator\n  - System.Reflection.Metadata.MethodImplementationHandleCollection.Enumerator\n  - System.Reflection.Metadata.ParameterHandleCollection.Enumerator\n  - System.Reflection.Metadata.PropertyDefinitionHandleCollection.Enumerator\n  - System.Reflection.Metadata.SequencePointCollection.Enumerator\n  - System.Reflection.Metadata.TypeDefinitionHandleCollection.Enumerator\n  - System.Reflection.Metadata.TypeReferenceHandleCollection.Enumerator\n  - System.Web.Services.Description.BasicProfileViolationEnumerator\n  - System.Windows.FreezableCollection`1.Enumerator\n  - System.Windows.TextDecorationCollection.Enumerator\n  - System.Windows.Media.DoubleCollection.Enumerator\n  - System.Windows.Media.DrawingCollection.Enumerator\n  - System.Windows.Media.GeneralTransformCollection.Enumerator\n  - System.Windows.Media.GeometryCollection.Enumerator\n  - System.Windows.Media.GradientStopCollection.Enumerator\n  - System.Windows.Media.Int32Collection.Enumerator\n  - System.Windows.Media.PathFigureCollection.Enumerator\n  - System.Windows.Media.PathSegmentCollection.Enumerator\n  - System.Windows.Media.PointCollection.Enumerator\n  - System.Windows.Media.TextEffectCollection.Enumerator\n  - System.Windows.Media.TransformCollection.Enumerator\n  - System.Windows.Media.VectorCollection.Enumerator\n  - System.Windows.Media.Animation.TimelineCollection.Enumerator\n  - System.Windows.Media.Effects.BitmapEffectCollection.Enumerator\n  - System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator\n  - System.Windows.Media.Media3D.MaterialCollection.Enumerator\n  - System.Windows.Media.Media3D.Model3DCollection.Enumerator\n  - System.Windows.Media.Media3D.Point3DCollection.Enumerator\n  - System.Windows.Media.Media3D.Transform3DCollection.Enumerator\n  - System.Windows.Media.Media3D.Vector3DCollection.Enumerator\n  - System.Windows.Media.Media3D.Visual3DCollection.Enumerator\n  - System.Xml.Serialization.XmlSchemaEnumerator\n  implements:\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/IEnumerator`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.IEnumerator`1.Current\n  commentId: P:System.Collections.Generic.IEnumerator`1.Current\n  id: Current\n  parent: System.Collections.Generic.IEnumerator`1\n  langs:\n  - csharp\n  name: Current\n  nameWithType: IEnumerator<T>.Current\n  fullName: IEnumerator<T>.Current\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Gets the element in the collection at the current position of the enumerator.\n  remarks: \"<xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined under any of the following conditions:  \\n  \\n-   The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.   <xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \\n  \\n-   The last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.  \\n  \\n-   The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.  \\n  \\n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.\"\n  syntax:\n    content: public T Current { get; }\n    return:\n      type: T\n      description: The element in the collection at the current position of the enumerator.\n  overload: System.Collections.Generic.IEnumerator`1.Current*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/IEnumerator`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Collections.Generic.IEnumerator`1.Current\n  parent: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: Current\n  nameWithType: IEnumerator<T>.Current\n  fullName: IEnumerator<T>.Current\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.IEnumerator`1.Current*\n  parent: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: Current\n  nameWithType: IEnumerator<T>.Current\n  fullName: IEnumerator<T>.Current\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/IEnumerator`1.xml\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}