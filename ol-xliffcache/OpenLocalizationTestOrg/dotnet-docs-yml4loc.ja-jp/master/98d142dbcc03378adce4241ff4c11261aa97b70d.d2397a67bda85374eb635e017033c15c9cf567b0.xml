{"nodes":[{"content":"Provides support when creating directive IntelliSense at design time.","nodes":[{"pos":[0,69],"content":"Provides support when creating directive IntelliSense at design time.","nodes":[{"content":"Provides support when creating directive IntelliSense at design time.","pos":[0,69]}]}],"pos":[536,606],"yaml":true},{"content":"Returns a collection of directives based on the <code>frameworkVersion</code> parameter and the <code>extension</code> parameter.","nodes":[{"pos":[0,129],"content":"Returns a collection of directives based on the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">frameworkVersion</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter and the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">extension</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","source":"Returns a collection of directives based on the <code>frameworkVersion</code> parameter and the <code>extension</code> parameter."}],"pos":[2149,2279],"yaml":true},{"content":"The .NET Framework version.","nodes":[{"pos":[0,27],"content":"The .NET Framework version.","nodes":[{"content":"The .NET Framework version.","pos":[0,27]}]}],"pos":[2521,2549],"yaml":true},{"content":"The file name extension.","nodes":[{"pos":[0,24],"content":"The file name extension.","nodes":[{"content":"The file name extension.","pos":[0,24]}]}],"pos":[2614,2639],"yaml":true},{"content":"A read only collection.","nodes":[{"pos":[0,23],"content":"A read only collection.","nodes":[{"content":"A read only collection.","pos":[0,23]}]}],"pos":[2745,2769],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.Design.Directives.DirectiveRegistry\n  commentId: T:System.Web.UI.Design.Directives.DirectiveRegistry\n  id: DirectiveRegistry\n  children:\n  - System.Web.UI.Design.Directives.DirectiveRegistry.GetDirectives(System.Version,System.String)\n  langs:\n  - csharp\n  name: DirectiveRegistry\n  nameWithType: DirectiveRegistry\n  fullName: System.Web.UI.Design.Directives.DirectiveRegistry\n  type: Class\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design.Directives\n  summary: Provides support when creating directive IntelliSense at design time.\n  syntax:\n    content: public static class DirectiveRegistry\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design.Directives/DirectiveRegistry.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.Design.Directives.DirectiveRegistry.GetDirectives(System.Version,System.String)\n  commentId: M:System.Web.UI.Design.Directives.DirectiveRegistry.GetDirectives(System.Version,System.String)\n  id: GetDirectives(System.Version,System.String)\n  parent: System.Web.UI.Design.Directives.DirectiveRegistry\n  langs:\n  - csharp\n  name: GetDirectives(Version, String)\n  nameWithType: DirectiveRegistry.GetDirectives(Version, String)\n  fullName: DirectiveRegistry.GetDirectives(Version, String)\n  type: Method\n  assemblies:\n  - System.Design\n  namespace: System.Web.UI.Design.Directives\n  summary: Returns a collection of directives based on the <code>frameworkVersion</code> parameter and the <code>extension</code> parameter.\n  syntax:\n    content: public static System.Collections.ObjectModel.ReadOnlyCollection<Type> GetDirectives (Version frameworkVersion, string extension);\n    parameters:\n    - id: frameworkVersion\n      type: System.Version\n      description: The .NET Framework version.\n    - id: extension\n      type: System.String\n      description: The file name extension.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}\n      description: A read only collection.\n  overload: System.Web.UI.Design.Directives.DirectiveRegistry.GetDirectives*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design.Directives/DirectiveRegistry.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Web.UI.Design.Directives.DirectiveRegistry.GetDirectives(System.Version,System.String)\n  parent: System.Web.UI.Design.Directives.DirectiveRegistry\n  isExternal: false\n  name: GetDirectives(Version, String)\n  nameWithType: DirectiveRegistry.GetDirectives(Version, String)\n  fullName: DirectiveRegistry.GetDirectives(Version, String)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Type\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<Type>\n  nameWithType: ReadOnlyCollection<Type>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Type>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Version\n  parent: System\n  isExternal: false\n  name: Version\n  nameWithType: Version\n  fullName: System.Version\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.UI.Design.Directives.DirectiveRegistry.GetDirectives*\n  parent: System.Web.UI.Design.Directives.DirectiveRegistry\n  isExternal: false\n  name: GetDirectives\n  nameWithType: DirectiveRegistry.GetDirectives\n  fullName: DirectiveRegistry.GetDirectives\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design.Directives/DirectiveRegistry.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}