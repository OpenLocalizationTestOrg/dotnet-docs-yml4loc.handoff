{"nodes":[{"content":"Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <xref href=\"System.Runtime.Serialization.DataContractSerializer\"></xref>. To make their type serializable, type authors must define a data contract for their type.","nodes":[{"pos":[0,274],"content":"Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <xref href=\"System.Runtime.Serialization.DataContractSerializer\"></xref>. To make their type serializable, type authors must define a data contract for their type.","nodes":[{"content":"Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.DataContractSerializer\"&gt;&lt;/xref&gt;</ph>.","pos":[0,184],"source":"Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <xref href=\"System.Runtime.Serialization.DataContractSerializer\"></xref>."},{"content":"To make their type serializable, type authors must define a data contract for their type.","pos":[185,274]}]}],"pos":[1013,1288],"yaml":true},{"content":"Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>. If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages. [!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).  \n  \n You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize. By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.  \n  \n> [!CAUTION]\n>  You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields. Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.  \n  \n [!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see the topics listed in [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).  \n  \n## Data Contracts  \n A *data contract* is an abstract description of a set of fields with a name and data type for each field. The data contract exists outside of any single implementation to allow services on different platforms to interoperate. As long as the data passed between the services conforms to the same contract, all the services can process the data. This processing is also known as a *loosely coupled system*. A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application. For example, the data contract may call for a data type named \"Person\" that has two text fields, named \"FirstName\" and \"LastName\". To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized. When serialized, the data conforms to the data contract that is implicitly built into the type.  \n  \n> [!NOTE]\n>  A data contract differs significantly from an actual interface in its inheritance behavior. Interfaces are inherited by any derived types. When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior. However, if a derived type has a data contract, the data members of the base class are serialized. However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.  \n  \n## XML Schema Documents and the SvcUtil Tool  \n If you are exchanging data with other services, you must describe the data contract. For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts. (Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option. When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly. Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts. In this case, the **/dconly** command line option is not required.  \n  \n If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes. If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied. You can use those classes to create a new application to process data that must be exchanged with other services.  \n  \n You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client. The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.  \n  \n## Reusing Existing Types  \n A data contract has two basic requirements: a stable name and a list of members. The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract. By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with \"http://schemas.datacontract.org/2004/07/\") as the namespace URI. You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties. You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace. Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract. By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.  \n  \n> [!NOTE]\n>  In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.  \n  \n## Versioning  \n A data contract can also accommodate later versions of itself. That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched. To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.  \n  \n [!INCLUDE[crabout](~/includes/crabout-md.md)] versioning, see [Data Contract Versioning](~/docs/framework/wcf/feature-details/data-contract-versioning.md).","nodes":[{"pos":[0,660],"content":"Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>. If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages. [!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).","nodes":[{"content":"Apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.","pos":[0,254],"source":"Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>."},{"content":"If you send or receive messages by using the <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> infrastructure, you should also apply the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to any classes that hold and manipulate data sent in messages.","pos":[255,508],"source":" If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages."},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> data contracts, see <bpt id=\"p1\">[</bpt>Using Data Contracts<ept id=\"p1\">](~/docs/framework/wcf/feature-details/using-data-contracts.md)</ept>.","pos":[509,660],"source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md)."}]},{"pos":[667,1019],"content":"You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize. By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.","nodes":[{"content":"You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize. By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.","pos":[0,352],"nodes":[{"content":"You must also apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to any field, property, or event that holds values you want to serialize.","pos":[0,153],"source":"You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize."},{"content":"By applying the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>, you explicitly enable the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to serialize and deserialize the data.","pos":[154,352],"source":" By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data."}]}]},{"pos":[1027,1304],"content":"[!CAUTION]\n You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields. Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.","leadings":["","> "],"nodes":[{"content":" You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields. Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.","pos":[11,275],"nodes":[{"content":"You can apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to private fields.","pos":[1,93],"source":" You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields."},{"content":"Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.","pos":[94,264]}]}]},{"pos":[1311,1483],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> data contracts, see the topics listed in <bpt id=\"p1\">[</bpt>Using Data Contracts<ept id=\"p1\">](~/docs/framework/wcf/feature-details/using-data-contracts.md)</ept>.","source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see the topics listed in [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md)."},{"pos":[1492,1506],"content":"Data Contracts","linkify":"Data Contracts","nodes":[{"content":"Data Contracts","pos":[0,14]}]},{"pos":[1510,2525],"content":"A *data contract* is an abstract description of a set of fields with a name and data type for each field. The data contract exists outside of any single implementation to allow services on different platforms to interoperate. As long as the data passed between the services conforms to the same contract, all the services can process the data. This processing is also known as a *loosely coupled system*. A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application. For example, the data contract may call for a data type named \"Person\" that has two text fields, named \"FirstName\" and \"LastName\". To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized. When serialized, the data conforms to the data contract that is implicitly built into the type.","nodes":[{"content":"A <bpt id=\"p1\">*</bpt>data contract<ept id=\"p1\">*</ept> is an abstract description of a set of fields with a name and data type for each field.","pos":[0,105],"source":"A *data contract* is an abstract description of a set of fields with a name and data type for each field."},{"content":"The data contract exists outside of any single implementation to allow services on different platforms to interoperate.","pos":[106,225]},{"content":"As long as the data passed between the services conforms to the same contract, all the services can process the data.","pos":[226,343]},{"content":"This processing is also known as a <bpt id=\"p1\">*</bpt>loosely coupled system<ept id=\"p1\">*</ept>.","pos":[344,404],"source":" This processing is also known as a *loosely coupled system*."},{"content":"A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application.","pos":[405,557]},{"content":"For example, the data contract may call for a data type named \"Person\" that has two text fields, named \"FirstName\" and \"LastName\".","pos":[558,688]},{"content":"To create a data contract, apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to the class and apply the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to any fields or properties that must be serialized.","pos":[689,919],"source":" To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized."},{"content":"When serialized, the data conforms to the data contract that is implicitly built into the type.","pos":[920,1015]}]},{"pos":[2533,3084],"content":"[!NOTE]\n A data contract differs significantly from an actual interface in its inheritance behavior. Interfaces are inherited by any derived types. When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior. However, if a derived type has a data contract, the data members of the base class are serialized. However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.","leadings":["","> "],"nodes":[{"content":" A data contract differs significantly from an actual interface in its inheritance behavior. Interfaces are inherited by any derived types. When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior. However, if a derived type has a data contract, the data members of the base class are serialized. However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.","pos":[8,549],"nodes":[{"content":"A data contract differs significantly from an actual interface in its inheritance behavior.","pos":[1,92]},{"content":"Interfaces are inherited by any derived types.","pos":[93,139]},{"content":"When you apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to a base class, the derived types do not inherit the attribute or the behavior.","pos":[140,297],"source":" When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior."},{"content":"However, if a derived type has a data contract, the data members of the base class are serialized.","pos":[298,396]},{"content":"However, you must apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to new members in a derived class to make them serializable.","pos":[397,541],"source":" However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable."}]}]},{"pos":[3093,3134],"content":"XML Schema Documents and the SvcUtil Tool","linkify":"XML Schema Documents and the SvcUtil Tool","nodes":[{"content":"XML Schema Documents and the SvcUtil Tool","pos":[0,41]}]},{"pos":[3138,4091],"content":"If you are exchanging data with other services, you must describe the data contract. For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts. (Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option. When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly. Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts. In this case, the **/dconly** command line option is not required.","nodes":[{"content":"If you are exchanging data with other services, you must describe the data contract.","pos":[0,84]},{"content":"For the current version of the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, an XML schema can be used to define data contracts.","pos":[85,227],"source":" For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts."},{"content":"(Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> with the <bpt id=\"p2\">**</bpt>/dconly<ept id=\"p2\">**</ept> command line option.","pos":[228,521],"source":" (Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option."},{"content":"When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly.","pos":[522,680]},{"content":"Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts.","pos":[681,886]},{"content":"In this case, the <bpt id=\"p1\">**</bpt>/dconly<ept id=\"p1\">**</ept> command line option is not required.","pos":[887,953],"source":" In this case, the **/dconly** command line option is not required."}]},{"pos":[4098,4437],"content":"If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes. If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied. You can use those classes to create a new application to process data that must be exchanged with other services.","nodes":[{"content":"If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes. If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied. You can use those classes to create a new application to process data that must be exchanged with other services.","pos":[0,339],"nodes":[{"content":"If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes.","pos":[0,101]},{"content":"If you examine those classes, you find that the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> has been applied.","pos":[102,225],"source":" If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied."},{"content":"You can use those classes to create a new application to process data that must be exchanged with other services.","pos":[226,339]}]}]},{"pos":[4444,4792],"content":"You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client. The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.","nodes":[{"content":"You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> client.","pos":[0,230],"source":"You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client."},{"content":"The generated code includes types that are marked with the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>.","pos":[231,348],"source":" The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>."}]},{"pos":[4801,4823],"content":"Reusing Existing Types","linkify":"Reusing Existing Types","nodes":[{"content":"Reusing Existing Types","pos":[0,22]}]},{"pos":[4827,5886],"content":"A data contract has two basic requirements: a stable name and a list of members. The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract. By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with \"http://schemas.datacontract.org/2004/07/\") as the namespace URI. You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties. You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace. Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract. By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.","nodes":[{"content":"A data contract has two basic requirements: a stable name and a list of members. The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract. By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with \"http://schemas.datacontract.org/2004/07/\") as the namespace URI. You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties. You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace. Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract. By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.","pos":[0,1059],"nodes":[{"content":"A data contract has two basic requirements: a stable name and a list of members.","pos":[0,80]},{"content":"The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract.","pos":[81,192]},{"content":"By default, when you apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to a class, it uses the class name as the local name and the class's namespace (prefixed with \"http://schemas.datacontract.org/2004/07/\") as the namespace URI.","pos":[193,441],"source":" By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with \"http://schemas.datacontract.org/2004/07/\") as the namespace URI."},{"content":"You can override the defaults by setting the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> properties.","pos":[442,639],"source":" You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties."},{"content":"You can also change the namespace by applying the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ContractNamespaceAttribute&gt;</ph> to the namespace.","pos":[640,770],"source":" You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace."},{"content":"Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract.","pos":[771,933]},{"content":"By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.","pos":[934,1059]}]}]},{"pos":[5894,6034],"content":"[!NOTE]\n In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.","leadings":["","> "],"nodes":[{"content":"In any code, you can use the word <ph id=\"ph1\">`DataContract`</ph> instead of the longer <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>.","pos":[9,138],"source":" In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>."}]},{"pos":[6043,6053],"content":"Versioning","linkify":"Versioning","nodes":[{"content":"Versioning","pos":[0,10]}]},{"pos":[6057,6337],"content":"A data contract can also accommodate later versions of itself. That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched. To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.","nodes":[{"content":"A data contract can also accommodate later versions of itself. That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched. To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.","pos":[0,280],"nodes":[{"content":"A data contract can also accommodate later versions of itself.","pos":[0,62]},{"content":"That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched.","pos":[63,185]},{"content":"To do this, implement the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface.","pos":[186,280],"source":" To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface."}]}]},{"pos":[6344,6499],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> versioning, see <bpt id=\"p1\">[</bpt>Data Contract Versioning<ept id=\"p1\">](~/docs/framework/wcf/feature-details/data-contract-versioning.md)</ept>.","source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] versioning, see [Data Contract Versioning](~/docs/framework/wcf/feature-details/data-contract-versioning.md)."}],"pos":[1299,7840],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataContractAttribute\"></xref> class.","nodes":[{"pos":[0,112],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.DataContractAttribute\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataContractAttribute\"></xref> class."}],"pos":[13885,13998],"yaml":true},{"content":"Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Name\"></xref> has been explicitly set.","nodes":[{"pos":[0,114],"content":"Gets whether <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.DataContractAttribute.Name\"&gt;&lt;/xref&gt;</ph> has been explicitly set.","source":"Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Name\"></xref> has been explicitly set."}],"pos":[15554,15669],"yaml":true},{"content":"Returns `true` if the name has been explicitly set; otherwise, `false`.","nodes":[{"pos":[0,71],"content":"Returns <ph id=\"ph1\">`true`</ph> if the name has been explicitly set; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"Returns `true` if the name has been explicitly set; otherwise, `false`."}],"pos":[15791,15863],"yaml":true},{"content":"Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Namespace\"></xref> has been explicitly set.","nodes":[{"pos":[0,119],"content":"Gets whether <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.DataContractAttribute.Namespace\"&gt;&lt;/xref&gt;</ph> has been explicitly set.","source":"Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Namespace\"></xref> has been explicitly set."}],"pos":[17254,17374],"yaml":true},{"content":"Returns `true` if the namespace has been explicitly set; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"Returns <ph id=\"ph1\">`true`</ph> if the namespace has been explicitly set; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"Returns `true` if the namespace has been explicitly set; otherwise, `false`."}],"pos":[17501,17578],"yaml":true},{"content":"Gets or sets a value that indicates whether to preserve object reference data.","nodes":[{"pos":[0,78],"content":"Gets or sets a value that indicates whether to preserve object reference data.","nodes":[{"content":"Gets or sets a value that indicates whether to preserve object reference data.","pos":[0,78]}]}],"pos":[18896,18975],"yaml":true},{"content":"Use the `IsReference` property to instruct the <xref:System.Runtime.Serialization.DataContractSerializer> to insert XML constructs that preserve object reference information.","nodes":[{"pos":[0,174],"content":"Use the <ph id=\"ph1\">`IsReference`</ph> property to instruct the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to insert XML constructs that preserve object reference information.","source":"Use the `IsReference` property to instruct the <xref:System.Runtime.Serialization.DataContractSerializer> to insert XML constructs that preserve object reference information."}],"pos":[18986,19161],"yaml":true,"extradata":"MT"},{"content":"`true` to keep object reference data using standard XML; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,100],"content":"`true` to keep object reference data using standard XML; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to keep object reference data using standard XML; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,76],"source":"`true` to keep object reference data using standard XML; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[77,100],"source":" The default is `false`."}]}],"pos":[19280,19383],"yaml":true},{"content":"Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.IsReference\"></xref> has been explicitly set.","nodes":[{"pos":[0,121],"content":"Gets whether <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.DataContractAttribute.IsReference\"&gt;&lt;/xref&gt;</ph> has been explicitly set.","source":"Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.IsReference\"></xref> has been explicitly set."}],"pos":[20900,21022],"yaml":true},{"content":"`true` if the reference has been explicitly set; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the reference has been explicitly set; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the reference has been explicitly set; otherwise, `false`."}],"pos":[21149,21220],"yaml":true},{"content":"Gets or sets the name of the data contract for the type.","nodes":[{"pos":[0,56],"content":"Gets or sets the name of the data contract for the type.","nodes":[{"content":"Gets or sets the name of the data contract for the type.","pos":[0,56]}]}],"pos":[22496,22553],"yaml":true},{"content":"The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md).  \n  \n By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to. However, there may be reasons to change this default name. One reason is to allow an existing type to process data that must conform to an existing data contract. For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`. The contract can be satisfied by setting the property value to `Customer`.  \n  \n A second reason is to allow the generation of names that are invalid as type names. For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name. For instance, the string \"$value\" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.","nodes":[{"pos":[0,299],"content":"The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> property is used to give a name to a data contract, which is the name of the type in XML schema.","pos":[0,166],"source":"The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema."},{"content":"<ph id=\"ph1\">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph><bpt id=\"p1\">[</bpt>Data Contract Names<ept id=\"p1\">](~/docs/framework/wcf/feature-details/data-contract-names.md)</ept>.","pos":[167,299],"source":"[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md)."}]},{"pos":[306,825],"content":"By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to. However, there may be reasons to change this default name. One reason is to allow an existing type to process data that must conform to an existing data contract. For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`. The contract can be satisfied by setting the property value to `Customer`.","nodes":[{"content":"By default, the name of a data contract is the name of the type that the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> is applied to.","pos":[0,145],"source":"By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to."},{"content":"However, there may be reasons to change this default name.","pos":[146,204]},{"content":"One reason is to allow an existing type to process data that must conform to an existing data contract.","pos":[205,308]},{"content":"For example, there exists a type named <ph id=\"ph1\">`Person`</ph> but the data contract, embodied in an XML schema, requires that the name be <ph id=\"ph2\">`Customer`</ph>.","pos":[309,444],"source":" For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`."},{"content":"The contract can be satisfied by setting the property value to <ph id=\"ph1\">`Customer`</ph>.","pos":[445,519],"source":" The contract can be satisfied by setting the property value to `Customer`."}]},{"pos":[832,1213],"content":"A second reason is to allow the generation of names that are invalid as type names. For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name. For instance, the string \"$value\" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.","nodes":[{"content":"A second reason is to allow the generation of names that are invalid as type names. For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name. For instance, the string \"$value\" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.","pos":[0,381],"nodes":[{"content":"A second reason is to allow the generation of names that are invalid as type names.","pos":[0,83]},{"content":"For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name.","pos":[84,216]},{"content":"For instance, the string \"$value\" is disallowed as a type name but is allowed as a <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> property value.","pos":[217,381],"source":" For instance, the string \"$value\" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value."}]}]}],"pos":[22564,23786],"yaml":true,"extradata":"MT"},{"content":"The local name of a data contract. The default is the name of the class that the attribute is applied to.","nodes":[{"pos":[0,105],"content":"The local name of a data contract. The default is the name of the class that the attribute is applied to.","nodes":[{"content":"The local name of a data contract. The default is the name of the class that the attribute is applied to.","pos":[0,105],"nodes":[{"content":"The local name of a data contract.","pos":[0,34]},{"content":"The default is the name of the class that the attribute is applied to.","pos":[35,105]}]}]}],"pos":[23899,24005],"yaml":true},{"content":"Gets or sets the namespace for the data contract for the type.","nodes":[{"pos":[0,62],"content":"Gets or sets the namespace for the data contract for the type.","nodes":[{"content":"Gets or sets the namespace for the data contract for the type.","pos":[0,62]}]}],"pos":[25425,25488],"yaml":true},{"content":"Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.  \n  \n> [!TIP]\n>  For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server. Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the \"root namespace,\" named after the project). Adding this prefix causes the client and server namespaces to be different for the same type. The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to \"\", or to explicitly set the data contract namespace in this property.","nodes":[{"pos":[0,126],"content":"Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.","nodes":[{"content":"Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.","pos":[0,126]}]},{"pos":[134,697],"content":"[!TIP]\n For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server. Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the \"root namespace,\" named after the project). Adding this prefix causes the client and server namespaces to be different for the same type. The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to \"\", or to explicitly set the data contract namespace in this property.","leadings":["","> "],"nodes":[{"content":" For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server. Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the \"root namespace,\" named after the project). Adding this prefix causes the client and server namespaces to be different for the same type. The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to \"\", or to explicitly set the data contract namespace in this property.","pos":[7,561],"nodes":[{"content":"For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server.","pos":[1,137]},{"content":"Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the \"root namespace,\" named after the project).","pos":[138,279]},{"content":"Adding this prefix causes the client and server namespaces to be different for the same type.","pos":[280,373]},{"content":"The solution is to set the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> property to \"\", or to explicitly set the data contract namespace in this property.","pos":[374,554],"source":" The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to \"\", or to explicitly set the data contract namespace in this property."}]}]}],"pos":[25499,26206],"yaml":true,"extradata":"MT"},{"content":"The namespace of the contract.","nodes":[{"pos":[0,30],"content":"The namespace of the contract.","nodes":[{"content":"The namespace of the contract.","pos":[0,30]}]}],"pos":[26324,26355],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Serialization.DataContractAttribute\n  commentId: T:System.Runtime.Serialization.DataContractAttribute\n  id: DataContractAttribute\n  children:\n  - System.Runtime.Serialization.DataContractAttribute.#ctor\n  - System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly\n  - System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly\n  - System.Runtime.Serialization.DataContractAttribute.IsReference\n  - System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly\n  - System.Runtime.Serialization.DataContractAttribute.Name\n  - System.Runtime.Serialization.DataContractAttribute.Namespace\n  langs:\n  - csharp\n  name: DataContractAttribute\n  nameWithType: DataContractAttribute\n  fullName: System.Runtime.Serialization.DataContractAttribute\n  type: Class\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <xref href=\"System.Runtime.Serialization.DataContractSerializer\"></xref>. To make their type serializable, type authors must define a data contract for their type.\n  remarks: \"Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>. If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages. [!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).  \\n  \\n You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize. By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.  \\n  \\n> [!CAUTION]\\n>  You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields. Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.  \\n  \\n [!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see the topics listed in [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).  \\n  \\n## Data Contracts  \\n A *data contract* is an abstract description of a set of fields with a name and data type for each field. The data contract exists outside of any single implementation to allow services on different platforms to interoperate. As long as the data passed between the services conforms to the same contract, all the services can process the data. This processing is also known as a *loosely coupled system*. A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application. For example, the data contract may call for a data type named \\\"Person\\\" that has two text fields, named \\\"FirstName\\\" and \\\"LastName\\\". To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized. When serialized, the data conforms to the data contract that is implicitly built into the type.  \\n  \\n> [!NOTE]\\n>  A data contract differs significantly from an actual interface in its inheritance behavior. Interfaces are inherited by any derived types. When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior. However, if a derived type has a data contract, the data members of the base class are serialized. However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.  \\n  \\n## XML Schema Documents and the SvcUtil Tool  \\n If you are exchanging data with other services, you must describe the data contract. For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts. (Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option. When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly. Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts. In this case, the **/dconly** command line option is not required.  \\n  \\n If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes. If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied. You can use those classes to create a new application to process data that must be exchanged with other services.  \\n  \\n You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client. The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.  \\n  \\n## Reusing Existing Types  \\n A data contract has two basic requirements: a stable name and a list of members. The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract. By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with \\\"http://schemas.datacontract.org/2004/07/\\\") as the namespace URI. You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties. You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace. Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract. By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.  \\n  \\n> [!NOTE]\\n>  In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.  \\n  \\n## Versioning  \\n A data contract can also accommodate later versions of itself. That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched. To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.  \\n  \\n [!INCLUDE[crabout](~/includes/crabout-md.md)] versioning, see [Data Contract Versioning](~/docs/framework/wcf/feature-details/data-contract-versioning.md).\"\n  example:\n  - \"The following example serializes and deserializes a class named `Person` to which the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied. Note that the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> properties have been set to values that override the default settings.  \\n  \\n [!code-csharp[DataContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#1)]\\n [!code-vb[DataContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#1)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum, AllowMultiple=false, Inherited=false)]\n\n      public sealed class DataContractAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractAttribute.#ctor\n  commentId: M:System.Runtime.Serialization.DataContractAttribute.#ctor\n  id: '#ctor'\n  parent: System.Runtime.Serialization.DataContractAttribute\n  langs:\n  - csharp\n  name: DataContractAttribute()\n  nameWithType: DataContractAttribute.DataContractAttribute()\n  fullName: DataContractAttribute.DataContractAttribute()\n  type: Constructor\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataContractAttribute\"></xref> class.\n  syntax:\n    content: public DataContractAttribute ();\n    parameters: []\n  overload: System.Runtime.Serialization.DataContractAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly\n  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly\n  id: IsNameSetExplicitly\n  parent: System.Runtime.Serialization.DataContractAttribute\n  langs:\n  - csharp\n  name: IsNameSetExplicitly\n  nameWithType: DataContractAttribute.IsNameSetExplicitly\n  fullName: DataContractAttribute.IsNameSetExplicitly\n  type: Property\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Name\"></xref> has been explicitly set.\n  syntax:\n    content: public bool IsNameSetExplicitly { get; }\n    return:\n      type: System.Boolean\n      description: Returns `true` if the name has been explicitly set; otherwise, `false`.\n  overload: System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly\n  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly\n  id: IsNamespaceSetExplicitly\n  parent: System.Runtime.Serialization.DataContractAttribute\n  langs:\n  - csharp\n  name: IsNamespaceSetExplicitly\n  nameWithType: DataContractAttribute.IsNamespaceSetExplicitly\n  fullName: DataContractAttribute.IsNamespaceSetExplicitly\n  type: Property\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Namespace\"></xref> has been explicitly set.\n  syntax:\n    content: public bool IsNamespaceSetExplicitly { get; }\n    return:\n      type: System.Boolean\n      description: Returns `true` if the namespace has been explicitly set; otherwise, `false`.\n  overload: System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractAttribute.IsReference\n  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsReference\n  id: IsReference\n  parent: System.Runtime.Serialization.DataContractAttribute\n  langs:\n  - csharp\n  name: IsReference\n  nameWithType: DataContractAttribute.IsReference\n  fullName: DataContractAttribute.IsReference\n  type: Property\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Gets or sets a value that indicates whether to preserve object reference data.\n  remarks: Use the `IsReference` property to instruct the <xref:System.Runtime.Serialization.DataContractSerializer> to insert XML constructs that preserve object reference information.\n  syntax:\n    content: public bool IsReference { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` to keep object reference data using standard XML; otherwise, `false`. The default is `false`.'\n  overload: System.Runtime.Serialization.DataContractAttribute.IsReference*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly\n  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly\n  id: IsReferenceSetExplicitly\n  parent: System.Runtime.Serialization.DataContractAttribute\n  langs:\n  - csharp\n  name: IsReferenceSetExplicitly\n  nameWithType: DataContractAttribute.IsReferenceSetExplicitly\n  fullName: DataContractAttribute.IsReferenceSetExplicitly\n  type: Property\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.IsReference\"></xref> has been explicitly set.\n  syntax:\n    content: public bool IsReferenceSetExplicitly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the reference has been explicitly set; otherwise, `false`.'\n  overload: System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractAttribute.Name\n  commentId: P:System.Runtime.Serialization.DataContractAttribute.Name\n  id: Name\n  parent: System.Runtime.Serialization.DataContractAttribute\n  langs:\n  - csharp\n  name: Name\n  nameWithType: DataContractAttribute.Name\n  fullName: DataContractAttribute.Name\n  type: Property\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Gets or sets the name of the data contract for the type.\n  remarks: \"The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md).  \\n  \\n By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to. However, there may be reasons to change this default name. One reason is to allow an existing type to process data that must conform to an existing data contract. For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`. The contract can be satisfied by setting the property value to `Customer`.  \\n  \\n A second reason is to allow the generation of names that are invalid as type names. For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name. For instance, the string \\\"$value\\\" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.\"\n  syntax:\n    content: public string Name { get; set; }\n    return:\n      type: System.String\n      description: The local name of a data contract. The default is the name of the class that the attribute is applied to.\n  overload: System.Runtime.Serialization.DataContractAttribute.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.Serialization.DataContractAttribute.Namespace\n  commentId: P:System.Runtime.Serialization.DataContractAttribute.Namespace\n  id: Namespace\n  parent: System.Runtime.Serialization.DataContractAttribute\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: DataContractAttribute.Namespace\n  fullName: DataContractAttribute.Namespace\n  type: Property\n  assemblies:\n  - System.Runtime.Serialization.Primitives\n  - System.Runtime.Serialization\n  - netstandard\n  namespace: System.Runtime.Serialization\n  summary: Gets or sets the namespace for the data contract for the type.\n  remarks: \"Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.  \\n  \\n> [!TIP]\\n>  For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server. Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the \\\"root namespace,\\\" named after the project). Adding this prefix causes the client and server namespaces to be different for the same type. The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to \\\"\\\", or to explicitly set the data contract namespace in this property.\"\n  syntax:\n    content: public string Namespace { get; set; }\n    return:\n      type: System.String\n      description: The namespace of the contract.\n  overload: System.Runtime.Serialization.DataContractAttribute.Namespace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Runtime.Serialization.DataContractAttribute.#ctor\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: DataContractAttribute()\n  nameWithType: DataContractAttribute.DataContractAttribute()\n  fullName: DataContractAttribute.DataContractAttribute()\n- uid: System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsNameSetExplicitly\n  nameWithType: DataContractAttribute.IsNameSetExplicitly\n  fullName: DataContractAttribute.IsNameSetExplicitly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsNamespaceSetExplicitly\n  nameWithType: DataContractAttribute.IsNamespaceSetExplicitly\n  fullName: DataContractAttribute.IsNamespaceSetExplicitly\n- uid: System.Runtime.Serialization.DataContractAttribute.IsReference\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsReference\n  nameWithType: DataContractAttribute.IsReference\n  fullName: DataContractAttribute.IsReference\n- uid: System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsReferenceSetExplicitly\n  nameWithType: DataContractAttribute.IsReferenceSetExplicitly\n  fullName: DataContractAttribute.IsReferenceSetExplicitly\n- uid: System.Runtime.Serialization.DataContractAttribute.Name\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: Name\n  nameWithType: DataContractAttribute.Name\n  fullName: DataContractAttribute.Name\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.Serialization.DataContractAttribute.Namespace\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: Namespace\n  nameWithType: DataContractAttribute.Namespace\n  fullName: DataContractAttribute.Namespace\n- uid: System.Runtime.Serialization.DataContractAttribute.#ctor*\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: DataContractAttribute\n  nameWithType: DataContractAttribute.DataContractAttribute\n  fullName: DataContractAttribute.DataContractAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n- uid: System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly*\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsNameSetExplicitly\n  nameWithType: DataContractAttribute.IsNameSetExplicitly\n  fullName: DataContractAttribute.IsNameSetExplicitly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n- uid: System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly*\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsNamespaceSetExplicitly\n  nameWithType: DataContractAttribute.IsNamespaceSetExplicitly\n  fullName: DataContractAttribute.IsNamespaceSetExplicitly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n- uid: System.Runtime.Serialization.DataContractAttribute.IsReference*\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsReference\n  nameWithType: DataContractAttribute.IsReference\n  fullName: DataContractAttribute.IsReference\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n- uid: System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly*\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: IsReferenceSetExplicitly\n  nameWithType: DataContractAttribute.IsReferenceSetExplicitly\n  fullName: DataContractAttribute.IsReferenceSetExplicitly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n- uid: System.Runtime.Serialization.DataContractAttribute.Name*\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: Name\n  nameWithType: DataContractAttribute.Name\n  fullName: DataContractAttribute.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n- uid: System.Runtime.Serialization.DataContractAttribute.Namespace*\n  parent: System.Runtime.Serialization.DataContractAttribute\n  isExternal: false\n  name: Namespace\n  nameWithType: DataContractAttribute.Namespace\n  fullName: DataContractAttribute.Namespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/DataContractAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}