{"nodes":[{"content":"Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.","nodes":[{"pos":[0,130],"content":"Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.","nodes":[{"content":"Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.","pos":[0,130]}]}],"pos":[2078,2209],"yaml":true},{"content":"<xref:System.Xml.Linq.XNode> is an abstract common base class for the following types:  \n  \n-   <xref:System.Xml.Linq.XComment>  \n  \n-   <xref:System.Xml.Linq.XContainer>  \n  \n-   <xref:System.Xml.Linq.XDocumentType>  \n  \n-   <xref:System.Xml.Linq.XProcessingInstruction>  \n  \n-   <xref:System.Xml.Linq.XText>  \n  \n <xref:System.Xml.Linq.XContainer> is an abstract common base class for the following types:  \n  \n-   <xref:System.Xml.Linq.XDocument>  \n  \n-   <xref:System.Xml.Linq.XElement>  \n  \n Objects of classes that derive from <xref:System.Xml.Linq.XContainer> can contain child nodes.  \n  \n> [!NOTE]\n>  An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>. Attributes are maintained as a list of name/value pairs on an element.  \n  \n If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level. Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.","nodes":[{"pos":[0,86],"content":"<xref:System.Xml.Linq.XNode> is an abstract common base class for the following types:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> is an abstract common base class for the following types:","pos":[0,86],"source":"<xref:System.Xml.Linq.XNode> is an abstract common base class for the following types:"}]},{"pos":[96,127],"content":"<xref:System.Xml.Linq.XComment>","nodes":[]},{"pos":[137,170],"content":"<xref:System.Xml.Linq.XContainer>","nodes":[]},{"pos":[180,216],"content":"<xref:System.Xml.Linq.XDocumentType>","nodes":[]},{"pos":[226,271],"content":"<xref:System.Xml.Linq.XProcessingInstruction>","nodes":[]},{"pos":[281,309],"content":"<xref:System.Xml.Linq.XText>","nodes":[]},{"pos":[316,407],"content":"<xref:System.Xml.Linq.XContainer> is an abstract common base class for the following types:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> is an abstract common base class for the following types:","pos":[0,91],"source":"<xref:System.Xml.Linq.XContainer> is an abstract common base class for the following types:"}]},{"pos":[417,449],"content":"<xref:System.Xml.Linq.XDocument>","nodes":[]},{"pos":[459,490],"content":"<xref:System.Xml.Linq.XElement>","nodes":[]},{"pos":[497,591],"content":"Objects of classes that derive from <xref:System.Xml.Linq.XContainer> can contain child nodes.","nodes":[{"content":"Objects of classes that derive from <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> can contain child nodes.","pos":[0,94],"source":"Objects of classes that derive from <xref:System.Xml.Linq.XContainer> can contain child nodes."}]},{"pos":[599,757],"content":"[!NOTE]\n An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>. Attributes are maintained as a list of name/value pairs on an element.","leadings":["","> "],"nodes":[{"content":" An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>. Attributes are maintained as a list of name/value pairs on an element.","pos":[8,156],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> is not an <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph>.","pos":[1,77],"source":" An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>."},{"content":"Attributes are maintained as a list of name/value pairs on an element.","pos":[78,148]}]}]},{"pos":[764,1087],"content":"If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level. Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.","nodes":[{"content":"If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level. Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.","pos":[0,323],"nodes":[{"content":"If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level.","pos":[0,154]},{"content":"Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.","pos":[155,323]}]}]}],"pos":[2220,3333],"yaml":true,"extradata":"MT"},{"content":"Adds the specified content immediately after this node.","nodes":[{"pos":[0,55],"content":"Adds the specified content immediately after this node.","nodes":[{"content":"Adds the specified content immediately after this node.","pos":[0,55]}]}],"pos":[7057,7113],"yaml":true},{"content":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,197],"content":"For details about the valid content that can be passed to this method, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[204,251],"content":"<xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,47],"source":"<xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[7124,7380],"yaml":true,"extradata":"MT"},{"content":"A content object that contains simple content or a collection of content objects to be added after this node.","nodes":[{"pos":[0,109],"content":"A content object that contains simple content or a collection of content objects to be added after this node.","nodes":[{"content":"A content object that contains simple content or a collection of content objects to be added after this node.","pos":[0,109]}]}],"pos":[8716,8826],"yaml":true},{"content":"The parent is `null`.","nodes":[{"pos":[0,21],"content":"The parent is <ph id=\"ph1\">`null`</ph>.","source":"The parent is `null`."}],"pos":[8998,9020],"yaml":true},{"content":"Adds the specified content immediately after this node.","nodes":[{"pos":[0,55],"content":"Adds the specified content immediately after this node.","nodes":[{"content":"Adds the specified content immediately after this node.","pos":[0,55]}]}],"pos":[10500,10556],"yaml":true},{"content":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,197],"content":"For details about the valid content that can be passed to this method, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[204,325],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[10567,10897],"yaml":true,"extradata":"MT"},{"content":"A parameter list of content objects.","nodes":[{"pos":[0,36],"content":"A parameter list of content objects.","nodes":[{"content":"A parameter list of content objects.","pos":[0,36]}]}],"pos":[13038,13075],"yaml":true},{"content":"The parent is `null`.","nodes":[{"pos":[0,21],"content":"The parent is <ph id=\"ph1\">`null`</ph>.","source":"The parent is `null`."}],"pos":[13247,13269],"yaml":true},{"content":"Adds the specified content immediately before this node.","nodes":[{"pos":[0,56],"content":"Adds the specified content immediately before this node.","nodes":[{"content":"Adds the specified content immediately before this node.","pos":[0,56]}]}],"pos":[14743,14800],"yaml":true},{"content":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might  affect your performance.","nodes":[{"pos":[0,197],"content":"For details about the valid content that can be passed to this method, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[204,325],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]},{"pos":[332,664],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might  affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might  affect your performance.","pos":[0,332],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.AddBeforeSelf%2A&gt;</ph> method must traverse the list of direct child nodes under the parent container.","pos":[126,271],"source":" This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container."},{"content":"Therefore, using this method might  affect your performance.","pos":[272,332]}]}]}],"pos":[14811,15482],"yaml":true,"extradata":"MT"},{"content":"A content object that contains simple content or a collection of content objects to be added before this node.","nodes":[{"pos":[0,110],"content":"A content object that contains simple content or a collection of content objects to be added before this node.","nodes":[{"content":"A content object that contains simple content or a collection of content objects to be added before this node.","pos":[0,110]}]}],"pos":[16821,16932],"yaml":true},{"content":"The parent is `null`.","nodes":[{"pos":[0,21],"content":"The parent is <ph id=\"ph1\">`null`</ph>.","source":"The parent is `null`."}],"pos":[17105,17127],"yaml":true},{"content":"Adds the specified content immediately before this node.","nodes":[{"pos":[0,56],"content":"Adds the specified content immediately before this node.","nodes":[{"content":"Adds the specified content immediately before this node.","pos":[0,56]}]}],"pos":[18613,18670],"yaml":true},{"content":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this function might affect your performance.","nodes":[{"pos":[0,197],"content":"For details about the valid content that can be passed to this method, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[204,325],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]},{"pos":[332,665],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this function might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this function might affect your performance.","pos":[0,333],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.AddBeforeSelf%2A&gt;</ph> method must traverse the list of direct child nodes under the parent container.","pos":[126,271],"source":" This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container."},{"content":"Therefore, using this function might affect your performance.","pos":[272,333]}]}]}],"pos":[18681,19353],"yaml":true,"extradata":"MT"},{"content":"A parameter list of content objects.","nodes":[{"pos":[0,36],"content":"A parameter list of content objects.","nodes":[{"content":"A parameter list of content objects.","pos":[0,36]}]}],"pos":[21501,21538],"yaml":true},{"content":"The parent is `null`.","nodes":[{"pos":[0,21],"content":"The parent is <ph id=\"ph1\">`null`</ph>.","source":"The parent is `null`."}],"pos":[21711,21733],"yaml":true},{"content":"Returns a collection of the ancestor elements of this node.","nodes":[{"pos":[0,59],"content":"Returns a collection of the ancestor elements of this node.","nodes":[{"content":"Returns a collection of the ancestor elements of this node.","pos":[0,59]}]}],"pos":[23120,23180],"yaml":true},{"content":"This method does not return itself in the results.  \n  \n The nodes in the returned collection are in reverse document order.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,50],"content":"This method does not return itself in the results.","nodes":[{"content":"This method does not return itself in the results.","pos":[0,50]}]},{"pos":[57,124],"content":"The nodes in the returned collection are in reverse document order.","nodes":[{"content":"The nodes in the returned collection are in reverse document order.","pos":[0,67]}]},{"pos":[131,167],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[23191,23365],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the ancestor elements of this node.","nodes":[{"pos":[0,152],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of the ancestor elements of this node.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the ancestor elements of this node."}],"pos":[24518,24671],"yaml":true},{"content":"Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,178],"content":"Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"Returns a filtered collection of the ancestor elements of this node.","pos":[0,68]},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[69,178],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[26204,26383],"yaml":true},{"content":"This method will not return itself in the results.","nodes":[{"pos":[0,50],"content":"This method will not return itself in the results.","nodes":[{"content":"This method will not return itself in the results.","pos":[0,50]}]}],"pos":[26394,26445],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to match.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match."}],"pos":[27538,27595],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the ancestor elements of this node. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.  \n  \n The nodes in the returned collection are in reverse document order.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,262],"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the ancestor elements of this node. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of the ancestor elements of this node.","pos":[0,152],"source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the ancestor elements of this node."},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[153,262],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]},{"pos":[269,336],"content":"The nodes in the returned collection are in reverse document order.","nodes":[{"content":"The nodes in the returned collection are in reverse document order.","pos":[0,67]}]},{"pos":[343,379],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[27703,28095],"yaml":true},{"content":"Compares two nodes to determine their relative XML document order.","nodes":[{"pos":[0,66],"content":"Compares two nodes to determine their relative XML document order.","nodes":[{"content":"Compares two nodes to determine their relative XML document order.","pos":[0,66]}]}],"pos":[29781,29848],"yaml":true},{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","nodes":[{"pos":[0,481],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","pos":[0,481],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A&gt;</ph> method must traverse the ancestors of the two nodes being compared until it finds the common parent.","pos":[126,299],"source":" This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent."},{"content":"Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.","pos":[300,421]},{"content":"Therefore, using this method might affect your performance.","pos":[422,481]}]}]}],"pos":[29859,30341],"yaml":true,"extradata":"MT"},{"content":"First <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.","nodes":[{"pos":[0,60],"content":"First <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> to compare.","source":"First <xref href=\"System.Xml.Linq.XNode\"></xref> to compare."}],"pos":[32457,32518],"yaml":true},{"content":"Second <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.","nodes":[{"pos":[0,61],"content":"Second <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> to compare.","source":"Second <xref href=\"System.Xml.Linq.XNode\"></xref> to compare."}],"pos":[32584,32646],"yaml":true},{"content":"An `int` containing 0 if the nodes are equal; -1 if <code>n1</code> is before <code>n2</code>; 1 if <code>n1</code> is after <code>n2</code>.","nodes":[{"pos":[0,141],"content":"An <ph id=\"ph1\">`int`</ph> containing 0 if the nodes are equal; -1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">n1</ph><ept id=\"p1\">&lt;/code&gt;</ept> is before <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">n2</ph><ept id=\"p2\">&lt;/code&gt;</ept>; 1 if <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">n1</ph><ept id=\"p3\">&lt;/code&gt;</ept> is after <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">n2</ph><ept id=\"p4\">&lt;/code&gt;</ept>.","source":"An `int` containing 0 if the nodes are equal; -1 if <code>n1</code> is before <code>n2</code>; 1 if <code>n1</code> is after <code>n2</code>."}],"pos":[32702,32844],"yaml":true},{"content":"The two nodes do not share a common ancestor.","nodes":[{"pos":[0,45],"content":"The two nodes do not share a common ancestor.","nodes":[{"content":"The two nodes do not share a common ancestor.","pos":[0,45]}]}],"pos":[33024,33070],"yaml":true},{"content":"Creates an <xref href=\"System.Xml.XmlReader\"></xref> for this node.","nodes":[{"pos":[0,67],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> for this node.","source":"Creates an <xref href=\"System.Xml.XmlReader\"></xref> for this node."}],"pos":[34475,34543],"yaml":true},{"content":"You typically use this method when you have to supply another component with an <xref:System.Xml.XmlReader>. For example, you can create an <xref:System.Xml.XmlReader> from a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree, and then pass that reader to <xref:System.Xml.XmlDocument.Load%2A>.  \n  \n All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers. They always perform line break normalization and full normalization of attributes. In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader. It does not transform any white space. It also returns attributes in the order that they were added, not in attribute name order.  \n  \n [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not keep information about whether attributes are default attributes. <xref:System.Xml.XmlReader.IsDefault%2A> will always return false regardless of whether the attribute was populated from a default value or not.  \n  \n The the `PUBLIC` and `SYSTEM` pseudo attributes on <xref:System.Xml.Linq.XDocumentType> are not available through the <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=fullName> method. They are only available through the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method that takes the qualified name of the attribute as a parameter. If you have to retrieve the `PUBLIC` or `SYSTEM` attributes, you should use the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method.  \n  \n Base64 and BinHex data are not supported. If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>.  \n  \n The `xml` declaration is not surfaced by the reader. While reading, you will not encounter a node of type <xref:System.Xml.XmlNodeType.XmlDeclaration>.","nodes":[{"pos":[0,302],"content":"You typically use this method when you have to supply another component with an <xref:System.Xml.XmlReader>. For example, you can create an <xref:System.Xml.XmlReader> from a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree, and then pass that reader to <xref:System.Xml.XmlDocument.Load%2A>.","nodes":[{"content":"You typically use this method when you have to supply another component with an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","pos":[0,108],"source":"You typically use this method when you have to supply another component with an <xref:System.Xml.XmlReader>."},{"content":"For example, you can create an <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> from a <ph id=\"ph2\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> tree, and then pass that reader to <ph id=\"ph3\">&lt;xref:System.Xml.XmlDocument.Load%2A&gt;</ph>.","pos":[109,302],"source":" For example, you can create an <xref:System.Xml.XmlReader> from a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree, and then pass that reader to <xref:System.Xml.XmlDocument.Load%2A>."}]},{"pos":[309,746],"content":"All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers. They always perform line break normalization and full normalization of attributes. In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader. It does not transform any white space. It also returns attributes in the order that they were added, not in attribute name order.","nodes":[{"content":"All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers. They always perform line break normalization and full normalization of attributes. In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader. It does not transform any white space. It also returns attributes in the order that they were added, not in attribute name order.","pos":[0,437],"nodes":[{"content":"All of the readers returned by <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> are normalizing readers.","pos":[0,93],"source":"All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers."},{"content":"They always perform line break normalization and full normalization of attributes.","pos":[94,176]},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph> returned by <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode.CreateReader%2A&gt;</ph> is not a normalizing reader.","pos":[177,307],"source":" In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader."},{"content":"It does not transform any white space.","pos":[308,346]},{"content":"It also returns attributes in the order that they were added, not in attribute name order.","pos":[347,437]}]}]},{"pos":[753,1026],"content":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not keep information about whether attributes are default attributes. <xref:System.Xml.XmlReader.IsDefault%2A> will always return false regardless of whether the attribute was populated from a default value or not.","nodes":[{"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> does not keep information about whether attributes are default attributes.","pos":[0,128],"source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not keep information about whether attributes are default attributes."},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.IsDefault%2A&gt;</ph> will always return false regardless of whether the attribute was populated from a default value or not.","pos":[129,273],"source":" <xref:System.Xml.XmlReader.IsDefault%2A> will always return false regardless of whether the attribute was populated from a default value or not."}]},{"pos":[1033,1562],"content":"The the `PUBLIC` and `SYSTEM` pseudo attributes on <xref:System.Xml.Linq.XDocumentType> are not available through the <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=fullName> method. They are only available through the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method that takes the qualified name of the attribute as a parameter. If you have to retrieve the `PUBLIC` or `SYSTEM` attributes, you should use the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method.","nodes":[{"content":"The the <ph id=\"ph1\">`PUBLIC`</ph> and <ph id=\"ph2\">`SYSTEM`</ph> pseudo attributes on <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph> are not available through the <ph id=\"ph4\">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,197],"source":"The the `PUBLIC` and `SYSTEM` pseudo attributes on <xref:System.Xml.Linq.XDocumentType> are not available through the <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=fullName> method."},{"content":"They are only available through the <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName&gt;</ph> method that takes the qualified name of the attribute as a parameter.","pos":[198,372],"source":" They are only available through the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method that takes the qualified name of the attribute as a parameter."},{"content":"If you have to retrieve the <ph id=\"ph1\">`PUBLIC`</ph> or <ph id=\"ph2\">`SYSTEM`</ph> attributes, you should use the <ph id=\"ph3\">&lt;xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName&gt;</ph> method.","pos":[373,529],"source":" If you have to retrieve the `PUBLIC` or `SYSTEM` attributes, you should use the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method."}]},{"pos":[1569,1801],"content":"Base64 and BinHex data are not supported. If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>.","nodes":[{"content":"Base64 and BinHex data are not supported. If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>.","pos":[0,232],"nodes":[{"content":"Base64 and BinHex data are not supported.","pos":[0,41]},{"content":"If you attempt to retrieve these types of data (for example, by calling <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A&gt;</ph>), the reader will throw <ph id=\"ph2\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[42,232],"source":" If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>."}]}]},{"pos":[1808,1959],"content":"The `xml` declaration is not surfaced by the reader. While reading, you will not encounter a node of type <xref:System.Xml.XmlNodeType.XmlDeclaration>.","nodes":[{"content":"The <ph id=\"ph1\">`xml`</ph> declaration is not surfaced by the reader.","pos":[0,52],"source":"The `xml` declaration is not surfaced by the reader."},{"content":"While reading, you will not encounter a node of type <ph id=\"ph1\">&lt;xref:System.Xml.XmlNodeType.XmlDeclaration&gt;</ph>.","pos":[53,151],"source":" While reading, you will not encounter a node of type <xref:System.Xml.XmlNodeType.XmlDeclaration>."}]}],"pos":[34554,36526],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.XmlReader\"></xref> that can be used to read this node and its descendants.","nodes":[{"pos":[0,100],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> that can be used to read this node and its descendants.","source":"An <xref href=\"System.Xml.XmlReader\"></xref> that can be used to read this node and its descendants."}],"pos":[40955,41056],"yaml":true},{"content":"Creates an <xref href=\"System.Xml.XmlReader\"></xref> with the options specified by the <code>readerOptions</code> parameter.","nodes":[{"pos":[0,124],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> with the options specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">readerOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"Creates an <xref href=\"System.Xml.XmlReader\"></xref> with the options specified by the <code>readerOptions</code> parameter."}],"pos":[42658,42783],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.ReaderOptions\"></xref> object that specifies whether to omit duplicate namespaces.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.ReaderOptions\"&gt;&lt;/xref&gt;</ph> object that specifies whether to omit duplicate namespaces.","source":"A <xref href=\"System.Xml.Linq.ReaderOptions\"></xref> object that specifies whether to omit duplicate namespaces."}],"pos":[42995,43108],"yaml":true},{"content":"An <xref href=\"System.Xml.XmlReader\"></xref> object.","nodes":[{"pos":[0,52],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Xml.XmlReader\"></xref> object."}],"pos":[43172,43225],"yaml":true},{"content":"Compares the values of two nodes, including the values of all descendant nodes.","nodes":[{"pos":[0,79],"content":"Compares the values of two nodes, including the values of all descendant nodes.","nodes":[{"content":"Compares the values of two nodes, including the values of all descendant nodes.","pos":[0,79]}]}],"pos":[44854,44934],"yaml":true},{"content":"The following criteria determine whether two nodes are equal:  \n  \n-   A `null` node is equal to another `null` node but unequal to a non-`null` node.  \n  \n-   Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.  \n  \n-   Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.  \n  \n-   Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes.  \n  \n-   Two <xref:System.Xml.Linq.XDocument> nodes are equal if their root nodes are equal.  \n  \n-   Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.  \n  \n-   Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.  \n  \n-   Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.","nodes":[{"pos":[0,61],"content":"The following criteria determine whether two nodes are equal:","nodes":[{"content":"The following criteria determine whether two nodes are equal:","pos":[0,61]}]},{"pos":[71,150],"content":"A <ph id=\"ph1\">`null`</ph> node is equal to another <ph id=\"ph2\">`null`</ph> node but unequal to a non-<ph id=\"ph3\">`null`</ph> node.","source":"A `null` node is equal to another `null` node but unequal to a non-`null` node."},{"pos":[160,236],"content":"Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects of different types are never equal.","pos":[0,76],"source":"Two <xref:System.Xml.Linq.XNode> objects of different types are never equal."}]},{"pos":[246,325],"content":"Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XText&gt;</ph> nodes are equal if they contain the same text.","pos":[0,79],"source":"Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text."}]},{"pos":[335,578],"content":"Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes.","pos":[0,243],"source":"Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes."}]},{"pos":[588,671],"content":"Two <xref:System.Xml.Linq.XDocument> nodes are equal if their root nodes are equal.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> nodes are equal if their root nodes are equal.","pos":[0,83],"source":"Two <xref:System.Xml.Linq.XDocument> nodes are equal if their root nodes are equal."}]},{"pos":[681,771],"content":"Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XComment&gt;</ph> nodes are equal if they contain the same comment text.","pos":[0,90],"source":"Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text."}]},{"pos":[781,885],"content":"Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XProcessingInstruction&gt;</ph> nodes are equal if they have the same target and data.","pos":[0,104],"source":"Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data."}]},{"pos":[895,1021],"content":"Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph> nodes are equal if the have the same name, public ID, system ID, and internal subset.","pos":[0,126],"source":"Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset."}]}],"pos":[44945,45985],"yaml":true,"extradata":"MT"},{"content":"The first <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.","nodes":[{"pos":[0,64],"content":"The first <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The first <xref href=\"System.Xml.Linq.XNode\"></xref> to compare."}],"pos":[47311,47376],"yaml":true},{"content":"The second <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.","nodes":[{"pos":[0,65],"content":"The second <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> to compare.","source":"The second <xref href=\"System.Xml.Linq.XNode\"></xref> to compare."}],"pos":[47442,47508],"yaml":true},{"content":"`true` if the nodes are equal; otherwise `false`.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">`true`</ph> if the nodes are equal; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the nodes are equal; otherwise `false`."}],"pos":[47566,47618],"yaml":true},{"content":"Gets a comparer that can compare the relative position of two nodes.","nodes":[{"pos":[0,68],"content":"Gets a comparer that can compare the relative position of two nodes.","nodes":[{"content":"Gets a comparer that can compare the relative position of two nodes.","pos":[0,68]}]}],"pos":[49136,49205],"yaml":true},{"content":"This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method. The recommended approach is to use that extension method instead of using this property directly.","nodes":[{"pos":[0,232],"content":"This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method. The recommended approach is to use that extension method instead of using this property directly.","nodes":[{"content":"This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method. The recommended approach is to use that extension method instead of using this property directly.","pos":[0,232],"nodes":[{"content":"This property is primarily used internally for implementing the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.Extensions.InDocumentOrder%2A&gt;</ph> extension method.","pos":[0,134],"source":"This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method."},{"content":"The recommended approach is to use that extension method instead of using this property directly.","pos":[135,232]}]}]}],"pos":[49216,49449],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.Linq.XNodeDocumentOrderComparer\"></xref> that can compare the relative position of two nodes.","nodes":[{"pos":[0,119],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNodeDocumentOrderComparer\"&gt;&lt;/xref&gt;</ph> that can compare the relative position of two nodes.","source":"An <xref href=\"System.Xml.Linq.XNodeDocumentOrderComparer\"></xref> that can compare the relative position of two nodes."}],"pos":[51553,51673],"yaml":true},{"content":"Returns a collection of the sibling elements after this node, in document order.","nodes":[{"pos":[0,80],"content":"Returns a collection of the sibling elements after this node, in document order.","nodes":[{"content":"Returns a collection of the sibling elements after this node, in document order.","pos":[0,80]}]}],"pos":[53182,53263],"yaml":true},{"content":"This method only includes siblings in the returned collection. It does not include descendants.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,95],"content":"This method only includes siblings in the returned collection. It does not include descendants.","nodes":[{"content":"This method only includes siblings in the returned collection. It does not include descendants.","pos":[0,95],"nodes":[{"content":"This method only includes siblings in the returned collection.","pos":[0,62]},{"content":"It does not include descendants.","pos":[63,95]}]}]},{"pos":[102,138],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[53274,53417],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements after this node, in document order.","nodes":[{"pos":[0,173],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of the sibling elements after this node, in document order.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements after this node, in document order."}],"pos":[55110,55284],"yaml":true},{"content":"Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,199],"content":"Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"Returns a filtered collection of the sibling elements after this node, in document order.","pos":[0,89]},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[90,199],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[56873,57073],"yaml":true},{"content":"This method only includes siblings in the returned collection. It does not include descendants.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,95],"content":"This method only includes siblings in the returned collection. It does not include descendants.","nodes":[{"content":"This method only includes siblings in the returned collection. It does not include descendants.","pos":[0,95],"nodes":[{"content":"This method only includes siblings in the returned collection.","pos":[0,62]},{"content":"It does not include descendants.","pos":[63,95]}]}]},{"pos":[102,138],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[57084,57227],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to match.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match."}],"pos":[58914,58971],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,283],"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of the sibling elements after this node, in document order.","pos":[0,173],"source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements after this node, in document order."},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[174,283],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[59079,59363],"yaml":true},{"content":"Returns a collection of the sibling elements before this node, in document order.","nodes":[{"pos":[0,81],"content":"Returns a collection of the sibling elements before this node, in document order.","nodes":[{"content":"Returns a collection of the sibling elements before this node, in document order.","pos":[0,81]}]}],"pos":[60874,60956],"yaml":true},{"content":"This method only includes siblings in the returned collection. It does not include descendants.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,95],"content":"This method only includes siblings in the returned collection. It does not include descendants.","nodes":[{"content":"This method only includes siblings in the returned collection. It does not include descendants.","pos":[0,95],"nodes":[{"content":"This method only includes siblings in the returned collection.","pos":[0,62]},{"content":"It does not include descendants.","pos":[63,95]}]}]},{"pos":[102,138],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[60967,61110],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements before this node, in document order.","nodes":[{"pos":[0,174],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of the sibling elements before this node, in document order.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements before this node, in document order."}],"pos":[62722,62897],"yaml":true},{"content":"Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,200],"content":"Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"Returns a filtered collection of the sibling elements before this node, in document order.","pos":[0,90]},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[91,200],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[64493,64694],"yaml":true},{"content":"This method only includes siblings in the returned collection. It does not include descendants.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,95],"content":"This method only includes siblings in the returned collection. It does not include descendants.","nodes":[{"content":"This method only includes siblings in the returned collection. It does not include descendants.","pos":[0,95],"nodes":[{"content":"This method only includes siblings in the returned collection.","pos":[0,62]},{"content":"It does not include descendants.","pos":[63,95]}]}]},{"pos":[102,138],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[64705,64848],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> to match.","source":"The <xref href=\"System.Xml.Linq.XName\"></xref> to match."}],"pos":[66432,66489],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"pos":[0,284],"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XElement\"&gt;&lt;/xref&gt;</ph> of the sibling elements before this node, in document order.","pos":[0,174],"source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements before this node, in document order."},{"content":"Only elements that have a matching <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XName\"&gt;&lt;/xref&gt;</ph> are included in the collection.","pos":[175,284],"source":" Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection."}]}],"pos":[66597,66882],"yaml":true},{"content":"Gets a comparer that can compare two nodes for value equality.","nodes":[{"pos":[0,62],"content":"Gets a comparer that can compare two nodes for value equality.","nodes":[{"content":"Gets a comparer that can compare two nodes for value equality.","pos":[0,62]}]}],"pos":[68378,68441],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.XNodeEqualityComparer\"></xref> that can compare two nodes for value equality.","nodes":[{"pos":[0,107],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNodeEqualityComparer\"&gt;&lt;/xref&gt;</ph> that can compare two nodes for value equality.","source":"A <xref href=\"System.Xml.Linq.XNodeEqualityComparer\"></xref> that can compare two nodes for value equality."}],"pos":[70512,70620],"yaml":true},{"content":"Determines if the current node appears after a specified node in terms of document order.","nodes":[{"pos":[0,89],"content":"Determines if the current node appears after a specified node in terms of document order.","nodes":[{"content":"Determines if the current node appears after a specified node in terms of document order.","pos":[0,89]}]}],"pos":[72148,72238],"yaml":true},{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","nodes":[{"pos":[0,481],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","pos":[0,481],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A&gt;</ph> method must traverse the ancestors of the two nodes being compared until it finds the common parent.","pos":[126,299],"source":" This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent."},{"content":"Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.","pos":[300,421]},{"content":"Therefore, using this method might affect your performance.","pos":[422,481]}]}]}],"pos":[72249,72731],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNode\"></xref> to compare for document order.","nodes":[{"pos":[0,77],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> to compare for document order.","source":"The <xref href=\"System.Xml.Linq.XNode\"></xref> to compare for document order."}],"pos":[74373,74451],"yaml":true},{"content":"`true` if this node appears after the specified node; otherwise `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if this node appears after the specified node; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if this node appears after the specified node; otherwise `false`."}],"pos":[74509,74584],"yaml":true},{"content":"Determines if the current node appears before a specified node in terms of document order.","nodes":[{"pos":[0,90],"content":"Determines if the current node appears before a specified node in terms of document order.","nodes":[{"content":"Determines if the current node appears before a specified node in terms of document order.","pos":[0,90]}]}],"pos":[76109,76200],"yaml":true},{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","nodes":[{"pos":[0,469],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.","pos":[0,469],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.IsBefore%2A&gt;</ph> method must traverse the ancestors of the two nodes being compared until it finds the common parent.","pos":[126,287],"source":" This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent."},{"content":"Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.","pos":[288,409]},{"content":"Therefore, using this method might affect your performance.","pos":[410,469]}]}]}],"pos":[76211,76681],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNode\"></xref> to compare for document order.","nodes":[{"pos":[0,77],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> to compare for document order.","source":"The <xref href=\"System.Xml.Linq.XNode\"></xref> to compare for document order."}],"pos":[78346,78424],"yaml":true},{"content":"`true` if this node appears before the specified node; otherwise `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if this node appears before the specified node; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if this node appears before the specified node; otherwise `false`."}],"pos":[78482,78558],"yaml":true},{"content":"Gets the next sibling node of this node.","nodes":[{"pos":[0,40],"content":"Gets the next sibling node of this node.","nodes":[{"content":"Gets the next sibling node of this node.","pos":[0,40]}]}],"pos":[79996,80037],"yaml":true},{"content":"If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no next node, this property returns `null`.","nodes":[{"pos":[0,119],"content":"If this <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> does not have a parent, or if there is no next node, this property returns <ph id=\"ph2\">`null`</ph>.","source":"If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no next node, this property returns `null`."}],"pos":[80048,80168],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the next sibling node.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> that contains the next sibling node.","source":"The <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the next sibling node."}],"pos":[82547,82631],"yaml":true},{"content":"Returns a collection of the sibling nodes after this node, in document order.","nodes":[{"pos":[0,77],"content":"Returns a collection of the sibling nodes after this node, in document order.","nodes":[{"content":"Returns a collection of the sibling nodes after this node, in document order.","pos":[0,77]}]}],"pos":[84109,84187],"yaml":true},{"content":"This method only includes siblings in the returned collection. It does not include descendants.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,95],"content":"This method only includes siblings in the returned collection. It does not include descendants.","nodes":[{"content":"This method only includes siblings in the returned collection. It does not include descendants.","pos":[0,95],"nodes":[{"content":"This method only includes siblings in the returned collection.","pos":[0,62]},{"content":"It does not include descendants.","pos":[63,95]}]}]},{"pos":[102,138],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[84198,84341],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> of the sibling nodes after this node, in document order.","nodes":[{"pos":[0,167],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> of the sibling nodes after this node, in document order.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> of the sibling nodes after this node, in document order."}],"pos":[86259,86427],"yaml":true},{"content":"Returns a collection of the sibling nodes before this node, in document order.","nodes":[{"pos":[0,78],"content":"Returns a collection of the sibling nodes before this node, in document order.","nodes":[{"content":"Returns a collection of the sibling nodes before this node, in document order.","pos":[0,78]}]}],"pos":[87917,87996],"yaml":true},{"content":"This method only includes siblings in the returned collection. It does not include descendants.  \n  \n This method uses deferred execution.","nodes":[{"pos":[0,95],"content":"This method only includes siblings in the returned collection. It does not include descendants.","nodes":[{"content":"This method only includes siblings in the returned collection. It does not include descendants.","pos":[0,95],"nodes":[{"content":"This method only includes siblings in the returned collection.","pos":[0,62]},{"content":"It does not include descendants.","pos":[63,95]}]}]},{"pos":[102,138],"content":"This method uses deferred execution.","nodes":[{"content":"This method uses deferred execution.","pos":[0,36]}]}],"pos":[88007,88150],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> of the sibling nodes before this node, in document order.","nodes":[{"pos":[0,168],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> of the sibling nodes before this node, in document order.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> of the sibling nodes before this node, in document order."}],"pos":[90064,90233],"yaml":true},{"content":"Gets the previous sibling node of this node.","nodes":[{"pos":[0,44],"content":"Gets the previous sibling node of this node.","nodes":[{"content":"Gets the previous sibling node of this node.","pos":[0,44]}]}],"pos":[91702,91747],"yaml":true},{"content":"If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no previous node, this property returns `null`.  \n  \n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container. Therefore, using this property might affect your performance.","nodes":[{"pos":[0,123],"content":"If this <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> does not have a parent, or if there is no previous node, this property returns <ph id=\"ph2\">`null`</ph>.","source":"If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no previous node, this property returns `null`."},{"pos":[130,464],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container. Therefore, using this property might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container. Therefore, using this property might affect your performance.","pos":[0,334],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.PreviousNode%2A&gt;</ph> property must traverse the list of direct child nodes under the parent container.","pos":[126,272],"source":" This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container."},{"content":"Therefore, using this property might affect your performance.","pos":[273,334]}]}]}],"pos":[91758,92227],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the previous sibling node.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> that contains the previous sibling node.","source":"The <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the previous sibling node."}],"pos":[94573,94661],"yaml":true},{"content":"Creates an <xref href=\"System.Xml.Linq.XNode\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>.","nodes":[{"pos":[0,104],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> from an <ph id=\"ph2\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an <xref href=\"System.Xml.Linq.XNode\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>."}],"pos":[96200,96305],"yaml":true},{"content":"You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader. This method enables you to process arbitrarily large XML files with a very small memory footprint.  \n  \n The reader that you pass to this method might throw exceptions. <xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>. In particular, your code should be prepared to handle <xref:System.Xml.XmlException>.  \n  \n For an example of how to stream a more complex document, see [How to: Stream XML Fragments with Access to Header Information](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).  \n  \n Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence. If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.  \n  \n For an example of using [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to transform extremely large XML documents while maintaining a small memory footprint, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).","nodes":[{"pos":[0,232],"content":"You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader. This method enables you to process arbitrarily large XML files with a very small memory footprint.","nodes":[{"content":"You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader. This method enables you to process arbitrarily large XML files with a very small memory footprint.","pos":[0,232],"nodes":[{"content":"You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader.","pos":[0,133]},{"content":"This method enables you to process arbitrarily large XML files with a very small memory footprint.","pos":[134,232]}]}]},{"pos":[239,582],"content":"The reader that you pass to this method might throw exceptions. <xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>. In particular, your code should be prepared to handle <xref:System.Xml.XmlException>.","nodes":[{"content":"The reader that you pass to this method might throw exceptions. <xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>. In particular, your code should be prepared to handle <xref:System.Xml.XmlException>.","pos":[0,343],"nodes":[{"content":"The reader that you pass to this method might throw exceptions.","pos":[0,63]},{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode.ReadFrom%2A&gt;</ph>.","pos":[64,257],"source":" <xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>."},{"content":"In particular, your code should be prepared to handle <ph id=\"ph1\">&lt;xref:System.Xml.XmlException&gt;</ph>.","pos":[258,343],"source":" In particular, your code should be prepared to handle <xref:System.Xml.XmlException>."}]}]},{"pos":[589,787],"content":"For an example of how to stream a more complex document, see <bpt id=\"p1\">[</bpt>How to: Stream XML Fragments with Access to Header Information<ept id=\"p1\">](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)</ept>.","source":"For an example of how to stream a more complex document, see [How to: Stream XML Fragments with Access to Header Information](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)."},{"pos":[794,1123],"content":"Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence. If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.","nodes":[{"content":"Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence. If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.","pos":[0,329],"nodes":[{"content":"Certain standard query operators, such as <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.","pos":[0,194],"source":"Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence."},{"content":"If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.","pos":[195,329]}]}]},{"pos":[1130,1432],"content":"For an example of using <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> to transform extremely large XML documents while maintaining a small memory footprint, see <bpt id=\"p1\">[</bpt>How to: Perform Streaming Transform of Large XML Documents<ept id=\"p1\">](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73)</ept>.","source":"For an example of using [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to transform extremely large XML documents while maintaining a small memory footprint, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73)."}],"pos":[96316,97759],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.XmlReader\"></xref> positioned at the node to read into this <xref href=\"System.Xml.Linq.XNode\"></xref>.","nodes":[{"pos":[0,129],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> positioned at the node to read into this <ph id=\"ph2\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Xml.XmlReader\"></xref> positioned at the node to read into this <xref href=\"System.Xml.Linq.XNode\"></xref>."}],"pos":[100087,100217],"yaml":true},{"content":"An <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<xref href=\"System.Xml.Linq.XObject.NodeType\"></xref>) of the first node encountered in the reader.","nodes":[{"pos":[0,286],"content":"An <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<xref href=\"System.Xml.Linq.XObject.NodeType\"></xref>) of the first node encountered in the reader.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XNode\"&gt;&lt;/xref&gt;</ph> that contains the node and its descendant nodes that were read from the reader.","pos":[0,125],"source":"An <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the node and its descendant nodes that were read from the reader."},{"content":"The runtime type of the node is determined by the node type (<ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.XObject.NodeType\"&gt;&lt;/xref&gt;</ph>) of the first node encountered in the reader.","pos":[126,286],"source":" The runtime type of the node is determined by the node type (<xref href=\"System.Xml.Linq.XObject.NodeType\"></xref>) of the first node encountered in the reader."}]}],"pos":[100282,100569],"yaml":true},{"content":"The <xref href=\"System.Xml.XmlReader\"></xref> is not positioned on a recognized node type.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> is not positioned on a recognized node type.","source":"The <xref href=\"System.Xml.XmlReader\"></xref> is not positioned on a recognized node type."}],"pos":[100737,100828],"yaml":true},{"content":"The underlying <xref href=\"System.Xml.XmlReader\"></xref> throws an exception.","nodes":[{"pos":[0,77],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlReader\"&gt;&lt;/xref&gt;</ph> throws an exception.","source":"The underlying <xref href=\"System.Xml.XmlReader\"></xref> throws an exception."}],"pos":[100920,100998],"yaml":true},{"content":"Removes this node from its parent.","nodes":[{"pos":[0,34],"content":"Removes this node from its parent.","nodes":[{"content":"Removes this node from its parent.","pos":[0,34]}]}],"pos":[103649,103684],"yaml":true},{"content":"In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set. In practical terms, this means that you should not iterate over a set of nodes and remove them. Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> by using the <xref:System.Linq.Enumerable.ToList%2A> extension method. Then, you can iterate over the list to remove the nodes. For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).  \n  \n Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=fullName> method. This method copies the nodes to a list, and then iterates over the list to remove the nodes.  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \n  \n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.","nodes":[{"pos":[0,636],"content":"In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set. In practical terms, this means that you should not iterate over a set of nodes and remove them. Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> by using the <xref:System.Linq.Enumerable.ToList%2A> extension method. Then, you can iterate over the list to remove the nodes. For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set.","pos":[0,166],"source":"In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set."},{"content":"In practical terms, this means that you should not iterate over a set of nodes and remove them.","pos":[167,262]},{"content":"Instead, you should materialize them into a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> by using the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> extension method.","pos":[263,420],"source":" Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> by using the <xref:System.Linq.Enumerable.ToList%2A> extension method."},{"content":"Then, you can iterate over the list to remove the nodes.","pos":[421,477]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)<ept id=\"p1\">](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)</ept>.","pos":[478,636],"source":" For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094)."}]},{"pos":[643,900],"content":"Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=fullName> method. This method copies the nodes to a list, and then iterates over the list to remove the nodes.","nodes":[{"content":"Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=fullName> method. This method copies the nodes to a list, and then iterates over the list to remove the nodes.","pos":[0,257],"nodes":[{"content":"Alternatively, if you want to remove a set of nodes, it is recommended that you use the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,164],"source":"Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=fullName> method."},{"content":"This method copies the nodes to a list, and then iterates over the list to remove the nodes.","pos":[165,257]}]}]},{"pos":[907,1028],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]},{"pos":[1035,1359],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.","pos":[0,324],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.Remove%2A&gt;</ph> method must traverse the list of direct child nodes under the parent container.","pos":[126,264],"source":" This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container."},{"content":"Therefore, using this method might affect your performance.","pos":[265,324]}]}]}],"pos":[103695,105063],"yaml":true,"extradata":"MT"},{"content":"The parent is `null`.","nodes":[{"pos":[0,21],"content":"The parent is <ph id=\"ph1\">`null`</ph>.","source":"The parent is `null`."}],"pos":[106532,106554],"yaml":true},{"content":"Replaces this node with the specified content.","nodes":[{"pos":[0,46],"content":"Replaces this node with the specified content.","nodes":[{"content":"Replaces this node with the specified content.","pos":[0,46]}]}],"pos":[108016,108063],"yaml":true},{"content":"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.  \n  \n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.  \n  \n For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,138],"content":"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.","nodes":[{"content":"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.","pos":[0,138]}]},{"pos":[145,474],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.","pos":[0,329],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ReplaceWith%2A&gt;</ph> method must traverse the list of direct child nodes under the parent container.","pos":[126,269],"source":" This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container."},{"content":"Therefore, using this method might affect your performance.","pos":[270,329]}]}]},{"pos":[481,678],"content":"For details about the valid content that can be passed to this method, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[685,806],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[108074,108889],"yaml":true,"extradata":"MT"},{"content":"Content that replaces this node.","nodes":[{"pos":[0,32],"content":"Content that replaces this node.","nodes":[{"content":"Content that replaces this node.","pos":[0,32]}]}],"pos":[110449,110482],"yaml":true},{"content":"Replaces this node with the specified content.","nodes":[{"pos":[0,46],"content":"Replaces this node with the specified content.","nodes":[{"content":"Replaces this node with the specified content.","pos":[0,46]}]}],"pos":[112020,112067],"yaml":true},{"content":"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.  \n  \n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.  \n  \n For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \n  \n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"pos":[0,138],"content":"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.","nodes":[{"content":"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.","pos":[0,138]}]},{"pos":[145,474],"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.","nodes":[{"content":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.","pos":[0,329],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer&gt;</ph> stores its child nodes as a singly-linked list of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XNode&gt;</ph> objects.","pos":[0,125],"source":"The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects."},{"content":"This means that the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XNode.ReplaceWith%2A&gt;</ph> method must traverse the list of direct child nodes under the parent container.","pos":[126,269],"source":" This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container."},{"content":"Therefore, using this method might affect your performance.","pos":[270,329]}]}]},{"pos":[481,678],"content":"For details about the valid content that can be passed to this method, see <bpt id=\"p1\">[</bpt>Valid Content of XElement and XDocument Objects<ept id=\"p1\">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.","source":"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)."},{"pos":[685,806],"content":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.","nodes":[{"content":"This method will raise the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.","pos":[0,121],"source":"This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events."}]}],"pos":[112078,112893],"yaml":true,"extradata":"MT"},{"content":"A parameter list of the new content.","nodes":[{"pos":[0,36],"content":"A parameter list of the new content.","nodes":[{"content":"A parameter list of the new content.","pos":[0,36]}]}],"pos":[114907,114944],"yaml":true},{"content":"Returns the indented XML for this node.","nodes":[{"pos":[0,39],"content":"Returns the indented XML for this node.","nodes":[{"content":"Returns the indented XML for this node.","pos":[0,39]}]}],"pos":[116389,116429],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the indented XML.","nodes":[{"pos":[0,65],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the indented XML.","source":"A <xref href=\"System.String\"></xref> containing the indented XML."}],"pos":[117136,117202],"yaml":true},{"content":"Returns the XML for this node, optionally disabling formatting.","nodes":[{"pos":[0,63],"content":"Returns the XML for this node, optionally disabling formatting.","nodes":[{"content":"Returns the XML for this node, optionally disabling formatting.","pos":[0,63]}]}],"pos":[118764,118828],"yaml":true},{"content":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Xml.Linq.SaveOptions\"&gt;&lt;/xref&gt;</ph> that specifies formatting behavior.","source":"A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior."}],"pos":[119835,119922],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the XML.","nodes":[{"pos":[0,56],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the XML.","source":"A <xref href=\"System.String\"></xref> containing the XML."}],"pos":[119979,120036],"yaml":true},{"content":"Writes this node to an <xref href=\"System.Xml.XmlWriter\"></xref>.","nodes":[{"pos":[0,65],"content":"Writes this node to an <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph>.","source":"Writes this node to an <xref href=\"System.Xml.XmlWriter\"></xref>."}],"pos":[121565,121631],"yaml":true},{"content":"You can use this method to write code that does a streaming transform of a very large document. For more information, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).","nodes":[{"pos":[0,255],"content":"You can use this method to write code that does a streaming transform of a very large document. For more information, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).","nodes":[{"content":"You can use this method to write code that does a streaming transform of a very large document.","pos":[0,95]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Perform Streaming Transform of Large XML Documents<ept id=\"p1\">](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73)</ept>.","pos":[96,255],"source":" For more information, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73)."}]}],"pos":[121642,121900],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlWriter\"&gt;&lt;/xref&gt;</ph> into which this method will write.","source":"An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write."}],"pos":[123945,124025],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.Linq.XNode\n  commentId: T:System.Xml.Linq.XNode\n  id: XNode\n  children:\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  - System.Xml.Linq.XNode.Ancestors\n  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.CreateReader\n  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.DocumentOrderComparer\n  - System.Xml.Linq.XNode.ElementsAfterSelf\n  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.ElementsBeforeSelf\n  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.EqualityComparer\n  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.NextNode\n  - System.Xml.Linq.XNode.NodesAfterSelf\n  - System.Xml.Linq.XNode.NodesBeforeSelf\n  - System.Xml.Linq.XNode.PreviousNode\n  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  - System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  - System.Xml.Linq.XNode.Remove\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  - System.Xml.Linq.XNode.ToString\n  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  - System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  name: XNode\n  nameWithType: XNode\n  fullName: System.Xml.Linq.XNode\n  type: Class\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.\n  remarks: \"<xref:System.Xml.Linq.XNode> is an abstract common base class for the following types:  \\n  \\n-   <xref:System.Xml.Linq.XComment>  \\n  \\n-   <xref:System.Xml.Linq.XContainer>  \\n  \\n-   <xref:System.Xml.Linq.XDocumentType>  \\n  \\n-   <xref:System.Xml.Linq.XProcessingInstruction>  \\n  \\n-   <xref:System.Xml.Linq.XText>  \\n  \\n <xref:System.Xml.Linq.XContainer> is an abstract common base class for the following types:  \\n  \\n-   <xref:System.Xml.Linq.XDocument>  \\n  \\n-   <xref:System.Xml.Linq.XElement>  \\n  \\n Objects of classes that derive from <xref:System.Xml.Linq.XContainer> can contain child nodes.  \\n  \\n> [!NOTE]\\n>  An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>. Attributes are maintained as a list of name/value pairs on an element.  \\n  \\n If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level. Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.\"\n  syntax:\n    content: 'public abstract class XNode : System.Xml.Linq.XObject'\n  inheritance:\n  - System.Object\n  - System.Xml.Linq.XObject\n  derivedClasses:\n  - System.Xml.Linq.XComment\n  - System.Xml.Linq.XContainer\n  - System.Xml.Linq.XDocumentType\n  - System.Xml.Linq.XProcessingInstruction\n  - System.Xml.Linq.XText\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  - System.Xml.Linq.XObject.Annotation(System.Type)\n  - System.Xml.Linq.XObject.Annotation``1\n  - System.Xml.Linq.XObject.Annotations(System.Type)\n  - System.Xml.Linq.XObject.Annotations``1\n  - System.Xml.Linq.XObject.BaseUri\n  - System.Xml.Linq.XObject.Changed\n  - System.Xml.Linq.XObject.Changing\n  - System.Xml.Linq.XObject.Document\n  - System.Xml.Linq.XObject.NodeType\n  - System.Xml.Linq.XObject.Parent\n  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  - System.Xml.Linq.XObject.RemoveAnnotations``1\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  - System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  extensionMethods:\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  commentId: M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  id: AddAfterSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: AddAfterSelf(Object)\n  nameWithType: XNode.AddAfterSelf(Object)\n  fullName: XNode.AddAfterSelf(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Adds the specified content immediately after this node.\n  remarks: \"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example uses this method to add an element into the tree.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5)  \\n);  \\nXElement child1 = xmlTree.Element(\\\"Child1\\\");  \\nchild1.AddAfterSelf(  \\n    new XElement(\\\"NewChild\\\", 10)  \\n);  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n        </Root>  \\n  \\nDim child1 As XElement = xmlTree.<Child1>(0)  \\nchild1.AddAfterSelf(New XElement(\\\"NewChild\\\", 10))  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child1>1</Child1>  \\n  <NewChild>10</NewChild>  \\n  <Child2>2</Child2>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void AddAfterSelf (object content);\n    parameters:\n    - id: content\n      type: System.Object\n      description: A content object that contains simple content or a collection of content objects to be added after this node.\n  overload: System.Xml.Linq.XNode.AddAfterSelf*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The parent is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  commentId: M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  id: AddAfterSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: AddAfterSelf(Object[])\n  nameWithType: XNode.AddAfterSelf(Object[])\n  fullName: XNode.AddAfterSelf(Object[])\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Adds the specified content immediately after this node.\n  remarks: \"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method. This adds the results of a query to the tree in the desired location.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Element1\\\", 1),  \\n    new XElement(\\\"Element2\\\", 2),  \\n    new XElement(\\\"Element3\\\", 3),  \\n    new XElement(\\\"Element4\\\", 4),  \\n    new XElement(\\\"Element5\\\", 5)  \\n);  \\nXElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5)  \\n);  \\nXElement child1 = xmlTree.Element(\\\"Child1\\\");  \\nchild1.AddAfterSelf(  \\n    from el in srcTree.Elements()  \\n    where (int)el > 3  \\n    select el  \\n);  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _   \\n        <Root>  \\n            <Element1>1</Element1>  \\n            <Element2>2</Element2>  \\n            <Element3>3</Element3>  \\n            <Element4>4</Element4>  \\n            <Element5>5</Element5>  \\n        </Root>  \\n  \\nDim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n        </Root>  \\n  \\nDim child1 As XElement = xmlTree.<Child1>(0)  \\nchild1.AddAfterSelf( _  \\n    From el In srcTree.Elements() _  \\n    Where CInt(el) > 3 _  \\n    Select el)  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child1>1</Child1>  \\n  <Element4>4</Element4>  \\n  <Element5>5</Element5>  \\n  <Child2>2</Child2>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void AddAfterSelf (object[] content);\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: A parameter list of content objects.\n  overload: System.Xml.Linq.XNode.AddAfterSelf*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The parent is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  commentId: M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  id: AddBeforeSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: AddBeforeSelf(Object)\n  nameWithType: XNode.AddBeforeSelf(Object)\n  fullName: XNode.AddBeforeSelf(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Adds the specified content immediately before this node.\n  remarks: \"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \\n  \\n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might  affect your performance.\"\n  example:\n  - \"The following example uses this method to add an element into the tree.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5)  \\n);  \\nXElement child1 = xmlTree.Element(\\\"Child1\\\");  \\nchild1.AddBeforeSelf(  \\n    new XElement(\\\"NewChild\\\", 10)  \\n);  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n        </Root>  \\n  \\nDim child1 As XElement = xmlTree.<Child1>(0)  \\nchild1.AddBeforeSelf(New XElement(\\\"NewChild\\\", 10))  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <NewChild>10</NewChild>  \\n  <Child1>1</Child1>  \\n  <Child2>2</Child2>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void AddBeforeSelf (object content);\n    parameters:\n    - id: content\n      type: System.Object\n      description: A content object that contains simple content or a collection of content objects to be added before this node.\n  overload: System.Xml.Linq.XNode.AddBeforeSelf*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The parent is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  commentId: M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  id: AddBeforeSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: AddBeforeSelf(Object[])\n  nameWithType: XNode.AddBeforeSelf(Object[])\n  fullName: XNode.AddBeforeSelf(Object[])\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Adds the specified content immediately before this node.\n  remarks: \"For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \\n  \\n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this function might affect your performance.\"\n  example:\n  - \"The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method. This adds the results of a query to the tree in the desired location.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Element1\\\", 1),  \\n    new XElement(\\\"Element2\\\", 2),  \\n    new XElement(\\\"Element3\\\", 3),  \\n    new XElement(\\\"Element4\\\", 4),  \\n    new XElement(\\\"Element5\\\", 5)  \\n);  \\nXElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5)  \\n);  \\nXElement child1 = xmlTree.Element(\\\"Child1\\\");  \\nchild1.AddBeforeSelf(  \\n    from el in srcTree.Elements()  \\n    where (int)el > 3  \\n    select el  \\n);  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _   \\n        <Root>  \\n            <Element1>1</Element1>  \\n            <Element2>2</Element2>  \\n            <Element3>3</Element3>  \\n            <Element4>4</Element4>  \\n            <Element5>5</Element5>  \\n        </Root>  \\n  \\nDim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n        </Root>  \\n  \\nDim child1 As XElement = xmlTree.<Child1>(0)  \\nchild1.AddBeforeSelf( _  \\n    From el In srcTree.Elements() _  \\n    Where CInt(el) > 3 _  \\n    Select el)  \\n  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Element4>4</Element4>  \\n  <Element5>5</Element5>  \\n  <Child1>1</Child1>  \\n  <Child2>2</Child2>  \\n  <Child3>3</Child3>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void AddBeforeSelf (object[] content);\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: A parameter list of content objects.\n  overload: System.Xml.Linq.XNode.AddBeforeSelf*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The parent is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.Ancestors\n  commentId: M:System.Xml.Linq.XNode.Ancestors\n  id: Ancestors\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: Ancestors()\n  nameWithType: XNode.Ancestors()\n  fullName: XNode.Ancestors()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of the ancestor elements of this node.\n  remarks: \"This method does not return itself in the results.  \\n  \\n The nodes in the returned collection are in reverse document order.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example uses this method to enumerate the ancestors of a node.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\",   \\n        new XElement(\\\"GrandChild\\\", \\\"content\\\")  \\n    )  \\n);  \\nIEnumerable<XElement> grandChild = xmlTree.Descendants(\\\"GrandChild\\\");  \\nforeach (XElement el in grandChild.Ancestors())  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child>  \\n                <GrandChild>content</GrandChild>  \\n            </Child>  \\n        </Root>  \\n  \\nDim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  \\nFor Each el In grandChild.Ancestors()  \\n    Console.WriteLine(el.Name)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Child  \\nRoot  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the ancestor elements of this node.\n  overload: System.Xml.Linq.XNode.Ancestors*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  id: Ancestors(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: Ancestors(XName)\n  nameWithType: XNode.Ancestors(XName)\n  fullName: XNode.Ancestors(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  remarks: This method will not return itself in the results.\n  example:\n  - \"The following example uses this method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child\\\",   \\n        new XElement(\\\"GrandChild\\\", \\\"content\\\")  \\n    )  \\n);  \\nIEnumerable<XElement> grandChild = xmlTree.Descendants(\\\"GrandChild\\\");  \\nforeach (XElement el in grandChild.Ancestors(\\\"Child\\\"))  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child>  \\n                <GrandChild>content</GrandChild>  \\n            </Child>  \\n        </Root>  \\n  \\nDim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  \\nFor Each el In grandChild.Ancestors(\\\"Child\\\")  \\n    Console.WriteLine(el.Name)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to match.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\"></xref> of the ancestor elements of this node. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\"></xref> are included in the collection.  \\n  \\n The nodes in the returned collection are in reverse document order.  \\n  \\n This method uses deferred execution.\"\n  overload: System.Xml.Linq.XNode.Ancestors*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  id: CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: CompareDocumentOrder(XNode, XNode)\n  nameWithType: XNode.CompareDocumentOrder(XNode, XNode)\n  fullName: XNode.CompareDocumentOrder(XNode, XNode)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Compares two nodes to determine their relative XML document order.\n  remarks: The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.\n  example:\n  - \"The following example uses this method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\",  \\n        new XElement(\\\"GrandChild1\\\", 1),  \\n        new XElement(\\\"GrandChild2\\\", 2),  \\n        new XElement(\\\"GrandChild3\\\", 3)  \\n    ),  \\n    new XElement(\\\"Child2\\\",  \\n        new XElement(\\\"GrandChild4\\\", 4),  \\n        new XElement(\\\"GrandChild5\\\", 5),  \\n        new XElement(\\\"GrandChild6\\\", 6)  \\n    )  \\n);  \\nXElement el1 = xmlTree.Descendants(\\\"GrandChild2\\\").First();  \\nXElement el2 = xmlTree.Descendants(\\\"GrandChild6\\\").First();  \\nif (XElement.CompareDocumentOrder(el1, el2) == 0)  \\n    Console.WriteLine(\\\"Compared elements are the same element\\\");  \\nelse if (XElement.CompareDocumentOrder(el1, el2) > 0)  \\n    Console.WriteLine(\\\"el1 is after el2\\\");  \\nelse  \\n    Console.WriteLine(\\\"el1 is before el2\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>  \\n                <GrandChild1>1</GrandChild1>  \\n                <GrandChild2>2</GrandChild2>  \\n                <GrandChild3>3</GrandChild3>  \\n            </Child1>  \\n            <Child2>  \\n                <GrandChild4>4</GrandChild4>  \\n                <GrandChild5>5</GrandChild5>  \\n                <GrandChild6>6</GrandChild6>  \\n            </Child2>  \\n        </Root>  \\n  \\nDim el1 As XElement = xmlTree...<GrandChild2>(0)  \\nDim el2 As XElement = xmlTree...<GrandChild6>(0)  \\n  \\nIf (XElement.CompareDocumentOrder(el1, el2) = 0) Then  \\n    Console.WriteLine(\\\"Compared elements are the same element\\\")  \\nElseIf (XElement.CompareDocumentOrder(el1, el2) > 0) Then  \\n    Console.WriteLine(\\\"el1 is after el2\\\")  \\nElse  \\n    Console.WriteLine(\\\"el1 is before el2\\\")  \\nEnd If  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nel1 is before el2  \\n```\"\n  syntax:\n    content: public static int CompareDocumentOrder (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);\n    parameters:\n    - id: n1\n      type: System.Xml.Linq.XNode\n      description: First <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.\n    - id: n2\n      type: System.Xml.Linq.XNode\n      description: Second <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.\n    return:\n      type: System.Int32\n      description: An `int` containing 0 if the nodes are equal; -1 if <code>n1</code> is before <code>n2</code>; 1 if <code>n1</code> is after <code>n2</code>.\n  overload: System.Xml.Linq.XNode.CompareDocumentOrder*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The two nodes do not share a common ancestor.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.CreateReader\n  commentId: M:System.Xml.Linq.XNode.CreateReader\n  id: CreateReader\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: CreateReader()\n  nameWithType: XNode.CreateReader()\n  fullName: XNode.CreateReader()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates an <xref href=\"System.Xml.XmlReader\"></xref> for this node.\n  remarks: \"You typically use this method when you have to supply another component with an <xref:System.Xml.XmlReader>. For example, you can create an <xref:System.Xml.XmlReader> from a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree, and then pass that reader to <xref:System.Xml.XmlDocument.Load%2A>.  \\n  \\n All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers. They always perform line break normalization and full normalization of attributes. In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader. It does not transform any white space. It also returns attributes in the order that they were added, not in attribute name order.  \\n  \\n [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not keep information about whether attributes are default attributes. <xref:System.Xml.XmlReader.IsDefault%2A> will always return false regardless of whether the attribute was populated from a default value or not.  \\n  \\n The the `PUBLIC` and `SYSTEM` pseudo attributes on <xref:System.Xml.Linq.XDocumentType> are not available through the <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=fullName> method. They are only available through the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method that takes the qualified name of the attribute as a parameter. If you have to retrieve the `PUBLIC` or `SYSTEM` attributes, you should use the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=fullName> method.  \\n  \\n Base64 and BinHex data are not supported. If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>.  \\n  \\n The `xml` declaration is not surfaced by the reader. While reading, you will not encounter a node of type <xref:System.Xml.XmlNodeType.XmlDeclaration>.\"\n  example:\n  - \"The following example creates an XML tree, creates an <xref:System.Xml.XmlReader> by using the <xref:System.Xml.Linq.XNode.CreateReader%2A> method, and creates an <xref:System.Xml.XmlDocument> by using the reader.  \\n  \\n```csharp  \\n  \\n                XDocument xmlTree = new XDocument(  \\n    new XElement(\\\"Root\\\",  \\n        new XAttribute(\\\"Att1\\\", \\\"Attribute Content\\\"),  \\n        new XElement(\\\"Child1\\\", 1),  \\n        new XElement(\\\"Child2\\\", 2)  \\n    )  \\n);  \\nXmlReader reader = xmlTree.CreateReader();  \\nreader.MoveToContent();  \\nXmlDocument doc = new XmlDocument();  \\nXmlNode cd = doc.ReadNode(reader);  \\ndoc.AppendChild(cd);  \\nConsole.WriteLine(doc.OuterXml);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XDocument =  _   \\n    <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>  \\n        <Root Att1=\\\"Attribute Content\\\">  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n        </Root>  \\nDim reader As XmlReader = xmlTree.CreateReader()  \\nreader.MoveToContent()  \\nDim doc As XmlDocument = New XmlDocument()  \\nDim cd As XmlNode = doc.ReadNode(reader)  \\ndoc.AppendChild(cd)  \\nConsole.WriteLine(doc.OuterXml)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n<Root Att1=\\\"Attribute Content\\\"><Child1>1</Child1><Child2>2</Child2></Root>  \\n```  \\n  \\n Another use for this method is to do an XSLT transformation. You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create an <xref:System.Xml.XmlWriter> that will write into the new document. Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transformation. After the transformation successfully completes, the new XML tree is populated with the results of the transform.  \\n  \\n```csharp  \\n  \\n                string xslMarkup = @\\\"<?xml version='1.0'?>  \\n<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  \\n    <xsl:template match='/Parent'>  \\n        <Root>  \\n            <C1>  \\n            <xsl:value-of select='Child1'/>  \\n            </C1>  \\n            <C2>  \\n            <xsl:value-of select='Child2'/>  \\n            </C2>  \\n        </Root>  \\n    </xsl:template>  \\n</xsl:stylesheet>\\\";  \\n  \\nXDocument xmlTree = new XDocument(  \\n    new XElement(\\\"Parent\\\",  \\n        new XElement(\\\"Child1\\\", \\\"Child1 data\\\"),  \\n        new XElement(\\\"Child2\\\", \\\"Child2 data\\\")  \\n    )  \\n);  \\n  \\nXDocument newTree = new XDocument();  \\nusing (XmlWriter writer = newTree.CreateWriter()) {  \\n    // Load the style sheet.  \\n    XslCompiledTransform xslt = new XslCompiledTransform();  \\n    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  \\n  \\n    // Execute the transform and output the results to a writer.  \\n    xslt.Transform(xmlTree.CreateReader(), writer);  \\n}  \\n  \\nConsole.WriteLine(newTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xslMarkup As XDocument = _   \\n    <?xml version='1.0'?>  \\n    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  \\n        <xsl:template match='/Parent'>  \\n            <Root>  \\n                <C1>  \\n                    <xsl:value-of select='Child1'/>  \\n                </C1>  \\n                <C2>  \\n                    <xsl:value-of select='Child2'/>  \\n                </C2>  \\n            </Root>  \\n        </xsl:template>  \\n    </xsl:stylesheet>  \\n  \\nDim xmlTree As XElement = _   \\n        <Parent>  \\n            <Child1>Child1 data</Child1>  \\n            <Child2>Child2 data</Child2>  \\n        </Parent>  \\n  \\nDim newTree As XDocument = New XDocument()  \\n  \\nUsing writer As XmlWriter = newTree.CreateWriter()  \\n    ' Load the style sheet.  \\n    Dim xslt As XslCompiledTransform = _  \\n        New XslCompiledTransform()  \\n    xslt.Load(xslMarkup.CreateReader())  \\n  \\n    ' Execute the transform and output the results to a writer.  \\n    xslt.Transform(xmlTree.CreateReader(), writer)  \\nEnd Using  \\n  \\nConsole.WriteLine(newTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <C1>Child1 data</C1>  \\n  <C2>Child2 data</C2>  \\n</Root>  \\n```\"\n  syntax:\n    content: public System.Xml.XmlReader CreateReader ();\n    parameters: []\n    return:\n      type: System.Xml.XmlReader\n      description: An <xref href=\"System.Xml.XmlReader\"></xref> that can be used to read this node and its descendants.\n  overload: System.Xml.Linq.XNode.CreateReader*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  commentId: M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  id: CreateReader(System.Xml.Linq.ReaderOptions)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: CreateReader(ReaderOptions)\n  nameWithType: XNode.CreateReader(ReaderOptions)\n  fullName: XNode.CreateReader(ReaderOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates an <xref href=\"System.Xml.XmlReader\"></xref> with the options specified by the <code>readerOptions</code> parameter.\n  syntax:\n    content: public System.Xml.XmlReader CreateReader (System.Xml.Linq.ReaderOptions readerOptions);\n    parameters:\n    - id: readerOptions\n      type: System.Xml.Linq.ReaderOptions\n      description: A <xref href=\"System.Xml.Linq.ReaderOptions\"></xref> object that specifies whether to omit duplicate namespaces.\n    return:\n      type: System.Xml.XmlReader\n      description: An <xref href=\"System.Xml.XmlReader\"></xref> object.\n  overload: System.Xml.Linq.XNode.CreateReader*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  id: DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: DeepEquals(XNode, XNode)\n  nameWithType: XNode.DeepEquals(XNode, XNode)\n  fullName: XNode.DeepEquals(XNode, XNode)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Compares the values of two nodes, including the values of all descendant nodes.\n  remarks: \"The following criteria determine whether two nodes are equal:  \\n  \\n-   A `null` node is equal to another `null` node but unequal to a non-`null` node.  \\n  \\n-   Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.  \\n  \\n-   Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.  \\n  \\n-   Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes.  \\n  \\n-   Two <xref:System.Xml.Linq.XDocument> nodes are equal if their root nodes are equal.  \\n  \\n-   Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.  \\n  \\n-   Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.  \\n  \\n-   Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.\"\n  example:\n  - \"The following example uses this method to compare two XML trees.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree1 = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", \\\"some content\\\")  \\n);  \\nXElement xmlTree2 = new XElement(\\\"Root\\\",  \\n    new XAttribute(\\\"Att1\\\", 1),  \\n    new XAttribute(\\\"Att2\\\", 2),  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", \\\"some content\\\")  \\n);  \\nConsole.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2));  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree1 As XElement = _   \\n        <Root Att1=\\\"1\\\" Att2=\\\"2\\\">  \\n            <Child1>1</Child1>  \\n            <Child2>some content</Child2>  \\n        </Root>  \\n  \\nDim xmlTree2 As XElement = _   \\n        <Root Att1=\\\"1\\\" Att2=\\\"2\\\">  \\n            <Child1>1</Child1>  \\n            <Child2>some content</Child2>  \\n        </Root>  \\n  \\nConsole.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2))  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nTrue  \\n```\"\n  syntax:\n    content: public static bool DeepEquals (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);\n    parameters:\n    - id: n1\n      type: System.Xml.Linq.XNode\n      description: The first <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.\n    - id: n2\n      type: System.Xml.Linq.XNode\n      description: The second <xref href=\"System.Xml.Linq.XNode\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the nodes are equal; otherwise `false`.'\n  overload: System.Xml.Linq.XNode.DeepEquals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.DocumentOrderComparer\n  commentId: P:System.Xml.Linq.XNode.DocumentOrderComparer\n  id: DocumentOrderComparer\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: DocumentOrderComparer\n  nameWithType: XNode.DocumentOrderComparer\n  fullName: XNode.DocumentOrderComparer\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a comparer that can compare the relative position of two nodes.\n  remarks: This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method. The recommended approach is to use that extension method instead of using this property directly.\n  example:\n  - \"The following example creates an XML tree with some elements. It then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Xml.Linq.XNode> that contains some elements from the XML tree at random. It sorts the list, using this property to retrieve a <xref:System.Xml.Linq.XNodeDocumentOrderComparer>, which implements the <xref:System.Collections.IComparer?displayProperty=fullName> and <xref:System.Collections.Generic.IComparer%601?displayProperty=fullName> interfaces.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5)  \\n);  \\n  \\nList<XNode> nodeList = new List<XNode>();  \\nnodeList.Add(xmlTree.Element(\\\"Child5\\\"));  \\nnodeList.Add(xmlTree.Element(\\\"Child3\\\"));  \\nnodeList.Add(xmlTree.Element(\\\"Child1\\\"));  \\n  \\n// Sort nodes in document order.  \\nnodeList.Sort(XNode.DocumentOrderComparer);  \\n  \\nforeach (XElement el in nodeList)  \\n    Console.WriteLine(el);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n        </Root>  \\n  \\nDim nodeList As List(Of XNode) = New List(Of XNode)()  \\nnodeList.Add(xmlTree.Element(\\\"Child5\\\"))  \\nnodeList.Add(xmlTree.Element(\\\"Child3\\\"))  \\nnodeList.Add(xmlTree.Element(\\\"Child1\\\"))  \\n  \\n' Sort nodes in document order.  \\nnodeList.Sort(XNode.DocumentOrderComparer)  \\n  \\nFor Each el In nodeList  \\n    Console.WriteLine(el)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Child1>1</Child1>  \\n<Child3>3</Child3>  \\n<Child5>5</Child5>  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer { get; }\n    return:\n      type: System.Xml.Linq.XNodeDocumentOrderComparer\n      description: An <xref href=\"System.Xml.Linq.XNodeDocumentOrderComparer\"></xref> that can compare the relative position of two nodes.\n  overload: System.Xml.Linq.XNode.DocumentOrderComparer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf\n  commentId: M:System.Xml.Linq.XNode.ElementsAfterSelf\n  id: ElementsAfterSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ElementsAfterSelf()\n  nameWithType: XNode.ElementsAfterSelf()\n  fullName: XNode.ElementsAfterSelf()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of the sibling elements after this node, in document order.\n  remarks: \"This method only includes siblings in the returned collection. It does not include descendants.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example creates an element with some complex content. It then uses this method to retrieve the nodes in document order.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child = xmlTree.Element(\\\"Child3\\\");  \\nIEnumerable<XElement> elements = child.ElementsAfterSelf();  \\nforeach (XElement el in elements)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _  \\n        <Root>Text content.  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>More text content.  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child As XElement = xmlTree.<Child3>(0)  \\nDim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf()  \\nFor Each el In elements  \\n    Console.WriteLine(el.Name)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Child4  \\nChild5  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements after this node, in document order.\n  overload: System.Xml.Linq.XNode.ElementsAfterSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  id: ElementsAfterSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ElementsAfterSelf(XName)\n  nameWithType: XNode.ElementsAfterSelf(XName)\n  fullName: XNode.ElementsAfterSelf(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  remarks: \"This method only includes siblings in the returned collection. It does not include descendants.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example creates an element with some complex content. It then uses this method to retrieve the sibling elements, in document order.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child = xmlTree.Element(\\\"Child3\\\");  \\nIEnumerable<XElement> elements = child.ElementsAfterSelf(\\\"Child4\\\");  \\nforeach (XElement el in elements)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>Text content.  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>More text content.  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child As XElement = xmlTree.<Child3>(0)  \\nDim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf(\\\"Child4\\\")  \\n  \\nFor Each el In elements  \\n    Console.WriteLine(el.Name)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild4  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to match.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  overload: System.Xml.Linq.XNode.ElementsAfterSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf\n  commentId: M:System.Xml.Linq.XNode.ElementsBeforeSelf\n  id: ElementsBeforeSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ElementsBeforeSelf()\n  nameWithType: XNode.ElementsBeforeSelf()\n  fullName: XNode.ElementsBeforeSelf()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of the sibling elements before this node, in document order.\n  remarks: \"This method only includes siblings in the returned collection. It does not include descendants.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example uses this axis method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child = xmlTree.Element(\\\"Child3\\\");  \\nIEnumerable<XElement> elements = child.ElementsBeforeSelf();  \\nforeach (XElement el in elements)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>Text content.  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>More text content.  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child As XElement = xmlTree.<Child3>(0)  \\nDim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf()  \\n  \\nFor Each el In elements  \\n    Console.WriteLine(el.Name)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Child1  \\nChild2  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements before this node, in document order.\n  overload: System.Xml.Linq.XNode.ElementsBeforeSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  id: ElementsBeforeSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ElementsBeforeSelf(XName)\n  nameWithType: XNode.ElementsBeforeSelf(XName)\n  fullName: XNode.ElementsBeforeSelf(XName)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  remarks: \"This method only includes siblings in the returned collection. It does not include descendants.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example uses this method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child = xmlTree.Element(\\\"Child3\\\");  \\nIEnumerable<XElement> elements = child.ElementsBeforeSelf(\\\"Child2\\\");  \\nforeach (XElement el in elements)  \\n    Console.WriteLine(el.Name);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>Text content.  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>More text content.  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child As XElement = xmlTree.<Child3>(0)  \\nDim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf(\\\"Child2\\\")  \\n  \\nFor Each el In elements  \\n    Console.WriteLine(el.Name)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild2  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf (System.Xml.Linq.XName name);\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: The <xref href=\"System.Xml.Linq.XName\"></xref> to match.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XElement\"></xref> of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\"></xref> are included in the collection.\n  overload: System.Xml.Linq.XNode.ElementsBeforeSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.EqualityComparer\n  commentId: P:System.Xml.Linq.XNode.EqualityComparer\n  id: EqualityComparer\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: EqualityComparer\n  nameWithType: XNode.EqualityComparer\n  fullName: XNode.EqualityComparer\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets a comparer that can compare two nodes for value equality.\n  remarks: ''\n  example:\n  - \"The following example uses this property to retrieve an <xref:System.Xml.Linq.XNodeEqualityComparer>, which implements the <xref:System.Collections.IEqualityComparer?displayProperty=fullName> and <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=fullName> interfaces. It creates a dictionary that uses this property.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5)  \\n);  \\n  \\nDictionary<XNode, string> nodeDictionary = new Dictionary<XNode, string>(XNode.EqualityComparer);  \\nnodeDictionary.Add(xmlTree.Element(\\\"Child5\\\"), \\\"Child 5 Information\\\");  \\nnodeDictionary.Add(xmlTree.Element(\\\"Child3\\\"), \\\"Child 3 Information\\\");  \\nnodeDictionary.Add(xmlTree.Element(\\\"Child1\\\"), \\\"Child 1 Information\\\");  \\n  \\nstring str = nodeDictionary[xmlTree.Element(\\\"Child3\\\")];  \\nConsole.WriteLine(str);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n        </Root>  \\n  \\nDim nodeDictionary As Dictionary(Of XNode, String) = New Dictionary(Of XNode, String)(XNode.EqualityComparer)  \\nnodeDictionary.Add(xmlTree.Element(\\\"Child5\\\"), \\\"Child 5 Information\\\")  \\nnodeDictionary.Add(xmlTree.Element(\\\"Child3\\\"), \\\"Child 3 Information\\\")  \\nnodeDictionary.Add(xmlTree.Element(\\\"Child1\\\"), \\\"Child 1 Information\\\")  \\n  \\nDim str As String = nodeDictionary(xmlTree.Element(\\\"Child3\\\"))  \\nConsole.WriteLine(str)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild 3 Information  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XNodeEqualityComparer EqualityComparer { get; }\n    return:\n      type: System.Xml.Linq.XNodeEqualityComparer\n      description: A <xref href=\"System.Xml.Linq.XNodeEqualityComparer\"></xref> that can compare two nodes for value equality.\n  overload: System.Xml.Linq.XNode.EqualityComparer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  id: IsAfter(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: IsAfter(XNode)\n  nameWithType: XNode.IsAfter(XNode)\n  fullName: XNode.IsAfter(XNode)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Determines if the current node appears after a specified node in terms of document order.\n  remarks: The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.\n  example:\n  - \"The following example uses this method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child3 = xmlTree.Element(\\\"Child3\\\");  \\nXElement child5 = xmlTree.Element(\\\"Child5\\\");  \\nif (child5.IsAfter(child3))  \\n    Console.WriteLine(\\\"Child5 is after Child3\\\");  \\nelse  \\n    Console.WriteLine(\\\"Child5 is not after Child3\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>Text content.  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>More text content.  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child3 As XElement = xmlTree.<Child3>(0)  \\nDim child5 As XElement = xmlTree.<Child5>(0)  \\nIf (child5.IsAfter(child3)) Then  \\n    Console.WriteLine(\\\"Child5 is after Child3\\\")  \\nElse  \\n    Console.WriteLine(\\\"Child5 is not after Child3\\\")  \\nEnd If  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild5 is after Child3  \\n```\"\n  syntax:\n    content: public bool IsAfter (System.Xml.Linq.XNode node);\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: The <xref href=\"System.Xml.Linq.XNode\"></xref> to compare for document order.\n    return:\n      type: System.Boolean\n      description: '`true` if this node appears after the specified node; otherwise `false`.'\n  overload: System.Xml.Linq.XNode.IsAfter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  id: IsBefore(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: IsBefore(XNode)\n  nameWithType: XNode.IsBefore(XNode)\n  fullName: XNode.IsBefore(XNode)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Determines if the current node appears before a specified node in terms of document order.\n  remarks: The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent. Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared. Therefore, using this method might affect your performance.\n  example:\n  - \"The following example uses this method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child3 = xmlTree.Element(\\\"Child3\\\");  \\nXElement child5 = xmlTree.Element(\\\"Child5\\\");  \\nif (child5.IsBefore(child3))  \\n    Console.WriteLine(\\\"Child5 is before Child3\\\");  \\nelse  \\n    Console.WriteLine(\\\"Child5 is not before Child3\\\");  \\n```  \\n  \\n [vb]  \\n  \\n```  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>Text content.  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>More text content.  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child3 As XElement = xmlTree.<Child3>(0)  \\nDim child5 As XElement = xmlTree.<Child5>(0)  \\nIf (child5.IsBefore(child3)) Then  \\n    Console.WriteLine(\\\"Child5 is before Child3\\\")  \\nElse  \\n    Console.WriteLine(\\\"Child5 is not before Child3\\\")  \\nEnd If  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\nChild5 is not before Child3  \\n```\"\n  syntax:\n    content: public bool IsBefore (System.Xml.Linq.XNode node);\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: The <xref href=\"System.Xml.Linq.XNode\"></xref> to compare for document order.\n    return:\n      type: System.Boolean\n      description: '`true` if this node appears before the specified node; otherwise `false`.'\n  overload: System.Xml.Linq.XNode.IsBefore*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.NextNode\n  commentId: P:System.Xml.Linq.XNode.NextNode\n  id: NextNode\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: NextNode\n  nameWithType: XNode.NextNode\n  fullName: XNode.NextNode\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the next sibling node of this node.\n  remarks: If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no next node, this property returns `null`.\n  example:\n  - \"The following example uses this property to loop through nodes.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XText(\\\"Some Text\\\"),  \\n    new XElement(\\\"Child2\\\",  \\n        2,  \\n        new XElement(\\\"GrandChild\\\", \\\"GrandChild Content\\\")  \\n    ),  \\n    new XComment(\\\"a comment\\\"),  \\n    new XElement(\\\"Child3\\\")  \\n);  \\nXNode node = xmlTree.Element(\\\"Child2\\\");  \\ndo {  \\n    StringBuilder sb = new StringBuilder();  \\n    sb.Append(String.Format(\\\"NodeType: {0}\\\", node.NodeType.ToString().PadRight(10)));  \\n    switch (node.NodeType)  \\n    {  \\n        case XmlNodeType.Text:  \\n            sb.Append((node as XText).Value);  \\n            break;  \\n        case XmlNodeType.Element:  \\n            sb.Append((node as XElement).Name);  \\n            break;  \\n        case XmlNodeType.Comment:  \\n            sb.Append((node as XComment).Value);  \\n            break;  \\n    }  \\n    Console.WriteLine(sb.ToString());  \\n}  \\nwhile ((node = node.NextNode) != null);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>Some Text  \\n            <Child2>2  \\n                <GrandChild>GrandChild Content</GrandChild>  \\n            </Child2>  \\n            <!--a comment-->  \\n            <Child3>3</Child3>  \\n        </Root>  \\n  \\nDim node As XNode = xmlTree.Element(\\\"Child2\\\")  \\nDo  \\n    Dim sb As StringBuilder = New StringBuilder()  \\n    sb.Append(String.Format(\\\"NodeType: {0}\\\", node.NodeType.ToString().PadRight(10)))  \\n    Select Case node.NodeType  \\n        Case XmlNodeType.Text  \\n            sb.Append(DirectCast(node, XText).Value)  \\n        Case XmlNodeType.Element  \\n            sb.Append(DirectCast(node, XElement).Name)  \\n        Case XmlNodeType.Comment  \\n            sb.Append(DirectCast(node, XComment).Value)  \\n    End Select  \\n    Console.WriteLine(sb.ToString())  \\n  \\n    node = node.NextNode  \\nLoop While (Not (node Is Nothing))  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                NodeType: Element   Child2  \\nNodeType: Comment   a comment  \\nNodeType: Element   Child3  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XNode NextNode { get; }\n    return:\n      type: System.Xml.Linq.XNode\n      description: The <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the next sibling node.\n  overload: System.Xml.Linq.XNode.NextNode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.NodesAfterSelf\n  commentId: M:System.Xml.Linq.XNode.NodesAfterSelf\n  id: NodesAfterSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: NodesAfterSelf()\n  nameWithType: XNode.NodesAfterSelf()\n  fullName: XNode.NodesAfterSelf()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of the sibling nodes after this node, in document order.\n  remarks: \"This method only includes siblings in the returned collection. It does not include descendants.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example creates an XML tree, and then queries the tree using this axis method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"child3\\\", \\\"child3 content\\\")  \\n);  \\nXElement child = xmlTree.Element(\\\"Child2\\\");  \\nIEnumerable<XNode> nodes =  \\n    from node in child.NodesAfterSelf()  \\n    select node;  \\nforeach (XNode node in nodes)  \\n{  \\n    Console.WriteLine(\\\"Node type: {0}  {1}\\\",  \\n        node.NodeType,  \\n        node.NodeType == XmlNodeType.Text ? (node as XText).Value : \\\"\\\");  \\n}  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = New XElement(\\\"Root\\\", _New XText(\\\"Text content.\\\"), _  \\n    New XElement(\\\"Child1\\\", \\\"child1 content\\\"), _  \\n    New XElement(\\\"Child2\\\", \\\"child2 content\\\"), _  \\n    New XText(\\\"More text content.\\\"), _  \\n    New XElement(\\\"child3\\\", \\\"child3 content\\\") _  \\n)  \\n  \\nDim child As XElement = xmlTree.Element(\\\"Child2\\\")  \\nDim nodes As IEnumerable(Of XNode) = _  \\n    From node In child.NodesAfterSelf() _  \\n    Select node  \\nFor Each node As XNode In nodes  \\n    Dim s As String = \\\"\\\"  \\n    If node.NodeType = XmlNodeType.Text Then  \\n        s = DirectCast(node, XText).Value  \\n    End If  \\n    Console.WriteLine(\\\"Node type: {0}  {1}\\\", node.NodeType, s)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Node type: Text  More text content.  \\nNode type: Element  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesAfterSelf ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> of the sibling nodes after this node, in document order.\n  overload: System.Xml.Linq.XNode.NodesAfterSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.NodesBeforeSelf\n  commentId: M:System.Xml.Linq.XNode.NodesBeforeSelf\n  id: NodesBeforeSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: NodesBeforeSelf()\n  nameWithType: XNode.NodesBeforeSelf()\n  fullName: XNode.NodesBeforeSelf()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns a collection of the sibling nodes before this node, in document order.\n  remarks: \"This method only includes siblings in the returned collection. It does not include descendants.  \\n  \\n This method uses deferred execution.\"\n  example:\n  - \"The following example creates an XML tree, and then queries the tree using this axis method.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XText(\\\"Text content.\\\"),  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XText(\\\"More text content.\\\"),  \\n    new XElement(\\\"child3\\\", \\\"child3 content\\\")  \\n);  \\nXElement child = xmlTree.Element(\\\"Child2\\\");  \\nIEnumerable<XNode> nodes =  \\n    from node in child.NodesBeforeSelf()  \\n    select node;  \\nforeach (XNode node in nodes)  \\n    Console.WriteLine(\\\"Node type: {0}  {1}\\\",  \\n        node.NodeType,  \\n        node.NodeType == XmlNodeType.Text ? (node as XText).Value : \\\"\\\");  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = New XElement(\\\"Root\\\", _  \\n    New XText(\\\"Text content.\\\"), _  \\n    New XElement(\\\"Child1\\\", \\\"child1 content\\\"), _  \\n    New XElement(\\\"Child2\\\", \\\"child2 content\\\"), _  \\n    New XText(\\\"More text content.\\\"), _  \\n    New XElement(\\\"child3\\\", \\\"child3 content\\\") _  \\n)  \\n  \\nDim child As XElement = xmlTree.Element(\\\"Child2\\\")  \\nDim nodes As IEnumerable(Of XNode) = _  \\n    From node In child.NodesBeforeSelf() _  \\n    Select node  \\nFor Each node As XNode In nodes  \\n    Dim s As String = \\\"\\\"  \\n    If node.NodeType = XmlNodeType.Text Then  \\n        s = DirectCast(node, XText).Value  \\n    End If  \\n    Console.WriteLine(\\\"Node type: {0}  {1}\\\", node.NodeType, s)  \\nNext  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                Node type: Text  Text content.  \\nNode type: Element  \\n```\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesBeforeSelf ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> of <xref href=\"System.Xml.Linq.XNode\"></xref> of the sibling nodes before this node, in document order.\n  overload: System.Xml.Linq.XNode.NodesBeforeSelf*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.PreviousNode\n  commentId: P:System.Xml.Linq.XNode.PreviousNode\n  id: PreviousNode\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: PreviousNode\n  nameWithType: XNode.PreviousNode\n  fullName: XNode.PreviousNode\n  type: Property\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Gets the previous sibling node of this node.\n  remarks: \"If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no previous node, this property returns `null`.  \\n  \\n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container. Therefore, using this property might affect your performance.\"\n  example:\n  - \"The following example uses this property to loop through nodes.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XText(\\\"Some Text\\\"),  \\n    new XElement(\\\"Child2\\\",  \\n        2,  \\n        new XElement(\\\"GrandChild\\\", \\\"GrandChild Content\\\")  \\n    ),  \\n    new XComment(\\\"a comment\\\"),  \\n    new XElement(\\\"Child3\\\")  \\n);  \\nXNode node = xmlTree.Element(\\\"Child2\\\");  \\ndo {  \\n    StringBuilder sb = new StringBuilder();  \\n    sb.Append(String.Format(\\\"NodeType: {0}\\\", node.NodeType.ToString().PadRight(10)));  \\n    switch (node.NodeType)  \\n    {  \\n        case XmlNodeType.Text:  \\n            sb.Append((node as XText).Value);  \\n            break;  \\n        case XmlNodeType.Element:  \\n            sb.Append((node as XElement).Name);  \\n            break;  \\n        case XmlNodeType.Comment:  \\n            sb.Append((node as XComment).Value);  \\n            break;  \\n    }  \\n    Console.WriteLine(sb.ToString());  \\n}  \\nwhile ((node = node.PreviousNode) != null);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _  \\n    <Root>  \\n        <Child1>1</Child1>Some Text<Child2>2  \\n            <GrandChild>GrandChild Content</GrandChild>  \\n        </Child2>  \\n        <!--a comment-->  \\n        <Child3>3</Child3>  \\n    </Root>  \\n  \\nDim node As XNode = xmlTree.Element(\\\"Child2\\\")  \\nDo  \\n    Dim sb As StringBuilder = New StringBuilder()  \\n    sb.Append(String.Format(\\\"NodeType: {0}\\\", node.NodeType.ToString().PadRight(10)))  \\n    Select Case node.NodeType  \\n        Case XmlNodeType.Text  \\n            sb.Append(DirectCast(node, XText).Value)  \\n        Case XmlNodeType.Element  \\n            sb.Append(DirectCast(node, XElement).Name)  \\n        Case XmlNodeType.Comment  \\n            sb.Append(DirectCast(node, XComment).Value)  \\n    End Select  \\n    Console.WriteLine(sb.ToString())  \\n  \\n    node = node.PreviousNode  \\nLoop While (Not (node Is Nothing))  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                NodeType: Element   Child2  \\nNodeType: Text      Some Text  \\nNodeType: Element   Child1  \\n```\"\n  syntax:\n    content: public System.Xml.Linq.XNode PreviousNode { get; }\n    return:\n      type: System.Xml.Linq.XNode\n      description: The <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the previous sibling node.\n  overload: System.Xml.Linq.XNode.PreviousNode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  commentId: M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  id: ReadFrom(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ReadFrom(XmlReader)\n  nameWithType: XNode.ReadFrom(XmlReader)\n  fullName: XNode.ReadFrom(XmlReader)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Creates an <xref href=\"System.Xml.Linq.XNode\"></xref> from an <xref href=\"System.Xml.XmlReader\"></xref>.\n  remarks: \"You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader. This method enables you to process arbitrarily large XML files with a very small memory footprint.  \\n  \\n The reader that you pass to this method might throw exceptions. <xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>. In particular, your code should be prepared to handle <xref:System.Xml.XmlException>.  \\n  \\n For an example of how to stream a more complex document, see [How to: Stream XML Fragments with Access to Header Information](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).  \\n  \\n Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence. If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.  \\n  \\n For an example of using [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to transform extremely large XML documents while maintaining a small memory footprint, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).\"\n  example:\n  - \"This example uses the following XML file, named Source.xml:  \\n  \\n```xml  \\n  \\n                <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>   \\n<Root>  \\n  <Child Key=\\\"01\\\">  \\n    <GrandChild>aaa</GrandChild>  \\n  </Child>  \\n  <Child Key=\\\"02\\\">  \\n    <GrandChild>bbb</GrandChild>  \\n  </Child>  \\n  <Child Key=\\\"03\\\">  \\n    <GrandChild>ccc</GrandChild>  \\n  </Child>  \\n</Root>  \\n```  \\n  \\n This example creates a custom axis method that uses <xref:System.Xml.Linq.XNode.ReadFrom%2A>. You can query the custom axis by using a LINQ query.  \\n  \\n> [!NOTE]\\n>  The following example uses the yield return construct of C#. Because there is no equivalent feature in [!INCLUDE[vb_orcas_long](~/includes/vb-orcas-long-md.md)], this example is provided only in C#.  \\n  \\n```csharp  \\n  \\n                class Program  \\n{  \\n    static IEnumerable<XElement> StreamRootChildDoc(string uri)  \\n    {  \\n        using (XmlReader reader = XmlReader.Create(uri))  \\n        {  \\n            reader.MoveToContent();  \\n            // Parse the file and display each of the nodes.  \\n            while (reader.Read())  \\n            {  \\n                switch (reader.NodeType)  \\n                {  \\n                    case XmlNodeType.Element:  \\n                        if (reader.Name == \\\"Child\\\")  \\n                        {  \\n                            XElement el = XElement.ReadFrom(reader) as XElement;  \\n                            if (el != null)  \\n                                yield return el;  \\n                        }  \\n                        break;  \\n                }  \\n            }  \\n        }  \\n    }  \\n  \\n    static void Main(string[] args)  \\n    {  \\n        IEnumerable<string> grandChildData =  \\n            from el in StreamRootChildDoc(\\\"Source.xml\\\")  \\n            where (int)el.Attribute(\\\"Key\\\") > 1  \\n            select (string)el.Element(\\\"GrandChild\\\");  \\n  \\n        foreach (string str in grandChildData)  \\n            Console.WriteLine(str);  \\n    }  \\n}  \\n```  \\n  \\n This example produces the following output.  \\n  \\n```  \\n  \\n                bbb  \\nccc  \\n```\"\n  syntax:\n    content: public static System.Xml.Linq.XNode ReadFrom (System.Xml.XmlReader reader);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: An <xref href=\"System.Xml.XmlReader\"></xref> positioned at the node to read into this <xref href=\"System.Xml.Linq.XNode\"></xref>.\n    return:\n      type: System.Xml.Linq.XNode\n      description: An <xref href=\"System.Xml.Linq.XNode\"></xref> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<xref href=\"System.Xml.Linq.XObject.NodeType\"></xref>) of the first node encountered in the reader.\n  overload: System.Xml.Linq.XNode.ReadFrom*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Xml.XmlReader\"></xref> is not positioned on a recognized node type.\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: The underlying <xref href=\"System.Xml.XmlReader\"></xref> throws an exception.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  id: ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ReadFromAsync(XmlReader, CancellationToken)\n  nameWithType: XNode.ReadFromAsync(XmlReader, CancellationToken)\n  fullName: XNode.ReadFromAsync(XmlReader, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Xml.Linq.XNode> ReadFromAsync (System.Xml.XmlReader reader, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task{System.Xml.Linq.XNode}\n      description: ''\n  overload: System.Xml.Linq.XNode.ReadFromAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.Remove\n  commentId: M:System.Xml.Linq.XNode.Remove\n  id: Remove\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: Remove()\n  nameWithType: XNode.Remove()\n  fullName: XNode.Remove()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Removes this node from its parent.\n  remarks: \"In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set. In practical terms, this means that you should not iterate over a set of nodes and remove them. Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> by using the <xref:System.Linq.Enumerable.ToList%2A> extension method. Then, you can iterate over the list to remove the nodes. For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).  \\n  \\n Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=fullName> method. This method copies the nodes to a list, and then iterates over the list to remove the nodes.  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.  \\n  \\n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.\"\n  example:\n  - \"The following example removes a node from its parent.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child3 = xmlTree.Element(\\\"Child3\\\");  \\nchild3.Remove();  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child3 As XElement = xmlTree.<Child3>(0)  \\nchild3.Remove()  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child1>child1 content</Child1>  \\n  <Child2>child2 content</Child2>  \\n  <Child4>child4 content</Child4>  \\n  <Child5>child5 content</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void Remove ();\n    parameters: []\n  overload: System.Xml.Linq.XNode.Remove*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The parent is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  commentId: M:System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  id: ReplaceWith(System.Object)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ReplaceWith(Object)\n  nameWithType: XNode.ReplaceWith(Object)\n  fullName: XNode.ReplaceWith(Object)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Replaces this node with the specified content.\n  remarks: \"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.  \\n  \\n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.  \\n  \\n For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example uses this method to replace the contents of a node with different content.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", \\\"child1 content\\\"),  \\n    new XElement(\\\"Child2\\\", \\\"child2 content\\\"),  \\n    new XElement(\\\"Child3\\\", \\\"child3 content\\\"),  \\n    new XElement(\\\"Child4\\\", \\\"child4 content\\\"),  \\n    new XElement(\\\"Child5\\\", \\\"child5 content\\\")  \\n);  \\nXElement child3 = xmlTree.Element(\\\"Child3\\\");  \\nchild3.ReplaceWith(  \\n    new XElement(\\\"NewChild\\\", \\\"new content\\\")  \\n);  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>child1 content</Child1>  \\n            <Child2>child2 content</Child2>  \\n            <Child3>child3 content</Child3>  \\n            <Child4>child4 content</Child4>  \\n            <Child5>child5 content</Child5>  \\n        </Root>  \\n  \\nDim child3 As XElement = xmlTree.<Child3>(0)  \\nchild3.ReplaceWith(<NewChild>new content</NewChild>)  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child1>child1 content</Child1>  \\n  <Child2>child2 content</Child2>  \\n  <NewChild>new content</NewChild>  \\n  <Child4>child4 content</Child4>  \\n  <Child5>child5 content</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void ReplaceWith (object content);\n    parameters:\n    - id: content\n      type: System.Object\n      description: Content that replaces this node.\n  overload: System.Xml.Linq.XNode.ReplaceWith*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  commentId: M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  id: ReplaceWith(System.Object[])\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ReplaceWith(Object[])\n  nameWithType: XNode.ReplaceWith(Object[])\n  fullName: XNode.ReplaceWith(Object[])\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Replaces this node with the specified content.\n  remarks: \"This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.  \\n  \\n The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects. This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container. Therefore, using this method might affect your performance.  \\n  \\n For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).  \\n  \\n This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.\"\n  example:\n  - \"The following example shows using the results of a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] query as the input to this method.  \\n  \\n```csharp  \\n  \\n                XElement srcTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Element1\\\", 1),  \\n    new XElement(\\\"Element2\\\", 2),  \\n    new XElement(\\\"Element3\\\", 3),  \\n    new XElement(\\\"Element4\\\", 4),  \\n    new XElement(\\\"Element5\\\", 5)  \\n);  \\nXElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1),  \\n    new XElement(\\\"Child2\\\", 2),  \\n    new XElement(\\\"Child3\\\", 3),  \\n    new XElement(\\\"Child4\\\", 4),  \\n    new XElement(\\\"Child5\\\", 5)  \\n);  \\nXElement child3 = xmlTree.Element(\\\"Child3\\\");  \\nchild3.ReplaceWith(  \\n    from el in srcTree.Elements()  \\n    where (int)el > 3  \\n    select el  \\n);  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim srcTree As XElement = _   \\n        <Root>  \\n            <Element1>1</Element1>  \\n            <Element2>2</Element2>  \\n            <Element3>3</Element3>  \\n            <Element4>4</Element4>  \\n            <Element5>5</Element5>  \\n        </Root>  \\n  \\nDim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n            <Child2>2</Child2>  \\n            <Child3>3</Child3>  \\n            <Child4>4</Child4>  \\n            <Child5>5</Child5>  \\n        </Root>  \\n  \\nDim child3 As XElement = xmlTree.<Child3>(0)  \\nchild3.ReplaceWith( _  \\n    From el In srcTree.Elements() _  \\n    Where (CInt(el) > 3) _  \\n    Select el)  \\n  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child1>1</Child1>  \\n  <Child2>2</Child2>  \\n  <Element4>4</Element4>  \\n  <Element5>5</Element5>  \\n  <Child4>4</Child4>  \\n  <Child5>5</Child5>  \\n</Root>  \\n```\"\n  syntax:\n    content: public void ReplaceWith (object[] content);\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: A parameter list of the new content.\n  overload: System.Xml.Linq.XNode.ReplaceWith*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ToString\n  commentId: M:System.Xml.Linq.XNode.ToString\n  id: ToString\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: XNode.ToString()\n  fullName: XNode.ToString()\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the indented XML for this node.\n  remarks: ''\n  example:\n  - \"The following example uses this method to retrieve indented XML.  \\n  \\n```csharp  \\n  \\n                XElement xmlTree = new XElement(\\\"Root\\\",  \\n    new XElement(\\\"Child1\\\", 1)  \\n);  \\nConsole.WriteLine(xmlTree);  \\n```  \\n  \\n```vb  \\n  \\n                Dim xmlTree As XElement = _   \\n        <Root>  \\n            <Child1>1</Child1>  \\n        </Root>  \\n  \\nConsole.WriteLine(xmlTree)  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child1>1</Child1>  \\n</Root>  \\n```\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the indented XML.\n  overload: System.Xml.Linq.XNode.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  id: ToString(System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: ToString(SaveOptions)\n  nameWithType: XNode.ToString(SaveOptions)\n  fullName: XNode.ToString(SaveOptions)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Returns the XML for this node, optionally disabling formatting.\n  remarks: ''\n  example:\n  - \"The following example uses this method to retrieve unformatted and formatted XML.  \\n  \\n```csharp  \\n  \\n                XElement root = XElement.Parse(\\\"<Root><Child/></Root>\\\");  \\nConsole.WriteLine(root.ToString(SaveOptions.DisableFormatting));  \\nConsole.WriteLine(\\\"---\\\");  \\nConsole.WriteLine(root.ToString(SaveOptions.None));  \\n```  \\n  \\n```vb  \\n  \\n                Dim root As XElement = <Root>  \\n                           <Child/>  \\n                       </Root>  \\nConsole.WriteLine(root.ToString(SaveOptions.DisableFormatting))  \\nConsole.WriteLine(\\\"---\\\")  \\nConsole.WriteLine(root.ToString(SaveOptions.None))  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```  \\n  \\n                <Root><Child /></Root>  \\n---  \\n<Root>  \\n  <Child />  \\n</Root>  \\n```\"\n  syntax:\n    content: public string ToString (System.Xml.Linq.SaveOptions options);\n    parameters:\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: A <xref href=\"System.Xml.Linq.SaveOptions\"></xref> that specifies formatting behavior.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the XML.\n  overload: System.Xml.Linq.XNode.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: WriteTo(XmlWriter)\n  nameWithType: XNode.WriteTo(XmlWriter)\n  fullName: XNode.WriteTo(XmlWriter)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  - System.Xml.Linq\n  - netstandard\n  namespace: System.Xml.Linq\n  summary: Writes this node to an <xref href=\"System.Xml.XmlWriter\"></xref>.\n  remarks: 'You can use this method to write code that does a streaming transform of a very large document. For more information, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).'\n  example:\n  - \"The following example creates an <xref:System.Xml.XmlWriter> that writes to a <xref:System.Text.StringBuilder>. It then uses this method to write two XML trees to the writer.  \\n  \\n```csharp  \\n  \\n                StringBuilder sb = new StringBuilder();  \\nXmlWriterSettings xws = new XmlWriterSettings();  \\nxws.OmitXmlDeclaration = true;  \\nxws.Indent = true;  \\n  \\nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \\n    xw.WriteStartElement(\\\"Root\\\");  \\n    XElement child1 = new XElement(\\\"Child\\\",  \\n        new XElement(\\\"GrandChild\\\", \\\"some content\\\")  \\n    );  \\n    child1.WriteTo(xw);  \\n    XElement child2 = new XElement(\\\"AnotherChild\\\",  \\n        new XElement(\\\"GrandChild\\\", \\\"different content\\\")  \\n    );  \\n    child2.WriteTo(xw);  \\n    xw.WriteEndElement();  \\n}  \\nConsole.WriteLine(sb.ToString());  \\n```  \\n  \\n```vb  \\n  \\n                Dim sb As StringBuilder = New StringBuilder()  \\nDim xws As XmlWriterSettings = New XmlWriterSettings()  \\nxws.OmitXmlDeclaration = True  \\nxws.Indent = True  \\n  \\nUsing xw = XmlWriter.Create(sb, xws)  \\n    xw.WriteStartElement(\\\"Root\\\")  \\n    Dim child1 As XElement = <Child>  \\n                                 <GrandChild>some content</GrandChild>  \\n                             </Child>  \\n    child1.WriteTo(xw)  \\n    Dim child2 As XElement = <AnotherChild>  \\n                                 <GrandChild>different content</GrandChild>  \\n                             </AnotherChild>  \\n    child2.WriteTo(xw)  \\n    xw.WriteEndElement()  \\nEnd Using  \\n  \\nConsole.WriteLine(sb.ToString())  \\n```  \\n  \\n This example produces the following output:  \\n  \\n```xml  \\n  \\n                <Root>  \\n  <Child>  \\n    <GrandChild>some content</GrandChild>  \\n  </Child>  \\n  <AnotherChild>  \\n    <GrandChild>different content</GrandChild>  \\n  </AnotherChild>  \\n</Root>  \\n```\"\n  syntax:\n    content: public abstract void WriteTo (System.Xml.XmlWriter writer);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: An <xref href=\"System.Xml.XmlWriter\"></xref> into which this method will write.\n  overload: System.Xml.Linq.XNode.WriteTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  commentId: M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  id: WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  name: WriteToAsync(XmlWriter, CancellationToken)\n  nameWithType: XNode.WriteToAsync(XmlWriter, CancellationToken)\n  fullName: XNode.WriteToAsync(XmlWriter, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  syntax:\n    content: public abstract System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: ''\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: ''\n    return:\n      type: System.Threading.Tasks.Task\n      description: ''\n  overload: System.Xml.Linq.XNode.WriteToAsync*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\nreferences:\n- uid: System.Xml.Linq.XObject\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XObject\n  nameWithType: XObject\n  fullName: System.Xml.Linq.XObject\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Xml.XmlException\n  parent: System.Xml\n  isExternal: false\n  name: XmlException\n  nameWithType: XmlException\n  fullName: System.Xml.XmlException\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddAfterSelf(Object)\n  nameWithType: XNode.AddAfterSelf(Object)\n  fullName: XNode.AddAfterSelf(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddAfterSelf(Object[])\n  nameWithType: XNode.AddAfterSelf(Object[])\n  fullName: XNode.AddAfterSelf(Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddBeforeSelf(Object)\n  nameWithType: XNode.AddBeforeSelf(Object)\n  fullName: XNode.AddBeforeSelf(Object)\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddBeforeSelf(Object[])\n  nameWithType: XNode.AddBeforeSelf(Object[])\n  fullName: XNode.AddBeforeSelf(Object[])\n- uid: System.Xml.Linq.XNode.Ancestors\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Ancestors()\n  nameWithType: XNode.Ancestors()\n  fullName: XNode.Ancestors()\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Xml.Linq.XElement\n  name: XElement\n  nameWithType: XElement\n  fullName: System.Xml.Linq.XElement\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<XElement>\n  nameWithType: IEnumerable<XElement>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    nameWithType: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Ancestors(XName)\n  nameWithType: XNode.Ancestors(XName)\n  fullName: XNode.Ancestors(XName)\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  nameWithType: XName\n  fullName: System.Xml.Linq.XName\n- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CompareDocumentOrder(XNode, XNode)\n  nameWithType: XNode.CompareDocumentOrder(XNode, XNode)\n  fullName: XNode.CompareDocumentOrder(XNode, XNode)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Xml.Linq.XNode\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNode\n  nameWithType: XNode\n  fullName: System.Xml.Linq.XNode\n- uid: System.Xml.Linq.XNode.CreateReader\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CreateReader()\n  nameWithType: XNode.CreateReader()\n  fullName: XNode.CreateReader()\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  nameWithType: XmlReader\n  fullName: System.Xml.XmlReader\n- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CreateReader(ReaderOptions)\n  nameWithType: XNode.CreateReader(ReaderOptions)\n  fullName: XNode.CreateReader(ReaderOptions)\n- uid: System.Xml.Linq.ReaderOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: ReaderOptions\n  nameWithType: ReaderOptions\n  fullName: System.Xml.Linq.ReaderOptions\n- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DeepEquals(XNode, XNode)\n  nameWithType: XNode.DeepEquals(XNode, XNode)\n  fullName: XNode.DeepEquals(XNode, XNode)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Xml.Linq.XNode.DocumentOrderComparer\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DocumentOrderComparer\n  nameWithType: XNode.DocumentOrderComparer\n  fullName: XNode.DocumentOrderComparer\n- uid: System.Xml.Linq.XNodeDocumentOrderComparer\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNodeDocumentOrderComparer\n  nameWithType: XNodeDocumentOrderComparer\n  fullName: System.Xml.Linq.XNodeDocumentOrderComparer\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsAfterSelf()\n  nameWithType: XNode.ElementsAfterSelf()\n  fullName: XNode.ElementsAfterSelf()\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsAfterSelf(XName)\n  nameWithType: XNode.ElementsAfterSelf(XName)\n  fullName: XNode.ElementsAfterSelf(XName)\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsBeforeSelf()\n  nameWithType: XNode.ElementsBeforeSelf()\n  fullName: XNode.ElementsBeforeSelf()\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsBeforeSelf(XName)\n  nameWithType: XNode.ElementsBeforeSelf(XName)\n  fullName: XNode.ElementsBeforeSelf(XName)\n- uid: System.Xml.Linq.XNode.EqualityComparer\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: EqualityComparer\n  nameWithType: XNode.EqualityComparer\n  fullName: XNode.EqualityComparer\n- uid: System.Xml.Linq.XNodeEqualityComparer\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNodeEqualityComparer\n  nameWithType: XNodeEqualityComparer\n  fullName: System.Xml.Linq.XNodeEqualityComparer\n- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsAfter(XNode)\n  nameWithType: XNode.IsAfter(XNode)\n  fullName: XNode.IsAfter(XNode)\n- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsBefore(XNode)\n  nameWithType: XNode.IsBefore(XNode)\n  fullName: XNode.IsBefore(XNode)\n- uid: System.Xml.Linq.XNode.NextNode\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NextNode\n  nameWithType: XNode.NextNode\n  fullName: XNode.NextNode\n- uid: System.Xml.Linq.XNode.NodesAfterSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesAfterSelf()\n  nameWithType: XNode.NodesAfterSelf()\n  fullName: XNode.NodesAfterSelf()\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<XNode>\n  nameWithType: IEnumerable<XNode>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    nameWithType: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Xml.Linq.XNode.NodesBeforeSelf\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesBeforeSelf()\n  nameWithType: XNode.NodesBeforeSelf()\n  fullName: XNode.NodesBeforeSelf()\n- uid: System.Xml.Linq.XNode.PreviousNode\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: PreviousNode\n  nameWithType: XNode.PreviousNode\n  fullName: XNode.PreviousNode\n- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFrom(XmlReader)\n  nameWithType: XNode.ReadFrom(XmlReader)\n  fullName: XNode.ReadFrom(XmlReader)\n- uid: System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFromAsync(XmlReader, CancellationToken)\n  nameWithType: XNode.ReadFromAsync(XmlReader, CancellationToken)\n  fullName: XNode.ReadFromAsync(XmlReader, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Xml.Linq.XNode}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<XNode>\n  nameWithType: Task<XNode>\n  fullName: System.Threading.Tasks.Task<System.Xml.Linq.XNode>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    nameWithType: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Xml.Linq.XNode.Remove\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Remove()\n  nameWithType: XNode.Remove()\n  fullName: XNode.Remove()\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReplaceWith(Object)\n  nameWithType: XNode.ReplaceWith(Object)\n  fullName: XNode.ReplaceWith(Object)\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReplaceWith(Object[])\n  nameWithType: XNode.ReplaceWith(Object[])\n  fullName: XNode.ReplaceWith(Object[])\n- uid: System.Xml.Linq.XNode.ToString\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ToString()\n  nameWithType: XNode.ToString()\n  fullName: XNode.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ToString(SaveOptions)\n  nameWithType: XNode.ToString(SaveOptions)\n  fullName: XNode.ToString(SaveOptions)\n- uid: System.Xml.Linq.SaveOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: SaveOptions\n  nameWithType: SaveOptions\n  fullName: System.Xml.Linq.SaveOptions\n- uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: WriteTo(XmlWriter)\n  nameWithType: XNode.WriteTo(XmlWriter)\n  fullName: XNode.WriteTo(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  nameWithType: XmlWriter\n  fullName: System.Xml.XmlWriter\n- uid: System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: WriteToAsync(XmlWriter, CancellationToken)\n  nameWithType: XNode.WriteToAsync(XmlWriter, CancellationToken)\n  fullName: XNode.WriteToAsync(XmlWriter, CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Xml.Linq.XNode.AddAfterSelf*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddAfterSelf\n  nameWithType: XNode.AddAfterSelf\n  fullName: XNode.AddAfterSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.AddBeforeSelf*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: AddBeforeSelf\n  nameWithType: XNode.AddBeforeSelf\n  fullName: XNode.AddBeforeSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.Ancestors*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Ancestors\n  nameWithType: XNode.Ancestors\n  fullName: XNode.Ancestors\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsAfterSelf\n  nameWithType: XNode.ElementsAfterSelf\n  fullName: XNode.ElementsAfterSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ElementsBeforeSelf\n  nameWithType: XNode.ElementsBeforeSelf\n  fullName: XNode.ElementsBeforeSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.ReplaceWith*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReplaceWith\n  nameWithType: XNode.ReplaceWith\n  fullName: XNode.ReplaceWith\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.CompareDocumentOrder*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CompareDocumentOrder\n  nameWithType: XNode.CompareDocumentOrder\n  fullName: XNode.CompareDocumentOrder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.CreateReader*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: CreateReader\n  nameWithType: XNode.CreateReader\n  fullName: XNode.CreateReader\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.DeepEquals*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DeepEquals\n  nameWithType: XNode.DeepEquals\n  fullName: XNode.DeepEquals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.DocumentOrderComparer*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: DocumentOrderComparer\n  nameWithType: XNode.DocumentOrderComparer\n  fullName: XNode.DocumentOrderComparer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.EqualityComparer*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: EqualityComparer\n  nameWithType: XNode.EqualityComparer\n  fullName: XNode.EqualityComparer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.IsAfter*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsAfter\n  nameWithType: XNode.IsAfter\n  fullName: XNode.IsAfter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.IsBefore*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: IsBefore\n  nameWithType: XNode.IsBefore\n  fullName: XNode.IsBefore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.NextNode*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NextNode\n  nameWithType: XNode.NextNode\n  fullName: XNode.NextNode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.NodesAfterSelf*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesAfterSelf\n  nameWithType: XNode.NodesAfterSelf\n  fullName: XNode.NodesAfterSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.NodesBeforeSelf*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: NodesBeforeSelf\n  nameWithType: XNode.NodesBeforeSelf\n  fullName: XNode.NodesBeforeSelf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.PreviousNode*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: PreviousNode\n  nameWithType: XNode.PreviousNode\n  fullName: XNode.PreviousNode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.ReadFrom*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFrom\n  nameWithType: XNode.ReadFrom\n  fullName: XNode.ReadFrom\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.ReadFromAsync*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ReadFromAsync\n  nameWithType: XNode.ReadFromAsync\n  fullName: XNode.ReadFromAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.Remove*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: Remove\n  nameWithType: XNode.Remove\n  fullName: XNode.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.ToString*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: ToString\n  nameWithType: XNode.ToString\n  fullName: XNode.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.WriteTo*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: WriteTo\n  nameWithType: XNode.WriteTo\n  fullName: XNode.WriteTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Xml.Linq.XNode.WriteToAsync*\n  parent: System.Xml.Linq.XNode\n  isExternal: false\n  name: WriteToAsync\n  nameWithType: XNode.WriteToAsync\n  fullName: XNode.WriteToAsync\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml.Linq/XNode.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: AddAnnotation(Object)\n  nameWithType: XObject.AddAnnotation(Object)\n  fullName: XObject.AddAnnotation(Object)\n- uid: System.Xml.Linq.XObject.Annotation(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation(Type)\n  nameWithType: XObject.Annotation(Type)\n  fullName: XObject.Annotation(Type)\n- uid: System.Xml.Linq.XObject.Annotation``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation<T>()\n  nameWithType: XObject.Annotation<T>()\n  fullName: XObject.Annotation<T>()\n- uid: System.Xml.Linq.XObject.Annotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations(Type)\n  nameWithType: XObject.Annotations(Type)\n  fullName: XObject.Annotations(Type)\n- uid: System.Xml.Linq.XObject.Annotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations<T>()\n  nameWithType: XObject.Annotations<T>()\n  fullName: XObject.Annotations<T>()\n- uid: System.Xml.Linq.XObject.BaseUri\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: BaseUri\n  nameWithType: XObject.BaseUri\n  fullName: XObject.BaseUri\n- uid: System.Xml.Linq.XObject.Changed\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changed\n  nameWithType: XObject.Changed\n  fullName: XObject.Changed\n- uid: System.Xml.Linq.XObject.Changing\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changing\n  nameWithType: XObject.Changing\n  fullName: XObject.Changing\n- uid: System.Xml.Linq.XObject.Document\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Document\n  nameWithType: XObject.Document\n  fullName: XObject.Document\n- uid: System.Xml.Linq.XObject.NodeType\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: NodeType\n  nameWithType: XObject.NodeType\n  fullName: XObject.NodeType\n- uid: System.Xml.Linq.XObject.Parent\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Parent\n  nameWithType: XObject.Parent\n  fullName: XObject.Parent\n- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations(Type)\n  nameWithType: XObject.RemoveAnnotations(Type)\n  fullName: XObject.RemoveAnnotations(Type)\n- uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations<T>()\n  nameWithType: XObject.RemoveAnnotations<T>()\n  fullName: XObject.RemoveAnnotations<T>()\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.HasLineInfo()\n  nameWithType: XObject.IXmlLineInfo.HasLineInfo()\n  fullName: XObject.IXmlLineInfo.HasLineInfo()\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LineNumber\n  nameWithType: XObject.IXmlLineInfo.LineNumber\n  fullName: XObject.IXmlLineInfo.LineNumber\n- uid: System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: IXmlLineInfo.LinePosition\n  nameWithType: XObject.IXmlLineInfo.LinePosition\n  fullName: XObject.IXmlLineInfo.LinePosition\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: CreateNavigator(XNode)\n  nameWithType: Extensions.CreateNavigator(XNode)\n  fullName: Extensions.CreateNavigator(XNode)\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: CreateNavigator(XNode, XmlNameTable)\n  nameWithType: Extensions.CreateNavigator(XNode, XmlNameTable)\n  fullName: Extensions.CreateNavigator(XNode, XmlNameTable)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathEvaluate(XNode, String)\n  nameWithType: Extensions.XPathEvaluate(XNode, String)\n  fullName: Extensions.XPathEvaluate(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathEvaluate(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElement(XNode, String)\n  nameWithType: Extensions.XPathSelectElement(XNode, String)\n  fullName: Extensions.XPathSelectElement(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathSelectElement(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElements(XNode, String)\n  nameWithType: Extensions.XPathSelectElements(XNode, String)\n  fullName: Extensions.XPathSelectElements(XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XPath.Extensions\n  isExternal: false\n  name: XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n  nameWithType: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n  fullName: Extensions.XPathSelectElements(XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.XDocumentExtensions.ToXPathNavigable(System.Xml.Linq.XNode)\n  parent: System.Xml.XPath.XDocumentExtensions\n  isExternal: false\n  name: ToXPathNavigable(XNode)\n  nameWithType: XDocumentExtensions.ToXPathNavigable(XNode)\n  fullName: XDocumentExtensions.ToXPathNavigable(XNode)\n"}