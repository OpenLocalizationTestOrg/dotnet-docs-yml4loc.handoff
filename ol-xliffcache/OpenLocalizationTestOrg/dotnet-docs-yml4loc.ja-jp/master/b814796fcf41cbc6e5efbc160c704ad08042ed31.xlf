<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b814796fcf41cbc6e5efbc160c704ad08042ed31</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Reflection.TypeDelegator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">54a9d142b9ad1c11ea0654c2bfc24f0b269f3e2c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c91d50fb3d4491a0ef225358b9882735acf73f6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Wraps a <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> object and delegates methods to that <ph id="ph2">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> and implements most of the properties and methods of <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For each member it implements, <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> automatically delegates to the corresponding member of an internal <ph id="ph2">&lt;xref:System.Type&gt;</ph> object, which is supplied as an argument to the constructor.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This internal <ph id="ph1">&lt;xref:System.Type&gt;</ph> object is exposed to deriving classes by the <ph id="ph2">`protected`</ph><ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some members of <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> have implementations even though the members themselves are simply inherited from <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these cases, the implementation is provided by an overridden <ph id="ph1">`protected`</ph> method that has a name that ends in "Impl".</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the implementation for all overloads of the <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetMethod%2A&gt;</ph> method is supplied by the overridden <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation for inherited properties such as <ph id="ph1">&lt;xref:System.Type.IsPublic%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Type.IsNestedAssembly%2A&gt;</ph> is provided by the overridden <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Deriving classes can provide a public constructor that takes a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object as its parameter and simply passes that object to the <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;</ph> constructor, or can set the internal <ph id="ph3">&lt;xref:System.Type&gt;</ph> object in some other way.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a deriving class uses a member that is not implemented by <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>, it must override that member and provide an implementation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The simplest implementation is to call the corresponding member on the internal <ph id="ph1">&lt;xref:System.Type&gt;</ph> object exposed by the <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field, but you can provide any implementation your application requires.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt;</ph> constructor).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following virtual methods (<ph id="ph1">`Overridable`</ph> methods in Visual Basic) of <ph id="ph2">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.MakeByRefType%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.MakePointerType%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Type.GetEnumNames%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.GetEnumValues%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Type.GetTypeCodeImpl%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Type.IsEnumDefined%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Type.IsEquivalentTo%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following virtual properties (<ph id="ph1">`Overridable`</ph> properties in Visual Basic) of <ph id="ph2">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.ContainsGenericParameters%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.IsSecurityTransparent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph> class with default properties.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph> class specifying the encapsulating instance.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is called from a class to generate a delegate based upon the <ph id="ph1">`Type`</ph> object for the class defining the method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The instance of the class <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that encapsulates the call to the method of an object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;delegatingType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the assembly of the implemented type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assemblies are the deployment units in the common language runtime.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime can determine and locate the assembly for any running object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Reflection.Assembly"&gt;&lt;/xref&gt;</ph> object representing the assembly of the implemented type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the assembly's fully qualified name.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> containing the assembly's fully qualified name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the base type for the current type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base type is the type from which this type directly inherits.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the <ph id="ph1">&lt;xref:System.Object&gt;</ph> class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, <ph id="ph1">`null`</ph> is returned as the base type of the <ph id="ph2">`Object`</ph> type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The base type for a type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Gets the fully qualified name of the implemented type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string containing the fully qualified name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> containing the type's fully qualified name.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the attributes assigned to the <ph id="ph1">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to determine if the <ph id="ph1">`TypeDelegator`</ph> is abstract, public, and so on.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`TypeAttributes`</ph> object representing the implementation attribute flags.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the constructor that implemented the <ph id="ph1">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no calling convention is specified, a default <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> value of <ph id="ph2">`Standard`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">`MemberInfo`</ph> objects using reflection.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">binder</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the default binder is used.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The calling conventions.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`Type`</ph> containing a list of the parameter number, order, and types.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Types cannot be <ph id="ph1">`null`</ph>; use an appropriate <ph id="ph2">`GetMethod`</ph> method or an empty array to search for a method without parameters.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`ParameterModifier`</ph> having the same length as the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">types</ph><ept id="p1">&lt;/code&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ConstructorInfo`</ph> object for the method that matches the specified criteria, or <ph id="ph2">`null`</ph> if a match cannot be found.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Returns an array of <ph id="ph1">&lt;xref href="System.Reflection.ConstructorInfo"&gt;&lt;/xref&gt;</ph> objects representing constructors defined for the type wrapped by the current <ph id="ph2">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Class initializers are available only through <ph id="ph1">`GetMember`</ph>, <ph id="ph2">`GetMembers`</ph>, <ph id="ph3">`FindMembers`</ph>, and <ph id="ph4">`GetConstructors`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`ConstructorInfo`</ph> containing the specified constructors defined for this class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If no constructors are defined, an empty array is returned.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An array of objects containing all the custom attributes defined for this type.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A custom attribute type cannot be loaded.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns an array of custom attributes identified by type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An array of custom attributes identified by type.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>An array of objects containing the custom attributes defined in this type that match the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> parameter, specifying whether to search the type's inheritance chain, or <ph id="ph2">`null`</ph> if no custom attributes are defined on this type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A custom attribute type cannot be loaded.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object encompassed or referred to by the current array, pointer or ByRef.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the object encompassed or referred to by the current array, pointer or <ph id="ph2">`ByRef`</ph>, or <ph id="ph3">`null`</ph> if the current <ph id="ph4">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is not an array, a pointer or a <ph id="ph5">`ByRef`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns the specified event.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.<ph id="ph3">`IgnoreCase`</ph>, the case of the <ph id="ph4">`name`</ph> parameter is ignored.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The name of the event to get.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Reflection.EventInfo"&gt;&lt;/xref&gt;</ph> object representing the event declared or inherited by this type with the specified name.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`null`</ph> if no such event is found.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns an array of <ph id="ph1">&lt;xref href="System.Reflection.EventInfo"&gt;&lt;/xref&gt;</ph> objects representing all the public events declared or inherited by the current <ph id="ph2">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns an array of type <ph id="ph1">`EventInfo`</ph> containing all the events declared or inherited by the current type.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If there are no events, an empty array is returned.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Returns the events specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> that are declared or inherited by the current <ph id="ph2">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`EventInfo`</ph> containing the events specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If there are no events, an empty array is returned.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&lt;xref href="System.Reflection.FieldInfo"&gt;&lt;/xref&gt;</ph> object representing the field with the specified name.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">`BindingFlags.IgnoreCase`</ph> to ignore the case of the fields, as the search is case-sensitive by default.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The name of the field to find.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`FieldInfo`</ph> object representing the field declared or inherited by this <ph id="ph2">`TypeDelegator`</ph> with the specified name.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`null`</ph> if no such field is found.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns an array of <ph id="ph1">&lt;xref href="System.Reflection.FieldInfo"&gt;&lt;/xref&gt;</ph> objects representing the data fields defined for the type wrapped by the current <ph id="ph2">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your code must not depend on the order in which fields are returned, because that order can vary.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`FieldInfo`</ph> containing the fields declared or inherited by the current <ph id="ph2">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An empty array is returned if there are no matched fields.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns the specified interface implemented by the type wrapped by the current <ph id="ph1">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the interface implemented by the current class.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the case is to be ignored; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Type`</ph> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If no interface that matches name is found, null is returned.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns an interface mapping for the specified interface type.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> of the interface to retrieve a mapping of.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Reflection.InterfaceMapping"&gt;&lt;/xref&gt;</ph> object representing the interface mapping for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">interfaceType</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns all the interfaces implemented on the current class and its base classes.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`Type`</ph> containing all the interfaces implemented on the current class and its base classes.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If none are defined, an empty array is returned.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">type</ph><ept id="p2">&lt;/code&gt;</ept>, and <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">bindingAttr</ph><ept id="p3">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no matches, an empty array is returned.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The name of the member to get.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The type of members to get.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`MemberInfo`</ph> containing all the members of the current class and its base class meeting the specified criteria.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns members specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no matches, an empty array is returned.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`MemberInfo`</ph> containing all the members of the current class and its base classes that meet the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> filter.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> is specified, a default <ph id="ph2">`CallingConventions`</ph> value of <ph id="ph3">`Standard`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The method name.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">`MemberInfo`</ph> objects using reflection.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">binder</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the default binder is used.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The calling conventions.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`Type`</ph> containing a list of the parameter number, order, and types.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Types cannot be <ph id="ph1">`null`</ph>; use an appropriate <ph id="ph2">`GetMethod`</ph> method or an empty array to search for a method without parameters.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`ParameterModifier`</ph> having the same length as the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">types</ph><ept id="p1">&lt;/code&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`MethodInfoInfo`</ph> object for the implementation method that matches the specified criteria, or <ph id="ph2">`null`</ph> if a match cannot be found.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns an array of <ph id="ph1">&lt;xref href="System.Reflection.MethodInfo"&gt;&lt;/xref&gt;</ph> objects representing specified methods of the type wrapped by the current <ph id="ph2">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">`MethodInfo`</ph> objects representing the methods defined on this <ph id="ph2">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Returns a nested type specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> and in <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">bindingAttr</ph><ept id="p2">&lt;/code&gt;</ept> that are declared or inherited by the type represented by the current <ph id="ph3">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The nested type's name.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Type`</ph> object representing the nested type.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Returns the nested types specified in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">bindingAttr</ph><ept id="p1">&lt;/code&gt;</ept> that are declared or inherited by the type wrapped by the current <ph id="ph2">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`Type`</ph> containing the nested types.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Returns an array of <ph id="ph1">&lt;xref href="System.Reflection.PropertyInfo"&gt;&lt;/xref&gt;</ph> objects representing properties of the type wrapped by the current <ph id="ph2">&lt;xref href="System.Reflection.TypeDelegator"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>An array of <ph id="ph1">`PropertyInfo`</ph> objects representing properties defined on this <ph id="ph2">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The property to get.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>A bitmask that affects the way in which the search is conducted.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">`MemberInfo`</ph> objects via reflection.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">binder</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the default binder is used.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref href="System.Reflection.Binder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The return type of the property.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A list of parameter types.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The list represents the number, order, and types of the parameters.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Types cannot be null; use an appropriate <ph id="ph1">`GetMethod`</ph> method or an empty array to search for a method without parameters.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Reflection.PropertyInfo"&gt;&lt;/xref&gt;</ph> object for the property that matches the specified criteria, or null if a match cannot be found.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets the GUID (globally unique identifier) of the implemented type.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A GUID.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> encompasses or refers to another type; that is, whether the current <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is an array, a pointer or a ByRef.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is an array, a pointer or a ByRef; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Invokes the specified member.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>A method will be invoked if both the following conditions are true:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of each arguments can be converted by the binder to the type of the parameter.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The binder will find all the matching methods.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>These methods are found based upon the type of binding requested (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>, <ph id="ph2">`BindingFlags.GetProperties`</ph>, and so on).</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the method is selected, it will be invoked.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>Accessibility is checked at that point.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt;</ph> method is responsible for selecting the method to be invoked.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default binder selects the most specific match.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access restrictions are ignored for fully trusted code.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>Currently, <ph id="ph1">`InvokeMember`</ph> performs the Microsoft .NET Framework reflection semantics for every type of object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the member specified by name is an array and the <ph id="ph1">`BindingFlags.GetField`</ph> flag is set on <ph id="ph2">`invokeAttr`</ph>, the <ph id="ph3">`args`</ph> array specifies the elements whose values are to be returned.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following call through <ph id="ph1">`Type`</ph> object <ph id="ph2">`t`</ph> returns the value of the first element of the string array MyArray, which is a member of the calling object:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <ph id="ph1">`InvokeMember`</ph> to set one or more elements of a member array.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>All elements are set to the same value.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`args`</ph> array must be formatted as follows:</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, to set the first member of MyArray from the previous example, the syntax is as follows:</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The name of the member to invoke.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This may be a constructor, method, property, or field.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>If an empty string ("") is passed, the default member is invoked.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The invocation attribute.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This must be one of the following <ph id="ph1">&lt;xref href="System.Reflection.BindingFlags"&gt;&lt;/xref&gt;</ph> : <ph id="ph2">`InvokeMethod`</ph>, <ph id="ph3">`CreateInstance`</ph>, <ph id="ph4">`Static`</ph>, <ph id="ph5">`GetField`</ph>, <ph id="ph6">`SetField`</ph>, <ph id="ph7">`GetProperty`</ph>, or <ph id="ph8">`SetProperty`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A suitable invocation attribute must be specified.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If a static member is to be invoked, the <ph id="ph1">`Static`</ph> flag must be set.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">`MemberInfo`</ph> objects via reflection.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">binder</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the default binder is used.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref href="System.Reflection.Binder"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The object on which to invoke the specified member.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`Object`</ph> that contains the number, order, and type of the parameters of the member to be invoked.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept> contains an uninitialized <ph id="ph2">`Object`</ph>, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`ParameterModifer`</ph> that is the same length as <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">args</ph><ept id="p1">&lt;/code&gt;</ept>, with elements that represent the attributes associated with the arguments of the member to be invoked.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>A parameter has attributes associated with it in the member's signature.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For ByRef, use <ph id="ph1">`ParameterModifer.ByRef`</ph>, and for none, use <ph id="ph2">`ParameterModifer.None`</ph>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The default binder does exact matching on these.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Attributes such as <ph id="ph1">`In`</ph> and <ph id="ph2">`InOut`</ph> are not used in binding, and can be viewed using <ph id="ph3">`ParameterInfo`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An instance of <ph id="ph1">`CultureInfo`</ph> used to govern the coercion of types.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This is necessary, for example, to convert a string that represents 1000 to a <ph id="ph1">`Double`</ph> value, since 1000 is represented differently by different cultures.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">culture</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>, the <ph id="ph3">`CultureInfo`</ph> for the current thread's <ph id="ph4">`CultureInfo`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">`String`</ph> containing parameter names that match up, starting at element zero, with the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">args</ph><ept id="p1">&lt;/code&gt;</ept> array.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>There must be no holes in the array.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">args</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Length`</ph> is greater than <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">namedParameters</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Length`</ph>, the remaining parameters are filled in order.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph> representing the return value of the invoked member.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is an array.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is an array; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the specified type can be assigned to this type.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The type to check.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified type can be assigned to this type; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is passed by reference.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is passed by reference; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is a COM object.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is a COM object; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if this object represents a constructed generic type; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Indicates whether a custom attribute identified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> is defined.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>An array of custom attributes identified by type.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a custom attribute identified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">attributeType</ph><ept id="p1">&lt;/code&gt;</ept> is defined; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The custom attribute type cannot be loaded.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is a pointer.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is a pointer; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is one of the primitive types.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> is one of the primitive types; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the type is a value type; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Gets a value that identifies this entity in metadata.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A value which, in combination with the module, uniquely identifies this entity in metadata.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets the module that contains the implemented type.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>A module is a loadable unit that can contain type declarations and implementations.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Reflection.Module"&gt;&lt;/xref&gt;</ph> object representing the module of the implemented type.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Gets the name of the implemented type, with the path removed.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>A string containing the name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the simple name, not the fully qualified name, is returned.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the name and the path, use <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> containing the type's non-qualified name.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Gets the namespace of the implemented type.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property gets a string containing the namespace of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the <ph id="ph1">`TypeDelegator`</ph> is <ph id="ph2">&lt;xref:System.Reflection.TypeFilter&gt;</ph>, the returned namespace is <ph id="ph3">&lt;xref:System.Reflection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`String`</ph> containing the type's namespace.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Gets a handle to the internal metadata representation of an implemented type.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>A type handle is a unique integer value associated with each type.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The handle is unique during the runtime.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`RuntimeTypeHandle`</ph> object.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>A value indicating type information.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Gets the underlying <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that represents the implemented type.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The underlying type.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>