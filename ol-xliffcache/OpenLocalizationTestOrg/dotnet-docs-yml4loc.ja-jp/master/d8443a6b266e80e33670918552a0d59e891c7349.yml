### YamlMime:ManagedReference
items:
- uid: System.AddIn.Hosting.AddInEnvironment
  commentId: T:System.AddIn.Hosting.AddInEnvironment
  id: AddInEnvironment
  children:
  - System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)
  - System.AddIn.Hosting.AddInEnvironment.Process
  langs:
  - csharp
  name: AddInEnvironment
  nameWithType: AddInEnvironment
  fullName: System.AddIn.Hosting.AddInEnvironment
  type: Class
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: Provides access to the application domain and process of an add-in.
  remarks: "Use this class to load add-ins into a desired environment, which can be one of the following:  \n  \n-   An existing application domain for which you have the <xref:System.AppDomain> object.  \n  \n-   An application domain that was automatically generated to activate an add-in.  \n  \n-   An existing external process.  \n  \n To obtain the <xref:System.AddIn.Hosting.AddInEnvironment> object for an add-in, pass the add-in's application domain to the <xref:System.AddIn.Hosting.AddInEnvironment> class constructor. Alternatively, you can use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property of the <xref:System.AddIn.Hosting.AddInController> class to obtain the add-in's <xref:System.AddIn.Hosting.AddInEnvironment> object.  \n  \n After you obtain the <xref:System.AddIn.Hosting.AddInEnvironment> object, you can do the following:  \n  \n-   Pass that <xref:System.AddIn.Hosting.AddInEnvironment> object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload. The add-in will be activated in the application domain and process that is represented by the <xref:System.AddIn.Hosting.AddInEnvironment> object.  \n  \n-   Use the <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A> property to obtain an <xref:System.AddIn.Hosting.AddInProcess> object. Then pass that object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload. The add-in will be activated in the process that is represented by the <xref:System.AddIn.Hosting.AddInProcess> object but in a new application domain."
  syntax:
    content: public sealed class AddInEnvironment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Hosting/AddInEnvironment.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)
  commentId: M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)
  id: '#ctor(System.AppDomain)'
  parent: System.AddIn.Hosting.AddInEnvironment
  langs:
  - csharp
  name: AddInEnvironment(AppDomain)
  nameWithType: AddInEnvironment.AddInEnvironment(AppDomain)
  fullName: AddInEnvironment.AddInEnvironment(AppDomain)
  type: Constructor
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: Initializes a new instance of the <xref href="System.AddIn.Hosting.AddInEnvironment"></xref> class.
  remarks: If you have access to the application domain that contains the add-in you need, you can use this constructor to obtain the add-in's <xref:System.AddIn.Hosting.AddInEnvironment> object. Otherwise, you can use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property of the <xref:System.AddIn.Hosting.AddInController> class to obtain the <xref:System.AddIn.Hosting.AddInEnvironment> object.
  syntax:
    content: public AddInEnvironment (AppDomain appDomain);
    parameters:
    - id: appDomain
      type: System.AppDomain
      description: The application domain that contains the add-in.
  overload: System.AddIn.Hosting.AddInEnvironment.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>appDomain</code> is `null`.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: Full-trust permission is demanded. A caller in the call chain does not have sufficient permission.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Hosting/AddInEnvironment.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Hosting.AddInEnvironment.Process
  commentId: P:System.AddIn.Hosting.AddInEnvironment.Process
  id: Process
  parent: System.AddIn.Hosting.AddInEnvironment
  langs:
  - csharp
  name: Process
  nameWithType: AddInEnvironment.Process
  fullName: AddInEnvironment.Process
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: Gets the <xref href="System.AddIn.Hosting.AddInProcess"></xref> object that represents the process in which the add-in is running.
  remarks: "You can use this property to activate multiple add-ins in the same process but in different domains.  \n  \n Pass the <xref:System.AddIn.Hosting.AddInProcess> object obtained with this property to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload.  \n  \n If you want to activate them in the same domain in an external process you should pass the <xref:System.AddIn.Hosting.AddInEnvironment> object directly to the <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=fullName> method overload."
  syntax:
    content: public System.AddIn.Hosting.AddInProcess Process { get; }
    return:
      type: System.AddIn.Hosting.AddInProcess
      description: The process in which the add-in is running.
  overload: System.AddIn.Hosting.AddInEnvironment.Process*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Hosting/AddInEnvironment.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: AddInEnvironment(AppDomain)
  nameWithType: AddInEnvironment.AddInEnvironment(AppDomain)
  fullName: AddInEnvironment.AddInEnvironment(AppDomain)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.AddIn.Hosting.AddInEnvironment.Process
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: Process
  nameWithType: AddInEnvironment.Process
  fullName: AddInEnvironment.Process
- uid: System.AddIn.Hosting.AddInProcess
  parent: System.AddIn.Hosting
  isExternal: false
  name: AddInProcess
  nameWithType: AddInProcess
  fullName: System.AddIn.Hosting.AddInProcess
- uid: System.AddIn.Hosting.AddInEnvironment.#ctor*
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: AddInEnvironment
  nameWithType: AddInEnvironment.AddInEnvironment
  fullName: AddInEnvironment.AddInEnvironment
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Hosting/AddInEnvironment.xml
- uid: System.AddIn.Hosting.AddInEnvironment.Process*
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: Process
  nameWithType: AddInEnvironment.Process
  fullName: AddInEnvironment.Process
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Hosting/AddInEnvironment.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
