### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.RemotingConfiguration
  commentId: T:System.Runtime.Remoting.RemotingConfiguration
  id: RemotingConfiguration
  children:
  - System.Runtime.Remoting.RemotingConfiguration.ApplicationId
  - System.Runtime.Remoting.RemotingConfiguration.ApplicationName
  - System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)
  - System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)
  - System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)
  - System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode
  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes
  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes
  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes
  - System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes
  - System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)
  - System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)
  - System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)
  - System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)
  - System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)
  - System.Runtime.Remoting.RemotingConfiguration.ProcessId
  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)
  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)
  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)
  - System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)
  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)
  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)
  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)
  - System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)
  langs:
  - csharp
  name: RemotingConfiguration
  nameWithType: RemotingConfiguration
  fullName: System.Runtime.Remoting.RemotingConfiguration
  type: Class
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Provides various static methods for configuring the remoting infrastructure.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class RemotingConfiguration
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationId
  commentId: P:System.Runtime.Remoting.RemotingConfiguration.ApplicationId
  id: ApplicationId
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: ApplicationId
  nameWithType: RemotingConfiguration.ApplicationId
  fullName: RemotingConfiguration.ApplicationId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Gets the ID of the currently executing application.
  remarks: The application ID is prepended to the URI of the objects created by the currently executing application.
  syntax:
    content: public static string ApplicationId { get; }
    return:
      type: System.String
      description: A <xref href="System.String"></xref> that contains the ID of the currently executing application.
  overload: System.Runtime.Remoting.RemotingConfiguration.ApplicationId*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The immediate caller does not have infrastructure permission.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationName
  commentId: P:System.Runtime.Remoting.RemotingConfiguration.ApplicationName
  id: ApplicationName
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: ApplicationName
  nameWithType: RemotingConfiguration.ApplicationName
  fullName: RemotingConfiguration.ApplicationName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Gets or sets the name of a remoting application.
  remarks: An application name can be set only once, either through the current property or through a configuration file. If an application is running inside a hosted environment, such as Internet Information Services (IIS), this value might have already been set (usually to the virtual directory). The current property will return `null` if the application name has not been set.
  example:
  - "The following code example demonstrates the use of the <xref:System.Runtime.Remoting.RemotingConfiguration.ApplicationName%2A> property to indicate the name of the remoting application. For the full example code, see examples for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> and <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType%2A> methods.  \n  \n [!code-cpp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#2)]\n [!code-csharp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#2)]\n [!code-vb[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#2)]  \n  \n The following code example demonstrates how to access an object remoted from a named application.  \n  \n [!code-cpp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#6)]\n [!code-csharp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#6)]\n [!code-vb[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#6)]"
  syntax:
    content: public static string ApplicationName { get; set; }
    return:
      type: System.String
      description: The name of a remoting application.
  overload: System.Runtime.Remoting.RemotingConfiguration.ApplicationName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels. This exception is thrown only when setting the property value.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)
  id: Configure(System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: Configure(String)
  nameWithType: RemotingConfiguration.Configure(String)
  fullName: RemotingConfiguration.Configure(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Reads the configuration file and configures the remoting infrastructure. <xref href="System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)"></xref> is obsolete. Please use <xref href="System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)"></xref> instead.
  remarks: "> [!NOTE]\n>  <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29> is obsolete. Please use <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29> instead.  \n  \n Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file.  \n  \n For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e).  \n  \n> [!NOTE]\n>  Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)."
  example:
  - >-
    [!code-cpp[RemotingConfiguration_Configure_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CPP/remotingconfiguration_configure_server.cpp#1)]
     [!code-csharp[RemotingConfiguration_Configure_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CS/remotingconfiguration_configure_server.cs#1)]
     [!code-vb[RemotingConfiguration_Configure_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/VB/remotingconfiguration_configure_server.vb#1)]
  syntax:
    content: >-
      [System.Obsolete("Use Configure(String,Boolean)")]

      public static void Configure (string filename);
    parameters:
    - id: filename
      type: System.String
      description: The name of the remoting configuration file. Can be `null`.
  overload: System.Runtime.Remoting.RemotingConfiguration.Configure*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)
  id: Configure(System.String,System.Boolean)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: Configure(String, Boolean)
  nameWithType: RemotingConfiguration.Configure(String, Boolean)
  fullName: RemotingConfiguration.Configure(String, Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Reads the configuration file and configures the remoting infrastructure.
  remarks: "Passing `null` as the `filename` parameter will cause default remoting initialization without requiring the existence of a configuration file. For more information about remoting and security see [Security in Remoting.](http://msdn.microsoft.com/en-us/9574262c-d4b1-41c5-8600-24ff147c0add)  \n  \n For configuration file syntax, see [Remoting Settings Schema](http://msdn.microsoft.com/en-us/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e).  \n  \n> [!NOTE]\n>  Marshal-by-reference objects (MBRs) do not reside in memory forever. Instead, unless the type overrides <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> to control its own lifetime policies, each MBR has a finite lifetime before the .NET Framework remoting system begins the process of deleting it and reclaiming the memory. For more information, see [Lifetime Leases](http://msdn.microsoft.com/en-us/c72d561c-1266-4c8b-b258-2c168c08da9a)."
  syntax:
    content: public static void Configure (string filename, bool ensureSecurity);
    parameters:
    - id: filename
      type: System.String
      description: The name of the remoting configuration file. Can be `null`.
    - id: ensureSecurity
      type: System.Boolean
      description: If set to `true` security is required. If set to `false`, security is not required but still may be used.
  overload: System.Runtime.Remoting.RemotingConfiguration.Configure*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)
  id: CustomErrorsEnabled(System.Boolean)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: CustomErrorsEnabled(Boolean)
  nameWithType: RemotingConfiguration.CustomErrorsEnabled(Boolean)
  fullName: RemotingConfiguration.CustomErrorsEnabled(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Indicates whether the server channels in this application domain return filtered or complete exception information to local or remote callers.
  remarks: "Complete exception information includes the exact server exception and the server stack trace. Filtered information includes a standard remoting exception but no server stack trace.  \n  \n The `CustomErrorsEnabled` method reflects configuration settings that were specified in the `mode` attribute of the `<customErrors>` element of the application configuration file. For more information about configuration options, see [&#91;\\<topic://cpconconfiguration>&#93;](http://msdn.microsoft.com/en-us/92c0c097-d984-4315-835b-7490ecdf1097).  \n  \n The following table shows the three server channel property values that specify which callers receive exception information and what type of information they receive.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|`off`|All callers receive complete exception information.|  \n|`on`|All callers receive filtered exception information.|  \n|`remoteOnly`|Local callers receive complete exception information; remote callers receive filtered exception information.|  \n  \n The following table shows the interaction of the `isLocalRequest` parameter and the server channel property.  \n  \n|Value|isLocalRequest|Return value|Description|  \n|-----------|--------------------|------------------|-----------------|  \n|`on`|`true`|`true`|Local callers receive filtered exception information.|  \n|`on`|`false`|`true`|Remote callers receive filtered exception information.|  \n|`off`|`true`|`false`|Local callers receive complete exception information.|  \n|`off`|`false`|`false`|Remote callers receive complete exception information.|  \n|`remoteOnly`|`true`|`false`|Local callers receive complete exception information.|  \n|`remoteOnly`|`false`|`true`|Remote callers receive filtered exception information.|  \n  \n For information about using application configuration files to control the return of exception information to callers, see the `<customErrors>` element."
  syntax:
    content: public static bool CustomErrorsEnabled (bool isLocalRequest);
    parameters:
    - id: isLocalRequest
      type: System.Boolean
      description: '`true` to specify local callers; `false` to specify remote callers.'
    return:
      type: System.Boolean
      description: '`true` if only filtered exception information is returned to local or remote callers, as specified by the <code>isLocalRequest</code> parameter; `false` if complete exception information is returned.'
  overload: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode
  commentId: P:System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode
  id: CustomErrorsMode
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: CustomErrorsMode
  nameWithType: RemotingConfiguration.CustomErrorsMode
  fullName: RemotingConfiguration.CustomErrorsMode
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Gets or sets value that indicates how custom errors are handled.
  syntax:
    content: public static System.Runtime.Remoting.CustomErrorsModes CustomErrorsMode { get; set; }
    return:
      type: System.Runtime.Remoting.CustomErrorsModes
      description: A member of the <xref href="System.Runtime.Remoting.CustomErrorsModes"></xref> enumeration that indicates how custom errors are handled.
  overload: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes
  id: GetRegisteredActivatedClientTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: GetRegisteredActivatedClientTypes()
  nameWithType: RemotingConfiguration.GetRegisteredActivatedClientTypes()
  fullName: RemotingConfiguration.GetRegisteredActivatedClientTypes()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Retrieves an array of object types registered on the client as types that will be activated remotely.
  remarks: For a detailed description of client-activated objects, see [&#91;\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).
  syntax:
    content: public static System.Runtime.Remoting.ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes ();
    parameters: []
    return:
      type: System.Runtime.Remoting.ActivatedClientTypeEntry[]
      description: An array of object types registered on the client as types that will be activated remotely.
  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes
  id: GetRegisteredActivatedServiceTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: GetRegisteredActivatedServiceTypes()
  nameWithType: RemotingConfiguration.GetRegisteredActivatedServiceTypes()
  fullName: RemotingConfiguration.GetRegisteredActivatedServiceTypes()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Retrieves an array of object types registered on the service end that can be activated on request from a client.
  remarks: For a detailed description of client-activated objects, see [&#91;\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a).
  example:
  - >-
    [!code-cpp[RemotingConfiguration_GetRegisteredActivatedServer_Client#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CPP/RemotingConfiguration_GetRegisteredActivatedService_server.cpp#2)]
     [!code-csharp[RemotingConfiguration_GetRegisteredActivatedServer_Client#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CS/remotingconfiguration_getregisteredactivatedservice_server.cs#2)]
     [!code-vb[RemotingConfiguration_GetRegisteredActivatedServer_Client#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/VB/remotingconfiguration_getregisteredactivatedservice_server.vb#2)]
  syntax:
    content: public static System.Runtime.Remoting.ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes ();
    parameters: []
    return:
      type: System.Runtime.Remoting.ActivatedServiceTypeEntry[]
      description: An array of object types registered on the service end that can be activated on request from a client.
  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes
  id: GetRegisteredWellKnownClientTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: GetRegisteredWellKnownClientTypes()
  nameWithType: RemotingConfiguration.GetRegisteredWellKnownClientTypes()
  fullName: RemotingConfiguration.GetRegisteredWellKnownClientTypes()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Retrieves an array of object types registered on the client end as well-known types.
  remarks: "Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.  \n  \n For a more detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."
  example:
  - >-
    [!code-cpp[RemotingConfiguration_GetRegisteredWellKnownClient_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/CPP/remotingconfiguration_getregisteredwellknownclient_client.cpp#1)]
     [!code-csharp[RemotingConfiguration_GetRegisteredWellKnownClient_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/CS/remotingconfiguration_getregisteredwellknownclient_client.cs#1)]
     [!code-vb[RemotingConfiguration_GetRegisteredWellKnownClient_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/VB/remotingconfiguration_getregisteredwellknownclient_client.vb#1)]
  syntax:
    content: public static System.Runtime.Remoting.WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes ();
    parameters: []
    return:
      type: System.Runtime.Remoting.WellKnownClientTypeEntry[]
      description: An array of object types registered on the client end as well-known types.
  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes
  id: GetRegisteredWellKnownServiceTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: GetRegisteredWellKnownServiceTypes()
  nameWithType: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()
  fullName: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Retrieves an array of object types registered on the service end as well-known types.
  remarks: "Well-known object types can be either single call or singleton. If an object type is single call, then a new instance of it is created each time a call from the client comes in. All calls to a singleton object are handled by one instance of that object.  \n  \n For a more detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."
  example:
  - >-
    [!code-cpp[RemotingConfiguration_Configure_Client#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CPP/remotingconfiguration_configure_server.cpp#2)]
     [!code-csharp[RemotingConfiguration_Configure_Client#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CS/remotingconfiguration_configure_server.cs#2)]
     [!code-vb[RemotingConfiguration_Configure_Client#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/VB/remotingconfiguration_configure_server.vb#2)]
  syntax:
    content: public static System.Runtime.Remoting.WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes ();
    parameters: []
    return:
      type: System.Runtime.Remoting.WellKnownServiceTypeEntry[]
      description: An array of object types registered on the service end as well-known types.
  overload: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)
  id: IsActivationAllowed(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: IsActivationAllowed(Type)
  nameWithType: RemotingConfiguration.IsActivationAllowed(Type)
  fullName: RemotingConfiguration.IsActivationAllowed(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Returns a Boolean value that indicates whether the specified <xref href="System.Type"></xref> is allowed to be client activated.
  remarks: The current method is used at the server end to determine whether an activation of the object <xref:System.Type> is explicitly allowed by the server.
  example:
  - >-
    [!code-cpp[RemotingConfiguration_GetRegisteredActivatedServer_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CPP/RemotingConfiguration_GetRegisteredActivatedService_server.cpp#1)]
     [!code-csharp[RemotingConfiguration_GetRegisteredActivatedServer_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CS/remotingconfiguration_getregisteredactivatedservice_server.cs#1)]
     [!code-vb[RemotingConfiguration_GetRegisteredActivatedServer_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/VB/remotingconfiguration_getregisteredactivatedservice_server.vb#1)]
  syntax:
    content: public static bool IsActivationAllowed (Type svrType);
    parameters:
    - id: svrType
      type: System.Type
      description: The object <xref href="System.Type"></xref> to check.
    return:
      type: System.Boolean
      description: '`true` if the specified <xref href="System.Type"></xref> is allowed to be client activated; otherwise, `false`.'
  overload: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)
  id: IsRemotelyActivatedClientType(System.String,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: IsRemotelyActivatedClientType(String, String)
  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)
  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Checks whether the object specified by its type name and assembly name is registered as a remotely activated client type.
  remarks: ''
  example:
  - >-
    [!code-cpp[RemotingConfiguration_IsRemotelyActivatedClientType2_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/CPP/remotingconfiguration_isremotelyactivatedclienttype2_client.cpp#1)]
     [!code-csharp[RemotingConfiguration_IsRemotelyActivatedClientType2_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/CS/remotingconfiguration_isremotelyactivatedclienttype2_client.cs#1)]
     [!code-vb[RemotingConfiguration_IsRemotelyActivatedClientType2_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/VB/remotingconfiguration_isremotelyactivatedclienttype2_client.vb#1)]
  syntax:
    content: public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (string typeName, string assemblyName);
    parameters:
    - id: typeName
      type: System.String
      description: The type name of the object to check.
    - id: assemblyName
      type: System.String
      description: The assembly name of the object to check.
    return:
      type: System.Runtime.Remoting.ActivatedClientTypeEntry
      description: The <xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"></xref> that corresponds to the specified object type.
  overload: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)
  id: IsRemotelyActivatedClientType(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: IsRemotelyActivatedClientType(Type)
  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(Type)
  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Checks whether the specified object <xref href="System.Type"></xref> is registered as a remotely activated client type.
  remarks: ''
  example:
  - >-
    [!code-cpp[RemotingConfiguration_IsRemotelyActivatedClientType1_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/CPP/remotingconfiguration_isremotelyactivatedclienttype1_client.cpp#1)]
     [!code-csharp[RemotingConfiguration_IsRemotelyActivatedClientType1_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/CS/remotingconfiguration_isremotelyactivatedclienttype1_client.cs#1)]
     [!code-vb[RemotingConfiguration_IsRemotelyActivatedClientType1_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/VB/remotingconfiguration_isremotelyactivatedclienttype1_client.vb#1)]
  syntax:
    content: public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (Type svrType);
    parameters:
    - id: svrType
      type: System.Type
      description: The object type to check.
    return:
      type: System.Runtime.Remoting.ActivatedClientTypeEntry
      description: The <xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"></xref> that corresponds to the specified object type.
  overload: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)
  id: IsWellKnownClientType(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: IsWellKnownClientType(Type)
  nameWithType: RemotingConfiguration.IsWellKnownClientType(Type)
  fullName: RemotingConfiguration.IsWellKnownClientType(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Checks whether the specified object <xref href="System.Type"></xref> is registered as a well-known client type.
  remarks: ''
  example:
  - >-
    [!code-cpp[RemotingConfiguration_IsWellKnownClientType1_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/CPP/remotingconfiguration_iswellknownclienttype1_client.cpp#1)]
     [!code-csharp[RemotingConfiguration_IsWellKnownClientType1_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/CS/remotingconfiguration_iswellknownclienttype1_client.cs#1)]
     [!code-vb[RemotingConfiguration_IsWellKnownClientType1_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/VB/remotingconfiguration_iswellknownclienttype1_client.vb#1)]
  syntax:
    content: public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (Type svrType);
    parameters:
    - id: svrType
      type: System.Type
      description: The object <xref href="System.Type"></xref> to check.
    return:
      type: System.Runtime.Remoting.WellKnownClientTypeEntry
      description: The <xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"></xref> that corresponds to the specified object type.
  overload: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)
  id: IsWellKnownClientType(System.String,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: IsWellKnownClientType(String, String)
  nameWithType: RemotingConfiguration.IsWellKnownClientType(String, String)
  fullName: RemotingConfiguration.IsWellKnownClientType(String, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Checks whether the object specified by its type name and assembly name is registered as a well-known client type.
  remarks: ''
  example:
  - >-
    [!code-cpp[RemotingConfiguration_IsWellKnownClientType2_Client#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/CPP/remotingconfiguration_iswellknownclienttype2_client.cpp#1)]
     [!code-csharp[RemotingConfiguration_IsWellKnownClientType2_Client#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/CS/remotingconfiguration_iswellknownclienttype2_client.cs#1)]
     [!code-vb[RemotingConfiguration_IsWellKnownClientType2_Client#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/VB/remotingconfiguration_iswellknownclienttype2_client.vb#1)]
  syntax:
    content: public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (string typeName, string assemblyName);
    parameters:
    - id: typeName
      type: System.String
      description: The type name of the object to check.
    - id: assemblyName
      type: System.String
      description: The assembly name of the object to check.
    return:
      type: System.Runtime.Remoting.WellKnownClientTypeEntry
      description: The <xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"></xref> that corresponds to the specified object type.
  overload: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.ProcessId
  commentId: P:System.Runtime.Remoting.RemotingConfiguration.ProcessId
  id: ProcessId
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: ProcessId
  nameWithType: RemotingConfiguration.ProcessId
  fullName: RemotingConfiguration.ProcessId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Gets the ID of the currently executing process.
  syntax:
    content: public static string ProcessId { get; }
    return:
      type: System.String
      description: A <xref href="System.String"></xref> that contains the ID of the currently executing process.
  overload: System.Runtime.Remoting.RemotingConfiguration.ProcessId*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The immediate caller does not have infrastructure permission.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)
  id: RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterActivatedClientType(ActivatedClientTypeEntry)
  nameWithType: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)
  fullName: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers an object <xref href="System.Type"></xref> recorded in the provided <xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"></xref> on the client end as a type that can be activated on the server.
  remarks: "To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."
  syntax:
    content: public static void RegisterActivatedClientType (System.Runtime.Remoting.ActivatedClientTypeEntry entry);
    parameters:
    - id: entry
      type: System.Runtime.Remoting.ActivatedClientTypeEntry
      description: Configuration settings for the client-activated type.
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)
  id: RegisterActivatedClientType(System.Type,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterActivatedClientType(Type, String)
  nameWithType: RemotingConfiguration.RegisterActivatedClientType(Type, String)
  fullName: RemotingConfiguration.RegisterActivatedClientType(Type, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers an object <xref href="System.Type"></xref> on the client end as a type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href="System.Runtime.Remoting.ActivatedClientTypeEntry"></xref> class.
  remarks: "To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new`.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)"
  example:
  - "The following code example demonstrates registration of an object type on the client end as a type that can be activated on the server. For the server code that corresponds to the presented client code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method.  \n  \n [!code-cpp[RemotingConfiguration.ClientActivation#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/client.cpp#1)]\n [!code-csharp[RemotingConfiguration.ClientActivation#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/client.cs#1)]\n [!code-vb[RemotingConfiguration.ClientActivation#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/client.vb#1)]"
  syntax:
    content: public static void RegisterActivatedClientType (Type type, string appUrl);
    parameters:
    - id: type
      type: System.Type
      description: The object <xref href="System.Type"></xref>.
    - id: appUrl
      type: System.String
      description: URL of the application where this type is activated.
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>typeName</code> or <code>URI</code> parameter is `null`.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)
  id: RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterActivatedServiceType(ActivatedServiceTypeEntry)
  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)
  fullName: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers an object type recorded in the provided <xref href="System.Runtime.Remoting.ActivatedServiceTypeEntry"></xref> on the service end as one that can be activated on request from a client.
  remarks: "To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."
  syntax:
    content: public static void RegisterActivatedServiceType (System.Runtime.Remoting.ActivatedServiceTypeEntry entry);
    parameters:
    - id: entry
      type: System.Runtime.Remoting.ActivatedServiceTypeEntry
      description: Configuration settings for the client-activated type.
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)
  id: RegisterActivatedServiceType(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterActivatedServiceType(Type)
  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(Type)
  fullName: RemotingConfiguration.RegisterActivatedServiceType(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers a specified object type on the service end as a type that can be activated on request from a client.
  remarks: "To create an instance of a client-activated object on the server, you must know its <xref:System.Type> and it must be registered on the server end by using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> method. To obtain a proxy for a new instance of the client-activated object, the client must first register a channel with <xref:System.Runtime.Remoting.Channels.ChannelServices> and then activate the object by calling `new` or <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>.  \n  \n To activate a client-activated object type with the `new` keyword, you must first register the object type on the client end using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method gives the remoting infrastructure the location of the remote application, where `new` attempts to create it. If, on the other hand, you use the <xref:System.Activator.CreateInstance%2A> method to create a new instance of the client-activated object, you must supply the remote application's URL as a parameter, so no prior registration on the client end is necessary. To supply the <xref:System.Activator.CreateInstance%2A> method with the URL of the server where you want to create the object, you must encapsulate the URL in an instance of the <xref:System.Runtime.Remoting.Activation.UrlAttribute> class.  \n  \n For a detailed description of client-activated objects, see [&#91;\\<topic://cpconClientActivation>&#93;](http://msdn.microsoft.com/en-us/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)."
  example:
  - "The following code example demonstrates registration of an object type on the server as a type that can be activated by the client. For the client code that corresponds to the presented server code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> method.  \n  \n [!code-cpp[RemotingConfiguration.ClientActivation#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/server.cpp#2)]\n [!code-csharp[RemotingConfiguration.ClientActivation#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/server.cs#2)]\n [!code-vb[RemotingConfiguration.ClientActivation#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/server.vb#2)]  \n  \n The following code example shows the service object registered in the sample code above.  \n  \n [!code-cpp[RemotingConfiguration.ClientActivation#3](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/service.cpp#3)]\n [!code-csharp[RemotingConfiguration.ClientActivation#3](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/service.cs#3)]\n [!code-vb[RemotingConfiguration.ClientActivation#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/service.vb#3)]"
  syntax:
    content: public static void RegisterActivatedServiceType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type"></xref> of object to register.
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)
  id: RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterWellKnownClientType(WellKnownClientTypeEntry)
  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)
  fullName: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers an object <xref href="System.Type"></xref> recorded in the provided <xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"></xref> on the client end as a well-known type that can be activated on the server.
  remarks: "Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."
  syntax:
    content: public static void RegisterWellKnownClientType (System.Runtime.Remoting.WellKnownClientTypeEntry entry);
    parameters:
    - id: entry
      type: System.Runtime.Remoting.WellKnownClientTypeEntry
      description: Configuration settings for the well-known type.
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)
  id: RegisterWellKnownClientType(System.Type,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterWellKnownClientType(Type, String)
  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(Type, String)
  fullName: RemotingConfiguration.RegisterWellKnownClientType(Type, String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers an object <xref href="System.Type"></xref> on the client end as a well-known type that can be activated on the server, using the given parameters to initialize a new instance of the <xref href="System.Runtime.Remoting.WellKnownClientTypeEntry"></xref> class.
  remarks: "Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or <xref:System.Activator.GetObject%2A?displayProperty=fullName>. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."
  example:
  - "The following code example demonstrates registration of an object type on the client end as a well-known type. For the server code that corresponds to the presented client code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType%2A> method.  \n  \n [!code-cpp[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#5)]\n [!code-csharp[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#5)]\n [!code-vb[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#5)]  \n[!code-cpp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#6)]\n[!code-csharp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#6)]\n[!code-vb[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#6)]  \n[!code-cpp[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#7)]\n[!code-csharp[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#7)]\n[!code-vb[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#7)]"
  syntax:
    content: public static void RegisterWellKnownClientType (Type type, string objectUrl);
    parameters:
    - id: type
      type: System.Type
      description: The object <xref href="System.Type"></xref>.
    - id: objectUrl
      type: System.String
      description: URL of a well-known client object.
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)
  id: RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterWellKnownServiceType(WellKnownServiceTypeEntry)
  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)
  fullName: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers an object <xref href="System.Type"></xref> recorded in the provided <xref href="System.Runtime.Remoting.WellKnownServiceTypeEntry"></xref> on the service end as a well-known type.
  remarks: "Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.  \n  \n The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."
  example:
  - >-
    [!code-cpp[CreateObjRef2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CreateObjRef2/CPP/example.cpp#2)]
     [!code-csharp[CreateObjRef2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CreateObjRef2/CS/example.cs#2)]
     [!code-vb[CreateObjRef2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CreateObjRef2/VB/example.vb#2)]
  syntax:
    content: public static void RegisterWellKnownServiceType (System.Runtime.Remoting.WellKnownServiceTypeEntry entry);
    parameters:
    - id: entry
      type: System.Runtime.Remoting.WellKnownServiceTypeEntry
      description: Configuration settings for the well-known type.
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)
  commentId: M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)
  id: RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)
  parent: System.Runtime.Remoting.RemotingConfiguration
  langs:
  - csharp
  name: RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)
  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)
  fullName: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting
  summary: Registers an object <xref href="System.Type"></xref> on the service end as a well-known type, using the given parameters to initialize a new instance of <xref href="System.Runtime.Remoting.WellKnownServiceTypeEntry"></xref>.
  remarks: "Any client that knows the URI of a registered well-known object can obtain a proxy for the object by registering the channel it prefers with <xref:System.Runtime.Remoting.Channels.ChannelServices>, and activating the object by calling `new` or the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method. To activate a well-known object with `new`, you must first register the well-known object type on the client using the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method. Calling the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method gives the remoting infrastructure the location of the remote object, which allows the `new` keyword to create it. If, on the other hand, you use the <xref:System.Activator.GetObject%2A?displayProperty=fullName> method to activate the well-known object, you must supply it with the object's URL as an argument, so no prior registration on the client end is necessary.  \n  \n When the call arrives at the server, the .NET Framework extracts the URI from the message, examines the remoting tables to locate the reference for the object that matches the URI, and then instantiates the object if necessary, forwarding the method call to the object. If the object is registered as <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, it is destroyed after the method call is completed. A new instance of the object is created for each method called. The only difference between <xref:System.Activator.GetObject%2A?displayProperty=fullName> and `new` is that the former allows you to specify a URL as a parameter, and the latter obtains the URL from the configuration.  \n  \n The remote object itself is not instantiated by the registration process. This only happens when a client attempts to call a method on the object or activates the object from the client side.  \n  \n For a detailed description of well-known objects, see [&#91;\\<topic://cpconServerActivation>&#93;](http://msdn.microsoft.com/en-us/77ded6e2-4ca8-448b-acf2-562d27fd4396)."
  example:
  - "The following code example demonstrates registration of an object type on the server as a well-known object type. For the client code that corresponds to the presented server code, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> method.  \n  \n [!code-cpp[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#1)]\n [!code-csharp[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#1)]\n [!code-vb[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#1)]  \n[!code-cpp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#2)]\n[!code-csharp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#2)]\n[!code-vb[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#2)]  \n[!code-cpp[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#3)]\n[!code-csharp[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#3)]\n[!code-vb[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#3)]  \n  \n The following code example shows the service object registered in the sample code above.  \n  \n [!code-cpp[RemotingConfiguration.ServerActivation1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/service.cpp#4)]\n [!code-csharp[RemotingConfiguration.ServerActivation1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/service.cs#4)]\n [!code-vb[RemotingConfiguration.ServerActivation1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/service.vb#4)]"
  syntax:
    content: public static void RegisterWellKnownServiceType (Type type, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
    parameters:
    - id: type
      type: System.Type
      description: The object <xref href="System.Type"></xref>.
    - id: objectUri
      type: System.String
      description: The object URI.
    - id: mode
      type: System.Runtime.Remoting.WellKnownObjectMode
      description: The activation mode of the well-known object type being registered. (See <xref href="System.Runtime.Remoting.WellKnownObjectMode"></xref>.)
  overload: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: At least one of the callers higher in the callstack does not have permission to configure remoting types and channels.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
  ms.technology:
  - dotnet-standard
  manager: ghogen
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationId
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: ApplicationId
  nameWithType: RemotingConfiguration.ApplicationId
  fullName: RemotingConfiguration.ApplicationId
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationName
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: ApplicationName
  nameWithType: RemotingConfiguration.ApplicationName
  fullName: RemotingConfiguration.ApplicationName
- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: Configure(String)
  nameWithType: RemotingConfiguration.Configure(String)
  fullName: RemotingConfiguration.Configure(String)
- uid: System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: Configure(String, Boolean)
  nameWithType: RemotingConfiguration.Configure(String, Boolean)
  fullName: RemotingConfiguration.Configure(String, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: CustomErrorsEnabled(Boolean)
  nameWithType: RemotingConfiguration.CustomErrorsEnabled(Boolean)
  fullName: RemotingConfiguration.CustomErrorsEnabled(Boolean)
- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: CustomErrorsMode
  nameWithType: RemotingConfiguration.CustomErrorsMode
  fullName: RemotingConfiguration.CustomErrorsMode
- uid: System.Runtime.Remoting.CustomErrorsModes
  parent: System.Runtime.Remoting
  isExternal: false
  name: CustomErrorsModes
  nameWithType: CustomErrorsModes
  fullName: System.Runtime.Remoting.CustomErrorsModes
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredActivatedClientTypes()
  nameWithType: RemotingConfiguration.GetRegisteredActivatedClientTypes()
  fullName: RemotingConfiguration.GetRegisteredActivatedClientTypes()
- uid: System.Runtime.Remoting.ActivatedClientTypeEntry
  name: ActivatedClientTypeEntry
  nameWithType: ActivatedClientTypeEntry
  fullName: System.Runtime.Remoting.ActivatedClientTypeEntry
- uid: System.Runtime.Remoting.ActivatedClientTypeEntry[]
  parent: System.Runtime.Remoting
  isExternal: false
  name: ActivatedClientTypeEntry[]
  nameWithType: ActivatedClientTypeEntry[]
  fullName: System.Runtime.Remoting.ActivatedClientTypeEntry[]
  spec.csharp:
  - uid: System.Runtime.Remoting.ActivatedClientTypeEntry
    name: ActivatedClientTypeEntry
    nameWithType: ActivatedClientTypeEntry
    fullName: System.Runtime.Remoting.ActivatedClientTypeEntry
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredActivatedServiceTypes()
  nameWithType: RemotingConfiguration.GetRegisteredActivatedServiceTypes()
  fullName: RemotingConfiguration.GetRegisteredActivatedServiceTypes()
- uid: System.Runtime.Remoting.ActivatedServiceTypeEntry
  name: ActivatedServiceTypeEntry
  nameWithType: ActivatedServiceTypeEntry
  fullName: System.Runtime.Remoting.ActivatedServiceTypeEntry
- uid: System.Runtime.Remoting.ActivatedServiceTypeEntry[]
  parent: System.Runtime.Remoting
  isExternal: false
  name: ActivatedServiceTypeEntry[]
  nameWithType: ActivatedServiceTypeEntry[]
  fullName: System.Runtime.Remoting.ActivatedServiceTypeEntry[]
  spec.csharp:
  - uid: System.Runtime.Remoting.ActivatedServiceTypeEntry
    name: ActivatedServiceTypeEntry
    nameWithType: ActivatedServiceTypeEntry
    fullName: System.Runtime.Remoting.ActivatedServiceTypeEntry
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredWellKnownClientTypes()
  nameWithType: RemotingConfiguration.GetRegisteredWellKnownClientTypes()
  fullName: RemotingConfiguration.GetRegisteredWellKnownClientTypes()
- uid: System.Runtime.Remoting.WellKnownClientTypeEntry
  name: WellKnownClientTypeEntry
  nameWithType: WellKnownClientTypeEntry
  fullName: System.Runtime.Remoting.WellKnownClientTypeEntry
- uid: System.Runtime.Remoting.WellKnownClientTypeEntry[]
  parent: System.Runtime.Remoting
  isExternal: false
  name: WellKnownClientTypeEntry[]
  nameWithType: WellKnownClientTypeEntry[]
  fullName: System.Runtime.Remoting.WellKnownClientTypeEntry[]
  spec.csharp:
  - uid: System.Runtime.Remoting.WellKnownClientTypeEntry
    name: WellKnownClientTypeEntry
    nameWithType: WellKnownClientTypeEntry
    fullName: System.Runtime.Remoting.WellKnownClientTypeEntry
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredWellKnownServiceTypes()
  nameWithType: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()
  fullName: RemotingConfiguration.GetRegisteredWellKnownServiceTypes()
- uid: System.Runtime.Remoting.WellKnownServiceTypeEntry
  name: WellKnownServiceTypeEntry
  nameWithType: WellKnownServiceTypeEntry
  fullName: System.Runtime.Remoting.WellKnownServiceTypeEntry
- uid: System.Runtime.Remoting.WellKnownServiceTypeEntry[]
  parent: System.Runtime.Remoting
  isExternal: false
  name: WellKnownServiceTypeEntry[]
  nameWithType: WellKnownServiceTypeEntry[]
  fullName: System.Runtime.Remoting.WellKnownServiceTypeEntry[]
  spec.csharp:
  - uid: System.Runtime.Remoting.WellKnownServiceTypeEntry
    name: WellKnownServiceTypeEntry
    nameWithType: WellKnownServiceTypeEntry
    fullName: System.Runtime.Remoting.WellKnownServiceTypeEntry
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsActivationAllowed(Type)
  nameWithType: RemotingConfiguration.IsActivationAllowed(Type)
  fullName: RemotingConfiguration.IsActivationAllowed(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsRemotelyActivatedClientType(String, String)
  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)
  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(String, String)
- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsRemotelyActivatedClientType(Type)
  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType(Type)
  fullName: RemotingConfiguration.IsRemotelyActivatedClientType(Type)
- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsWellKnownClientType(Type)
  nameWithType: RemotingConfiguration.IsWellKnownClientType(Type)
  fullName: RemotingConfiguration.IsWellKnownClientType(Type)
- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsWellKnownClientType(String, String)
  nameWithType: RemotingConfiguration.IsWellKnownClientType(String, String)
  fullName: RemotingConfiguration.IsWellKnownClientType(String, String)
- uid: System.Runtime.Remoting.RemotingConfiguration.ProcessId
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: ProcessId
  nameWithType: RemotingConfiguration.ProcessId
  fullName: RemotingConfiguration.ProcessId
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterActivatedClientType(ActivatedClientTypeEntry)
  nameWithType: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)
  fullName: RemotingConfiguration.RegisterActivatedClientType(ActivatedClientTypeEntry)
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterActivatedClientType(Type, String)
  nameWithType: RemotingConfiguration.RegisterActivatedClientType(Type, String)
  fullName: RemotingConfiguration.RegisterActivatedClientType(Type, String)
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterActivatedServiceType(ActivatedServiceTypeEntry)
  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)
  fullName: RemotingConfiguration.RegisterActivatedServiceType(ActivatedServiceTypeEntry)
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterActivatedServiceType(Type)
  nameWithType: RemotingConfiguration.RegisterActivatedServiceType(Type)
  fullName: RemotingConfiguration.RegisterActivatedServiceType(Type)
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterWellKnownClientType(WellKnownClientTypeEntry)
  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)
  fullName: RemotingConfiguration.RegisterWellKnownClientType(WellKnownClientTypeEntry)
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterWellKnownClientType(Type, String)
  nameWithType: RemotingConfiguration.RegisterWellKnownClientType(Type, String)
  fullName: RemotingConfiguration.RegisterWellKnownClientType(Type, String)
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterWellKnownServiceType(WellKnownServiceTypeEntry)
  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)
  fullName: RemotingConfiguration.RegisterWellKnownServiceType(WellKnownServiceTypeEntry)
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)
  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)
  fullName: RemotingConfiguration.RegisterWellKnownServiceType(Type, String, WellKnownObjectMode)
- uid: System.Runtime.Remoting.WellKnownObjectMode
  parent: System.Runtime.Remoting
  isExternal: false
  name: WellKnownObjectMode
  nameWithType: WellKnownObjectMode
  fullName: System.Runtime.Remoting.WellKnownObjectMode
- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationId*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: ApplicationId
  nameWithType: RemotingConfiguration.ApplicationId
  fullName: RemotingConfiguration.ApplicationId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.ApplicationName*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: ApplicationName
  nameWithType: RemotingConfiguration.ApplicationName
  fullName: RemotingConfiguration.ApplicationName
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.Configure*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: Configure
  nameWithType: RemotingConfiguration.Configure
  fullName: RemotingConfiguration.Configure
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: CustomErrorsEnabled
  nameWithType: RemotingConfiguration.CustomErrorsEnabled
  fullName: RemotingConfiguration.CustomErrorsEnabled
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: CustomErrorsMode
  nameWithType: RemotingConfiguration.CustomErrorsMode
  fullName: RemotingConfiguration.CustomErrorsMode
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredActivatedClientTypes
  nameWithType: RemotingConfiguration.GetRegisteredActivatedClientTypes
  fullName: RemotingConfiguration.GetRegisteredActivatedClientTypes
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredActivatedServiceTypes
  nameWithType: RemotingConfiguration.GetRegisteredActivatedServiceTypes
  fullName: RemotingConfiguration.GetRegisteredActivatedServiceTypes
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredWellKnownClientTypes
  nameWithType: RemotingConfiguration.GetRegisteredWellKnownClientTypes
  fullName: RemotingConfiguration.GetRegisteredWellKnownClientTypes
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: GetRegisteredWellKnownServiceTypes
  nameWithType: RemotingConfiguration.GetRegisteredWellKnownServiceTypes
  fullName: RemotingConfiguration.GetRegisteredWellKnownServiceTypes
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsActivationAllowed
  nameWithType: RemotingConfiguration.IsActivationAllowed
  fullName: RemotingConfiguration.IsActivationAllowed
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsRemotelyActivatedClientType
  nameWithType: RemotingConfiguration.IsRemotelyActivatedClientType
  fullName: RemotingConfiguration.IsRemotelyActivatedClientType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: IsWellKnownClientType
  nameWithType: RemotingConfiguration.IsWellKnownClientType
  fullName: RemotingConfiguration.IsWellKnownClientType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.ProcessId*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: ProcessId
  nameWithType: RemotingConfiguration.ProcessId
  fullName: RemotingConfiguration.ProcessId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterActivatedClientType
  nameWithType: RemotingConfiguration.RegisterActivatedClientType
  fullName: RemotingConfiguration.RegisterActivatedClientType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterActivatedServiceType
  nameWithType: RemotingConfiguration.RegisterActivatedServiceType
  fullName: RemotingConfiguration.RegisterActivatedServiceType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterWellKnownClientType
  nameWithType: RemotingConfiguration.RegisterWellKnownClientType
  fullName: RemotingConfiguration.RegisterWellKnownClientType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType*
  parent: System.Runtime.Remoting.RemotingConfiguration
  isExternal: false
  name: RegisterWellKnownServiceType
  nameWithType: RemotingConfiguration.RegisterWellKnownServiceType
  fullName: RemotingConfiguration.RegisterWellKnownServiceType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/RemotingConfiguration.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
