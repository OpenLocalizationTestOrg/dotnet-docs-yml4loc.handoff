### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Devices.Keyboard
  commentId: T:Microsoft.VisualBasic.Devices.Keyboard
  id: Keyboard
  children:
  - Microsoft.VisualBasic.Devices.Keyboard.#ctor
  - Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  - Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.NumLock
  - Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  - Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  langs:
  - csharp
  name: Keyboard
  nameWithType: Keyboard
  fullName: Microsoft.VisualBasic.Devices.Keyboard
  type: Class
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Provides properties for accessing the current state of the keyboard, such as what keys are currently pressed, and provides a method to send keystrokes to the active window.
  remarks: "The `My.Computer.Keyboard` object provides an interface to the computer's keyboard. The properties of the `My.Computer.Keyboard` provide information about the state of several special keys. The `My.Computer.Keyboard.SendKeys` method lets you send keys to the active window as if they have been typed at the keyboard.  \n  \n## Tasks  \n The following table lists an example of a task involving the `My.Computer.Keyboard` object.  \n  \n|To|See|  \n|-|-|  \n|Send keystrokes to an application|[How to: Start an Application and Send it Keystrokes (Visual Basic)](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is pressed.  \n  \n [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]"
  syntax:
    content: public class Keyboard
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  commentId: M:Microsoft.VisualBasic.Devices.Keyboard.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Keyboard.Keyboard()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Initializes a new instance of the <xref href="Microsoft.VisualBasic.Devices.Keyboard"></xref> class.
  syntax:
    content: public Keyboard ();
    parameters: []
  overload: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  commentId: P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  id: AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Keyboard.AltKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Gets a `Boolean` indicating if the ALT key is down.
  remarks: "The `My.Computer.Keyboard.AltKeyDown` property provides functionality similar to the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property.  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.AltKeyDown` property to determine if the computer's ALT key is down.  \n  \n [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]"
  syntax:
    content: public bool AltKeyDown { get; }
    return:
      type: System.Boolean
      description: 'A `Boolean` value: `True` if the ALT key is down; otherwise `False`.'
  overload: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  commentId: P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  id: CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Keyboard.CapsLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Gets a `Boolean` indicating if CAPS LOCK is turned on.
  remarks: "Only the state of CAPS LOCK is returned.  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.CapsLock` property to determine if the computer's CAPS LOCK is turned on.  \n  \n [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]"
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      public bool CapsLock { get; }
    return:
      type: System.Boolean
      description: 'A `Boolean` value: `True` if CAPS LOCK is turned on; otherwise `False`.'
  overload: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  commentId: P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  id: CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Keyboard.CtrlKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Gets a `Boolean` indicating if a CTRL key is down.
  remarks: "The `My.Computer.Keyboard.CtrlKeyDown` property provides functionality similar to the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property.  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is down.  \n  \n [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]"
  syntax:
    content: public bool CtrlKeyDown { get; }
    return:
      type: System.Boolean
      description: A `Boolean` value. `True` if a CTRL key is down; otherwise `False`.
  overload: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  commentId: P:Microsoft.VisualBasic.Devices.Keyboard.NumLock
  id: NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Keyboard.NumLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Gets a `Boolean` indicating if the NUM LOCK key is on.
  remarks: "Only the state of the NUM LOCK key is returned.  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.NumLock` property to determine if the computer's NUM LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]"
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      public bool NumLock { get; }
    return:
      type: System.Boolean
      description: A `Boolean` value. `True` if NUM LOCK is on; otherwise `False`.
  overload: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  commentId: P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  id: ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Keyboard.ScrollLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Gets a `Boolean` indicating whether the SCROLL LOCK key is on.
  remarks: "Only the state of the SCROLL LOCK key is returned.  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.ScrollLock` property to determine if the computer's SCROLL LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]"
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      public bool ScrollLock { get; }
    return:
      type: System.Boolean
      description: A `Boolean` value. `True` if SCROLL LOCK is on; otherwise `False`.
  overload: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  commentId: M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  id: SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Keyboard.SendKeys(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Sends one or more keystrokes to the active window, as if typed on the keyboard.
  remarks: "The `My.Computer.Keyboard.SendKeys` method provides functionality similar to the <xref:System.Windows.Forms.SendKeys.Send%2A> and <xref:System.Windows.Forms.SendKeys.SendWait%2A> methods.  \n  \n The `wait` argument is useful if the other application must finish before your application can continue.  \n  \n> [!NOTE]\n>  Because there is no managed method to activate another application, you can either use this class within the current application, manually select the window to send the keys to, or use Windows API methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications. For more information, see [Walkthrough: Calling Windows APIs](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  \n  \n The `keys` argument can specify any single key or any key combined with ALT, CTRL, or SHIFT (or any combination of those keys). Each key is represented by one or more characters, such as `a` for the character \"a\", or `{ENTER}` for the ENTER key.  \n  \n To combine a key with SHIFT, precede the key code with `+` (plus sign). To combine a key with CTRL, precede the key code with `^` (caret). To combine a key with ALT, precede the key code with `%` (percent sign). To specify repeating keys, use the form `{`*key number*`}`. You must put a space between *key* and *number*. For example, `{LEFT 42}` means \"press the LEFT ARROW key 42 times\"; `{h 10}` means \"press 'h' 10 times.\"  \n  \n The following table lists the codes that can be used to specify characters that are not displayed when you press the corresponding key (such as ENTER or TAB).  \n  \n|Key|Code|  \n|-|-|  \n|BACKSPACE|{BACKSPACE} or {BS}|  \n|BREAK|{BREAK}|  \n|CAPS LOCK|{CAPSLOCK}|  \n|CLEAR|{CLEAR}|  \n|DELETE|{DELETE} or {DEL}|  \n|DOWN ARROW|{DOWN}|  \n|END|{END}|  \n|ENTER (numeric keypad)|{ENTER}|  \n|ENTER|~|  \n|ESC|{ESCAPE} or {ESC}|  \n|HELP|{HELP}|  \n|HOME|{HOME}|  \n|INS|{INSERT}|  \n|LEFT ARROW|{LEFT}|  \n|NUM LOCK|{NUMLOCK}|  \n|PAGE DOWN|{PGDN}|  \n|PAGE UP|{PGUP}|  \n|RETURN|{RETURN}|  \n|RIGHT ARROW|{RIGHT}|  \n|SCROLL LOCK|{SCROLLLOCK}|  \n|TAB|{TAB}|  \n|UP ARROW|{UP}|  \n|F1 through F15|{F1} through {F15}|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys);
    parameters:
    - id: keys
      type: System.String
      description: A `String` that defines the keys to send.
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A partial-trust situation exists in which the user lacks necessary permissions.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  commentId: M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  id: SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String, Boolean)
  nameWithType: Keyboard.SendKeys(String, Boolean)
  fullName: Keyboard.SendKeys(String, Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Sends one or more keystrokes to the active window, as if typed on the keyboard.
  remarks: "The `My.Computer.Keyboard.SendKeys` method provides functionality similar to the <xref:System.Windows.Forms.SendKeys.Send%2A> and <xref:System.Windows.Forms.SendKeys.SendWait%2A> methods.  \n  \n The `wait` argument is useful if the other application must finish before your application can continue.  \n  \n> [!NOTE]\n>  Because there is no managed method to activate another application, you can either use this class within the current application, manually select the window to send the keys to, or use Windows API methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications. For more information, see [Walkthrough: Calling Windows APIs](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  \n  \n The `keys` argument can specify any single key or any key combined with ALT, CTRL, or SHIFT (or any combination of those keys). Each key is represented by one or more characters, such as `a` for the character \"a\", or `{ENTER}` for the ENTER key.  \n  \n To combine a key with SHIFT, precede the key code with `+` (plus sign). To combine a key with CTRL, precede the key code with `^` (caret). To combine a key with ALT, precede the key code with `%` (percent sign). To specify repeating keys, use the form `{`*key number*`}`. You must put a space between *key* and *number*. For example, `{LEFT 42}` means \"press the LEFT ARROW key 42 times\"; `{h 10}` means \"press 'h' 10 times.\"  \n  \n The following table lists the codes that can be used to specify characters that are not displayed when you press the corresponding key (such as ENTER or TAB).  \n  \n|Key|Code|  \n|-|-|  \n|BACKSPACE|{BACKSPACE} or {BS}|  \n|BREAK|{BREAK}|  \n|CAPS LOCK|{CAPSLOCK}|  \n|CLEAR|{CLEAR}|  \n|DELETE|{DELETE} or {DEL}|  \n|DOWN ARROW|{DOWN}|  \n|END|{END}|  \n|ENTER (numeric keypad)|{ENTER}|  \n|ENTER|~|  \n|ESC|{ESCAPE} or {ESC}|  \n|HELP|{HELP}|  \n|HOME|{HOME}|  \n|INS|{INSERT}|  \n|LEFT ARROW|{LEFT}|  \n|NUM LOCK|{NUMLOCK}|  \n|PAGE DOWN|{PGDN}|  \n|PAGE UP|{PGUP}|  \n|RETURN|{RETURN}|  \n|RIGHT ARROW|{RIGHT}|  \n|SCROLL LOCK|{SCROLLLOCK}|  \n|TAB|{TAB}|  \n|UP ARROW|{UP}|  \n|F1 through F15|{F1} through {F15}|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys, bool wait);
    parameters:
    - id: keys
      type: System.String
      description: A `String` that defines the keys to send.
    - id: wait
      type: System.Boolean
      description: Optional. A `Boolean` that specifies whether or not to wait for keystrokes to get processed before the application continues. `True` by default.
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A partial-trust situation exists in which the user lacks necessary permissions.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  commentId: P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  id: ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Keyboard.ShiftKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: Gets a `Boolean` indicating if a SHIFT key is down.
  remarks: "The `My.Computer.Keyboard.ShiftKeyDown` property provides functionality similar to the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property.  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|-|-|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|No|"
  example:
  - "This example uses the `My.Computer.Keyboard.ShiftKeyDown` property to determine if one of the computer's SHIFT keys is down.  \n  \n [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]"
  syntax:
    content: public bool ShiftKeyDown { get; }
    return:
      type: System.Boolean
      description: A `Boolean` value. `True` if a SHIFT key is down; otherwise `False`.
  overload: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Keyboard.Keyboard()
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Keyboard.AltKeyDown
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Keyboard.CapsLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Keyboard.CtrlKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Keyboard.NumLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Keyboard.ScrollLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Keyboard.SendKeys(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String, Boolean)
  nameWithType: Keyboard.SendKeys(String, Boolean)
  fullName: Keyboard.SendKeys(String, Boolean)
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Keyboard.ShiftKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard
  nameWithType: Keyboard.Keyboard
  fullName: Keyboard.Keyboard
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Keyboard.AltKeyDown
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Keyboard.CapsLock
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Keyboard.CtrlKeyDown
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Keyboard.NumLock
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Keyboard.ScrollLock
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys
  nameWithType: Keyboard.SendKeys
  fullName: Keyboard.SendKeys
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Keyboard.ShiftKeyDown
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Devices/Keyboard.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
