{"nodes":[{"content":"Provides data for the *MethodName*`Completed` event.","nodes":[{"pos":[0,52],"content":"Provides data for the <bpt id=\"p1\">*</bpt>MethodName<ept id=\"p1\">*</ept><ph id=\"ph1\">`Completed`</ph> event.","source":"Provides data for the *MethodName*`Completed` event."}],"pos":[896,949],"yaml":true},{"content":"If you are using a class that implements the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), the class will provide a *MethodName*`Completed` event. If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=fullName> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method.  \n  \n The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled.  \n  \n The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task.  \n  \n If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.","nodes":[{"pos":[0,562],"content":"If you are using a class that implements the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), the class will provide a *MethodName*`Completed` event. If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=fullName> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method.","nodes":[{"content":"If you are using a class that implements the <bpt id=\"p1\">[</bpt>Event-based Asynchronous Pattern Overview<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, the class will provide a <bpt id=\"p2\">*</bpt>MethodName<ept id=\"p2\">*</ept><ph id=\"ph1\">`Completed`</ph> event.","pos":[0,241],"source":"If you are using a class that implements the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), the class will provide a *MethodName*`Completed` event."},{"content":"If you add an instance of the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=fullName&gt;</ph> delegate to the event, you will receive information about the outcome of asynchronous operations in the <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> parameter of the corresponding event-handler method.","pos":[242,562],"source":" If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=fullName> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method."}]},{"pos":[569,758],"content":"The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled.","nodes":[{"content":"The client application's event-handler delegate can check the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property to determine if the asynchronous task was cancelled.","pos":[0,189],"source":"The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled."}]},{"pos":[765,978],"content":"The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task.","nodes":[{"content":"The client application's event-handler delegate can check the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property to determine if an exception occurred during execution of the asynchronous task.","pos":[0,213],"source":"The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task."}]},{"pos":[985,1387],"content":"If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.","nodes":[{"content":"If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the <bpt id=\"p1\">*</bpt>MethodName<ept id=\"p1\">*</ept><ph id=\"ph1\">`Completed`</ph> event by checking the value of the <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.","pos":[0,278],"source":"If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.","pos":[279,402]}]}],"pos":[960,2356],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> class.","nodes":[{"pos":[0,107],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> class."}],"pos":[7159,7267],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> class.","nodes":[{"pos":[0,107],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> class."}],"pos":[9041,9149],"yaml":true},{"content":"Any error that occurred during the asynchronous operation.","nodes":[{"pos":[0,58],"content":"Any error that occurred during the asynchronous operation.","nodes":[{"content":"Any error that occurred during the asynchronous operation.","pos":[0,58]}]}],"pos":[9336,9395],"yaml":true},{"content":"A value indicating whether the asynchronous operation was canceled.","nodes":[{"pos":[0,67],"content":"A value indicating whether the asynchronous operation was canceled.","nodes":[{"content":"A value indicating whether the asynchronous operation was canceled.","pos":[0,67]}]}],"pos":[9461,9529],"yaml":true},{"content":"The optional user-supplied state object passed to the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"></xref> method.","nodes":[{"pos":[0,151],"content":"The optional user-supplied state object passed to the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"The optional user-supplied state object passed to the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"></xref> method."}],"pos":[9594,9746],"yaml":true},{"content":"Gets a value indicating whether an asynchronous operation has been canceled.","nodes":[{"pos":[0,76],"content":"Gets a value indicating whether an asynchronous operation has been canceled.","nodes":[{"content":"Gets a value indicating whether an asynchronous operation has been canceled.","pos":[0,76]}]}],"pos":[11119,11196],"yaml":true},{"content":"When the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property is `true`, the asynchronous operation was interrupted.  \n  \n The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted.","nodes":[{"pos":[0,138],"content":"When the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, the asynchronous operation was interrupted.","source":"When the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property is `true`, the asynchronous operation was interrupted."},{"pos":[145,519],"content":"The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted.","nodes":[{"content":"The client application's event-handler delegate should check the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property before accessing any properties in a class derived from <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>; otherwise, the property will raise an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph> if the asynchronous operation was interrupted.","pos":[0,374],"source":"The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted."}]}],"pos":[11207,11731],"yaml":true,"extradata":"MT"},{"content":"`true` if the background operation has been canceled; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,96],"content":"`true` if the background operation has been canceled; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the background operation has been canceled; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,72],"source":"`true` if the background operation has been canceled; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[73,96],"source":" The default is `false`."}]}],"pos":[12929,13028],"yaml":true},{"content":"Gets a value indicating which error occurred during an asynchronous operation.","nodes":[{"pos":[0,78],"content":"Gets a value indicating which error occurred during an asynchronous operation.","nodes":[{"content":"Gets a value indicating which error occurred during an asynchronous operation.","pos":[0,78]}]}],"pos":[14381,14460],"yaml":true},{"content":"If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property. The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.  \n  \n The value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is `null` if the operation was canceled.","nodes":[{"pos":[0,654],"content":"If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property. The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.","nodes":[{"content":"If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property. The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.","pos":[0,654],"nodes":[{"content":"If an exception is raised during an asynchronous operation, the class will assign the exception to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property.","pos":[0,174],"source":"If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property."},{"content":"The client application's event-handler delegate should check the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property before accessing any properties in a class derived from <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>; otherwise, the property will raise a <ph id=\"ph3\">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> with its <ph id=\"ph4\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property holding a reference to <ph id=\"ph5\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>.","pos":[175,654],"source":" The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>."}]}]},{"pos":[661,789],"content":"The value of the <ph id=\"ph1\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph> if the operation was canceled.","source":"The value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is `null` if the operation was canceled."}],"pos":[14471,15265],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Exception\"></xref> instance, if an error occurred during an asynchronous operation; otherwise `null`.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instance, if an error occurred during an asynchronous operation; otherwise <ph id=\"ph2\">`null`</ph>.","source":"An <xref href=\"System.Exception\"></xref> instance, if an error occurred during an asynchronous operation; otherwise `null`."}],"pos":[16462,16586],"yaml":true},{"content":"Raises a user-supplied exception if an asynchronous operation failed.","nodes":[{"pos":[0,69],"content":"Raises a user-supplied exception if an asynchronous operation failed.","nodes":[{"content":"Raises a user-supplied exception if an asynchronous operation failed.","pos":[0,69]}]}],"pos":[18059,18129],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\"></xref> property is `true`.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","source":"The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\"></xref> property is `true`."}],"pos":[19002,19103],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref> property has been set by the asynchronous operation. The <xref href=\"System.Exception.InnerException\"></xref> property holds a reference to <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref>.","nodes":[{"pos":[0,290],"content":"The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref> property has been set by the asynchronous operation. The <xref href=\"System.Exception.InnerException\"></xref> property holds a reference to <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"&gt;&lt;/xref&gt;</ph> property has been set by the asynchronous operation.","pos":[0,129],"source":"The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref> property has been set by the asynchronous operation."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Exception.InnerException\"&gt;&lt;/xref&gt;</ph> property holds a reference to <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"&gt;&lt;/xref&gt;</ph>.","pos":[130,290],"source":" The <xref href=\"System.Exception.InnerException\"></xref> property holds a reference to <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref>."}]}],"pos":[19235,19526],"yaml":true},{"content":"Gets the unique identifier for the asynchronous task.","nodes":[{"pos":[0,53],"content":"Gets the unique identifier for the asynchronous task.","nodes":[{"content":"Gets the unique identifier for the asynchronous task.","pos":[0,53]}]}],"pos":[20817,20871],"yaml":true},{"content":"If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.  \n  \n The value of this property is set during the original call to the asynchronous method that started the task.","nodes":[{"pos":[0,390],"content":"If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.","nodes":[{"content":"If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the <bpt id=\"p1\">*</bpt>MethodName<ept id=\"p1\">*</ept><ph id=\"ph1\">`Completed`</ph> event by checking the value of the <ph id=\"ph2\">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.","pos":[0,269],"source":"If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property."},{"content":"Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.","pos":[270,390]}]},{"pos":[397,505],"content":"The value of this property is set during the original call to the asynchronous method that started the task.","nodes":[{"content":"The value of this property is set during the original call to the asynchronous method that started the task.","pos":[0,108]}]}],"pos":[20882,21392],"yaml":true,"extradata":"MT"},{"content":"An object reference that uniquely identifies the asynchronous task; otherwise, `null` if no value has been set.","nodes":[{"pos":[0,111],"content":"An object reference that uniquely identifies the asynchronous task; otherwise, <ph id=\"ph1\">`null`</ph> if no value has been set.","source":"An object reference that uniquely identifies the asynchronous task; otherwise, `null` if no value has been set."}],"pos":[22587,22699],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.AsyncCompletedEventArgs\n  commentId: T:System.ComponentModel.AsyncCompletedEventArgs\n  id: AsyncCompletedEventArgs\n  children:\n  - System.ComponentModel.AsyncCompletedEventArgs.#ctor\n  - System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)\n  - System.ComponentModel.AsyncCompletedEventArgs.Cancelled\n  - System.ComponentModel.AsyncCompletedEventArgs.Error\n  - System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  - System.ComponentModel.AsyncCompletedEventArgs.UserState\n  langs:\n  - csharp\n  name: AsyncCompletedEventArgs\n  nameWithType: AsyncCompletedEventArgs\n  fullName: System.ComponentModel.AsyncCompletedEventArgs\n  type: Class\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Provides data for the *MethodName*`Completed` event.\n  remarks: \"If you are using a class that implements the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), the class will provide a *MethodName*`Completed` event. If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=fullName> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method.  \\n  \\n The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled.  \\n  \\n The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task.  \\n  \\n If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.\"\n  example:\n  - \"The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]\"\n  syntax:\n    content: 'public class AsyncCompletedEventArgs : EventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  derivedClasses:\n  - System.Activities.InvokeCompletedEventArgs\n  - System.ComponentModel.RunWorkerCompletedEventArgs\n  - System.Deployment.Application.CheckForUpdateCompletedEventArgs\n  - System.Deployment.Application.DownloadApplicationCompletedEventArgs\n  - System.Deployment.Application.DownloadFileGroupCompletedEventArgs\n  - System.Deployment.Application.GetManifestCompletedEventArgs\n  - System.Device.Location.ResolveAddressCompletedEventArgs\n  - System.Net.DownloadDataCompletedEventArgs\n  - System.Net.DownloadStringCompletedEventArgs\n  - System.Net.OpenReadCompletedEventArgs\n  - System.Net.OpenWriteCompletedEventArgs\n  - System.Net.UploadDataCompletedEventArgs\n  - System.Net.UploadFileCompletedEventArgs\n  - System.Net.UploadStringCompletedEventArgs\n  - System.Net.UploadValuesCompletedEventArgs\n  - System.Net.NetworkInformation.PingCompletedEventArgs\n  - System.Net.PeerToPeer.ResolveCompletedEventArgs\n  - System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs\n  - System.Net.PeerToPeer.Collaboration.InviteCompletedEventArgs\n  - System.Net.PeerToPeer.Collaboration.RefreshDataCompletedEventArgs\n  - System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs\n  - System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs\n  - System.ServiceModel.Discovery.FindCompletedEventArgs\n  - System.ServiceModel.Discovery.ResolveCompletedEventArgs\n  - System.Speech.Recognition.EmulateRecognizeCompletedEventArgs\n  - System.Speech.Recognition.LoadGrammarCompletedEventArgs\n  - System.Speech.Recognition.RecognizeCompletedEventArgs\n  - System.Speech.Synthesis.PromptEventArgs\n  - System.Web.Services.Protocols.InvokeCompletedEventArgs\n  - System.Windows.Documents.GetPageCompletedEventArgs\n  - System.Windows.Documents.GetPageNumberCompletedEventArgs\n  - System.Windows.Documents.GetPageRootCompletedEventArgs\n  - System.Windows.Documents.Serialization.WritingCompletedEventArgs\n  - System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncCompletedEventArgs.#ctor\n  commentId: M:System.ComponentModel.AsyncCompletedEventArgs.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  langs:\n  - csharp\n  name: AsyncCompletedEventArgs()\n  nameWithType: AsyncCompletedEventArgs.AsyncCompletedEventArgs()\n  fullName: AsyncCompletedEventArgs.AsyncCompletedEventArgs()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> class.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.\", true)]\n\n      public AsyncCompletedEventArgs ();\n    parameters: []\n  overload: System.ComponentModel.AsyncCompletedEventArgs.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)\n  commentId: M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)\n  id: '#ctor(System.Exception,System.Boolean,System.Object)'\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  langs:\n  - csharp\n  name: AsyncCompletedEventArgs(Exception, Boolean, Object)\n  nameWithType: AsyncCompletedEventArgs.AsyncCompletedEventArgs(Exception, Boolean, Object)\n  fullName: AsyncCompletedEventArgs.AsyncCompletedEventArgs(Exception, Boolean, Object)\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\"></xref> class.\n  syntax:\n    content: public AsyncCompletedEventArgs (Exception error, bool cancelled, object userState);\n    parameters:\n    - id: error\n      type: System.Exception\n      description: Any error that occurred during the asynchronous operation.\n    - id: cancelled\n      type: System.Boolean\n      description: A value indicating whether the asynchronous operation was canceled.\n    - id: userState\n      type: System.Object\n      description: The optional user-supplied state object passed to the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\"></xref> method.\n  overload: System.ComponentModel.AsyncCompletedEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Cancelled\n  commentId: P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled\n  id: Cancelled\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  langs:\n  - csharp\n  name: Cancelled\n  nameWithType: AsyncCompletedEventArgs.Cancelled\n  fullName: AsyncCompletedEventArgs.Cancelled\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether an asynchronous operation has been canceled.\n  remarks: \"When the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property is `true`, the asynchronous operation was interrupted.  \\n  \\n The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted.\"\n  example:\n  - \"The following code example demonstrates the using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]\"\n  syntax:\n    content: public bool Cancelled { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the background operation has been canceled; otherwise `false`. The default is `false`.'\n  overload: System.ComponentModel.AsyncCompletedEventArgs.Cancelled*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Error\n  commentId: P:System.ComponentModel.AsyncCompletedEventArgs.Error\n  id: Error\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  langs:\n  - csharp\n  name: Error\n  nameWithType: AsyncCompletedEventArgs.Error\n  fullName: AsyncCompletedEventArgs.Error\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets a value indicating which error occurred during an asynchronous operation.\n  remarks: \"If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property. The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.  \\n  \\n The value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is `null` if the operation was canceled.\"\n  example:\n  - \"The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]\"\n  syntax:\n    content: public Exception Error { get; }\n    return:\n      type: System.Exception\n      description: An <xref href=\"System.Exception\"></xref> instance, if an error occurred during an asynchronous operation; otherwise `null`.\n  overload: System.ComponentModel.AsyncCompletedEventArgs.Error*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  commentId: M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  id: RaiseExceptionIfNecessary\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  langs:\n  - csharp\n  name: RaiseExceptionIfNecessary()\n  nameWithType: AsyncCompletedEventArgs.RaiseExceptionIfNecessary()\n  fullName: AsyncCompletedEventArgs.RaiseExceptionIfNecessary()\n  type: Method\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Raises a user-supplied exception if an asynchronous operation failed.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates using <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> in derived class properties.  \\n  \\n  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#6)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#6)]\"\n  syntax:\n    content: protected void RaiseExceptionIfNecessary ();\n    parameters: []\n  overload: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\"></xref> property is `true`.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref> property has been set by the asynchronous operation. The <xref href=\"System.Exception.InnerException\"></xref> property holds a reference to <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.AsyncCompletedEventArgs.UserState\n  commentId: P:System.ComponentModel.AsyncCompletedEventArgs.UserState\n  id: UserState\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  langs:\n  - csharp\n  name: UserState\n  nameWithType: AsyncCompletedEventArgs.UserState\n  fullName: AsyncCompletedEventArgs.UserState\n  type: Property\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets the unique identifier for the asynchronous task.\n  remarks: \"If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property. Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.  \\n  \\n The value of this property is set during the original call to the asynchronous method that started the task.\"\n  example:\n  - \"The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \\n  \\n [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]\\n [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  \\n[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]\\n[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]\"\n  syntax:\n    content: public object UserState { get; }\n    return:\n      type: System.Object\n      description: An object reference that uniquely identifies the asynchronous task; otherwise, `null` if no value has been set.\n  overload: System.ComponentModel.AsyncCompletedEventArgs.UserState*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.ComponentModel.AsyncCompletedEventArgs.#ctor\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: AsyncCompletedEventArgs()\n  nameWithType: AsyncCompletedEventArgs.AsyncCompletedEventArgs()\n  fullName: AsyncCompletedEventArgs.AsyncCompletedEventArgs()\n- uid: System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: AsyncCompletedEventArgs(Exception, Boolean, Object)\n  nameWithType: AsyncCompletedEventArgs.AsyncCompletedEventArgs(Exception, Boolean, Object)\n  fullName: AsyncCompletedEventArgs.AsyncCompletedEventArgs(Exception, Boolean, Object)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Cancelled\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: Cancelled\n  nameWithType: AsyncCompletedEventArgs.Cancelled\n  fullName: AsyncCompletedEventArgs.Cancelled\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Error\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: Error\n  nameWithType: AsyncCompletedEventArgs.Error\n  fullName: AsyncCompletedEventArgs.Error\n- uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: RaiseExceptionIfNecessary()\n  nameWithType: AsyncCompletedEventArgs.RaiseExceptionIfNecessary()\n  fullName: AsyncCompletedEventArgs.RaiseExceptionIfNecessary()\n- uid: System.ComponentModel.AsyncCompletedEventArgs.UserState\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: UserState\n  nameWithType: AsyncCompletedEventArgs.UserState\n  fullName: AsyncCompletedEventArgs.UserState\n- uid: System.ComponentModel.AsyncCompletedEventArgs.#ctor*\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: AsyncCompletedEventArgs\n  nameWithType: AsyncCompletedEventArgs.AsyncCompletedEventArgs\n  fullName: AsyncCompletedEventArgs.AsyncCompletedEventArgs\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Cancelled*\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: Cancelled\n  nameWithType: AsyncCompletedEventArgs.Cancelled\n  fullName: AsyncCompletedEventArgs.Cancelled\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n- uid: System.ComponentModel.AsyncCompletedEventArgs.Error*\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: Error\n  nameWithType: AsyncCompletedEventArgs.Error\n  fullName: AsyncCompletedEventArgs.Error\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n- uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary*\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: RaiseExceptionIfNecessary\n  nameWithType: AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  fullName: AsyncCompletedEventArgs.RaiseExceptionIfNecessary\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n- uid: System.ComponentModel.AsyncCompletedEventArgs.UserState*\n  parent: System.ComponentModel.AsyncCompletedEventArgs\n  isExternal: false\n  name: UserState\n  nameWithType: AsyncCompletedEventArgs.UserState\n  fullName: AsyncCompletedEventArgs.UserState\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/AsyncCompletedEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}