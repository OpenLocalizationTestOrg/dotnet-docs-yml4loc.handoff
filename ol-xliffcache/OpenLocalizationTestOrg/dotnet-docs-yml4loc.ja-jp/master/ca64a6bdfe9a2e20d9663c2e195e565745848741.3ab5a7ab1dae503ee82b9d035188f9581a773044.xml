{"nodes":[{"content":"Describes a committable transaction.","nodes":[{"pos":[0,36],"content":"Describes a committable transaction.","nodes":[{"content":"Describes a committable transaction.","pos":[0,36]}]}],"pos":[1443,1480],"yaml":true},{"content":"The <xref:System.Transactions.CommittableTransaction> class provides an explicit way for applications to use a transaction, as opposed to using the <xref:System.Transactions.TransactionScope> class implicitly. Unlike the <xref:System.Transactions.TransactionScope> class, the application writer needs to specifically call the <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.Transaction.Rollback%2A> methods in order to commit or abort the transaction. However, only the creator of a transaction can commit the transaction. Therefore, copies of a committable transaction, obtained through the <xref:System.Transactions.Transaction.Clone%2A> method are not committable.  \n  \n> [!NOTE]\n>  It is recommended that you create implicit transactions using the <xref:System.Transactions.TransactionScope> class, so that the ambient transaction context is automatically managed for you. You should also use the <xref:System.Transactions.TransactionScope> and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.  \n  \n Creating a <xref:System.Transactions.CommittableTransaction> does not automatically set the ambient transaction, which is the transaction your code executes in. You can get or set the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A> property of the global <xref:System.Transactions.Transaction> object. For more information on ambient transactions, see the \" Managing Transaction Flow using TransactionScopeOption\" section of the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic. If the ambient transaction is not set, any operation on a resource manager is not part of that transaction. You need to explicitly set and reset the ambient transaction, to ensure that resource managers operate under the right transaction context.  \n  \n Until a <xref:System.Transactions.CommittableTransaction> has been committed, all the resources involved with the transaction are still locked.  \n  \n A <xref:System.Transactions.CommittableTransaction> object cannot be reused. Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.","nodes":[{"pos":[0,709],"content":"The <xref:System.Transactions.CommittableTransaction> class provides an explicit way for applications to use a transaction, as opposed to using the <xref:System.Transactions.TransactionScope> class implicitly. Unlike the <xref:System.Transactions.TransactionScope> class, the application writer needs to specifically call the <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.Transaction.Rollback%2A> methods in order to commit or abort the transaction. However, only the creator of a transaction can commit the transaction. Therefore, copies of a committable transaction, obtained through the <xref:System.Transactions.Transaction.Clone%2A> method are not committable.","nodes":[{"content":"The <xref:System.Transactions.CommittableTransaction> class provides an explicit way for applications to use a transaction, as opposed to using the <xref:System.Transactions.TransactionScope> class implicitly. Unlike the <xref:System.Transactions.TransactionScope> class, the application writer needs to specifically call the <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.Transaction.Rollback%2A> methods in order to commit or abort the transaction. However, only the creator of a transaction can commit the transaction. Therefore, copies of a committable transaction, obtained through the <xref:System.Transactions.Transaction.Clone%2A> method are not committable.","pos":[0,709],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class provides an explicit way for applications to use a transaction, as opposed to using the <ph id=\"ph2\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class implicitly.","pos":[0,209],"source":"The <xref:System.Transactions.CommittableTransaction> class provides an explicit way for applications to use a transaction, as opposed to using the <xref:System.Transactions.TransactionScope> class implicitly."},{"content":"Unlike the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, the application writer needs to specifically call the <ph id=\"ph2\">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> methods in order to commit or abort the transaction.","pos":[210,493],"source":" Unlike the <xref:System.Transactions.TransactionScope> class, the application writer needs to specifically call the <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.Transaction.Rollback%2A> methods in order to commit or abort the transaction."},{"content":"However, only the creator of a transaction can commit the transaction.","pos":[494,564]},{"content":"Therefore, copies of a committable transaction, obtained through the <ph id=\"ph1\">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> method are not committable.","pos":[565,709],"source":" Therefore, copies of a committable transaction, obtained through the <xref:System.Transactions.Transaction.Clone%2A> method are not committable."}]}]},{"pos":[717,1347],"content":"[!NOTE]\n It is recommended that you create implicit transactions using the <xref:System.Transactions.TransactionScope> class, so that the ambient transaction context is automatically managed for you. You should also use the <xref:System.Transactions.TransactionScope> and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.","leadings":["","> "],"nodes":[{"content":" It is recommended that you create implicit transactions using the <xref:System.Transactions.TransactionScope> class, so that the ambient transaction context is automatically managed for you. You should also use the <xref:System.Transactions.TransactionScope> and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.","pos":[8,628],"nodes":[{"content":"It is recommended that you create implicit transactions using the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.","pos":[1,191],"source":" It is recommended that you create implicit transactions using the <xref:System.Transactions.TransactionScope> class, so that the ambient transaction context is automatically managed for you."},{"content":"You should also use the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.","pos":[192,436],"source":" You should also use the <xref:System.Transactions.TransactionScope> and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls."},{"content":"For more information on this model, see the <bpt id=\"p1\">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.","pos":[437,620],"source":" For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic."}]}]},{"pos":[1354,2214],"content":"Creating a <xref:System.Transactions.CommittableTransaction> does not automatically set the ambient transaction, which is the transaction your code executes in. You can get or set the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A> property of the global <xref:System.Transactions.Transaction> object. For more information on ambient transactions, see the \" Managing Transaction Flow using TransactionScopeOption\" section of the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic. If the ambient transaction is not set, any operation on a resource manager is not part of that transaction. You need to explicitly set and reset the ambient transaction, to ensure that resource managers operate under the right transaction context.","nodes":[{"content":"Creating a <ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> does not automatically set the ambient transaction, which is the transaction your code executes in.","pos":[0,160],"source":"Creating a <xref:System.Transactions.CommittableTransaction> does not automatically set the ambient transaction, which is the transaction your code executes in."},{"content":"You can get or set the ambient transaction by calling the static <ph id=\"ph1\">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property of the global <ph id=\"ph2\">&lt;xref:System.Transactions.Transaction&gt;</ph> object.","pos":[161,345],"source":" You can get or set the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A> property of the global <xref:System.Transactions.Transaction> object."},{"content":"For more information on ambient transactions, see the \" Managing Transaction Flow using TransactionScopeOption\" section of the <bpt id=\"p1\">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id=\"p1\">](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)</ept> topic.","pos":[346,612],"source":" For more information on ambient transactions, see the \" Managing Transaction Flow using TransactionScopeOption\" section of the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic."},{"content":"If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.","pos":[613,720]},{"content":"You need to explicitly set and reset the ambient transaction, to ensure that resource managers operate under the right transaction context.","pos":[721,860]}]},{"pos":[2221,2364],"content":"Until a <xref:System.Transactions.CommittableTransaction> has been committed, all the resources involved with the transaction are still locked.","nodes":[{"content":"Until a <ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> has been committed, all the resources involved with the transaction are still locked.","pos":[0,143],"source":"Until a <xref:System.Transactions.CommittableTransaction> has been committed, all the resources involved with the transaction are still locked."}]},{"pos":[2371,2582],"content":"A <xref:System.Transactions.CommittableTransaction> object cannot be reused. Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.","nodes":[{"content":"A <xref:System.Transactions.CommittableTransaction> object cannot be reused. Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.","pos":[0,211],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object cannot be reused.","pos":[0,76],"source":"A <xref:System.Transactions.CommittableTransaction> object cannot be reused."},{"content":"Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.","pos":[77,211]}]}]}],"pos":[1491,4087],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class.","nodes":[{"pos":[0,104],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class."}],"pos":[8278,8383],"yaml":true},{"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","nodes":[{"pos":[0,109],"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","nodes":[{"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","pos":[0,109]}]}],"pos":[9056,9166],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class with the specified <code>timeout</code> value.","nodes":[{"pos":[0,150],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction\"&gt;&lt;/xref&gt;</ph> class with the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> value.","source":"Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class with the specified <code>timeout</code> value."}],"pos":[10450,10601],"yaml":true},{"content":"The maximum amount of time the transaction can exist, before it is aborted.","nodes":[{"pos":[0,75],"content":"The maximum amount of time the transaction can exist, before it is aborted.","nodes":[{"content":"The maximum amount of time the transaction can exist, before it is aborted.","pos":[0,75]}]}],"pos":[10755,10831],"yaml":true},{"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","nodes":[{"pos":[0,109],"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","nodes":[{"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","pos":[0,109]}]}],"pos":[11025,11135],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class with the specified transaction options.","nodes":[{"pos":[0,143],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction\"&gt;&lt;/xref&gt;</ph> class with the specified transaction options.","source":"Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class with the specified transaction options."}],"pos":[12518,12662],"yaml":true},{"content":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use for the new transaction.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Transactions.TransactionOptions\"&gt;&lt;/xref&gt;</ph> structure that describes the transaction options to use for the new transaction.","source":"A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use for the new transaction."}],"pos":[13024,13167],"yaml":true},{"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","nodes":[{"pos":[0,109],"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","nodes":[{"content":"An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.","pos":[0,109]}]}],"pos":[13361,13471],"yaml":true},{"content":"<code>options</code> is invalid.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> is invalid.","source":"<code>options</code> is invalid."}],"pos":[13565,13598],"yaml":true},{"content":"Begins an attempt to commit the transaction asynchronously.","nodes":[{"pos":[0,59],"content":"Begins an attempt to commit the transaction asynchronously.","nodes":[{"content":"Begins an attempt to commit the transaction asynchronously.","pos":[0,59]}]}],"pos":[14956,15016],"yaml":true},{"content":"This method returns immediately, before the transaction has been completed. The transaction then commits on a different thread, and the `asyncCallback` delegate is invoked when it has completed. After this method is called, you do not receive the outcome of the transaction until you call <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.  \n  \n> [!NOTE]\n>  The commit process may complete synchronously inside this method call.","nodes":[{"pos":[0,352],"content":"This method returns immediately, before the transaction has been completed. The transaction then commits on a different thread, and the `asyncCallback` delegate is invoked when it has completed. After this method is called, you do not receive the outcome of the transaction until you call <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.","nodes":[{"content":"This method returns immediately, before the transaction has been completed.","pos":[0,75]},{"content":"The transaction then commits on a different thread, and the <ph id=\"ph1\">`asyncCallback`</ph> delegate is invoked when it has completed.","pos":[76,194],"source":" The transaction then commits on a different thread, and the `asyncCallback` delegate is invoked when it has completed."},{"content":"After this method is called, you do not receive the outcome of the transaction until you call <ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.","pos":[195,352],"source":" After this method is called, you do not receive the outcome of the transaction until you call <xref:System.Transactions.CommittableTransaction.EndCommit%2A>."}]},{"pos":[360,441],"content":"[!NOTE]\n The commit process may complete synchronously inside this method call.","leadings":["","> "],"nodes":[{"content":"The commit process may complete synchronously inside this method call.","pos":[9,79]}]}],"pos":[15027,15474],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.","nodes":[{"pos":[0,177],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.","source":"An <xref href=\"System.IAsyncResult\"></xref> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete."}],"pos":[15809,15987],"yaml":true},{"content":"Attempts to commit the transaction.","nodes":[{"pos":[0,35],"content":"Attempts to commit the transaction.","nodes":[{"content":"Attempts to commit the transaction.","pos":[0,35]}]}],"pos":[17229,17265],"yaml":true},{"content":"When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction. If any participant votes to roll back the transaction, it is rolled back and this method throws a <xref:System.Transactions.TransactionException> exception. This is a normal occurrence for a transaction and your code should catch and process such exceptions.  \n  \n <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.  \n  \n Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur. If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen. This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job. However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction. The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish. You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.","nodes":[{"pos":[0,453],"content":"When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction. If any participant votes to roll back the transaction, it is rolled back and this method throws a <xref:System.Transactions.TransactionException> exception. This is a normal occurrence for a transaction and your code should catch and process such exceptions.","nodes":[{"content":"When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction. If any participant votes to roll back the transaction, it is rolled back and this method throws a <xref:System.Transactions.TransactionException> exception. This is a normal occurrence for a transaction and your code should catch and process such exceptions.","pos":[0,453],"nodes":[{"content":"When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.","pos":[0,194]},{"content":"If any participant votes to roll back the transaction, it is rolled back and this method throws a <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionException&gt;</ph> exception.","pos":[195,351],"source":" If any participant votes to roll back the transaction, it is rolled back and this method throws a <xref:System.Transactions.TransactionException> exception."},{"content":"This is a normal occurrence for a transaction and your code should catch and process such exceptions.","pos":[352,453]}]}]},{"pos":[460,1125],"content":"<xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.","nodes":[{"content":"<xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.","pos":[0,665],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.","pos":[0,193],"source":"<xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete."},{"content":"The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.","pos":[194,425],"source":" The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction."},{"content":"The second phase of processing is always asynchronous.","pos":[426,480]},{"content":"Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.","pos":[481,665]}]}]},{"pos":[1132,2220],"content":"Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur. If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen. This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job. However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction. The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish. You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.","nodes":[{"content":"Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur. If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen. This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job. However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction. The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish. You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.","pos":[0,1088],"nodes":[{"content":"Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.","pos":[0,208]},{"content":"If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.","pos":[209,523],"source":" If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen."},{"content":"This is because the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.","pos":[524,678],"source":" This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job."},{"content":"However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.","pos":[679,783]},{"content":"The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.","pos":[784,885]},{"content":"You should use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.","pos":[886,1088],"source":" You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock."}]}]}],"pos":[17276,19503],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Transactions.CommittableTransaction.Commit\"></xref> is called on a transaction and the transaction becomes <xref href=\"System.Transactions.TransactionStatus.InDoubt\"></xref>.","nodes":[{"pos":[0,193],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction.Commit\"&gt;&lt;/xref&gt;</ph> is called on a transaction and the transaction becomes <ph id=\"ph2\">&lt;xref href=\"System.Transactions.TransactionStatus.InDoubt\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Transactions.CommittableTransaction.Commit\"></xref> is called on a transaction and the transaction becomes <xref href=\"System.Transactions.TransactionStatus.InDoubt\"></xref>."}],"pos":[19785,19979],"yaml":true},{"content":"<xref href=\"System.Transactions.CommittableTransaction.Commit\"></xref> is called and the transaction rolls back for the first time.","nodes":[{"pos":[0,131],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction.Commit\"&gt;&lt;/xref&gt;</ph> is called and the transaction rolls back for the first time.","source":"<xref href=\"System.Transactions.CommittableTransaction.Commit\"></xref> is called and the transaction rolls back for the first time."}],"pos":[20119,20251],"yaml":true},{"content":"Ends an attempt to commit the transaction asynchronously.","nodes":[{"pos":[0,57],"content":"Ends an attempt to commit the transaction asynchronously.","nodes":[{"content":"Ends an attempt to commit the transaction asynchronously.","pos":[0,57]}]}],"pos":[21525,21583],"yaml":true},{"content":"You should call this method in the callback delegate specified as a parameter to the <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> method, when you have finished any cleanup work associated with the asynchronous commitment. You can also call this method early without waiting for the delegate. If, by the time you call this method, the transaction has not completed, this method waits for its completion.  \n  \n> [!CAUTION]\n>  The <xref:System.IAsyncResult.CompletedSynchronously%2A> property returned by `asyncResult` is always `false`, even if the operation completed synchronously.  \n  \n <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.","nodes":[{"pos":[0,423],"content":"You should call this method in the callback delegate specified as a parameter to the <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> method, when you have finished any cleanup work associated with the asynchronous commitment. You can also call this method early without waiting for the delegate. If, by the time you call this method, the transaction has not completed, this method waits for its completion.","nodes":[{"content":"You should call this method in the callback delegate specified as a parameter to the <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> method, when you have finished any cleanup work associated with the asynchronous commitment. You can also call this method early without waiting for the delegate. If, by the time you call this method, the transaction has not completed, this method waits for its completion.","pos":[0,423],"nodes":[{"content":"You should call this method in the callback delegate specified as a parameter to the <ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> method, when you have finished any cleanup work associated with the asynchronous commitment.","pos":[0,242],"source":"You should call this method in the callback delegate specified as a parameter to the <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> method, when you have finished any cleanup work associated with the asynchronous commitment."},{"content":"You can also call this method early without waiting for the delegate.","pos":[243,312]},{"content":"If, by the time you call this method, the transaction has not completed, this method waits for its completion.","pos":[313,423]}]}]},{"pos":[431,602],"content":"[!CAUTION]\n The <xref:System.IAsyncResult.CompletedSynchronously%2A> property returned by `asyncResult` is always `false`, even if the operation completed synchronously.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> property returned by <ph id=\"ph2\">`asyncResult`</ph> is always <ph id=\"ph3\">`false`</ph>, even if the operation completed synchronously.","pos":[12,169],"source":" The <xref:System.IAsyncResult.CompletedSynchronously%2A> property returned by `asyncResult` is always `false`, even if the operation completed synchronously."}]},{"pos":[609,1274],"content":"<xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.","nodes":[{"content":"<xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.","pos":[0,665],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.","pos":[0,193],"source":"<xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete."},{"content":"The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id=\"ph1\">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.","pos":[194,425],"source":" The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction."},{"content":"The second phase of processing is always asynchronous.","pos":[426,480]},{"content":"Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.","pos":[481,665]}]}]}],"pos":[21594,22876],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> is called and the transaction rolls back for the first time.","nodes":[{"pos":[0,172],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> is called and the transaction rolls back for the first time.","source":"<xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> is called and the transaction rolls back for the first time."}],"pos":[23252,23425],"yaml":true},{"content":"Gets the object provided as the last parameter of the <xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> method call.","nodes":[{"pos":[0,178],"content":"Gets the object provided as the last parameter of the <ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method call.","source":"Gets the object provided as the last parameter of the <xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> method call."}],"pos":[24715,24894],"yaml":true},{"content":"The object provided as the last parameter of the <xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> method call.","nodes":[{"pos":[0,173],"content":"The object provided as the last parameter of the <ph id=\"ph1\">&lt;xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method call.","source":"The object provided as the last parameter of the <xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> method call."}],"pos":[25021,25195],"yaml":true},{"content":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.","nodes":[{"pos":[0,119],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.","source":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete."}],"pos":[26582,26702],"yaml":true},{"content":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.","source":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete."}],"pos":[26869,26984],"yaml":true},{"content":"Gets an indication of whether the asynchronous commit operation completed synchronously.","nodes":[{"pos":[0,88],"content":"Gets an indication of whether the asynchronous commit operation completed synchronously.","nodes":[{"content":"Gets an indication of whether the asynchronous commit operation completed synchronously.","pos":[0,88]}]}],"pos":[28418,28507],"yaml":true},{"content":"`true` if the asynchronous commit operation completed synchronously; otherwise, `false`. This property always returns `false` even if the operation completed synchronously.","nodes":[{"pos":[0,172],"content":"`true` if the asynchronous commit operation completed synchronously; otherwise, `false`. This property always returns `false` even if the operation completed synchronously.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the asynchronous commit operation completed synchronously; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,88],"source":"`true` if the asynchronous commit operation completed synchronously; otherwise, `false`."},{"content":"This property always returns <ph id=\"ph1\">`false`</ph> even if the operation completed synchronously.","pos":[89,172],"source":" This property always returns `false` even if the operation completed synchronously."}]}],"pos":[28645,28820],"yaml":true},{"content":"Gets an indication whether the asynchronous commit operation has completed.","nodes":[{"pos":[0,75],"content":"Gets an indication whether the asynchronous commit operation has completed.","nodes":[{"content":"Gets an indication whether the asynchronous commit operation has completed.","pos":[0,75]}]}],"pos":[30195,30271],"yaml":true},{"content":"`true` if the operation is complete; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the operation is complete; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the operation is complete; otherwise, `false`."}],"pos":[30398,30457],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.CommittableTransaction\n  commentId: T:System.Transactions.CommittableTransaction\n  id: CommittableTransaction\n  children:\n  - System.Transactions.CommittableTransaction.#ctor\n  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)\n  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)\n  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\n  - System.Transactions.CommittableTransaction.Commit\n  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)\n  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState\n  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle\n  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously\n  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted\n  - System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: CommittableTransaction\n  nameWithType: CommittableTransaction\n  fullName: System.Transactions.CommittableTransaction\n  type: Class\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Describes a committable transaction.\n  remarks: \"The <xref:System.Transactions.CommittableTransaction> class provides an explicit way for applications to use a transaction, as opposed to using the <xref:System.Transactions.TransactionScope> class implicitly. Unlike the <xref:System.Transactions.TransactionScope> class, the application writer needs to specifically call the <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.Transaction.Rollback%2A> methods in order to commit or abort the transaction. However, only the creator of a transaction can commit the transaction. Therefore, copies of a committable transaction, obtained through the <xref:System.Transactions.Transaction.Clone%2A> method are not committable.  \\n  \\n> [!NOTE]\\n>  It is recommended that you create implicit transactions using the <xref:System.Transactions.TransactionScope> class, so that the ambient transaction context is automatically managed for you. You should also use the <xref:System.Transactions.TransactionScope> and <xref:System.Transactions.DependentTransaction> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls. For more information on this model, see the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic.  \\n  \\n Creating a <xref:System.Transactions.CommittableTransaction> does not automatically set the ambient transaction, which is the transaction your code executes in. You can get or set the ambient transaction by calling the static <xref:System.Transactions.Transaction.Current%2A> property of the global <xref:System.Transactions.Transaction> object. For more information on ambient transactions, see the \\\" Managing Transaction Flow using TransactionScopeOption\\\" section of the [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) topic. If the ambient transaction is not set, any operation on a resource manager is not part of that transaction. You need to explicitly set and reset the ambient transaction, to ensure that resource managers operate under the right transaction context.  \\n  \\n Until a <xref:System.Transactions.CommittableTransaction> has been committed, all the resources involved with the transaction are still locked.  \\n  \\n A <xref:System.Transactions.CommittableTransaction> object cannot be reused. Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.\"\n  example:\n  - The following sample creates two new instances of <xref:System.Transactions.CommittableTransaction>, commits and rolls back them respectively.\n  syntax:\n    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult, IDisposable, System.Runtime.Serialization.ISerializable'\n  inheritance:\n  - System.Object\n  - System.Transactions.Transaction\n  implements:\n  - System.IAsyncResult\n  - System.IDisposable\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Transactions.Transaction.BeginCommitInternal(System.AsyncCallback)\n  - System.Transactions.Transaction.Clone\n  - System.Transactions.Transaction.Current\n  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\n  - System.Transactions.Transaction.Dispose\n  - System.Transactions.Transaction.EndCommitInternal(System.IAsyncResult)\n  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.Equals(System.Object)\n  - System.Transactions.Transaction.GetHashCode\n  - System.Transactions.Transaction.GetPromotedToken\n  - System.Transactions.Transaction.IsolationLevel\n  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  - System.Transactions.Transaction.PromoterType\n  - System.Transactions.Transaction.Rollback\n  - System.Transactions.Transaction.Rollback(System.Exception)\n  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  - System.Transactions.Transaction.TransactionCompleted\n  - System.Transactions.Transaction.TransactionInformation\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.CommittableTransaction.#ctor\n  commentId: M:System.Transactions.CommittableTransaction.#ctor\n  id: '#ctor'\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: CommittableTransaction()\n  nameWithType: CommittableTransaction.CommittableTransaction()\n  fullName: CommittableTransaction.CommittableTransaction()\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \\n  \\n [!code-csharp[Tx_CommittableTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_committabletx/cs/committabletxwithsql.cs#1)]\\n [!code-vb[Tx_CommittableTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_committabletx/vb/committabletxwithsql.vb#1)]\"\n  syntax:\n    content: public CommittableTransaction ();\n    parameters: []\n  overload: System.Transactions.CommittableTransaction.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)\n  commentId: M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)\n  id: '#ctor(System.TimeSpan)'\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: CommittableTransaction(TimeSpan)\n  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)\n  fullName: CommittableTransaction.CommittableTransaction(TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class with the specified <code>timeout</code> value.\n  syntax:\n    content: public CommittableTransaction (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum amount of time the transaction can exist, before it is aborted.\n  overload: System.Transactions.CommittableTransaction.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)\n  commentId: M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)\n  id: '#ctor(System.Transactions.TransactionOptions)'\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: CommittableTransaction(TransactionOptions)\n  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)\n  fullName: CommittableTransaction.CommittableTransaction(TransactionOptions)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.CommittableTransaction\"></xref> class with the specified transaction options.\n  remarks: ''\n  example:\n  - The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.\n  syntax:\n    content: public CommittableTransaction (System.Transactions.TransactionOptions options);\n    parameters:\n    - id: options\n      type: System.Transactions.TransactionOptions\n      description: A <xref href=\"System.Transactions.TransactionOptions\"></xref> structure that describes the transaction options to use for the new transaction.\n  overload: System.Transactions.CommittableTransaction.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> is invalid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\n  commentId: M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\n  id: BeginCommit(System.AsyncCallback,System.Object)\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: BeginCommit(AsyncCallback, Object)\n  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback, Object)\n  fullName: CommittableTransaction.BeginCommit(AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Begins an attempt to commit the transaction asynchronously.\n  remarks: \"This method returns immediately, before the transaction has been completed. The transaction then commits on a different thread, and the `asyncCallback` delegate is invoked when it has completed. After this method is called, you do not receive the outcome of the transaction until you call <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.  \\n  \\n> [!NOTE]\\n>  The commit process may complete synchronously inside this method call.\"\n  syntax:\n    content: public IAsyncResult BeginCommit (AsyncCallback callback, object user_defined_state);\n    parameters:\n    - id: asyncCallback\n      type: System.AsyncCallback\n      description: ''\n    - id: asyncState\n      type: System.Object\n      description: ''\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.\n  overload: System.Transactions.CommittableTransaction.BeginCommit*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.CommittableTransaction.Commit\n  commentId: M:System.Transactions.CommittableTransaction.Commit\n  id: Commit\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: Commit()\n  nameWithType: CommittableTransaction.Commit()\n  fullName: CommittableTransaction.Commit()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Attempts to commit the transaction.\n  remarks: \"When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction. If any participant votes to roll back the transaction, it is rolled back and this method throws a <xref:System.Transactions.TransactionException> exception. This is a normal occurrence for a transaction and your code should catch and process such exceptions.  \\n  \\n <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.  \\n  \\n Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur. If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <xref:System.Windows.Forms.Control.Invoke%2A> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen. This is because the <xref:System.Windows.Forms.Control.Invoke%2A> method is synchronous and blocks the worker thread until the UI thread finishes its job. However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction. The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish. You should use <xref:System.Windows.Forms.Control.BeginInvoke%2A> rather than <xref:System.Windows.Forms.Control.Invoke%2A> wherever possible, because it is asynchronous and thus less prone to deadlock.\"\n  syntax:\n    content: public void Commit ();\n    parameters: []\n  overload: System.Transactions.CommittableTransaction.Commit*\n  exceptions:\n  - type: System.Transactions.TransactionInDoubtException\n    commentId: T:System.Transactions.TransactionInDoubtException\n    description: <xref href=\"System.Transactions.CommittableTransaction.Commit\"></xref> is called on a transaction and the transaction becomes <xref href=\"System.Transactions.TransactionStatus.InDoubt\"></xref>.\n  - type: System.Transactions.TransactionAbortedException\n    commentId: T:System.Transactions.TransactionAbortedException\n    description: <xref href=\"System.Transactions.CommittableTransaction.Commit\"></xref> is called and the transaction rolls back for the first time.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)\n  commentId: M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)\n  id: EndCommit(System.IAsyncResult)\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: EndCommit(IAsyncResult)\n  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)\n  fullName: CommittableTransaction.EndCommit(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Ends an attempt to commit the transaction asynchronously.\n  remarks: \"You should call this method in the callback delegate specified as a parameter to the <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> method, when you have finished any cleanup work associated with the asynchronous commitment. You can also call this method early without waiting for the delegate. If, by the time you call this method, the transaction has not completed, this method waits for its completion.  \\n  \\n> [!CAUTION]\\n>  The <xref:System.IAsyncResult.CompletedSynchronously%2A> property returned by `asyncResult` is always `false`, even if the operation completed synchronously.  \\n  \\n <xref:System.Transactions.CommittableTransaction.Commit%2A> and <xref:System.Transactions.CommittableTransaction.EndCommit%2A> block until the first phase of transaction processing is complete. The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <xref:System.Transactions.TransactionManager> has durably decided to commit or abort the transaction. The second phase of processing is always asynchronous. Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.\"\n  syntax:\n    content: public void EndCommit (IAsyncResult ar);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: ''\n  overload: System.Transactions.CommittableTransaction.EndCommit*\n  exceptions:\n  - type: System.Transactions.TransactionAbortedException\n    commentId: T:System.Transactions.TransactionAbortedException\n    description: <xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> is called and the transaction rolls back for the first time.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState\n  commentId: P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState\n  id: System#IAsyncResult#AsyncState\n  isEii: true\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: IAsyncResult.AsyncState\n  nameWithType: CommittableTransaction.IAsyncResult.AsyncState\n  fullName: CommittableTransaction.IAsyncResult.AsyncState\n  type: Property\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets the object provided as the last parameter of the <xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> method call.\n  syntax:\n    content: object System.IAsyncResult.AsyncState { get; }\n    return:\n      type: System.Object\n      description: The object provided as the last parameter of the <xref href=\"System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\"></xref> method call.\n  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  manager: tyoung\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle\n  commentId: P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle\n  id: System#IAsyncResult#AsyncWaitHandle\n  isEii: true\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: IAsyncResult.AsyncWaitHandle\n  nameWithType: CommittableTransaction.IAsyncResult.AsyncWaitHandle\n  fullName: CommittableTransaction.IAsyncResult.AsyncWaitHandle\n  type: Property\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.\n  syntax:\n    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref href=\"System.Threading.WaitHandle\"></xref> that is used to wait for an asynchronous operation to complete.\n  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  manager: tyoung\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously\n  commentId: P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously\n  id: System#IAsyncResult#CompletedSynchronously\n  isEii: true\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: IAsyncResult.CompletedSynchronously\n  nameWithType: CommittableTransaction.IAsyncResult.CompletedSynchronously\n  fullName: CommittableTransaction.IAsyncResult.CompletedSynchronously\n  type: Property\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets an indication of whether the asynchronous commit operation completed synchronously.\n  syntax:\n    content: bool System.IAsyncResult.CompletedSynchronously { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the asynchronous commit operation completed synchronously; otherwise, `false`. This property always returns `false` even if the operation completed synchronously.'\n  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  manager: tyoung\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted\n  commentId: P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted\n  id: System#IAsyncResult#IsCompleted\n  isEii: true\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: IAsyncResult.IsCompleted\n  nameWithType: CommittableTransaction.IAsyncResult.IsCompleted\n  fullName: CommittableTransaction.IAsyncResult.IsCompleted\n  type: Property\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets an indication whether the asynchronous commit operation has completed.\n  syntax:\n    content: bool System.IAsyncResult.IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the operation is complete; otherwise, `false`.'\n  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n  manager: tyoung\n- uid: System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Transactions.CommittableTransaction\n  langs:\n  - csharp\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: CommittableTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: CommittableTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - System.Transactions\n  namespace: System.Transactions\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: ''\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: ''\n  overload: System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\nreferences:\n- uid: System.Transactions.Transaction\n  parent: System.Transactions\n  isExternal: false\n  name: Transaction\n  nameWithType: Transaction\n  fullName: System.Transactions.Transaction\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Transactions.TransactionInDoubtException\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionInDoubtException\n  nameWithType: TransactionInDoubtException\n  fullName: System.Transactions.TransactionInDoubtException\n- uid: System.Transactions.TransactionAbortedException\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionAbortedException\n  nameWithType: TransactionAbortedException\n  fullName: System.Transactions.TransactionAbortedException\n- uid: System.Transactions.CommittableTransaction.#ctor\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: CommittableTransaction()\n  nameWithType: CommittableTransaction.CommittableTransaction()\n  fullName: CommittableTransaction.CommittableTransaction()\n- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: CommittableTransaction(TimeSpan)\n  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)\n  fullName: CommittableTransaction.CommittableTransaction(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: CommittableTransaction(TransactionOptions)\n  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)\n  fullName: CommittableTransaction.CommittableTransaction(TransactionOptions)\n- uid: System.Transactions.TransactionOptions\n  parent: System.Transactions\n  isExternal: false\n  name: TransactionOptions\n  nameWithType: TransactionOptions\n  fullName: System.Transactions.TransactionOptions\n- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: BeginCommit(AsyncCallback, Object)\n  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback, Object)\n  fullName: CommittableTransaction.BeginCommit(AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Transactions.CommittableTransaction.Commit\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: Commit()\n  nameWithType: CommittableTransaction.Commit()\n  fullName: CommittableTransaction.Commit()\n- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: EndCommit(IAsyncResult)\n  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)\n  fullName: CommittableTransaction.EndCommit(IAsyncResult)\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: IAsyncResult.AsyncState\n  nameWithType: CommittableTransaction.IAsyncResult.AsyncState\n  fullName: CommittableTransaction.IAsyncResult.AsyncState\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: IAsyncResult.AsyncWaitHandle\n  nameWithType: CommittableTransaction.IAsyncResult.AsyncWaitHandle\n  fullName: CommittableTransaction.IAsyncResult.AsyncWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: IAsyncResult.CompletedSynchronously\n  nameWithType: CommittableTransaction.IAsyncResult.CompletedSynchronously\n  fullName: CommittableTransaction.IAsyncResult.CompletedSynchronously\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: IAsyncResult.IsCompleted\n  nameWithType: CommittableTransaction.IAsyncResult.IsCompleted\n  fullName: CommittableTransaction.IAsyncResult.IsCompleted\n- uid: System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: CommittableTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: CommittableTransaction.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Transactions.CommittableTransaction.#ctor*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: CommittableTransaction\n  nameWithType: CommittableTransaction.CommittableTransaction\n  fullName: CommittableTransaction.CommittableTransaction\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.BeginCommit*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: BeginCommit\n  nameWithType: CommittableTransaction.BeginCommit\n  fullName: CommittableTransaction.BeginCommit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.Commit*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: Commit\n  nameWithType: CommittableTransaction.Commit\n  fullName: CommittableTransaction.Commit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.EndCommit*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: EndCommit\n  nameWithType: CommittableTransaction.EndCommit\n  fullName: CommittableTransaction.EndCommit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: System.IAsyncResult.AsyncState\n  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState\n  fullName: CommittableTransaction.System.IAsyncResult.AsyncState\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: System.IAsyncResult.AsyncWaitHandle\n  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle\n  fullName: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: System.IAsyncResult.CompletedSynchronously\n  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously\n  fullName: CommittableTransaction.System.IAsyncResult.CompletedSynchronously\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: System.IAsyncResult.IsCompleted\n  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted\n  fullName: CommittableTransaction.System.IAsyncResult.IsCompleted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Transactions.CommittableTransaction\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: CommittableTransaction.System.Runtime.Serialization.ISerializable.GetObjectData\n  fullName: CommittableTransaction.System.Runtime.Serialization.ISerializable.GetObjectData\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/CommittableTransaction.xml\n- uid: System.Transactions.Transaction.Equals(System.Object)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Transaction.Equals(Object)\n  fullName: Transaction.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Transactions.Transaction.GetHashCode\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Transaction.GetHashCode()\n  fullName: Transaction.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Transactions.Transaction.BeginCommitInternal(System.AsyncCallback)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: BeginCommitInternal(AsyncCallback)\n  nameWithType: Transaction.BeginCommitInternal(AsyncCallback)\n  fullName: Transaction.BeginCommitInternal(AsyncCallback)\n- uid: System.Transactions.Transaction.Clone\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Clone()\n  nameWithType: Transaction.Clone()\n  fullName: Transaction.Clone()\n- uid: System.Transactions.Transaction.Current\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Current\n  nameWithType: Transaction.Current\n  fullName: Transaction.Current\n- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: DependentClone(DependentCloneOption)\n  nameWithType: Transaction.DependentClone(DependentCloneOption)\n  fullName: Transaction.DependentClone(DependentCloneOption)\n- uid: System.Transactions.Transaction.Dispose\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Dispose()\n  nameWithType: Transaction.Dispose()\n  fullName: Transaction.Dispose()\n- uid: System.Transactions.Transaction.EndCommitInternal(System.IAsyncResult)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EndCommitInternal(IAsyncResult)\n  nameWithType: Transaction.EndCommitInternal(IAsyncResult)\n  fullName: Transaction.EndCommitInternal(IAsyncResult)\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistDurable(Guid, IEnlistmentNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid, IEnlistmentNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistDurable(Guid, IEnlistmentNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistDurable(Guid, ISinglePhaseNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistDurable(Guid, ISinglePhaseNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistDurable(Guid, ISinglePhaseNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n  fullName: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)\n- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification, Guid)\n  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification, Guid)\n  fullName: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification, Guid)\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: EnlistVolatile(ISinglePhaseNotification, EnlistmentOptions)\n  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification, EnlistmentOptions)\n  fullName: Transaction.EnlistVolatile(ISinglePhaseNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.GetPromotedToken\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: GetPromotedToken()\n  nameWithType: Transaction.GetPromotedToken()\n  fullName: Transaction.GetPromotedToken()\n- uid: System.Transactions.Transaction.IsolationLevel\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: Transaction.IsolationLevel\n  fullName: Transaction.IsolationLevel\n- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Equality(Transaction, Transaction)\n  nameWithType: Transaction.op_Equality(Transaction, Transaction)\n  fullName: Transaction.op_Equality(Transaction, Transaction)\n- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: op_Inequality(Transaction, Transaction)\n  nameWithType: Transaction.op_Inequality(Transaction, Transaction)\n  fullName: Transaction.op_Inequality(Transaction, Transaction)\n- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoteAndEnlistDurable(Guid, IPromotableSinglePhaseNotification, ISinglePhaseNotification, EnlistmentOptions)\n  nameWithType: Transaction.PromoteAndEnlistDurable(Guid, IPromotableSinglePhaseNotification, ISinglePhaseNotification, EnlistmentOptions)\n  fullName: Transaction.PromoteAndEnlistDurable(Guid, IPromotableSinglePhaseNotification, ISinglePhaseNotification, EnlistmentOptions)\n- uid: System.Transactions.Transaction.PromoterType\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: PromoterType\n  nameWithType: Transaction.PromoterType\n  fullName: Transaction.PromoterType\n- uid: System.Transactions.Transaction.Rollback\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Rollback()\n  nameWithType: Transaction.Rollback()\n  fullName: Transaction.Rollback()\n- uid: System.Transactions.Transaction.Rollback(System.Exception)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: Rollback(Exception)\n  nameWithType: Transaction.Rollback(Exception)\n  fullName: Transaction.Rollback(Exception)\n- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification, Guid)\n  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification, Guid)\n  fullName: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification, Guid)\n- uid: System.Transactions.Transaction.TransactionCompleted\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: TransactionCompleted\n  nameWithType: Transaction.TransactionCompleted\n  fullName: Transaction.TransactionCompleted\n- uid: System.Transactions.Transaction.TransactionInformation\n  parent: System.Transactions.Transaction\n  isExternal: false\n  name: TransactionInformation\n  nameWithType: Transaction.TransactionInformation\n  fullName: Transaction.TransactionInformation\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}